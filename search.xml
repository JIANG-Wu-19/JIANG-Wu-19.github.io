<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>矩阵计算</title>
      <link href="/2023/10/05/%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97/"/>
      <url>/2023/10/05/%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>矩阵的求导等运算无论在高等数学还是线性代数的学习中都没有进行详细讲述，所以在学习DL还有ML之前都先进行相关运算的学习。</p><p>首先用一张直观的图像展示向量导数的形状：</p><p><img src="/imgs/dl/1.jpg" alt="img"></p><p>下面进行详细的解释</p><h2 id="标量对向量求导"><a href="#标量对向量求导" class="headerlink" title="标量对向量求导"></a>标量对向量求导</h2><p>$$<br>\mathbf{x}&#x3D;\left[\begin{array}{c}<br>x_1\<br>x_2\<br>\vdots\<br>x_n<br>\end{array}<br>\right]<br>,<br>\frac{\partial y}{\partial \mathbf{x}}&#x3D;\left[\frac{\partial y}{\partial x_1},\frac{\partial y}{\partial x_2},\ldots,\frac{\partial y}{\partial x_n}\right]<br>$$</p><h2 id="向量对标量求导"><a href="#向量对标量求导" class="headerlink" title="向量对标量求导"></a>向量对标量求导</h2><p>$$<br>\mathbf{y}&#x3D;\left[\begin{array}{c}<br>y_1\<br>y_2\<br>\vdots\<br>y_m<br>\end{array}<br>\right]<br>,<br>\frac{\partial \mathbf{y}}{\partial x}&#x3D;\left[\begin{array}{c}<br>\frac{\partial y_1}{\partial x}\<br>\frac{\partial y_2}{\partial x}\<br>\vdots\<br>\frac{\partial y_m}{\partial x}<br>\end{array}<br>\right]<br>$$</p><h2 id="向量对向量求导"><a href="#向量对向量求导" class="headerlink" title="向量对向量求导"></a>向量对向量求导</h2><h1 id="mathbf-x-x3D-left-begin-array-c-x-1-x-2-vdots-x-n-end-array-right-mathbf-y-x3D-left-begin-array-c-y-1-y-2-vdots-y-m-end-array-right-Rightarrow-frac-partial-mathbf-y-partial-mathbf-x-x3D-left-begin-array-c-frac-partial-y-1-partial-mathbf-x-frac-partial-y-2-partial-mathbf-x-vdots-frac-partial-y-m-partial-mathbf-x-end-array-right"><a href="#mathbf-x-x3D-left-begin-array-c-x-1-x-2-vdots-x-n-end-array-right-mathbf-y-x3D-left-begin-array-c-y-1-y-2-vdots-y-m-end-array-right-Rightarrow-frac-partial-mathbf-y-partial-mathbf-x-x3D-left-begin-array-c-frac-partial-y-1-partial-mathbf-x-frac-partial-y-2-partial-mathbf-x-vdots-frac-partial-y-m-partial-mathbf-x-end-array-right" class="headerlink" title="$$\mathbf{x}&#x3D;\left[\begin{array}{c}x_1\x_2\\vdots\x_n\end{array}\right],\mathbf{y}&#x3D;\left[\begin{array}{c}y_1\y_2\\vdots\y_m\end{array}\right]\\Rightarrow\frac{\partial \mathbf{y}}{\partial \mathbf{x}}&#x3D;\left[\begin{array}{c}\frac{\partial y_1}{\partial \mathbf{x}}\\frac{\partial y_2}{\partial \mathbf{x}}\\vdots\\frac{\partial y_m}{\partial \mathbf{x}}\end{array}\right]"></a>$$<br>\mathbf{x}&#x3D;\left[\begin{array}{c}<br>x_1\<br>x_2\<br>\vdots\<br>x_n<br>\end{array}<br>\right]<br>,<br>\mathbf{y}&#x3D;\left[\begin{array}{c}<br>y_1\<br>y_2\<br>\vdots\<br>y_m<br>\end{array}<br>\right]<br>\<br>\Rightarrow<br>\frac{\partial \mathbf{y}}{\partial \mathbf{x}}&#x3D;<br>\left[\begin{array}{c}<br>\frac{\partial y_1}{\partial \mathbf{x}}\<br>\frac{\partial y_2}{\partial \mathbf{x}}\<br>\vdots\<br>\frac{\partial y_m}{\partial \mathbf{x}}<br>\end{array}<br>\right]</h1><p>\left[<br>\begin{array}{c}<br>\frac{\partial y_1}{\partial x_1},\frac{\partial y_1}{\partial x_2},\ldots,\frac{\partial y_1}{\partial x_n}\<br>\frac{\partial y_2}{\partial x_1},\frac{\partial y_2}{\partial x_2},\ldots,\frac{\partial y_2}{\partial x_n}\<br>\vdots\<br>\frac{\partial y_m}{\partial x_1},\frac{\partial y_m}{\partial x_2},\ldots,\frac{\partial y_m}{\partial x_n}<br>\end{array}<br>\right]<br>$$</p><h2 id="向量链式法则"><a href="#向量链式法则" class="headerlink" title="向量链式法则"></a>向量链式法则</h2><p>$$<br>\frac{\partial y}{\partial \mathbf{x}}&#x3D;\frac{\partial y}{\partial u}\frac{\partial u}{\partial \mathbf{x}}\<br>\frac{\partial y}{\partial \mathbf{x}}&#x3D;\frac{\partial y}{\partial \mathbf{u}}\frac{\partial \mathbf{u}}{\partial \mathbf{x}}\<br>\frac{\partial \mathbf{y}}{\partial \mathbf{x}}&#x3D;\frac{\partial \mathbf{y}}{\partial \mathbf{u}}\frac{\partial \mathbf{u}}{\partial \mathbf{x}}\<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 动手学深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵计算 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始《剑指Offer》新坑</title>
      <link href="/2023/10/04/%E5%BC%80%E5%A7%8B%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E6%96%B0%E5%9D%91/"/>
      <url>/2023/10/04/%E5%BC%80%E5%A7%8B%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E6%96%B0%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>自己的数据结构与算法基础比较薄弱，现在也在刷<strong>AcWing</strong>，感觉比较乏力（<del>最近动规刷的比较多，想吐，有点高屋建瓴，基础不牢</del>）所以打算基础和提高一起抓，现在在刷的有AcWing、剑指Offer，之后看一下要不要LeetCode的基础。</p><p>2023年10月4日</p><h2 id="JZ6-从尾到头打印链表"><a href="#JZ6-从尾到头打印链表" class="headerlink" title="JZ6 从尾到头打印链表"></a>JZ6 从尾到头打印链表</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。</p><p>如输入$\lbrace 1,2,3 \rbrace$的链表如下图:</p><p><img src="/imgs/jzoffer/1.png" alt="img"></p><p>返回一个数组为$[3,2,1]$</p><p>$0 \le length \le 10000$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>使用递归的方式可以从尾到头</p><p>递归的三个条件：</p><ul><li>终止条件：递归进入链表尾</li><li>返回值：每次返回子问题之后的全部输出</li><li>本级任务：递归进入下一级，下一级数组返回时将本级节点添加在返回值的末尾</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;***  struct ListNode &#123;*        int val;*        struct ListNode *next;*        ListNode(int x) :*              val(x), next(NULL) &#123;*        &#125;*  &#125;;*&#x2F;#include &lt;cstddef&gt;class Solution &#123;public:    void recursion(ListNode* head,vector&lt;int&gt;&amp; res)&#123;        if(head)&#123;            recursion(head-&gt;next,res);            res.push_back(head-&gt;val);        &#125;    &#125;    vector&lt;int&gt; printListFromTailToHead(ListNode* head) &#123;        vector&lt;int&gt; res;        recursion(head,res);        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>将链表的每一元素压栈，将栈顶元素添入数组，栈顶出栈，交换链表顺序</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;***  struct ListNode &#123;*        int val;*        struct ListNode *next;*        ListNode(int x) :*              val(x), next(NULL) &#123;*        &#125;*  &#125;;*&#x2F;#include &lt;cstddef&gt;#include &lt;stack&gt;class Solution &#123;public:    vector&lt;int&gt; printListFromTailToHead(ListNode* head) &#123;        vector&lt;int&gt; res;        stack&lt;int&gt; s;        while(head)&#123;            s.push(head-&gt;val);            head&#x3D;head-&gt;next;        &#125;        while(!s.empty())&#123;            res.push_back(s.top());            s.pop();        &#125;        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JZ24-反转链表"><a href="#JZ24-反转链表" class="headerlink" title="JZ24 反转链表"></a>JZ24 反转链表</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是1)，长度为n，反转该链表后，返回新链表的表头。</p><p>数据范围： $0 \le n \le 1000$</p><p>要求：空间复杂度$O(1)$，时间复杂度$O(n)$。</p><p>如当输入链表$\lbrace 1,2,3 \rbrace$时，</p><p>经反转后，原链表变为$\lbrace 3,2,1 \rbrace$，所以对应的输出为$\lbrace 3,2,1 \rbrace$。</p><p>以上转换过程如下图所示：</p><p><img src="/imgs/jzoffer/2.png" alt="img"></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;#include &lt;cstddef&gt;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param head ListNode类      * @return ListNode类     *&#x2F;    ListNode* ReverseList(ListNode* head) &#123;        &#x2F;&#x2F; write code here        if(head&#x3D;&#x3D;NULL||head-&gt;next&#x3D;&#x3D;NULL)&#123;            return head;        &#125;        ListNode* reverse&#x3D;ReverseList(head-&gt;next);        head-&gt;next-&gt;next&#x3D;head;        head-&gt;next&#x3D;NULL;        return reverse;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;#include &lt;cstddef&gt;#include &lt;stack&gt;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param head ListNode类      * @return ListNode类     *&#x2F;    ListNode* ReverseList(ListNode* head) &#123;        &#x2F;&#x2F; write code here        if(head&#x3D;&#x3D;NULL||head-&gt;next&#x3D;&#x3D;NULL)&#123;            return head;        &#125;        stack&lt;ListNode*&gt; s;        while(head)&#123;            s.push(head);            head&#x3D;head-&gt;next;        &#125;        ListNode* node&#x3D;s.top();        ListNode* reverse&#x3D;node;        s.pop();        while(!s.empty())&#123;            ListNode* tmp&#x3D;s.top();            s.pop();            node-&gt;next&#x3D;tmp;            node&#x3D;node-&gt;next;        &#125;        node-&gt;next&#x3D;NULL;        return reverse;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两种都是常规做法，非递归就用栈，需要注意的是栈最后需要在链表结尾添加NULL，否则会成环导致陷入死循环。</p><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>双链表的做法是比较巧妙的，<strong>构建一个新链表，然后遍历原链表的元素，对于每一元素尾插入新链表</strong>，最后返回的新链表就是反转链表。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;#include &lt;cstddef&gt;#include &lt;stack&gt;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param head ListNode类      * @return ListNode类     *&#x2F;    ListNode* ReverseList(ListNode* head) &#123;        &#x2F;&#x2F; write code here        ListNode* reverse&#x3D;NULL;        while(head)&#123;            ListNode* tmp&#x3D;head-&gt;next;            head-&gt;next&#x3D;reverse;            reverse&#x3D;head;            head&#x3D;tmp;        &#125;        return reverse;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双链表法的性能也是最好的</p><h2 id="JZ25-合并排序链表"><a href="#JZ25-合并排序链表" class="headerlink" title="JZ25 合并排序链表"></a>JZ25 合并排序链表</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><p>数据范围： $0 \le n \le 10000$，$−1000 \le 节点值 \le 1000$<br>要求：空间复杂度 $O(1)$，时间复杂度$O(n)$</p><p>如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}，所以对应的输出为{1,2,3,4,5,6}，转换过程如下图所示：</p><p><img src="/imgs/jzoffer/3.png" alt="img"></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param pHead1 ListNode类      * @param pHead2 ListNode类      * @return ListNode类     *&#x2F;    ListNode* Merge(ListNode* pHead1, ListNode* pHead2) &#123;        &#x2F;&#x2F; write code here        if(pHead1&#x3D;&#x3D;NULL)&#123;            return pHead2;        &#125;        if(pHead2&#x3D;&#x3D;NULL)&#123;            return pHead1;        &#125;        if(pHead1-&gt;val&lt;&#x3D;pHead2-&gt;val)&#123;            pHead1-&gt;next&#x3D;Merge(pHead1-&gt;next,pHead2);            return pHead1;        &#125;else&#123;            pHead2-&gt;next&#x3D;Merge(pHead1,pHead2-&gt;next);            return pHead2;        &#125;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param pHead1 ListNode类      * @param pHead2 ListNode类      * @return ListNode类     *&#x2F;    ListNode* Merge(ListNode* pHead1, ListNode* pHead2) &#123;        &#x2F;&#x2F; write code here        if(pHead1&#x3D;&#x3D;NULL)&#123;            return pHead2;        &#125;        if(pHead2&#x3D;&#x3D;NULL)&#123;            return pHead1;        &#125;        ListNode* res&#x3D;new ListNode(0);        ListNode* node&#x3D;res;        while(pHead1&amp;&amp;pHead2)&#123;            if(pHead1-&gt;val&lt;&#x3D;pHead2-&gt;val)&#123;                node-&gt;next&#x3D;pHead1;                pHead1&#x3D;pHead1-&gt;next;            &#125;else&#123;                node-&gt;next&#x3D;pHead2;                pHead2&#x3D;pHead2-&gt;next;            &#125;            node&#x3D;node-&gt;next;        &#125;        if(pHead1)&#123;            node-&gt;next&#x3D;pHead1;        &#125;else&#123;            node-&gt;next&#x3D;pHead2;        &#125;        return res-&gt;next;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebPage制作的一点尝试</title>
      <link href="/2023/09/27/WebPage%E5%88%B6%E4%BD%9C%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%9D%E8%AF%95/"/>
      <url>/2023/09/27/WebPage%E5%88%B6%E4%BD%9C%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>网页实例：<a href="https://github.com/JIANG-Wu-19/page#%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C">This is a try for page making</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><ul><li>images文件夹：存放固定图片素材</li><li>uploads文件夹：存放非固定使用的图片素材</li><li>css文件夹：存放CSS文件<ul><li>base.css：基础公共样式</li><li>index.css：首页CSS样式</li></ul></li><li>index.html：首页HTML文件</li></ul><h4 id="基础公共样式"><a href="#基础公共样式" class="headerlink" title="基础公共样式"></a>基础公共样式</h4><ul><li>清除默认样式，例如内外边距、项目符号</li><li>设置通用样式，例如文字样式</li></ul><h4 id="默认样式代码"><a href="#默认样式代码" class="headerlink" title="默认样式代码"></a>默认样式代码</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">li</span> <span class="token punctuation">&#123;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font</span><span class="token punctuation">:</span> 14px/1.5 <span class="token string">"Microsoft Yahei"</span><span class="token punctuation">,</span><span class="token string">"Hiragino Sans GB"</span><span class="token punctuation">,</span> <span class="token string">"Heiti SC"</span><span class="token punctuation">,</span> <span class="token string">"WenQuanYi Micro Hei"</span><span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网页制作思路"><a href="#网页制作思路" class="headerlink" title="网页制作思路"></a>网页制作思路</h2><h3 id="布局思路"><a href="#布局思路" class="headerlink" title="布局思路"></a>布局思路</h3><p>先整体后局部，从外到内，从上到下，从左到右</p><h3 id="CSS实现思路"><a href="#CSS实现思路" class="headerlink" title="CSS实现思路"></a>CSS实现思路</h3><ol><li>画盒子，调整盒子范围-&gt;宽高背景色</li><li>调整盒子位置-&gt;flex布局，内外边距</li><li>控制图片、文字内容样式</li></ol><h2 id="制作网页"><a href="#制作网页" class="headerlink" title="制作网页"></a>制作网页</h2><h3 id="header区域"><a href="#header区域" class="headerlink" title="header区域"></a>header区域</h3><p>通栏：宽度与浏览器窗口相同的盒子</p><p>标签结构：通栏&gt;<strong>版心</strong>&gt;logo+导航+搜索+用户</p><p>版心display:flex</p><h4 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h4><p>功能：</p><ul><li>单击跳转首页</li><li>搜索引擎优化</li></ul><p>实现方法：</p><ul><li><p>标签结构：h1&gt;a&gt;网站名称(搜索关键字)</p></li><li><p>CSS：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.logo a</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 195px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 41px<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../images/logo.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h4><p>功能：</p><ul><li>单击跳转页面</li></ul><p>实现方法：</p><ul><li>标签结构：ul&gt;li*3&gt;a</li><li>CSS思路<ul><li>li 设置 margin-right</li><li>a 设置 左右padding</li></ul></li></ul><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><ul><li>标签结构：.search&gt;input+a&#x2F;button</li><li>div.search标签flex布局，侧轴居中，input标签flex：1</li></ul><h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><ul><li>标签结构：.user&gt;a&gt;img+span</li><li>图片、文字垂直方向居中</li></ul><h3 id="banner区域"><a href="#banner区域" class="headerlink" title="banner区域"></a>banner区域</h3><p>结构：通栏banner&gt;版心&gt;.left+.right</p><h4 id="left"><a href="#left" class="headerlink" title="left"></a>left</h4><ul><li>标签结构：.left&gt;ul&gt;li*9&gt;a</li><li>默认状态：背景图白色右箭头</li><li>悬停状态：背景图蓝色右箭头</li></ul><h4 id="right"><a href="#right" class="headerlink" title="right"></a>right</h4><ul><li>标签结构：.right&gt;h3+.content</li></ul><h3 id="精品推荐"><a href="#精品推荐" class="headerlink" title="精品推荐"></a>精品推荐</h3><ul><li>标签结构：.recommend&gt;h3+ul+a.modify</li><li>flex布局</li></ul><h3 id="精品课程"><a href="#精品课程" class="headerlink" title="精品课程"></a>精品课程</h3><ul><li>标签结构:.hd+.bd</li><li>盒子模型</li></ul><h4 id="hd"><a href="#hd" class="headerlink" title="hd"></a>hd</h4><ul><li>标签结构：.hd&gt;h3+a.more</li><li>a.more设置箭头背景图</li></ul><h4 id="bd"><a href="#bd" class="headerlink" title="bd"></a>bd</h4><ul><li>课程卡片各个区域样式复用</li><li>标签结构：.bd&gt;ul&gt;li&gt;a</li><li>flex布局</li></ul><h3 id="学科课程"><a href="#学科课程" class="headerlink" title="学科课程"></a>学科课程</h3><ul><li>标签结构：.hd(复用)+.bd</li></ul><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><ul><li>标签结构:h3+ul+a.more</li></ul><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><ul><li>标签结构：.left+.right&gt;.top+.bottom</li></ul><h3 id="版权区域footer"><a href="#版权区域footer" class="headerlink" title="版权区域footer"></a>版权区域footer</h3><ul><li>标签结构：通栏&gt;版心&gt;.left+.right&gt;dl</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Html </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理笔记</title>
      <link href="/2023/09/27/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/27/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数字图像处理"><a href="#数字图像处理" class="headerlink" title="数字图像处理"></a>数字图像处理</h1><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="人眼视觉感知"><a href="#人眼视觉感知" class="headerlink" title="人眼视觉感知"></a>人眼视觉感知</h3><ul><li><p>人眼 &lt;&#x3D;&gt; 照相机</p><ul><li>眼帘 &lt;&#x3D;&gt; 镜头盖</li><li>瞳孔 &lt;&#x3D;&gt; 光圈</li><li>晶状体 &lt;&#x3D;&gt; 透镜</li><li>视网膜 &lt;&#x3D;&gt; 底片</li><li>视神经细胞 &lt;&#x3D;&gt; 感光药膜<ul><li>视杆细胞</li><li>视锥细胞</li></ul></li></ul></li><li><p>人眼辨别亮度差别的能力，与环境亮度和本身亮度有关</p></li><li><p>感知亮度并不是实际灰度的简单函数（马赫带效应）</p></li></ul><h3 id="图像的感知与获取"><a href="#图像的感知与获取" class="headerlink" title="图像的感知与获取"></a>图像的感知与获取</h3><p>图像获取方式：</p><ul><li>单传感器</li><li>条传感器</li><li>传感器阵列</li></ul><h3 id="图像采样与量化"><a href="#图像采样与量化" class="headerlink" title="图像采样与量化"></a>图像采样与量化</h3><ul><li><p>成像模型</p><p>$0&lt;f(x,y)&lt; \infty$</p></li><li><p>连续感知数据-&gt;数字形式</p></li><li><p>采样与量化</p><ul><li>采样：空间坐标的离散化，决定图像的空间分辨率</li><li>量化：图像函数值（幅值）的数字化，光强，决定图像幅度（灰度级）分辨率</li></ul></li><li><p>动态范围、饱和度、对比度</p><ul><li>$f(x,y):x,y \in Z,f \in Z$</li></ul></li></ul><h4 id="图像数字化：对M、N和离散灰度级数L"><a href="#图像数字化：对M、N和离散灰度级数L" class="headerlink" title="图像数字化：对M、N和离散灰度级数L"></a>图像数字化：对M、N和离散灰度级数L</h4><ul><li>$L&#x3D;2^k$</li><li>$f \in [0,L-1]$</li></ul><h4 id="图像量化"><a href="#图像量化" class="headerlink" title="图像量化"></a>图像量化</h4><ul><li>均匀量化</li><li>非均匀量化<ul><li>基于视觉特性</li><li>基于统计特性</li></ul></li></ul><h4 id="空间与灰度分辨率"><a href="#空间与灰度分辨率" class="headerlink" title="空间与灰度分辨率"></a>空间与灰度分辨率</h4><ul><li><p>空间分辨率：每英寸点数表示dpi</p></li><li><p>灰度分辨率：用于量化灰度的比特数</p></li><li><p>图像内插（重采样）：调整图像的大小、旋转、几何校正</p><ul><li>下采样&#x2F;收缩：行列删除</li><li>上采样&#x2F;放大：创建新的像素位置，对新位置上的像素赋值</li></ul></li></ul><h5 id="最近邻插值"><a href="#最近邻插值" class="headerlink" title="最近邻插值"></a>最近邻插值</h5><p>原图中最近邻的灰度赋给新像素</p><p>块效应和马赛克效应</p><h5 id="双线性插值"><a href="#双线性插值" class="headerlink" title="双线性插值"></a>双线性插值</h5><p>用四个最近邻位置上的灰度值估计给定位置的灰度值</p><h3 id="图像的表示与描述"><a href="#图像的表示与描述" class="headerlink" title="图像的表示与描述"></a>图像的表示与描述</h3><h4 id="数学表示"><a href="#数学表示" class="headerlink" title="数学表示"></a>数学表示</h4><p>二维离散信号：$I&#x3D;f(x,y)$</p><p>$(x,y)$表示图像像素坐标</p><p>$f(x,y)$表示在坐标处像素的灰度值</p><h4 id="图像描述"><a href="#图像描述" class="headerlink" title="图像描述"></a>图像描述</h4><h5 id="黑白图像-x2F-二值图像"><a href="#黑白图像-x2F-二值图像" class="headerlink" title="黑白图像&#x2F;二值图像"></a>黑白图像&#x2F;二值图像</h5><p>黑白图像是对灰度图像二值化</p><p>对二值图像进一步处理</p><h4 id="像素间基本关系"><a href="#像素间基本关系" class="headerlink" title="像素间基本关系"></a>像素间基本关系</h4><p>像素是图像的基本组成单元，在图像空间中网格化排列</p><p>像素间基本关系：</p><ul><li>相邻像素</li><li>邻接、连接、连通</li><li>集合间关系</li></ul><h5 id="像素间的距离"><a href="#像素间的距离" class="headerlink" title="像素间的距离"></a>像素间的距离</h5><ul><li><p>欧氏距离$D_E$</p><p>范数为2的距离</p><p>$D_E(p,q)&#x3D; \sqrt{(x-s)^2+(y-t)^2}$</p></li><li><p>曼哈顿距离</p></li><li><p>切比雪夫距离</p></li></ul><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程笔记</title>
      <link href="/2023/09/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>《软件工程原理》沈备军</p><p>项目实践：软件逆向工程</p><h2 id="软件危机与软件工程"><a href="#软件危机与软件工程" class="headerlink" title="软件危机与软件工程"></a>软件危机与软件工程</h2><h3 id="软件危机"><a href="#软件危机" class="headerlink" title="软件危机"></a>软件危机</h3><p>问题</p><ul><li>如何开发软件以满足不断增长</li><li>如何维护数量不断膨胀的软件产品</li></ul><p>表现</p><ul><li>成本超预算，上线拖延</li><li>偏离用户需求</li><li>质量不够</li><li>可维护度低</li><li>没有适当文档</li><li>成本提高</li><li>供不应求</li></ul><p>原因</p><ul><li>软件本身特点</li><li>软件开发错误认识做法</li><li>开发维护的不正确</li></ul><h2 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h2><p>软件生存周期过程</p><h3 id="软件过程七大元素"><a href="#软件过程七大元素" class="headerlink" title="软件过程七大元素"></a>软件过程七大元素</h3><ul><li><p>活动</p><p>开发、维护、管理</p></li><li><p>任务</p><p>活动细分，确定、安排任务</p></li><li><p>工件</p><p>软件过程的工作产品，分输入与输出工作</p></li><li><p>角色</p><p>定义软件过程中的个人或小组的行为与职责</p></li><li><p>资源</p><p>最佳实践、工具、技术、机器、场地等</p></li><li><p>目标</p><p>每个过程有明确目标</p></li><li><p>度量指标</p><p>目标的具体度量与分析：进度、成本、质量、返工率</p></li></ul><h3 id="软件生存周期模型"><a href="#软件生存周期模型" class="headerlink" title="软件生存周期模型"></a>软件生存周期模型</h3><ul><li><p>线性顺序模型</p><p>瀑布模型</p><p>特点：</p><ul><li>强调阶段的划分顺序与依赖；</li><li>强调各阶段工作文档的完备性，即文档驱动静态描述；</li><li>每个阶段从技术和管理进行严格的审查，即质量保证的<br>观点；</li><li>是一种线性的、顺序的、逐步细化的开发模式；</li><li>推迟实现的观点；</li></ul><p>适用时机：</p><ul><li>所有功能、性能等要求能一次理解和描述时</li><li>所有的系统功能一次交付时</li><li>必须同时淘汰全部老系统时</li></ul><p>实际的瀑布模型具有<strong>反馈环</strong></p><p>风险缺点：</p><ul><li>获得完善的需求规约是非常困难的；</li><li>难以适应快速变化需求；</li><li>系统太大时,难以一次做完；</li><li>反馈信息慢；</li><li>极可能引起开发后期的大量返工，如返工到需求、设计等早<br>期活动；</li></ul><p>建议不适用的情况：</p><p><img src="/imgs/se/1.png" alt="image-20230914085603259"></p></li><li><p>增量式模型</p><p>软件被分解成许多增量构件，逐个提交</p><p>构造中间版本</p><p><img src="/imgs/se/2.png" alt="image-20230914085943130"></p><p>适用实际：</p><ul><li>需要早期获得功能；</li><li>中间产品可以提供使用；</li><li>系统被自然地分割成增量；</li><li>工作人员&#x2F;资金可以逐步增加。</li></ul><p>考虑风险：</p><ul><li>需求未被很好地理解</li><li>一次要求所有功能</li><li>需求迅速发生变化</li><li>事先打算采用的技术迅速发生变化</li><li>长时期内仅有有限的资源（人员&#x2F;资金）</li></ul></li><li><p>演化模型</p><p>只要核心需求能够被很好地理解，就可以进行渐进式开发，其余需求可以在后续的迭代中进一步定义和实现。这种过程模型称为演化模型，它能很好地适应随时间演化的产品的开发。</p><p>特点：</p><ul><li><p>迭代的开发方法，渐进地开发各个可执行版本，逐步完善软件产品。每个版本在开发时，开发过程中的活动和任务顺序地或部分重叠平行地被采用。</p></li><li><p>与增量模型的区别是：需求在开发早期不能被完全了解和确定，在一部分被定义后开发就开始了，然后在每个相继的版本中逐步完善。</p><p><img src="/imgs/se/3.png" alt="image-20230921080755595"></p></li><li><p>现代软件工程采用演化模型</p><ul><li>统一软件过程RUP</li><li>敏捷过程</li><li>净室软件过程</li></ul></li><li><p>演化模型的子类</p><ul><li>原型</li><li>螺旋模型</li><li>并发开发模型</li></ul></li></ul></li></ul><h3 id="演化模型"><a href="#演化模型" class="headerlink" title="演化模型"></a>演化模型</h3><h4 id="迭代化开发"><a href="#迭代化开发" class="headerlink" title="迭代化开发"></a>迭代化开发</h4><p>特点： 尽可能降低风险，适用处理不确定的复杂系统。<br>原则:</p><ol><li>每次迭代产生一个可执行的版本；</li><li>要求有计划地迭代。</li></ol><p><img src="/imgs/se/4.png" alt="image-20230921081712692"></p><h5 id="快速原型模型"><a href="#快速原型模型" class="headerlink" title="快速原型模型"></a>快速原型模型</h5><p>特点：定义出总体目标或初步需求就开发原型，通过原型与用户交互识别进一步的需求.</p><ol><li>抛弃式原型</li><li>演化式原型</li></ol><p><img src="/imgs/se/5.png" alt="image-20230921081842792"></p><h5 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h5><p><img src="/imgs/se/6.png" alt="image-20230921081928140"></p><h4 id="RUP统一软件过程"><a href="#RUP统一软件过程" class="headerlink" title="RUP统一软件过程"></a>RUP统一软件过程</h4><ol><li>迭代式开发</li><li>管理需求</li><li>使用基于构件的体系结构</li><li>可视化建模</li><li>贯穿于开发过程的软件质量验证</li><li>控制软件变更</li></ol><p><img src="/imgs/se/7.png" alt="image-20230921082152709"></p><p>Best Practices<br>Process Made Practical<br>Develop Iteratively<br>Manage Requirements<br>Use Component Architectures<br>Model Visually (UML)<br>Continuously Verify Quality<br>Manage Change</p><h5 id="RUP软件开发生命周期"><a href="#RUP软件开发生命周期" class="headerlink" title="RUP软件开发生命周期"></a>RUP软件开发生命周期</h5><p><img src="/imgs/se/8.png" alt="image-20230921082504263"></p><p>RUP是一个风险驱动的、基于UML和构件式架构的迭代、递增型开发过程</p><h5 id="阶段和迭代"><a href="#阶段和迭代" class="headerlink" title="阶段和迭代"></a>阶段和迭代</h5><p><img src="/imgs/se/9.png" alt="image-20230921082630957"></p><h5 id="6个核心规范和3个支持规范"><a href="#6个核心规范和3个支持规范" class="headerlink" title="6个核心规范和3个支持规范"></a>6个核心规范和3个支持规范</h5><p>RUP把软件开发生命周期分成6个核心规范和3个支持规范</p><h6 id="6个核心规范"><a href="#6个核心规范" class="headerlink" title="6个核心规范"></a>6个核心规范</h6><ul><li>业务建模(系统目标达成共识)</li><li>需求(系统范围达成共识)</li><li>设计</li><li>实现</li><li>测试</li><li>部署</li></ul><h6 id="3个支持规范"><a href="#3个支持规范" class="headerlink" title="3个支持规范"></a>3个支持规范</h6><ul><li>配置与变更管理</li><li>项目管理(风险,计划,进度等)</li><li>环境</li></ul><h4 id="敏捷过程与极限编程"><a href="#敏捷过程与极限编程" class="headerlink" title="敏捷过程与极限编程"></a>敏捷过程与极限编程</h4><h5 id="敏捷过程"><a href="#敏捷过程" class="headerlink" title="敏捷过程"></a>敏捷过程</h5><p>具有高效、快速响应变化的开发过程</p><p><img src="/imgs/se/10.png" alt="image-20230921083304665"></p><p>动机：快速的市场进入时间、快速变化的需求、快速发展的技术</p><p><strong>敏捷宣言</strong></p><ol><li>个体和交互胜过过程和工具；</li><li>可以工作的软件胜过面面俱到的文档；</li><li>客户合作胜过合同谈判；</li><li>响应变化胜过遵循计划。</li></ol><p>敏捷过程的原则</p><ul><li>优先目标是尽早持续交付高价值的软件来满足客户需求；</li><li>通过驾驭变化帮助客户赢得竞争；</li><li>经常交付可用软件；</li><li>业务员和开发人员必须每天一起工作；</li><li>以积极主动地人为核心建立项目团队；</li><li>可用软件是最主要的项目进展目标；</li><li>团队内外最有效的交流是面对面交流；</li><li>提倡可持续开发，保持稳定的工作步调；</li><li>用精益求精和优良设计增强敏捷性；</li><li>简约—工作最小化；</li><li>最优的架构、需求和设计来自自组织的团队；</li><li>团队不断开展工作反思，校正自身行为。</li></ul><p>实践做法</p><ul><li>敏捷过程很容易适应变化并迅速做出自我调整，在保证质量的前提下，实现企业效益的最大化</li><li>敏捷过程在保证软件开发有成功产出的前提下，尽量减少开发过程中的活动和制品，Just enough</li></ul><p>适用范围</p><ul><li>需求不确定、易挥发</li><li>有责任感和积极向上的开发人员</li><li>用户容易沟通并能参与</li><li>小于10个人的项目团队</li></ul><h5 id="极限编程XP-敏捷软件工程实践"><a href="#极限编程XP-敏捷软件工程实践" class="headerlink" title="极限编程XP-敏捷软件工程实践"></a>极限编程XP-敏捷软件工程实践</h5><p>价值观</p><p>沟通、反馈、简化、勇气</p><p>特点</p><p>测试成为开发的核心;</p><p>纪律性与灵活性巧妙结合.</p><p>XP项目的整体开发过程</p><p><img src="/imgs/se/11.png" alt="image-20230921090250148"></p><p><img src="/imgs/se/12.png" alt="image-20230921090334703"></p><p>XP迭代开发过程</p><p><img src="/imgs/se/13.png" alt="image-20230921090521198"></p><p><img src="/imgs/se/14.png" alt="image-20230921090600558"></p><p>XP关键做法</p><ul><li>现场客户（On-site Customer）</li><li>计划博弈（Planning Game）</li><li>系统隐喻（System Metaphor）</li><li>简化设计（Simple Design）</li><li>集体拥有代码（Collective Code Ownership）</li><li>结对编程（Pair Programming）</li><li>测试驱动（Test-driven）</li><li>小型发布（Small Releases）</li><li>重构（Refactoring）</li><li>持续集成（Continuousintegration）</li><li>每周40小时工作制（40-hour Weeks）</li><li>代码规范（Coding Standards）</li></ul><h5 id="RUP与XP共性"><a href="#RUP与XP共性" class="headerlink" title="RUP与XP共性"></a>RUP与XP共性</h5><ul><li>基础都是面向对象方法（取代传统的结构化方法）</li><li>都重视代码、文档的最小化和设计的简化</li><li>采用动态适应变化的演进式迭代周期（取代传统的瀑布型生命周期）</li><li>需求和测试驱动</li><li>鼓励用户积极参与</li></ul><h5 id="RUP与XP的区别"><a href="#RUP与XP的区别" class="headerlink" title="RUP与XP的区别"></a>RUP与XP的区别</h5><ul><li>XP以代码为中心，编码和设计活动融为一体，弱化了架构的概念。</li><li>RUP过程通常以架构为中心，细化阶段的主要目的就是构造出一个可运行的架构原型，作为将来添加需求功能的稳固基础。</li><li>XP不包含业务建模、部署、过程管理等概念。</li><li>RUP适合各种规模的项目，XP只适用于小团队。</li></ul><h4 id="微软过程"><a href="#微软过程" class="headerlink" title="微软过程"></a>微软过程</h4><h5 id="微软过程准则"><a href="#微软过程准则" class="headerlink" title="微软过程准则"></a>微软过程准则</h5><ul><li>项目计划应该兼顾未来的不确定因素;</li><li>用有效的风险管理来减少不确定因素的影响;</li><li>经常生成并快速的地测试软件的过渡版本，提高稳定性和可预测性;</li><li>采用快速循环，递进的开发过程;</li><li>用创造性的工作来平衡产品特性和产品成本;</li><li>项目进度表应该具有较高稳定性和权威性;</li><li>使用小型项目组并发的完成开发工作;</li><li>在项目早期把软件配置项基线化，项目后期则冻结产品;</li><li>使用原型验证概念，对项目进行早期论证;</li><li>把零缺陷作为追求的目标;</li><li>里程碑评审会的目的是改进工作，切忌相互指责.</li></ul><h5 id="微软软件生命周期"><a href="#微软软件生命周期" class="headerlink" title="微软软件生命周期"></a>微软软件生命周期</h5><p><img src="/imgs/se/15.png" alt="image-20230921092829901"></p><h5 id="微软过程模型"><a href="#微软过程模型" class="headerlink" title="微软过程模型"></a>微软过程模型</h5><p><img src="/imgs/se/16.png" alt="image-20230921093011743"></p><h4 id="Scrum过程"><a href="#Scrum过程" class="headerlink" title="Scrum过程"></a>Scrum过程</h4><ul><li>强调经验性过程而不是确定性过程</li><li>演化型的迭代开发过程</li></ul><p><img src="/imgs/se/17.png" alt="image-20230921093118096"></p><h3 id="软件过程的选择与裁切"><a href="#软件过程的选择与裁切" class="headerlink" title="软件过程的选择与裁切"></a>软件过程的选择与裁切</h3><h4 id="软件过程的选择"><a href="#软件过程的选择" class="headerlink" title="软件过程的选择"></a>软件过程的选择</h4><ol><li>产品&#x2F;项目自身的特点</li><li>团队的实际情况和企业文化</li><li>客户的影响</li></ol><h4 id="软件过程进行裁剪"><a href="#软件过程进行裁剪" class="headerlink" title="软件过程进行裁剪"></a>软件过程进行裁剪</h4><ol><li>流程归并与裁剪</li><li>角色的筛选与定制</li><li>工件的裁剪和定制</li></ol><h3 id="软件过程的评估与改进"><a href="#软件过程的评估与改进" class="headerlink" title="软件过程的评估与改进"></a>软件过程的评估与改进</h3><h4 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h4><ol><li><p>CMM&#x2F;CMMI</p><p>过程能力成熟度模型</p><p>CMMI是一个标准簇</p><ul><li>CMMI4Development</li><li>CMMI4Svervice</li><li>CMMI4Acquisition</li></ul><p>CMMI模型不同的改进方法：</p><ul><li>组织成熟度方法（阶梯式模型）</li><li>过程能力方法（连续式模型）</li></ul><p><img src="/imgs/se/18.png" alt="image-20230921100418465"></p><p><img src="/imgs/se/19.png" alt="image-20230921100537595"></p></li><li><p>ISO&#x2F;IEC 15504</p><p>信息技术-软件过程评价标准，又称为SPICE</p><p><img src="/imgs/se/20.png" alt="image-20230921100651886"></p></li><li><p>ISO&#x2F;IEC 20000</p><p>用于评估和认证IT运维服务管理过程的能力</p></li></ol><h4 id="软件过程的改进"><a href="#软件过程的改进" class="headerlink" title="软件过程的改进"></a>软件过程的改进</h4><p><img src="/imgs/se/21.png" alt="image-20230921100821461"></p><h2 id="软件建模"><a href="#软件建模" class="headerlink" title="软件建模"></a>软件建模</h2><h2 id="需求工程"><a href="#需求工程" class="headerlink" title="需求工程"></a>需求工程</h2><h3 id="软件需求面临的挑战"><a href="#软件需求面临的挑战" class="headerlink" title="软件需求面临的挑战"></a>软件需求面临的挑战</h3><ol><li>用户说不清需求；</li><li>需求表达的二义性问题；</li><li>需求经常变化, 项目没有时限；</li><li>因误解或二义性的需求直到开发后期才发现；</li><li>测试者没有明白产品要做什么；</li><li>产品性能低、使用不方便等用户不满意；</li><li>许多增强性需求未在需求获取阶段提出。</li></ol><h3 id="需求工程的概念"><a href="#需求工程的概念" class="headerlink" title="需求工程的概念"></a>需求工程的概念</h3><h4 id="软件需求-FURPS-and-FURPS"><a href="#软件需求-FURPS-and-FURPS" class="headerlink" title="软件需求 FURPS and FURPS+"></a>软件需求 FURPS and FURPS+</h4><p>功能性需求（F）与非功能性需求（URPS）</p><table><thead><tr><th align="center">需求</th><th align="center">能力</th><th align="center">具体要求</th></tr></thead><tbody><tr><td align="center">Functionality</td><td align="center">Feature Set,Capabilities</td><td align="center">Generality,Security</td></tr><tr><td align="center">Usability</td><td align="center">Human Factors,Aesthetics</td><td align="center">Consistency,Documentation</td></tr><tr><td align="center">Reliability</td><td align="center">Frequency&#x2F;Severity,of Failure,Recoverability</td><td align="center">Predictability,Accuracy,MTBF</td></tr><tr><td align="center">Performance</td><td align="center">Speed,Efficiency,&gt;Resource Usage</td><td align="center">Throughput,Response Time</td></tr><tr><td align="center">Supportability</td><td align="center">Testability,Extensibility,Adaptability,Maintainability,Compatibility</td><td align="center">Configurability,Serviceability,Installability,Localizability,Robustness</td></tr></tbody></table><h4 id="Functionality需求"><a href="#Functionality需求" class="headerlink" title="Functionality需求"></a>Functionality需求</h4><p>功能、特性和安全性</p><ul><li>概要功能需求</li><li>详细功能需求</li></ul><h4 id="Usablity需求"><a href="#Usablity需求" class="headerlink" title="Usablity需求"></a>Usablity需求</h4><p>可用性</p><p>The ease with which software can be learned and<br>operated by the intended users</p><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构笔记</title>
      <link href="/2023/09/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><ul><li>IO原理</li><li>存储层次</li><li>流水线并行计算的原理</li></ul><h2 id="计算机系统结构概念"><a href="#计算机系统结构概念" class="headerlink" title="计算机系统结构概念"></a>计算机系统结构概念</h2><h3 id="计算机系统结构"><a href="#计算机系统结构" class="headerlink" title="计算机系统结构"></a>计算机系统结构</h3><p>$系统效率&#x3D;min(器件速度)*min(系统结构效率)$</p><p>计算机体系结构是软件设计者与硬件设备设计者（VLSI）之间的中间层，是软件与硬件的接口（Interface）</p><p>程序员可见的计算系统的属性。包括：概念性的结构和功能行为（外特性）。不包括：数据流和控制流的组织、逻辑设计以及物理实现</p><h3 id="结构特性"><a href="#结构特性" class="headerlink" title="结构特性"></a>结构特性</h3><h4 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h4><p><img src="/imgs/ca/1.png" alt="image-20230919141845531"></p><p>分层带来的透明性</p><h3 id="系统结构内容"><a href="#系统结构内容" class="headerlink" title="系统结构内容"></a>系统结构内容</h3><p>指令系统、数据表示、寻址方式、寄存器组织、存储系统、终端机构、IO结构、及其工作状态定义切换、信息保护</p><h3 id="计算机体系结构的分类"><a href="#计算机体系结构的分类" class="headerlink" title="计算机体系结构的分类"></a>计算机体系结构的分类</h3><ol><li><p>按处理机性能分类</p><ul><li><p>按大小划分</p><p>巨型、大型、中型、小型、微型机</p></li><li><p>按用途划分</p><p><strong>科学计算、事务处理、实时控制、工作站、服务器、家用计算机</strong></p></li><li><p>按数据类型划分</p><p>定点计算机、浮点计算机、向量计算机、堆栈计算机</p></li><li><p>按处理机个数和种类划分</p><p>单处理机</p><p>并行处理机、多处理机、分布处理机</p><p>关联处理机</p><p>超标量处理机, 超流水线处理机, VLIW处理机</p><p>SMP(对称多处理机)、MPP(大规模并行处理机)、机群(Cluster)系统</p></li><li><p>使用器件划分</p><p>第一代：电子管(Valve)计算机</p><p>第二代：晶体管(Transistor)计算机</p><p>第三代：集成电路(LSI)计算机</p><p>第四代：大规模集成电路(VLSI)计算机</p><p>第五代：智能计算机</p></li></ul></li><li><p>按“流”分类：Flynn分类法</p><ul><li><p>概念</p><p>指令流（Instruction Stream）：机器执行的<strong>指令序列</strong>；</p><p>数据流（Data stream）：由指令处理的<strong>数据序列</strong>；</p><p>多倍性（Multiplicity）：在系统最窄的部件上，处于<strong>同一执行阶段</strong>的指令和数据的最大可能个数。</p></li><li><p>基本模块</p><p>MM（Memory Module）：内存模块</p><p>PU（Process Unit）：处理单元</p><p>CU（Control Unit）：控制单元</p></li><li><p>指令流和数据流的个数</p><ul><li><p>单指令流单数据流SISD</p><p><img src="/imgs/ca/2.png" alt="image-20230919151309716"></p></li><li><p>单指令流多数据流SIMD</p><p><img src="/imgs/ca/3.png" alt="1695107777668"></p></li><li><p>多指令流单数据流MISD</p><p><img src="/imgs/ca/4.png" alt="1695107968627"></p><ul><li>没有MISD计算机的原因之一：通常PU用于处理简单数据，一般没有多个简单数据需要一组相同处理的需求，<strong>没有存在的需求基础</strong></li><li>没有MISD计算机的原因之二：如果把PU用于处理复杂数据（向量、矩阵等），一方面<strong>MISD已经变成了MIMD</strong>，另一方面，相对于<strong>SIMD性能价格比较低</strong></li><li>没有MISD计算机的原因之三：适合MISD实现的应用都可以使用其它结构实现，没有存在的必然性，<strong>因为任何复杂数据都可以分解为简单数据</strong>。</li></ul></li><li><p>多指令流多数据流MIMD</p><p><img src="/imgs/ca/5.png" alt="1695108484531"></p></li></ul></li><li><p>主要缺点</p><ul><li>分类太粗</li><li>把两个不同等级的功能并列对待</li><li>没有非冯计算机的分类</li></ul></li></ul></li><li><p>库克分类法</p><p>按控制流和执行流分类</p><ul><li><p>单指令流单执行流SISE</p></li><li><p>单指令流多执行流SIME</p><p>多功能部件处理机、相联处理机、向量处理机、流水线处理机、超流水线处理机、超标量处理机、SIMD并行处理机</p></li><li><p>多指令流单执行流MISE</p></li><li><p>多指令流多执行流MIME</p></li></ul><p>缺点：</p><p>有些系统如分布处理机等，没有总控制器</p><p>分类级别太低，没有处理机级和机器级</p><p>分类太粗，如SIME中包含了多种处理机</p></li><li><p>最大并行度分类：冯氏分类法</p><p>最大并行度$P_m$是指一个系统在单位时间内能够处理的最多的二进制位数，显然这是一个完全由计算机硬件结构决定的参数</p><p><strong>最大并行度的数值越大越好</strong></p><p><img src="/imgs/ca/6.png" alt="image-20230926143105299"></p><ul><li>字串位串WSBS：n&#x3D;1，m&#x3D;1 全串行</li><li>字并位串WPBS：n&gt;1，m&#x3D;1 并行单处理机</li><li>字串位并WSBP：n&#x3D;1，m&gt;1 每处理机只一位，但有多个字处理机并行运用</li><li>字并位并WPBP：n&gt;1，m&gt;1</li></ul><p>如果在一个时钟周期$\Delta t_i$内实际处理的二进制位数为$P_i$，那么在$T$个时钟周期内的平均并行度$P_a$ 就为：<br>$$<br>P_a&#x3D;(\sum_{i&#x3D;1}^T P_i)&#x2F;T<br>$$<br>把平均并行度与最大并行度之比称为平均利用率，用$\mu$表示为：<br>$$<br>\mu&#x3D;P_a&#x2F;P_m&#x3D; \frac{\sum_{i&#x3D;1}^TP_i}{T \cdot P_m}<br>$$</p></li><li><p>按“并行集”和“流水线”分类：$Handler$表示法</p><p>根据可并行和流水处理的程度，将硬件分成三个层次：</p><ul><li>程序控制部件（PCU）的个数$k$</li><li>算术逻辑部件（ALU）或处理部件（PE）的个数$k$</li><li>每个算逻部件包含基本逻辑线路（ECL）的套数$w$</li></ul><p>每一个计算机系统都可以用上述三个参数表示其结构特征，即：<br>$$<br>t(系统型号)&#x3D;(k,d,w)<br>$$<br>更细致的表达：<br>$$<br>t(系统型号)&#x3D;(k \times k’,d \times d’,w \times w’)<br>$$<br>$k’$表示宏流水线中程序控制部件的个数；</p><p>$d’$表示指令流水线中算术逻辑部件的个数；</p><p>$w’$表示操作流水线中基本逻辑线路的套数</p></li><li><p>按控制方式分类</p><p>控制流方式：顺序执行（冯·诺伊曼型）</p><p>数据流方式：操作数到位即可运算，无序执行</p><p>规约方式：驱动方式与数据流相反</p><p>匹配方式：非数值型应用，主要对象为符号</p></li><li><p>按系统结构风格分类</p><p>面向堆栈型、面向寄存器型、面向对象型</p></li></ol><h3 id="系统结构设计"><a href="#系统结构设计" class="headerlink" title="系统结构设计"></a>系统结构设计</h3><h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><ol><li><p>由上向下方法</p><p>适合于专用机的设计，从应用到实现级，周期几年。</p><p>缺点：当应用对象或范围变化时，效率急剧下降。</p><p>原因：软、硬件脱节，不能利用最新的软件技术。</p></li><li><p>由下向上方法</p><p>前提：硬件不能改变。</p><p>缺点：易形成软、硬脱节，软件不能获得最新硬件的支持，结果软件繁杂、效率低。</p></li><li><p>从中间开始</p><p>从软、硬件交界面开始设计。</p><p>要求首先进行软、硬件功能分配，同时考虑硬件能为软件提供什么支持。</p><p>优点：避免软、硬件脱节，设计周期短，有利于优化设计。</p><p> 缺点：对设计人员要求较高，要求具有有效的软件设计环境和开发工具，便于分析、评价和设计。</p></li></ol><h4 id="设计步骤"><a href="#设计步骤" class="headerlink" title="设计步骤"></a>设计步骤</h4><ol><li>需求分析</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记</title>
      <link href="/2023/09/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="ML框架"><a href="#ML框架" class="headerlink" title="ML框架"></a>ML框架</h3><p><img src="/imgs/ml/1.png" alt="image-20230913084005731"></p><h3 id="types-of-learning-problems"><a href="#types-of-learning-problems" class="headerlink" title="types of learning problems"></a>types of learning problems</h3><ul><li>监督学习</li><li>无监督学习<ul><li>自监督学习</li></ul></li><li>半监督学习</li><li>迁移学习</li><li>主动学习</li><li>强化学习</li><li>元学习</li></ul><h2 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h2><h3 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h3><ul><li><p><strong>输入特征</strong></p><p>$x^{(i)} \in R^{n+1},i&#x3D;1,2,···,m$</p></li><li><p><strong>输出</strong></p><p>$y^{(i)} \in R$</p></li><li><p><strong>参数</strong></p><p>$\theta &#x3D; R^{n+1}$</p></li><li><p>假设$h_{\theta}(x):R^{n+1} \to R$</p></li><li><p><strong>损失函数</strong></p><p>$\ell :R \times R \to R_+$</p><p>满足</p><ul><li>非负：不存在负损失</li><li>如果预测结果$h_{\theta}(x)$与给定的y差别小，则损失小，反之则损失大</li></ul><p>平方损失：</p><p>$\ell(h_{\theta}(x),y)&#x3D;(h_{\theta}(x)-y)^2$</p></li></ul><h4 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a><strong>三要素</strong></h4><ul><li><p>假设：$h_{\theta}(x)&#x3D; \theta_0+\theta_1x$，其中参数为$\theta_0,\theta_1$</p></li><li><p>目标函数：</p><p>$J\left(\theta_0, \theta_1\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m \ell\left(h_\theta\left(x^{(i)}\right), y^{(i)}\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m\left(h_\theta\left(x^{(i)}\right)-y^{(i)}\right)^2$</p></li><li><p>优化算法：给定训练集，如何找到最优的参数$\theta$使得<br>$$<br>\min _{\theta_0, \theta_1} J\left(\theta_0, \theta_1\right)<br>$$</p></li><li><p><strong>参数优化</strong></p><p>找到最优的参数$\theta^*&#x3D;arg~ \min_{\theta} J(\theta)$</p><ul><li>穷举所有$\theta$</li><li>随机搜索</li><li>梯度下降</li></ul></li></ul><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a><strong>梯度下降</strong></h4><p>  repeat until convergence{</p><p>  $\theta_j:&#x3D;\theta_j-\alpha \frac{\partial}{\partial \theta_j} J\left(\theta_0, \theta_1\right) \quad($ for $j&#x3D;0$ and $j&#x3D;1)$</p><p>  }</p><ul><li><p><strong>梯度</strong>：<br>$$<br>\nabla_\theta f(\theta) \in \mathbb{R}^n&#x3D;\left[\begin{array}{c}<br>\frac{\partial f(\theta)}{\partial \theta_1} \<br>\frac{\partial f(\theta)}{\partial \theta_2} \<br>\vdots \<br>\frac{\partial f(\theta)}{\partial \theta_n}<br>\end{array}\right]<br>$$<br>梯度下降算法的另一种表述：<br>$$<br>Repeat:~\theta&#x3D;\theta-\alpha \nabla_{\theta}f(\theta)<br>$$</p></li><li><p>单变量线性回归模型的梯度下降</p><p>repeat until convergence:<br>$$<br>\theta_0&#x3D;\theta_0-\alpha \frac{1}{m} \sum_{i&#x3D;1}^{m}(h_\theta(x^{(i)})-y^{(i)})\<br>\theta_1&#x3D;\theta_1-\alpha \frac{1}{m} \sum_{i&#x3D;1}^{m}(h_\theta(x^{(i)})-y^{(i)}) \cdot x^{(i)}<br>$$</p></li></ul><h3 id="多特征（变量）"><a href="#多特征（变量）" class="headerlink" title="多特征（变量）"></a>多特征（变量）</h3><h4 id="三要素-1"><a href="#三要素-1" class="headerlink" title="三要素"></a>三要素</h4><ul><li>假设：$h_\theta(x)&#x3D;\theta_0 x_0+\theta_1 x_1+\theta_2 x_2+\cdots+\theta_n x_n, x_0&#x3D;1$</li><li>参数：$\theta_0,\theta_1,\dots,\theta_n$</li><li>目标函数：$J\left(\theta_0, \theta_1, \cdots, \theta_n\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m \ell\left(h_\theta\left(x^{(i)}\right), y^{(i)}\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m\left(h_\theta\left(x^{(i)}\right)-y^{(i)}\right)^2$</li></ul><h4 id="梯度下降-1"><a href="#梯度下降-1" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>repeat until convergence:<br>$$<br>\theta_j:&#x3D;\theta_j-\alpha \frac{\partial}{\partial \theta_j} J\left(\theta_0, \theta_1,\dots,\theta_n\right)~~j&#x3D;0,1,\dots,n<br>$$</p><h4 id="特征尺度归一化"><a href="#特征尺度归一化" class="headerlink" title="特征尺度归一化"></a>特征尺度归一化</h4><ul><li><p>范围归一化：使得每个特征尽量接近某个范围，如$0 \le x_i \le 1$</p></li><li><p>零均值归一化：用$x_i-\mu_i$替代$x_i$，即$x_i- \mu_i \to x_i$，其中$\mu_i&#x3D;\frac{1}{m} \sum_{i&#x3D;1}^{m} x_i$为均值</p></li><li><p>零均值+范围归一化</p></li><li><p>零均值单位方差归一化：<br>$$<br>\frac{x_i- \mu_i}{\sigma_i} \to x_i<br>$$</p></li></ul><h4 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h4><p>梯度下降$\theta_j:&#x3D;\theta_j-\alpha \frac{\partial}{\partial \theta_j} J\left(\theta \right)$</p><p>收敛条件$\Delta J(\theta) \le 10^{-3}$</p><p>自动收敛测试</p><ul><li>对于足够小的$\alpha,J(\theta)$应该在每一次迭代中减小</li><li>如果$\alpha$太小，梯度下降算法收敛速度慢</li><li>反之，梯度下降算法不会收敛、发散或者震荡</li></ul><h4 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h4><ul><li>对于求函数极小值问题，除了迭代方法之外，可以<strong>令函数的微分为零，然后求解方程</strong></li></ul><p>$$<br>\theta \in \mathbb{R}^{n+1},\<br>J\left(\theta_0, \theta_1, \cdots, \theta_n\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m\left(h_\theta\left(x^{(i)}\right)-y^{(i)}\right)^2\<br>\nabla_\theta J(\theta)&#x3D;0<br>$$</p><p>解出$\theta_0,\theta_1,\dots,\theta_n$</p><p>考虑到求和需要进行循环，使用矩阵运算会有更小的时间复杂度</p><p>得到$J(\theta)&#x3D;\frac{1}{2m}(X\theta-y)^T(X\theta-y)$</p><p>则$\nabla_\theta J(\theta)&#x3D;\frac{1}{m}(X^TX\theta-X^Ty)&#x3D;0$</p><p>解出$\theta&#x3D;(X^TX)^{-1}X^Ty$</p><h4 id="梯度下降和正规方程的比较"><a href="#梯度下降和正规方程的比较" class="headerlink" title="梯度下降和正规方程的比较"></a>梯度下降和正规方程的比较</h4><p>m训练样本，n个特征</p><ul><li>梯度下降<ul><li>需要选择合适的$\alpha$</li><li>需要多次迭代</li><li>即使n很大效果也很好</li></ul></li><li>正规方程<ul><li>不需要选择$\alpha$</li><li>不需要迭代</li><li>需要计算$(X^TX)^{-1}$</li><li>n很大会导致求解很慢</li><li>矩阵不可逆时需要删减一些特征，或者进行正则化</li></ul></li></ul><h2 id="classification"><a href="#classification" class="headerlink" title="classification"></a>classification</h2><h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><p>目标：$0 \le h_\theta(x) \le 1$<br>$$<br>h_\theta(x)&#x3D;g(\theta^Tx)&#x3D;\frac{1}{1+e^{-\theta^Tx}}<br>$$</p><h4 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h4><p><img src="/imgs/ml/2.png" alt="image-20230927092917418"></p><h4 id="概率解释"><a href="#概率解释" class="headerlink" title="概率解释"></a>概率解释</h4><p>$$<br>h_\theta(x)&#x3D;g(\theta^Tx)&#x3D;\frac{1}{1+e^{-\theta^Tx}}<br>$$</p><p>$h_\theta(x)$对于输入x，输出y&#x3D;1的可能性</p><p>给出x，估计y&#x3D;1的可能性，$\theta$为参数<br>$$<br>P(y&#x3D;0|x;\theta)+P(y&#x3D;1|x;\theta)&#x3D;1<br>$$</p><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>体系结构课外思考题0905</title>
      <link href="/2023/09/07/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%980905/"/>
      <url>/2023/09/07/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%980905/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>调研学习Memory wall、Reliability wall、Programmability wall 以及相应的处理策略</p><h2 id="Memory-Wall"><a href="#Memory-Wall" class="headerlink" title="Memory Wall"></a>Memory Wall</h2><blockquote><p>在过去的20多年中，处理器的性能以每年大约55%速度快速提升，而内存性能的提升速度则只有每年10%左右。</p></blockquote><p>从上面的引用中，可以看出在计算机体系结构中存在着<strong>性能日益优越的处理器同落后内存性能之间的矛盾</strong>。长期积累下来，不均衡的发展速度造成了当前内存的存取速度严重滞后于处理器的计算速度，内存瓶颈导致高性能处理器难以发挥出应有的功效。</p><p>由此引出定义：将严重阻碍处理器性能发挥的内存瓶颈命名为“Memory Wall”（内存墙）</p><h3 id="本质问题"><a href="#本质问题" class="headerlink" title="本质问题"></a>本质问题</h3><p>Memory wall的本质问题在于，<strong>CPU的计算速度远远快于内存的读写速度</strong>。CPU可以在一个时钟周期内执行多个指令，而内存操作通常需要数倍或数十倍的时钟周期才能完成。这就导致了CPU在<strong>等待从内存中读取数据或将数据写入内存时</strong>浪费了大量的时间。</p><h3 id="造成后果"><a href="#造成后果" class="headerlink" title="造成后果"></a>造成后果</h3><ol><li><strong>性能下降</strong>：当CPU需要访问内存中的数据时，它必须等待数据从内存传输到CPU寄存器或高速缓存中。这种等待会导致CPU停滞，无法执行其他计算任务，从而降低了计算机系统的整体性能。内存墙通常被认为是计算机系统中的瓶颈之一。</li><li><strong>多核加剧问题</strong>：随着多核处理器的广泛应用，内存墙问题变得更加显著。多个CPU核心可能需要同时访问内存，导致竞争内存带宽，进一步加剧了Memory wall的效应。</li><li><strong>应用范围</strong>：Memory wall问题对于需要大量内存访问的应用程序尤为重要，如大规模数据处理、科学计算、图像和视频处理等。这些应用需要频繁地读写大量的数据，因此更容易受到内存墙的限制。</li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>克服Memory Wall的方法可以在硬件层面和软件层面展开</p><ul><li><p>硬件层面</p><ul><li><p><strong>高速缓存层次结构</strong>：使用高速缓存是一种有效的方法，可减少对主内存的访问次数。现代计算机通常包含多层次的高速缓存（如L1、L2和L3缓存），这些缓存存储着最常用的数据。CPU首先查找高速缓存以获取所需的数据，只有当数据不在缓存中时才会访问主内存</p><p><img src="/imgs/kewaisikao0905/1.png" alt="image-20230907111806245"></p><p>如上图所示，笔者的笔记本电脑设置了三级缓存分别是L1 256KB、L2 1.0MB、L3 8.0MB</p></li><li><p><strong>分布式内存系统</strong>：在集群或分布式计算环境中，使用分布式内存系统来将数据分布在多台计算机上，以提高整体内存带宽和容量。</p></li><li><p><strong>内存带宽增加</strong>：采用更高带宽的内存技术，如DDR4、DDR5等，以提高内存访问速度。</p></li><li><p><strong>内存层次结构优化</strong>：设计更高效的内存层次结构，包括更大的高速缓存和更高带宽的内存通道，以满足多核处理器的需求。</p></li></ul></li><li><p>软件层面</p><ul><li><strong>局部性优化</strong>：设计算法和数据结构以利用局部性原则，包括时间局部性和空间局部性。时间局部性是指在不久的将来可能再次访问相同的数据，而空间局部性是指在接近的内存位置上访问数据。通过利用这些局部性，可以减少内存访问的频率。</li><li><strong>算法优化</strong>：优化算法以减少不必要的内存访问。这包括减少数据移动、使用更紧凑的数据表示和选择更适合内存访问模式的数据结构。</li><li><strong>大页表</strong>：使用大页表（大页面）来减少内存管理开销，从而提高内存访问效率。</li></ul></li></ul><h2 id="Reliability-Wall"><a href="#Reliability-Wall" class="headerlink" title="Reliability Wall"></a>Reliability Wall</h2><p><strong>可靠性墙</strong>指的是在追求更高可靠性的过程中，遇到的性能、成本或其他方面的限制</p><p>也就是说，在计算机体系结构中，<strong>存在着日益增长的可靠性需求同性能、成本之间的矛盾</strong></p><h3 id="本质问题-1"><a href="#本质问题-1" class="headerlink" title="本质问题"></a>本质问题</h3><p>可靠性墙（Reliability Wall）的本质问题在于<strong>追求更高的系统可靠性会引入一系列挑战和限制，这些挑战和限制可能会对性能、成本、复杂性和其他因素产生影响</strong>。</p><h3 id="造成后果-1"><a href="#造成后果-1" class="headerlink" title="造成后果"></a>造成后果</h3><ul><li><p><strong>拖累性能</strong></p><p>提高系统的可靠性通常需要引入冗余组件、监控和恢复机制，以确保系统在故障情况下继续运行。然而，这些额外的措施可能会对系统性能产生负面影响</p></li><li><p><strong>拉高成本</strong></p><p>提高可靠性通常伴随着更高的成本。例如，<strong>引入冗余硬件、备用电源、数据备份和定期维护</strong>都需要额外的<del>money</del></p></li><li><p><strong>复杂性拉满</strong></p><p>增强系统的可靠性通常需要<strong>增加系统的复杂性</strong>，包括引入额外的监控、故障检测和自动恢复机制；复杂性的增加可能会增加系统的管理和维护难度，也可能引入新的故障点。</p></li><li><p><strong>可扩展性降低</strong></p><p>随着系统规模的增加，可靠性的维护和管理变得更加复杂，相应的，可扩展性也就降低了</p></li></ul><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>克服Reliability Wall的根本在于<strong>拿捏不同的应用场景中平衡点</strong>，既满足可靠性需求，又兼顾性能、成本、复杂性，做到可靠性强、最小化性能损失、降低成本和管理复杂性。</p><p>其实首先需要考虑的是<strong>目前所设计的系统的可靠性要求</strong>。</p><p>不同领域对于可靠性的需求不同。例如，在医疗设备和航空航天领域，可靠性至关重要，因为故障可能导致严重的风险；然而在其他领域，如消费电子产品，可靠性需求可能较低。</p><p>针对上述可靠性的不同，在医疗设备、航空航天领域，就需要不计成本的提高可靠性；而对于消费级电子产品，从经济学的角度来说，可靠性甚至只需要达到及格水平（<del>旧的不坏新的不来</del>）</p><p>在提高可靠性方面有下面一些解决方法：</p><ul><li><strong>冗余设计</strong><ul><li><strong>硬件冗余</strong>：引入冗余组件，如冗余电源、硬盘、网络连接等，以在主要组件故障时提供备用。例如，采用热插拔硬件和热备份设备可以确保系统持续可用。</li><li><strong>软件冗余</strong>：使用冗余软件模块或备份系统，以在软件故障时提供备用。这包括主备份服务器、容错算法等。</li></ul></li><li><strong>监控和自动恢复</strong><ul><li>部署监控系统来实时监测硬件和软件的状态，以及系统的性能。</li><li>自动化故障检测和恢复机制，使系统能够在发生故障时自动切换到备用组件或执行恢复操作。</li></ul></li><li><strong>数据备份和复原</strong><ul><li>建立定期备份数据的策略，确保关键数据的完整性和可用性。</li><li>测试和验证数据恢复过程，以确保在数据丢失或损坏时能够迅速进行恢复。</li></ul></li><li><strong>容错技术</strong><ul><li>使用容错技术，如纠错码（ECC）和磁盘阵列（RAID），以检测和纠正硬件错误或数据损坏。</li><li>使用容错集群或系统，使系统在某些组件发生故障时能够继续运行。</li></ul></li><li><strong>定期维护</strong><ul><li>定期维护硬件和软件组件，以预防潜在问题和故障。这包括更新操作系统、补丁管理、硬件维护等。</li></ul></li><li><strong>故障模拟和测试</strong><ul><li>定期进行故障模拟和测试，以评估系统在不同故障情况下的表现，并发现潜在的可靠性问题。</li><li>使用负载测试来模拟系统在高负载情况下的性能和可靠性。</li></ul></li><li><strong>可扩展性</strong><ul><li>在系统设计中考虑可扩展性，以便能够轻松地添加更多的冗余和监控组件，以满足未来的需求。</li></ul></li><li><strong>故障分析和持续改进</strong><ul><li>进行故障分析，以了解导致故障的根本原因，并采取措施以防止未来发生类似问题。</li><li>持续改进可靠性策略和流程，以适应不断变化的威胁和需求。</li></ul></li></ul><p>当然，上面这些方法肯定各有利弊，而且成本不同、造成的性能损失不同，在上述方法中选择合适的进行组合，得到一个最优方案，是克服可靠性墙的一个可行解。</p><h2 id="Programmability-Wall"><a href="#Programmability-Wall" class="headerlink" title="Programmability Wall"></a>Programmability Wall</h2><p>在计算机系统中，尤其是在高性能计算领域，软件开发的复杂性会导致性能提升受到限制。随着计算机硬件不断演进和复杂化，编写能够充分利用硬件性能的软件变得更加困难，这成为了性能瓶颈。</p><p>在计算机体系结构中，存在着<strong>日益提升的硬件性能同落后的软件开发</strong>之间的矛盾。</p><h3 id="本质问题-2"><a href="#本质问题-2" class="headerlink" title="本质问题"></a>本质问题</h3><p>可编程性墙（Programmability Wall）的本质问题在于<strong>软件开发的复杂性与硬件性能的不断提升之间存在不平衡</strong>，这导致了性能的瓶颈。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><ol><li><p><strong>硬件性能迅速提升</strong></p><p>计算机硬件性能（包括CPU速度、内存容量、核心数量等）在不断提高，但软件开发的速度和复杂性也在不断增加。硬件性能的快速提升意味着计算机系统具有更多的计算能力，但软件开发没有同样的速度提高。</p></li><li><p><strong>并行性和多核挑战</strong></p><p>多核处理器和分布式系统的广泛采用意味着开发人员必须编写并行化的软件来充分利用这些硬件资源。然而，并行编程比传统的串行编程更复杂，需要考虑任务划分、同步、通信等问题。</p></li><li><p><strong>性能优化困难</strong></p><p>为了实现最佳性能，开发人员需要深入了解硬件架构，并进行复杂的性能优化。这包括任务调度、数据布局、负载平衡等方面的优化，这些优化往往需要大量的时间和经验。</p></li><li><p><strong>编程语言和工具限制</strong></p><p>目前可用的编程语言和开发工具可能不足以充分支持高度并行化的计算。这迫使开发人员使用底层编程模型，或者编写复杂的自定义代码，增加了错误和开发成本。</p></li><li><p><strong>人才需求</strong></p><p>高效的并行编程需要特定的技能和经验，这意味着寻找合格的并行编程开发人员变得更加困难，而且培训新人员需要时间。</p></li><li><p><strong>可移植性问题</strong></p><p>编写并行软件时，通常会依赖于特定的硬件架构或编程模型。这可能会导致软件不易移植到其他硬件平台，限制了其可扩展性和灵活性。</p></li><li><p><strong>调试和维护复杂性</strong></p><p>并行软件的调试和维护比串行软件更加复杂，因为问题可能涉及多个并发执行的线程或进程。这增加了故障排除的难度。</p></li></ol><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>要克服Programmability Wall（可编程性墙）问题，需要采取一系列策略和方法，以提高软件开发的效率和性能，并确保软件能够充分利用现代计算机硬件的性能潜力。</p><ol><li><strong>高级编程语言和框架</strong><ul><li>开发更高级的编程语言和框架，使开发人员能够更容易地表达并行性和分布式计算。</li><li>提供抽象层次，以隐藏底层硬件细节，使开发人员可以专注于算法和业务逻辑。</li></ul></li><li><strong>自动化工具</strong><ul><li>研究和开发自动化工具，可以帮助开发人员自动并行化和优化程序，减轻手动性能优化的负担。</li><li>自动化工具可以执行任务调度、数据分布和负载均衡等优化，提高了开发效率。</li></ul></li><li><strong>性能分析工具</strong><ul><li>提供性能分析工具，帮助开发人员识别程序性能瓶颈和瓶颈的根本原因。</li><li>这些工具可以帮助开发人员重点优化对性能影响最大的部分。</li></ul></li><li><strong>并行编程模型</strong><ul><li>推广使用适合特定应用的并行编程模型，如MPI、OpenMP、CUDA、OpenCL等。</li><li>提供培训和教育资源，以帮助开发人员掌握并行编程技能。</li></ul></li><li><strong>培训和教育</strong><ul><li>提供广泛的教育和培训资源，以培养具备并行编程技能的开发人员。</li><li>通过学术课程和行业认证来提高开发人员的并行编程能力。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存墙 </tag>
            
            <tag> 可靠性墙 </tag>
            
            <tag> 可编程性墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CV的第一个项目</title>
      <link href="/2023/08/18/CV%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/08/18/CV%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>友情链接：<a href="https://datawhaler.feishu.cn/docx/Ur24daYfaoxz11xPJTxcj4JQnPh?from=space_home_recent&pre_pathname=/drive/home/">Datawhale-CV实践</a></p><p>GitHub项目地址：<a href="https://github.com/JIANG-Wu-19/CV_Project">CV_Project</a></p><h2 id="题目回顾"><a href="#题目回顾" class="headerlink" title="题目回顾"></a>题目回顾</h2><p>为研究基于脑PET图像的疾病预测，本次大赛提供了海量脑PET数据集作为脑PET图像检测数据库的训练样本，参赛者需根据提供的样本构建模型，对轻度认知障碍进行分析和预测。</p><p>脑PET图像检测数据库，记录了老年人受试志愿者的脑PET影像资料，其中包括确诊为轻度认知障碍（MCI）患者的脑部影像数据和健康人（NC）的脑部影像数据。</p><p>被试者按医学诊断分为两类：</p><p>NC：健康</p><p>MCI：轻度认知障碍</p><p>本次大赛所用脑PET图像检测数据库，图像格式为nii。</p><p>表1.大赛数据库</p><p><img src="/imgs/cvdiyi/1.png" alt="img"></p><p><del>在此之前，对于cv仅限于知道</del></p><p>首先来认识一下nii格式文件</p><h3 id="nii文件"><a href="#nii文件" class="headerlink" title=".nii文件"></a>.nii文件</h3><blockquote><p>NII 格式是一种常用于医学影像数据的文件格式，它通常用于存储神经影像数据，如MRI（磁共振成像）和CT（计算机断层扫描）图像。NII 的全称是 Neuroimaging Informatics Technology Initiative，它是一种基于文件扩展名 “.nii” 或 “.nii.gz” 的文件格式。这些文件包含了图像数据和相关的元数据，如图像尺寸、像素分辨率、采集参数等。</p><p>以下是一些关键的信息，有助于了解 NII 文件格式：</p><ol><li><p><strong>图像数据</strong>: NII 文件包含了图像的原始像素数据。这些数据可以表示为多维数组，其中每个维度对应于图像的不同方向（例如 X、Y 和 Z 轴），以及可能的时间维度。</p></li><li><p><strong>头部信息</strong>: NII 文件的开头部分包含了关于图像数据的元数据，如图像尺寸、像素分辨率、采集参数（如重复时间、TR）、图像类型（例如 T1 加权还是 T2 加权）等信息。这些元数据通常以一种被称为 “NIfTI-1 头部” 的结构进行组织。</p></li><li><p><strong>文件扩展名</strong>: NII 文件可以具有 “.nii” 或 “.nii.gz” 的文件扩展名。”.nii” 文件是未经压缩的原始图像数据，而 “.nii.gz” 文件是经过 gzip 压缩的版本，占用更小的存储空间。</p></li><li><p><strong>工具和库</strong>: 有许多开源的工具和库可以用来读取、处理和分析 NII 格式的文件。其中一些工具包括 FSL（FMRIB Software Library）、ANTs（Advanced Normalization Tools）和 MRIcron 等。</p></li></ol><p>如果您需要处理或分析 NII 格式的文件，您可以使用这些工具来读取文件内容、进行图像处理、进行数据分析等。常见的操作包括图像配准、脑部分割、病变定位等。请注意，NII 文件在医学影像研究和临床诊断中发挥着重要作用，因此在处理这些文件时需要谨慎并遵循相关的法律和伦理规定。</p></blockquote><p>也就是说，可以把nii文件理解为一张三维的照片，可以从三个方向进行切片</p><p>那么这也就引出了baseline</p><h2 id="baseline的实现"><a href="#baseline的实现" class="headerlink" title="baseline的实现"></a>baseline的实现</h2><p>Baseline，基于Logistic Regression</p><h3 id="导入相关库"><a href="#导入相关库" class="headerlink" title="导入相关库"></a>导入相关库</h3><p>使用<code>glob</code>库来获取文件路径，<code>numpy</code>用于数值计算，<code>panda</code>s用于数据处理，<code>nibabel</code>用于加载和处理医学图像数据，<code>OrthoSlicer3D</code>用于图像可视化，<code>Counter</code>用于计数统计</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> glob                <span class="token comment"># 获取文件路径</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> nibabel <span class="token keyword">as</span> nib      <span class="token comment"># 处理医学图像数据</span><span class="token keyword">from</span> nibabel<span class="token punctuation">.</span>viewers <span class="token keyword">import</span> OrthoSlicer3D    <span class="token comment"># 图像可视化</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter              <span class="token comment"># 计数统计</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取训练集文件路径</span>train_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'脑PET图像分析和疾病预测挑战赛公开数据/Train/*/*'</span><span class="token punctuation">)</span>test_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'脑PET图像分析和疾病预测挑战赛公开数据/Test/*'</span><span class="token punctuation">)</span><span class="token comment"># 打乱训练集和测试集的顺序</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>test_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>定义了一个函数<code>extract_feature</code>，用于从脑PET图像中提取特征。</p><p><code>extract_feature</code>函数从文件路径加载PET图像数据，并从中随机选择10个通道。然后，它计算了一系列统计特征，如非零像素数量、零像素数量、平均值、标准差等。最后，函数根据文件路径判断样本类别，并将提取到的特征和类别作为返回值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_feature</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 加载PET图像数据</span>    img <span class="token operator">=</span> nib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 获取第一个通道的数据</span>    img <span class="token operator">=</span> img<span class="token punctuation">.</span>dataobj<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 随机筛选其中的10个通道提取特征</span>    random_img <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 对图片计算统计值</span>    feat <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span>random_img <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment"># 非零像素的数量</span>        <span class="token punctuation">(</span>random_img <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment"># 零像素的数量</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token comment"># 平均值</span>        random_img<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token comment"># 标准差</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 在列方向上平均值不为零的数量</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 在行方向上平均值不为零的数量</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment"># 列方向上的最大平均值</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 行方向上的最大平均值</span>    <span class="token punctuation">]</span>        <span class="token comment"># 根据路径判断样本类别（'NC'表示正常，'MCI'表示异常）</span>    <span class="token keyword">if</span> <span class="token string">'NC'</span> <span class="token keyword">in</span> path<span class="token punctuation">:</span>        <span class="token keyword">return</span> feat <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'NC'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> feat <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'MCI'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>利用<code>extract_feature</code>函数提取训练集和测试集的特征，并使用逻辑回归模型对训练集进行训练。</p><p>在这里，我们通过循环将特征提取过程重复进行30次，这是为了增加训练样本的多样性。然后，我们使用逻辑回归模型<code>LogisticRegression</code>来训练数据。在训练完成后，模型已经学习到了从特征到类别的映射关系</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对训练集进行30次特征提取，每次提取后的特征以及类别（'NC'表示正常，'MCI'表示异常）被添加到train_feat列表中。</span>train_feat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> train_path<span class="token punctuation">:</span>        train_feat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>extract_feature<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 对测试集进行30次特征提取   </span>test_feat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> test_path<span class="token punctuation">:</span>        test_feat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>extract_feature<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 使用训练集的特征作为输入，训练集的类别作为输出，对逻辑回归模型进行训练。</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegressionm <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 特征</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                       <span class="token comment"># 类别</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\50.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\43.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\60.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\81.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\24.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\54.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\18.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\45.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\52.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\76.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\65.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\96.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\11.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\4.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\7.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\84.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\82.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\55.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\35.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\13.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\47.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\27.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\80.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\15.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\30.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\53.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\41.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\95.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\62.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\51.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\72.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\39.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\28.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\33.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\98.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\97.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\19.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\57.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\58.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\25.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\14.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\74.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\66.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\67.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\2.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\44.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\63.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\70.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\90.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\49.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\61.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\83.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\17.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\87.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\34.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\92.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\5.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\71.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\36.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\23.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\79.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\59.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\29.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\1.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\32.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\64.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\16.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\94.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\21.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\3.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\73.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\89.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\93.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\40.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\12.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\99.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\91.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\31.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\77.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\42.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\56.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\86.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\20.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\75.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\9.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\68.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\100.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\10.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\46.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\26.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\78.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\48.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\22.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\8.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\6.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\37.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\69.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\38.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\85.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\88.nii&#39;]</code></pre><h3 id="预测与结果输出"><a href="#预测与结果输出" class="headerlink" title="预测与结果输出"></a>预测与结果输出</h3><p>使用训练好的逻辑回归模型对测试集进行预测，并将预测结果进行投票，选出最多的类别作为该样本的最终预测类别。最后，将预测结果存储在CSV文件中并提交结果。</p><p>具体来说，使用了<code>Counter</code>来统计每个样本的30次预测结果中最多的类别，并将结果存储在<code>test_pred_label</code>列表中。然后，将样本ID和对应的预测类别存储在一个DataFrame中，并将其按照ID排序后保存为CSV文件，这样就得到了最终的结果提交文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对测试集进行预测并进行转置操作，使得每个样本有30次预测结果。</span>test_pred <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>test_pred <span class="token operator">=</span> test_pred<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment"># 对每个样本的30次预测结果进行投票，选出最多的类别作为该样本的最终预测类别，存储在test_pred_label列表中。</span>test_pred_label <span class="token operator">=</span> <span class="token punctuation">[</span>Counter<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_pred<span class="token punctuation">]</span><span class="token comment"># 生成提交结果的DataFrame，其中包括样本ID和预测类别。</span>submit <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'uuid'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_path<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 提取测试集文件名中的ID</span>        <span class="token string">'label'</span><span class="token punctuation">:</span> test_pred_label                                  <span class="token comment"># 预测的类别</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 按照ID对结果排序并保存为CSV文件</span>submit <span class="token operator">=</span> submit<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'uuid'</span><span class="token punctuation">)</span>submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑出来的分数是0.48485，不愧是Baseline！</p><h3 id="在实现baseline中的一些困惑，还有debug"><a href="#在实现baseline中的一些困惑，还有debug" class="headerlink" title="在实现baseline中的一些困惑，还有debug"></a>在实现baseline中的一些困惑，还有debug</h3><ul><li>特征提取中<strong>随机</strong>选择10个通道进行提取，然后计算的统计特征都是<strong>人为规定</strong>，故存在偶然性，这一次可能抽样抽的好就成绩好，抽的运气差点那就成绩也难看</li><li>关于split，对<code>\\</code>进行划分会更好一点</li></ul><h2 id="初次尝试CNN"><a href="#初次尝试CNN" class="headerlink" title="初次尝试CNN"></a>初次尝试CNN</h2><h3 id="认识CNN"><a href="#认识CNN" class="headerlink" title="认识CNN"></a>认识CNN</h3><p>卷积神经网络（Convolutional Neural Network，CNN）是一种在计算机视觉和图像处理领域广泛应用的深度学习模型。它专门用于处理具有网格结构数据的任务，例如图像和语音等。CNN 在图像分类、目标检测、图像生成等领域取得了显著的成功，因其在处理图像等数据时的特殊设计。</p><p>以下是 CNN 的一些重要概念和组成部分：</p><ol><li><p><strong>卷积层（Convolutional Layer）</strong>：卷积是 CNN 的核心操作之一。它通过滑动一个小的窗口（卷积核或过滤器）在输入数据（如图像）上，对局部区域进行特征提取。卷积操作可以捕捉到不同位置的特征，从而实现平移不变性。多个卷积核可以提取不同的特征。</p></li><li><p><strong>池化层（Pooling Layer）</strong>：池化操作用于降低特征图的尺寸，减少计算量，并保留重要的特征。最大池化和平均池化是常见的池化操作，它们分别取区域内最大值或平均值作为输出。</p></li><li><p><strong>激活函数（Activation Function）</strong>：激活函数引入非线性性质，使得网络能够学习复杂的模式。常用的激活函数包括ReLU（Rectified Linear Unit）、Sigmoid 和 Tanh。</p></li><li><p><strong>全连接层（Fully Connected Layer）</strong>：在卷积和池化层之后，一般会连接若干全连接层，用于将提取的特征映射到最终的输出类别。全连接层的神经元与上一层的所有神经元相连。</p></li><li><p><strong>批归一化（Batch Normalization）</strong>：用于在训练过程中对每一层的输出进行标准化，以加速网络的训练并提高稳定性。</p></li><li><p><strong>Dropout</strong>：在训练过程中，随机将某些神经元置零，有助于防止过拟合。</p></li></ol><p>CNN 的典型架构通常由一系列的卷积层、池化层、激活函数、全连接层等组成，最后通过一个适当的激活函数得到分类结果。深度卷积网络的层数可以很深，例如，VGG、ResNet 和 Inception 等网络。</p><p>在计算机视觉领域，CNN 以其在图像特征提取方面的强大能力而闻名，通过多次堆叠卷积层和池化层，网络可以逐渐学习到越来越抽象和高级的特征表示，从而在图像分类、物体检测、分割等任务中取得卓越表现。</p><h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><p>这段代码是一个深度学习项目的实现，主要用于处理脑PET图像数据，进行分类任务（识别脑PET图像是否为正常状态NC或认知障碍状态MCI）。以下是代码的详细解释：</p><ol><li><p><strong>导入库</strong>：首先导入了一系列需要用到的Python库，包括处理数据和图像的库（如NumPy、Pandas、PIL、OpenCV、albumentations等），PyTorch库，以及其他辅助库。</p></li><li><p><strong>设置随机种子和GPU设置</strong>：通过设置随机种子确保实验的可重现性，以及设置PyTorch在GPU上运行的一些参数。</p></li><li><p><strong>定义文件路径</strong>：指定训练和测试数据的文件路径。<code>train_path</code> 是训练图像的路径，<code>test_path</code> 是测试图像的路径。</p></li><li><p><strong>数据缓存定义</strong>：<code>DATA_CACHE</code> 是一个用于存储图像数据的缓存字典，以避免在每次访问时都加载图像数据。</p></li><li><p><strong>自定义数据集类 XunFeiDataset</strong>：这个类用于创建一个自定义的数据集，用于加载和处理图像数据。</p><ul><li><code>__init__</code> 方法初始化数据集，接收图像路径和一个可选的图像变换（transforms）。</li><li><code>__getitem__</code> 方法负责加载和处理数据。首先，它从缓存中加载图像数据，如果缓存中没有，就从NIfTI文件加载数据。然后，它从加载的图像中随机选择一些通道（层数），对图像进行变换（如果有的话），最后返回处理后的图像和标签。</li><li><code>__len__</code> 方法返回数据集的长度。</li></ul></li><li><p><strong>数据加载器定义</strong>：创建训练、验证和测试数据加载器，用于加载批量的图像数据。这里使用了 <code>torch.utils.data.DataLoader</code> 来实现。</p></li><li><p><strong>定义神经网络模型 XunFeiNet</strong>：这个类定义了一个基于预训练的ResNet-18模型的自定义模型。</p><ul><li>在构造函数 <code>__init__</code> 中，加载了预训练的ResNet-18模型，并对其进行修改，以适应数据。首先，修改了第一个卷积层的输入通道数，使其适应输入数据的通道数（这里是50通道）。然后，修改了全连接层的输出大小，以适应分类任务（2个类别：NC和MCI）。</li><li>在 <code>forward</code> 方法中，将输入数据传递给修改后的ResNet-18模型，并返回模型输出。</li></ul></li><li><p><strong>模型、损失函数和优化器定义</strong>：创建了一个 XunFeiNet 模型的实例，将其放置在GPU上运行。定义交叉熵损失函数和AdamW优化器。</p></li><li><p><strong>训练函数 train</strong>：定义了一个训练函数，用于在训练集上训练模型。</p><ul><li>在训练循环中，迭代训练数据加载器中的每个批次。</li><li>将输入数据和目标标签移到GPU上。</li><li>通过模型前向传播获取预测输出，计算损失。</li><li>清零优化器的梯度，进行反向传播和参数更新。</li><li>打印每20个批次的损失。</li><li>返回平均训练损失。</li></ul></li><li><p><strong>验证函数 validate</strong>：定义了一个验证函数，用于在验证集上评估模型性能。</p><ul><li>在验证循环中，迭代验证数据加载器中的每个批次。</li><li>将输入数据和目标标签移到GPU上。</li><li>通过模型前向传播获取预测输出，计算损失。</li><li>统计预测正确的数量，用于计算准确率。</li><li>返回验证集上的准确率。</li></ul></li><li><p><strong>训练循环</strong>：使用训练函数和验证函数进行训练。</p><ul><li>在循环内，迭代指定次数（这里是40次）进行训练和验证。</li><li>调用训练函数进行模型训练，获取训练损失。</li><li>调用验证函数计算验证集上的准确率以及训练集上的准确率。</li><li>打印每轮训练和验证的结果。</li></ul></li><li><p><strong>预测函数 predict</strong>：定义了一个预测函数，用于在测试集上进行预测。</p><ul><li>在预测循环中，迭代测试数据加载器中的每个批次。</li><li>将输入数据移到GPU上，通过模型前向传播获取预测输出。</li><li>将预测输出存储在一个列表中。</li><li>返回预测结果的NumPy数组。</li></ul></li><li><p><strong>测试集预测循环</strong>：使用预测函数进行测试集上的多次预测，并将结果累加。</p><ul><li>迭代指定次数（这里是10次）进行测试集预测。</li><li>第一次预测时，将预测结果存储在 <code>pred</code> 变量中。</li><li>从第二次预测开始，将后续预测结果累加到 <code>pred</code> 变量中。</li></ul></li><li><p><strong>结果生成和提交</strong>：使用预测结果生成一个DataFrame，将结果存储为CSV文件。</p><ul><li>将测试图像路径中的UUID解析为DataFrame的 ‘uuid’ 列。</li><li>将预测结果中的类别转换为 ‘NC’ 和 ‘MCI’，存储为 ‘label’ 列。</li><li>将DataFrame按UUID排序。</li><li>将DataFrame保存为名为 ‘submit2.csv’ 的CSV文件，以便进行结果提交。</li></ul></li></ol><p>这段代码通过自定义数据集类、模型定义、训练和验证循环等组件，实现了对脑PET图像</p><p>进行分类的深度学习流程，并最终生成一个用于提交的CSV文件，其中包含了对测试图像的分类结果。</p><h3 id="针对源码的修改"><a href="#针对源码的修改" class="headerlink" title="针对源码的修改"></a>针对源码的修改</h3><ul><li><code>num_workers</code> 设置为0，防止并发出问题</li><li><code>target</code> 改为 <code>target.long()</code>，防止调用API出现value error</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Baseline-py"><a href="#Baseline-py" class="headerlink" title="Baseline.py"></a>Baseline.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> glob                <span class="token comment"># 获取文件路径</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> nibabel <span class="token keyword">as</span> nib      <span class="token comment"># 处理医学图像数据</span><span class="token keyword">from</span> nibabel<span class="token punctuation">.</span>viewers <span class="token keyword">import</span> OrthoSlicer3D    <span class="token comment"># 图像可视化</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter              <span class="token comment"># 计数统计</span><span class="token comment"># 读取训练集文件路径</span>train_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./脑PET图像分析和疾病预测挑战赛公开数据/Train/*/*'</span><span class="token punctuation">)</span>test_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./脑PET图像分析和疾病预测挑战赛公开数据/Test/*'</span><span class="token punctuation">)</span><span class="token comment"># 打乱训练集和测试集的顺序</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>test_path<span class="token punctuation">)</span><span class="token comment"># 对PET文件提取特征</span><span class="token keyword">def</span> <span class="token function">extract_feature</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 加载PET图像数据</span>    img <span class="token operator">=</span> nib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 获取第一个通道的数据</span>    img <span class="token operator">=</span> img<span class="token punctuation">.</span>dataobj<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 随机筛选其中的10个通道提取特征</span>    random_img <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 对图片计算统计值</span>    feat <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span>random_img <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment"># 非零像素的数量</span>        <span class="token punctuation">(</span>random_img <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment"># 零像素的数量</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token comment"># 平均值</span>        random_img<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token comment"># 标准差</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 在列方向上平均值不为零的数量</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 在行方向上平均值不为零的数量</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment"># 列方向上的最大平均值</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 行方向上的最大平均值</span>    <span class="token punctuation">]</span>        <span class="token comment"># 根据路径判断样本类别（'NC'表示正常，'MCI'表示异常）</span>    <span class="token keyword">if</span> <span class="token string">'NC'</span> <span class="token keyword">in</span> path<span class="token punctuation">:</span>        <span class="token keyword">return</span> feat <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'NC'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> feat <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'MCI'</span><span class="token punctuation">]</span><span class="token comment"># 对训练集进行30次特征提取，每次提取后的特征以及类别（'NC'表示正常，'MCI'表示异常）被添加到train_feat列表中。</span>train_feat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> train_path<span class="token punctuation">:</span>        train_feat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>extract_feature<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 对测试集进行30次特征提取   </span>test_feat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> test_path<span class="token punctuation">:</span>        test_feat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>extract_feature<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 使用训练集的特征作为输入，训练集的类别作为输出，对逻辑回归模型进行训练。</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegressionm <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 特征</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                       <span class="token comment"># 类别</span><span class="token punctuation">)</span><span class="token comment"># 对测试集进行预测并进行转置操作，使得每个样本有30次预测结果。</span>test_pred <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>test_pred <span class="token operator">=</span> test_pred<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment"># 对每个样本的30次预测结果进行投票，选出最多的类别作为该样本的最终预测类别，存储在test_pred_label列表中。</span>test_pred_label <span class="token operator">=</span> <span class="token punctuation">[</span>Counter<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_pred<span class="token punctuation">]</span><span class="token comment"># 生成提交结果的DataFrame，其中包括样本ID和预测类别。</span>submit <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'uuid'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_path<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 提取测试集文件名中的ID</span>        <span class="token string">'label'</span><span class="token punctuation">:</span> test_pred_label                                  <span class="token comment"># 预测的类别</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 按照ID对结果排序并保存为CSV文件</span>submit <span class="token operator">=</span> submit<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'uuid'</span><span class="token punctuation">)</span>submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="torch-version-py"><a href="#torch-version-py" class="headerlink" title="torch_version.py"></a>torch_version.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> glob<span class="token punctuation">,</span> argparse<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> cv2<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> StratifiedKFold<span class="token punctuation">,</span> KFold<span class="token keyword">import</span> torchtorch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">False</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>models <span class="token keyword">as</span> models<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> datasets<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dataset <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> nibabel <span class="token keyword">as</span> nib<span class="token keyword">from</span> nibabel<span class="token punctuation">.</span>viewers <span class="token keyword">import</span> OrthoSlicer3Dtrain_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./脑PET图像分析和疾病预测挑战赛公开数据/Train/*/*'</span><span class="token punctuation">)</span>test_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./脑PET图像分析和疾病预测挑战赛公开数据/Test/*'</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>test_path<span class="token punctuation">)</span>DATA_CACHE <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">XunFeiDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_path<span class="token punctuation">,</span> transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>img_path <span class="token operator">=</span> img_path        <span class="token keyword">if</span> transform <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">in</span> DATA_CACHE<span class="token punctuation">:</span>            img <span class="token operator">=</span> DATA_CACHE<span class="token punctuation">[</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> nib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>dataobj<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>            DATA_CACHE<span class="token punctuation">[</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> img        <span class="token comment"># 随机选择一些通道</span>        idx <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> idx<span class="token punctuation">]</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>image<span class="token operator">=</span>img<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> img<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'NC'</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">)</span><span class="token keyword">import</span> albumentations <span class="token keyword">as</span> Atrain_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    XunFeiDataset<span class="token punctuation">(</span>train_path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  A<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                      A<span class="token punctuation">.</span>RandomRotate90<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>HorizontalFlip<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>RandomContrast<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>RandomBrightnessContrast<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>val_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    XunFeiDataset<span class="token punctuation">(</span>train_path<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  A<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                      A<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    XunFeiDataset<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span>                  A<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                      A<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>HorizontalFlip<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>RandomContrast<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XunFeiNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>XunFeiNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet18<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resnet <span class="token operator">=</span> model    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>resnet<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token keyword">return</span> outmodel <span class="token operator">=</span> XunFeiNet<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_loss <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span>non_blocking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        target <span class="token operator">=</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span>non_blocking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val_acc <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>val_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># compute output</span>            output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            val_acc <span class="token operator">+=</span> <span class="token punctuation">(</span>output<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> val_acc <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>val_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_loss <span class="token operator">=</span> train<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">)</span>    val_acc <span class="token operator">=</span> validate<span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>    train_acc <span class="token operator">=</span> validate<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>    <span class="token comment"># print(train_loss, train_acc, val_acc)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:d&#125; epoch"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train loss:&#123;:.5f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train_acc:&#123;:.5f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"val_acc:&#123;:.5f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>val_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>test_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val_acc <span class="token operator">=</span> <span class="token number">0.0</span>    test_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>test_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            test_pred<span class="token punctuation">.</span>append<span class="token punctuation">(</span>output<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>test_pred<span class="token punctuation">)</span>pred <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pred <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        pred <span class="token operator">=</span> predict<span class="token punctuation">(</span>test_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        pred <span class="token operator">+=</span> predict<span class="token punctuation">(</span>test_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>submit <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'uuid'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_path<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'label'</span><span class="token punctuation">:</span> pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>submit<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> submit<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'NC'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'MCI'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>submit <span class="token operator">=</span> submit<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'uuid'</span><span class="token punctuation">)</span>submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit2.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>2023年8月16日：跑通基于Logistic Regression的baseline，分数难看</p><p>2023年8月17日：跑通基于CNN的baseline，拿到一个还过得去的分数</p>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题十三</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%B8%89/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>W先生每天驾车去公司上班。W先生的住所位于A，公司位于F，图中的直线段代表公路，交叉点代表路口，直线段上的数字代表两路口之间的平均行驶时间。现在W先生的问题是要确定一条最省时的上班路线。</p><p><img src="/imgs/sikao13/1.png"></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这道题目需要计算的是两点之间的最短路径，可以采用两种思想，一种是贪心的思想，另一种就是动态规划的思想，就两种思想展开，阐述具体方法</p><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><h4 id="贪心算法（Dijkstra算法）"><a href="#贪心算法（Dijkstra算法）" class="headerlink" title="贪心算法（Dijkstra算法）"></a>贪心算法（Dijkstra算法）</h4><h5 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h5><p>通过<strong>迪杰斯特拉算法求最短路径</strong>的方法确定上班路线。迪杰斯特拉算法的一般步骤是：</p><p>算法求<strong>单个源点到其余各顶点</strong>的最短路径，计算思路是<strong>离源点最低路径长度的开序</strong>，运用到的思想是<strong>贪心</strong>（每次取离源点最近的点）。设<code>C</code>数组为<strong>蓝点集</strong>，起点为红点。当红点集合加入值时，关联的蓝点将更新最短路径。</p><p>我们通过在更新最短路径时对路径经过的点进行记录，可以得到最后的上班路线。</p><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 510;struct graph&#123;int n, m;int g[N][N];&#125;;void dijkstra(struct graph &amp;graph)&#123;bool st[N] &#x3D; &#123; 0 &#125;;int path[N] &#x3D; &#123; 0 &#125;, res[N] &#x3D; &#123; 0 &#125;, dist[N] &#x3D; &#123; 0 &#125;;memset(dist, 0x3f, sizeof dist);dist[1] &#x3D; 0;&#x2F;&#x2F;初始化for (int i &#x3D; 0; i &lt; graph.n; i++)&#123;int t &#x3D; -1;&#x2F;&#x2F;t为-1表示还未选择一个点for (int j &#x3D; 1; j &lt;&#x3D; graph.n; j++)&#123;if (!st[j] &amp;&amp; (t &#x3D;&#x3D; -1 || dist[t] &gt; dist[j]))t &#x3D; j;&#x2F;&#x2F;选取还未被选择的且距离最近的点&#125;st[t] &#x3D; true;for (int j &#x3D; 1; j &lt;&#x3D; graph.n; j++)&#123;if (dist[j] &gt; dist[t] + graph.g[t][j])&#123;dist[j] &#x3D; min(dist[j], dist[t] + graph.g[t][j]);path[j] &#x3D; t;&#125;&#125;&#125;cout &lt;&lt; &quot;需要的时间最短为:&quot; &lt;&lt; dist[graph.n] &lt;&lt; endl &lt;&lt; &quot;路径依次是:&quot;;int j &#x3D; graph.n, i &#x3D; 0;res[i] &#x3D; graph.n;&#x2F;&#x2F; 记录终点while (path[j] !&#x3D; 0)&#x2F;&#x2F; 将路径存放到结果数组中&#123;res[++i] &#x3D; path[j];j &#x3D; path[j];&#125;for (int m &#x3D; i; m &gt;&#x3D; 0; m--)&#x2F;&#x2F; 逆序输出&#123;cout &lt;&lt; res[m] &lt;&lt; &quot; &quot;;&#125;&#125;int main()&#123;struct graph graph;cin &gt;&gt; graph.n &gt;&gt; graph.m;memset(graph.g, 0x3f, sizeof graph.g);while (graph.m--)&#123;int a, b, c;cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;graph.g[a][b] &#x3D; min(graph.g[a][b], c);&#125;dijkstra(graph);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现结果：</p><p><img src="/imgs/sikao13/2.png"></p><p>算法的时间复杂度是$O(n^2)$</p><h4 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h4><h5 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h5><p>通过观察发现<strong>每个数都是由其左边&#x2F;下面的数的最短路径和其左边&#x2F;下面的数到该数的距离的加和</strong>得到。我们可以采用动态规划思想，从上到下、从左到右遍历各点，当遍历到最后一个点时，即得需要的最短时间。每次更新最短距离时，可以记录路径，从而确定上班路线。</p><p>设置状态函数$dist[i]$，得到公式<br>$$<br>dist[i]&#x3D;min \lbrace dist[i-1]+g[i-1][i],dist[i-m]+g[i-m][i] \rbrace<br>$$<br>$dist[i-m]$表示起点到该数下一行数的最短路径</p><h5 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;utility&gt;using namespace std;const int N &#x3D; 20;void dp(int n, int m)&#123;int g[N][N] &#x3D; &#123; 0 &#125;, dist[N];int path[N] &#x3D; &#123; 0 &#125;, res[N];memset(dist, 0x3f, sizeof dist);dist[1] &#x3D; 0;&#x2F;&#x2F; 读入数据for (int i &#x3D; 1; i &lt; m * n; i++)&#123;if (i % m &#x3D;&#x3D; 0)continue;cin &gt;&gt; g[i][i + 1];&#125;for (int i &#x3D; 1; i &lt;&#x3D; m * (n - 1); i++)&#123;cin &gt;&gt; g[i][i + m];&#125;&#x2F;&#x2F; 动态规划for (int i &#x3D; 2; i &lt;&#x3D; m; i++)&#123;dist[i] &#x3D; dist[i - 1] + g[i - 1][i];&#125;for (int i &#x3D; m + 1; i &lt;&#x3D; n * m; i++)&#123;if ((i - 1) % m !&#x3D; 0 &amp;&amp; dist[i - 1] + g[i - 1][i] &lt;&#x3D; dist[i - m] + g[i - m][i])&#123;dist[i] &#x3D; dist[i - 1] + g[i - 1][i];path[i] &#x3D; i - 1;&#125;else&#123;dist[i] &#x3D; dist[i - m] + g[i - m][i];path[i] &#x3D; i - m;&#125;&#125;    &#x2F;&#x2F; 输出答案cout &lt;&lt; &quot;需要的时间最短为:&quot; &lt;&lt; dist[n * m] &lt;&lt; endl &lt;&lt; &quot;路径依次是:&quot;;int j &#x3D; n * m, i &#x3D; 0;res[i] &#x3D; n * m;&#x2F;&#x2F; 记录终点while (path[j] !&#x3D; 0)&#x2F;&#x2F; 将路径存放到结果数组中&#123;res[++i] &#x3D; path[j];j &#x3D; path[j];&#125;for (int m &#x3D; i; m &gt;&#x3D; 0; m--)&#x2F;&#x2F; 逆序输出&#123;cout &lt;&lt; res[m] &lt;&lt; &quot; &quot;;&#125;&#125;int main()&#123;int n, m;&#x2F;&#x2F; n代表行数, m代表列数cout &lt;&lt; &quot;请输入公路矩阵行列的点数&quot; &lt;&lt; endl;cin &gt;&gt; n &gt;&gt; m;cout &lt;&lt; &quot;请输入各条边&quot; &lt;&lt; endl;dp(n, m);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法实现：</p><p><img src="/imgs/sikao13/3.png" alt="image-20230528141034425"></p><p>算法需要遍历所有节点，时间复杂度是$O(n)$</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>在芯片设计中，经常要考虑输入与输出端之间的连接关系，假设输入与输出端分别有若干端口，并且用一组数字进行标注（可能有重复），当且仅当输入端与输出端数字相等并且不与其他连接线相交的情况下，可以建立输入与输出之间的连接。设计算法策略，计算可能得到的最大连接数。</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>这是一道图论的题目，抽象来说，就是在二部图中寻找一个最大的没有交叉连线的匹配，本题的难点在于判断是否存在交叉连线</p><h3 id="算法设计-1"><a href="#算法设计-1" class="headerlink" title="算法设计"></a>算法设计</h3><p>使用递归的深度优先搜索函数dfs用于搜索可能的连接</p><p>递归调用中首先检查是否已经遍历完了所有的输出端口，如果是，则更新最大连接数并返回</p><p>对于当前输入端口和输出端口集合中的每个输出端口，判断它们的数字是否相等。如果相等，继续判断该连接与已建立的连接是否交叉。若没有交叉，则将该连接添加到当前的连接路径和已建立的连接集合中。</p><p>利用dfs的递归性质，穷举所有可能的连接方式，并通过剪枝条件来确保连线不交叉。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 连接关系结构体struct Connection &#123;    int input;    int output;&#125;;&#x2F;&#x2F; 深度优先搜索函数void dfs(int inputPort, const unordered_set&lt;int&gt;&amp; outputPorts,         const vector&lt;Connection&gt;&amp; path, int&amp; maxConnections,         unordered_set&lt;Connection&gt;&amp; connections) &#123;    if (outputPorts.empty()) &#123;        maxConnections &#x3D; max(maxConnections, static_cast&lt;int&gt;(path.size()));        return;    &#125;    for (int outputPort : outputPorts) &#123;        if (inputPort &#x3D;&#x3D; outputPort) &#123;            bool intersects &#x3D; false;            for (const Connection&amp; conn : connections) &#123;                if ((conn.input &lt; inputPort &amp;&amp; inputPort &lt; conn.output) ||                    (conn.input &lt; outputPort &amp;&amp; outputPort &lt; conn.output)) &#123;                    intersects &#x3D; true;                    break;                &#125;            &#125;            if (!intersects) &#123;                vector&lt;Connection&gt; newPath &#x3D; path;                newPath.push_back(&#123;inputPort, outputPort&#125;);                connections.insert(&#123;inputPort, outputPort&#125;);                unordered_set&lt;int&gt; newOutputPorts &#x3D; outputPorts;                newOutputPorts.erase(outputPort);                dfs(inputPort, newOutputPorts, newPath, maxConnections, connections);                connections.erase(&#123;inputPort, outputPort&#125;);            &#125;        &#125;    &#125;&#125;&#x2F;&#x2F; 计算最大连接数函数int calculateMaxConnections(const vector&lt;int&gt;&amp; inputs, const vector&lt;int&gt;&amp; outputs) &#123;    unordered_set&lt;Connection&gt; connections;    int maxConnections &#x3D; 0;    for (int inputPort : inputs) &#123;        dfs(inputPort, unordered_set&lt;int&gt;(outputs.begin(), outputs.end()), &#123;&#125;,            maxConnections, connections);    &#125;    return maxConnections;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 最短路径 </tag>
            
            <tag> 二部图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题十二</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%BA%8C/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Given a tree T &#x3D; (V,E), find the maximum independent set of the tree. For example, maximum independent set of the tree of following tree has size 7.</p><p><img src="/imgs/sikao12/1.png"></p><p>The green vertices shows that the maximum indpendent set of thetree has size 7.</p><p>(1) Design an efficient greedy algorithm to solve the problem. </p><p>(2) If each vertex has a weight such as benefit,whether can you use a Greedy algorithm to get a maximum benefit where if one vertex has been selected then its adjacent verticex can not be selected.</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这道思考题考察的是求树中的最大独立集的问题</p><p>独立集概念：</p><p>对于树$T&#x3D;(V,E)$，若$V^{‘} \subseteq V$且$V^{‘}$中任意两点都不相邻，则$V^{‘}$是树T的一个独立集</p><p>在这个问题中，可以采用贪心算法求取树中的最大独立集</p><p>贪心算法通过一系列的局部选择来得到一个问题的解，每一次贪心选择都将所有问题简化为规模更小的子问题。</p><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><ol><li>初始化一个空的最大独立集</li><li>从树的叶子节点出发，逐层向上处理。对于每个节点，有两种情况：<ul><li>如果该节点的父结点已经被选中作为最大独立集的一部分，则跳过该节点</li><li>如果该节点的父结点没有被选中作为最大独立集的一部分，则将该节点添加到最大独立集中，并将其所有子节点标记为已访问</li></ul></li><li>当该节点处理完后，向上处理，直到处理完所有节点</li></ol><p>使用深度优先搜索遍历树的节点</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;unordered_set&gt;using namespace std;struct TreeNode &#123;    int val;    vector&lt;TreeNode*&gt; children;    TreeNode* parent &#x3D; nullptr;    TreeNode(int value) : val(value) &#123;&#125;&#125;;unordered_set&lt;TreeNode*&gt; max_independent_set;unordered_set&lt;TreeNode*&gt; visited;void dfs(TreeNode* node) &#123;    for (TreeNode* child : node-&gt;children) &#123;            dfs(child);    &#125;    if (node-&gt;parent &amp;&amp; max_independent_set.find(node-&gt;parent) &#x3D;&#x3D; max_independent_set.end() &amp;&amp; visited.find(node) &#x3D;&#x3D; visited.end()) &#123;        max_independent_set.insert(node);        visited.insert(node);        visited.insert(node-&gt;parent);    &#125;&#125;unordered_set&lt;TreeNode*&gt; findMaxIndependentSet(TreeNode* root) &#123;    max_independent_set.clear();    visited.clear();    dfs(root);    return max_independent_set;&#125;int main() &#123;    &#x2F;&#x2F; 构建树的示例    TreeNode* root &#x3D; new TreeNode(1);    TreeNode* node2 &#x3D; new TreeNode(2);    TreeNode* node3 &#x3D; new TreeNode(3);    TreeNode* node4 &#x3D; new TreeNode(4);    TreeNode* node5 &#x3D; new TreeNode(5);    TreeNode* node6 &#x3D; new TreeNode(6);    TreeNode* node7 &#x3D; new TreeNode(7);    TreeNode* node8 &#x3D; new TreeNode(8);    TreeNode* node9 &#x3D; new TreeNode(9);    root-&gt;children.push_back(node2);    root-&gt;children.push_back(node3);    root-&gt;children.push_back(node4);    node2-&gt;parent &#x3D; root;    node3-&gt;parent &#x3D; root;    node4-&gt;parent &#x3D; root;    node2-&gt;children.push_back(node5);    node2-&gt;children.push_back(node6);    node5-&gt;parent &#x3D; node2;    node6-&gt;parent &#x3D; node2;    node4-&gt;children.push_back(node7);    node4-&gt;children.push_back(node8);    node4-&gt;children.push_back(node9);    node7-&gt;parent &#x3D; node4;    node8-&gt;parent &#x3D; node4;    node9-&gt;parent &#x3D; node4;    unordered_set&lt;TreeNode*&gt; result &#x3D; findMaxIndependentSet(root);    &#x2F;&#x2F; 输出最大独立集中的节点值    for (TreeNode* node : result) &#123;        cout &lt;&lt; node-&gt;val &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用深度优先搜索（DFS）来遍历树的节点。首先，找到所有叶子节点，并从它们的父节点开始逐层向上处理。对于每个节点，如果它的父节点已经被选择，则跳过该节点；否则，将该节点添加到最大独立集中，并将其所有子节点标记为已访问。</p><p>这是一个基于贪心算法的近似解法，不一定能够得到最优解。但是，在树结构中，这种贪心算法通常能够得到较好的结果。</p><p>算法遍历了整棵树，因此时间复杂度是$O(n)$。</p><p>如果在每个顶点都有一个权重时，贪心算法无法保证通过选择顶点使得相邻顶点不能被选择的方式获得最大的收益</p><p>贪心算法在每一步都做出局部最优的选择，但是在MWIS问题中，局部最优的选择未必能够得到全局最优解。选择一个顶点意味着排除其相邻的顶点，这种依赖关系使得设计一个能够保证最大收益的贪心算法变得困难。</p><p>为了在不能选择相邻顶点的情况下找到最大收益，通常需要其他方法，如动态规划或分支界限算法，这些方法可以探索所有可能的顶点组合以确定最优解。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>Scheduling to Minimize Weighted Completion Time</p><p>Input: A set of n jobs [n] :&#x3D; {1, 2, 3, · · · , n}, each job j has a weight wj and processing time $t_j$</p><p>Output: an ordering of jobs so as to minimize the total weighted completion time of jobs</p><p><img src="/imgs/sikao12/2.png"></p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>解决这道题目可以使用贪心算法，依照某种原则确定执行顺序，在规划工作集的最小权重完成时间时，采用单位时间权重确定优先级</p><h3 id="算法设计-1"><a href="#算法设计-1" class="headerlink" title="算法设计"></a>算法设计</h3><p>要使用贪心算法规划工作集的最小权重完成时间，可以按照以下步骤进行：</p><ol><li><p>定义工作集：给定一组工作，每个工作有一个处理时间和一个权重</p></li><li><p>排序工作：根据贪心原则，按照某种标准对工作进行排序。一种常见的排序方式是按照权重除以处理时间的比值进行非递增排序（即权重-处理时间比值越大，优先级越高）</p></li><li><p>创建工作计划：按照排序后的顺序，依次将工作分配给可用的时间槽或机器。可以使用一个变量来记录每个时间槽或机器的当前时间</p></li><li><p>计算加权完成时间：对于每个已安排的工作，计算其加权完成时间，即该工作的处理时间乘以其权重</p></li><li><p>计算总加权完成时间：将所有工作的加权完成时间相加，得到最终的总加权完成时间</p></li></ol><p>贪心算法的关键在于选择适当的排序标准，以便每次选择具有最高优先级的工作。然而，需要注意的是，贪心算法并不能保证获得最优解，但可以提供较好的近似解。对于更精确的解，可能需要使用其他算法，如动态规划或整数规划。</p><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*Scheduling to Minimize Weighted Completion TimeInput: A set of n jobs [n] :&#x3D; &#123;1, 2, 3, · · · , n&#125;, each job j has a weight wj and processing time tjOutput: an ordering of jobs so as to minimize the total weighted completion time of jobs*&#x2F;#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;struct Job &#123;    int id;    int weight;    int time;&#125;;void swap(Job&amp; a, Job&amp; b) &#123;    Job temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;void printjobs(vector&lt;Job&gt;&amp; jobs) &#123;    for (int i &#x3D; 0; i &lt; jobs.size(); i++) &#123;        cout &lt;&lt; jobs[i].id &lt;&lt; &quot; &quot; &lt;&lt; jobs[i].weight &lt;&lt; &quot; &quot; &lt;&lt; jobs[i].time &lt;&lt; endl;    &#125;&#125;void sortjobs(vector&lt;Job&gt;&amp; jobs) &#123;    for (int i &#x3D; 0; i &lt; jobs.size(); i++) &#123;        for (int j &#x3D; i + 1; j &lt; jobs.size(); j++) &#123;            if (jobs[i].weight &#x2F; jobs[i].time &lt; jobs[j].weight &#x2F; jobs[j].time) &#123;                swap(jobs[i], jobs[j]);            &#125;        &#125;    &#125;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    vector&lt;Job&gt; jobs(n);    for (int i &#x3D; 0; i &lt; n; i++) &#123;        cin &gt;&gt; jobs[i].weight &gt;&gt; jobs[i].time;        jobs[i].id &#x3D; i + 1;    &#125;    sortjobs(jobs);    printjobs(jobs);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本算法的时间复杂度是$O(n^2)$，改进优先级排序可以做到$O(nlog~n)$的时间复杂度</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 最大独立集 </tag>
            
            <tag> 最短完成时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题十一</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%B8%80/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>证明：图G中顶点$v_i$到顶点$v_j$之间长度为k的路径数量等于$A^k$的第(i,j)个元素，其中A是图G的邻接矩阵。</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><h3 id="证明k-x3D-1时成立"><a href="#证明k-x3D-1时成立" class="headerlink" title="证明k&#x3D;1时成立"></a>证明k&#x3D;1时成立</h3><p>取k&#x3D;1，显然图G中顶点$v_i$到顶点$v_j$之间长度为1的路径数量等于$A$的第(i,j)个元素，A为邻接矩阵</p><h3 id="假设k-x3D-m的时候成立"><a href="#假设k-x3D-m的时候成立" class="headerlink" title="假设k&#x3D;m的时候成立"></a>假设k&#x3D;m的时候成立</h3><p>假设k&#x3D;m时成立，即<br>$$<br>A^m&#x3D;(a^{m}<em>{ij})</em>{n*n}(i&#x3D;1-n,j&#x3D;1-n)<br>$$<br>矩阵中$a^{m}_{ij}$值等于图G中顶点$v_i$到顶点$v_j$之间长度为m的路径数量成立</p><h3 id="证明k-x3D-m-1时成立"><a href="#证明k-x3D-m-1时成立" class="headerlink" title="证明k&#x3D;m+1时成立"></a>证明k&#x3D;m+1时成立</h3><p>$$<br>A^{m+1}&#x3D;(a^{m+1}<em>{ij})</em>{n*n}(i&#x3D;1-n,j&#x3D;1-n)<br>$$</p><p>其中$a^{m+1}<em>{ij}&#x3D;\sum</em>{p&#x3D;1}^n(a^{m}<em>{ip}*a</em>{pj})$</p><p>已知$a^{m}<em>{ip}$数值等于顶点$v_i$到顶点$v_p$之间长度为m的路径数量，$a</em>{pj}$为顶点$v_p$到顶点$v_j$之间长度为1的路径数量，两者乘积为顶点$v_i$经顶点$v_p$到顶点$v_j$长度为m+1的路径数量，求和即为顶点$v_i$到顶点$v_j$之间长度为m+1的所有路径数量，因此k&#x3D;m+1时结论成立</p><p>至此，结论得证</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 邻接矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题十</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><strong>调研学习并给出矩阵的LU分解方法</strong></p><h3 id="矩阵的LU分解方法"><a href="#矩阵的LU分解方法" class="headerlink" title="矩阵的LU分解方法"></a>矩阵的LU分解方法</h3><h4 id="Doolittle分解"><a href="#Doolittle分解" class="headerlink" title="Doolittle分解"></a>Doolittle分解</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>数值分析中得到：</p><p>设<strong>A</strong>为$n*n$阶矩阵，如果<strong>A</strong>的顺序主子式$A_i$满足$det(A_i)\neq 0(i&#x3D;1,2,…,n-1)$，则<strong>A</strong>可分解为一个单位下三角矩阵<strong>L</strong>与一个上三角矩阵<strong>U</strong>的乘积，即<strong>A&#x3D;LU</strong>，且分解是唯一的</p><p>即<br>$$<br>\left(\begin{array}{cccc}<br>a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1 n} \<br>a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2 n} \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>a_{n 1} &amp; a_{n 2} &amp; \cdots &amp; a_{n n}<br>\end{array}\right)&#x3D;\left(\begin{array}{cccc}<br>1 &amp; &amp; &amp; \<br>l_{21} &amp; 1 &amp; &amp; \<br>\vdots &amp; \vdots &amp; \ddots &amp; \<br>l_{n 1} &amp; l_{n 2} &amp; \cdots &amp; 1<br>\end{array}\right)\left(\begin{array}{cccc}<br>u_{11} &amp; u_{12} &amp; \cdots &amp; u_{1 n} \<br>&amp; u_{22} &amp; \cdots &amp; u_{2 n} \<br>&amp; &amp; \ddots &amp; \vdots \<br>&amp; &amp; &amp; u_{n n}<br>\end{array}\right)<br>$$<br>由矩阵乘法可以得到u、l关系：<br>$$<br>\left{\begin{array}{l}<br>\boldsymbol{u}<em>{i j}&#x3D;\boldsymbol{a}</em>{i j}-\sum_{k&#x3D;1}^{i-1} \boldsymbol{l}<em>{i k} \boldsymbol{u}</em>{k j} \quad j&#x3D;\boldsymbol{i}: \boldsymbol{n} \<br>\boldsymbol{l}<em>{i j}&#x3D;\left(\boldsymbol{a}</em>{i j}-\sum_{k&#x3D;1}^{j-1} \boldsymbol{l}<em>{i k} \boldsymbol{u}</em>{k j}\right) &#x2F; \boldsymbol{u}<em>{j j} \quad \boldsymbol{i}&#x3D;\boldsymbol{j}+\mathbf{1}: \boldsymbol{n}<br>\end{array}\right.<br>$$<br>在计算机运算程序中，可以将两个三角矩阵按照紧凑格式存放在同一个矩阵中，节省存储空间（注意：主对角线上存储的是<strong>U</strong>矩阵上主对角线的元素，而<strong>L</strong>矩阵主对角线元素都为1，只要在运算中体现即可）：<br>$$<br>\left(\begin{array}{cccc}<br>\boldsymbol{u}</em>{11} &amp; \boldsymbol{u}<em>{12} &amp; \ldots &amp; \boldsymbol{u}</em>{1 n} \<br>\boldsymbol{l}<em>{21} &amp; \boldsymbol{u}</em>{22} &amp; \cdots &amp; \boldsymbol{u}<em>{2 n} \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>\boldsymbol{l}</em>{n 1} &amp; \boldsymbol{l}<em>{n 2} &amp; \cdots &amp; \boldsymbol{u}</em>{n n}<br>\end{array}\right)<br>$$</p><h5 id="Doolittle分解算法实现"><a href="#Doolittle分解算法实现" class="headerlink" title="Doolittle分解算法实现"></a>Doolittle分解算法实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Doolittle(double** a,int n,double** res)&#123;    for (int k &#x3D; 1; k &lt; n + 1; k++)&#123;for (int j &#x3D; k, i &#x3D; k + 1; j &lt; n + 1, i &lt; n + 1; j++, i++)&#123;double sum_1 &#x3D; 0;for (int t &#x3D; 1; t &lt; k; t++)&#123;sum_1 +&#x3D; res[k - 1][t - 1] * res[t - 1][j - 1];&#125;res[k - 1][j - 1] &#x3D; a[k - 1][j - 1] - sum_1;double sum_2 &#x3D; 0;for (int t &#x3D; 1; t &lt; k; t++)&#123;sum_2 +&#x3D; res[i - 1][t - 1] * res[t - 1][k - 1];&#125;res[i - 1][k - 1] &#x3D; (a[i - 1][k - 1] - sum_2) &#x2F; res[k - 1][k - 1];&#125;double sum_1 &#x3D; 0;for (int t &#x3D; 1; t &lt; k; t++)&#123;sum_1 +&#x3D; res[k - 1][t - 1] * res[t - 1][n - 1];&#125;res[k - 1][n - 1] &#x3D; a[k - 1][n - 1] - sum_1;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Crout分解"><a href="#Crout分解" class="headerlink" title="Crout分解"></a>Crout分解</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>与Doolittle分解类似的，将单位下三角矩阵<strong>L</strong>与一个上三角矩阵<strong>U</strong>的乘积替换成下三角矩阵<strong>L</strong>与一个单位上三角矩阵<strong>U</strong>的乘积，其实质上，是将<strong>U</strong>进一步分解为：</p><p><img src="/imgs/sikao10/1.png" alt="image-20230422212257389"></p><p>也被称为$LDL^T$分解</p><h5 id="Crout分解算法实现"><a href="#Crout分解算法实现" class="headerlink" title="Crout分解算法实现"></a>Crout分解算法实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Cout(double** a,int n,double** res)&#123;    for(int k&#x3D;0;k&lt;n;k++)      &#123;        &#x2F;&#x2F;同时计算L的第1到K列元素          for(int i&#x3D;k;i&lt;n;i++)          &#123;             res[i][k]&#x3D;a[i][k];             for(int j&#x3D;0;j&lt;&#x3D;k-1;j++)             res[i][k]-&#x3D;(res[i][j]*res[j][k]);          &#125;          &#x2F;&#x2F;同时计算U的第1到K行元素            for(int j&#x3D;k+1;j&lt;n;j++)          &#123;              res[k][j]&#x3D;a[k][j];              for(int i&#x3D;0;i&lt;&#x3D;k-1;i++)              res[k][j]-&#x3D;(res[k][i]*res[i][j]);              res[k][j]&#x2F;&#x3D;res[k][k];          &#125;      &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出方案计算可逆矩阵的逆</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="方法一：Gauss-Jordan消元法"><a href="#方法一：Gauss-Jordan消元法" class="headerlink" title="方法一：Gauss-Jordan消元法"></a>方法一：Gauss-Jordan消元法</h4><p>构造一个n*2n的增广矩阵$(A,I_n)$</p><p>然后使用高斯消元法，将增广矩阵的左半部分化为单位矩阵，得到的增广矩阵右半部分即为$(I_n,A^{-1})$</p><p>高斯消元法：</p><ul><li>对于一个矩阵A，我们从第1行到第n行不断选取第i列不为0的行，然后做一个行变换（交换两行，使得当前的第i行的第i列不为0）</li><li>然后将当前的第i行做一个初等变换，也就是都除以$A[i][i]$这样的话就能让第i行第i列变为1</li><li>将第i行下面的所有行的第i列全部消掉，此时就构成了一个上三角矩阵</li><li>此时已经构成了一个阶梯型矩阵，我们再从下往上不断将上半矩阵同理消掉即可</li></ul><p>算法：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void gauss()&#123;for(ll i &#x3D; 1;i &lt;&#x3D; n; ++i) &#123;&#x2F;&#x2F;枚举当前处理到第几列for(ll j &#x3D; i;j &lt;&#x3D; n; ++j) &#123;&#x2F;&#x2F;找到一个第i列不为空的行if(fabs(a[i][i]) &gt; EPS) &#123;for(ll k &#x3D; i;k &lt;&#x3D; n; ++k) &#x2F;&#x2F;交换i,j行swap(a[i][k],a[j][k]);break;&#125;&#125;if(fabs(a[i][i]) &lt; EPS) &#123;cout&lt;&lt;&quot;不存在逆矩阵&quot;&lt;&lt;endl;return ;&#125;&#x2F;&#x2F;这里就是将第i行下面所有行的第i列清空，变成一个阶梯型的矩阵double aii_inv &#x3D; 1.0&#x2F;a[i][i];&#x2F;&#x2F;将第i行都乘上a[i][i]的逆a[i][i] &#x3D; 1.0;for(ll j &#x3D; i + 1;j &lt;&#x3D; n ; ++j) &#123;a[i][j] &#x3D; a[i][j] * aii_inv;&#125;for(ll j &#x3D; 1;j &lt;&#x3D; n; ++j) &#123;b[i][j] &#x3D; b[i][j] * aii_inv;&#125;&#x2F;&#x2F;将第i行下面的所有第i列的元素值清空for(ll j &#x3D; i + 1;j &lt;&#x3D; n; ++j) &#123;for(ll k &#x3D; i + 1;k &lt;&#x3D; n; ++k) &#123;a[j][k] &#x3D; a[j][k] - a[i][k] * a[j][i];&#125;for(ll k &#x3D; 1;k &lt;&#x3D; n; ++k) &#123;b[j][k] &#x3D; b[j][k] - b[i][k] * a[j][i];&#125;a[j][i] &#x3D; 0.0;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>演示：</p><p><img src="/imgs/sikao10/2.png" alt="image-20230422221117595"></p><h4 id="方法二：LU分解法"><a href="#方法二：LU分解法" class="headerlink" title="方法二：LU分解法"></a>方法二：LU分解法</h4><p>LU分解法是高斯消元法的一种变种算法，根据上述定义，将矩阵<strong>A</strong>分解成一个下三角矩阵与一个上三角矩阵：<br>$$<br>A&#x3D;LU<br>\<br>A^{-1}&#x3D;U^{-1}L^{-1}<br>$$</p><h4 id="方法三：SVD分解法"><a href="#方法三：SVD分解法" class="headerlink" title="方法三：SVD分解法"></a>方法三：SVD分解法</h4><p>奇异值分解，将矩阵<strong>A</strong>分解为三个矩阵的乘积分别为：正交矩阵<strong>U</strong>、对角矩阵<strong>W</strong>、另一正交矩阵<strong>V</strong>的转置**$V^T$**<br>$$<br>A&#x3D;UWV^T<br>\<br>A^{-1}&#x3D;VW^{-1}U^T<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 矩阵LU分解 </tag>
            
            <tag> 矩阵的逆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题九</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B9%9D/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B9%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>对比分析折半查找与斐波那契查找的性能与应用场景</p><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><h4 id="折半查找介绍"><a href="#折半查找介绍" class="headerlink" title="折半查找介绍"></a>折半查找介绍</h4><p>本算法使用前提是静态查找表中的数据必须是有序的，定义两个指针low和high指向查找表的第一个元素和最后一个元素，指针mid指向处于low和high指针中间位置的元素，在查找过程中，每次都同mid指向的元素进行比较，在比较之后确定下一次比较的区间，重置low和high其中一个指针，在下一区间进行比较。</p><h4 id="折半查找算法的实现"><a href="#折半查找算法的实现" class="headerlink" title="折半查找算法的实现"></a>折半查找算法的实现</h4><h5 id="循环实现"><a href="#循环实现" class="headerlink" title="循环实现"></a>循环实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int BinarySearch_c(int array[], int n, int key) &#123;int low &#x3D; 0, high &#x3D; n;int mid;while (low &lt;&#x3D; high) &#123;mid &#x3D; (low + high) &gt;&gt; 1;if (key &lt; array[mid]) &#123;high &#x3D; mid - 1;&#125;else if (key &gt; array[mid]) &#123;low &#x3D; mid + 1;&#125;else &#123;return mid;&#125;&#125;return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int BinarySearch_r(int array[], int low, int high,int key) &#123;int mid &#x3D; (low + high) &gt;&gt; 1;if (key &lt; array[mid]) &#123;return BinarySearch_r(array, low, mid - 1, key);&#125;else if (key &gt; array[mid]) &#123;return BinarySearch_r(array, mid + 1, high, key);&#125;else &#123;return mid;&#125;return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="折半查找的性能及应用场景"><a href="#折半查找的性能及应用场景" class="headerlink" title="折半查找的性能及应用场景"></a>折半查找的性能及应用场景</h4><p>在有序表中，折半查找的效率比较高，折半查找每进行依次比较就能拍出表长度的一半，时间复杂度是$O(log_2n)$，如果查找表是无序的，先要将表进行排序，排序本身耗费的时间会比查找时间多，因此二分查找适用于一经建立就很少改动的线性表或者是静态有序数据集，二分查找不适合数据量太大或者太小的场景，数据量太大消耗太多的连续内存，数据量太小，其表现不如顺序查找。</p><h3 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h3><h4 id="斐波那契查找介绍"><a href="#斐波那契查找介绍" class="headerlink" title="斐波那契查找介绍"></a>斐波那契查找介绍</h4><p>斐波那契查找原理和二分查找相似，仅仅改变了中间结点的位置，在斐波那契查找算法中，mid位于黄金分割点附近，在斐波那契数列($F(k)&#x3D;F(k-1)+F(k-2),F(1)&#x3D;1,F(2)&#x3D;1$)中有结论：<br>$$<br>\lim\limits_{k\rightarrow\infty}F(k-1)&#x2F;F(k)&#x3D;\frac{\sqrt{5}-1}{2}<br>$$<br>本查找算法关键是找到mid的位置，在n&#x3D;F(k)情况下，mid&#x3D;low+F(k-1)-1，进行完一次查找后，排除其中一个区间，确定新的low和high区间。</p><h4 id="斐波那契查找算法实现"><a href="#斐波那契查找算法实现" class="headerlink" title="斐波那契查找算法实现"></a>斐波那契查找算法实现</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int FibSearch(int arr[], int key,int n) &#123;int low &#x3D; 0, high &#x3D; n - 1;int mid;int k &#x3D; 0;while (n &gt; Fibonacci(k) - 1)k++;while (low &lt;&#x3D; high) &#123;mid &#x3D; low + Fibonacci(k - 1) - 1;if (key &lt; arr[mid]) &#123;high &#x3D; mid - 1;k--;&#125;else if (key &gt; arr[mid]) &#123;low &#x3D; mid + 1;k -&#x3D; 2;&#125;else &#123;if (mid &lt;&#x3D; n - 1)return mid;elsereturn n - 1;&#125;&#125;return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="斐波那契查找算法性能及应用场景"><a href="#斐波那契查找算法性能及应用场景" class="headerlink" title="斐波那契查找算法性能及应用场景"></a>斐波那契查找算法性能及应用场景</h4><p>斐波那契查找算法是二分查找的一种改进算法，运用黄金比例的概念提高查询速率，但同样也是一种有序表查找算法，它的平均性能比折半查找好，但最坏情况下查找时间比折半查找长，虽然时间复杂度仍是$O(log~n)$，但是在斐波那契查找中，分割只需要用到加减法而不需要用到除法，虽然折半查找的除2可以用移位运算代替，对于大样本查找效率更高。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>调研学习Bloom过滤器的原理</p><h3 id="Bloom过滤器"><a href="#Bloom过滤器" class="headerlink" title="Bloom过滤器"></a>Bloom过滤器</h3><h4 id="Bloom-Filter介绍"><a href="#Bloom-Filter介绍" class="headerlink" title="Bloom Filter介绍"></a>Bloom Filter介绍</h4><p>Bloom Filter是1970年Bloom提出的一种数据结构，实际上是一个很长的二进制向量和一系列随机映射函数。Bloom过滤器可以用于检索一个元素是否在一个集合中。</p><h5 id="Bloom-Filter优点"><a href="#Bloom-Filter优点" class="headerlink" title="Bloom Filter优点"></a>Bloom Filter优点</h5><ul><li>时间复杂度低，增加、查询元素的时间复杂度为$O(N)$(N为哈希函数的个数)</li><li>保密性强，过滤器不存储元素本身</li><li>存储空间小</li></ul><h5 id="Bloom-Filter缺点"><a href="#Bloom-Filter缺点" class="headerlink" title="Bloom Filter缺点"></a>Bloom Filter缺点</h5><ul><li>存在一定的误判率</li><li>无法获取元素本身</li><li>很难删除元素</li></ul><h4 id="Bloom-Filter的使用场景"><a href="#Bloom-Filter的使用场景" class="headerlink" title="Bloom Filter的使用场景"></a>Bloom Filter的使用场景</h4><p>过滤器可以告知<strong>元素一定不存在或者可能存在</strong>，也就是说如果过滤器告知某元素可能存在，实际会有两种可能性，通过查阅资料查找到过滤器的使用场景</p><ul><li>解决Redis缓存穿透问题</li><li>邮件过滤</li><li>对爬虫网址进行过滤</li><li>解决重复出现元素问题</li></ul><h4 id="Bloom-Filter过滤器的原理"><a href="#Bloom-Filter过滤器的原理" class="headerlink" title="Bloom Filter过滤器的原理"></a>Bloom Filter过滤器的原理</h4><h5 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h5><p>一个很长的二进制向量+一系列随机映射函数</p><p>以Redis中的布隆过滤器实现为例：</p><p>一个大型位数组+多个无偏hash函数</p><h5 id="空间计算"><a href="#空间计算" class="headerlink" title="空间计算"></a>空间计算</h5><p>在布隆过滤器增加元素之前，首先需要初始化布隆过滤器的空间，也就是上面说的二进制数组，除此之外还需要计算无偏hash函数的个数。布隆过滤器提供了两个参数，分别是预计加入元素的大小n，运行的错误率f。布隆过滤器中有算法根据这两个参数会计算出二进制数组的大小l，以及无偏hash函数的个数k。<br>它们之间的关系比较简单：</p><ul><li>错误率越低，位数组越长，控件占用较大</li><li>错误率越低，无偏hash函数越多，计算耗时较长</li></ul><h5 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h5><p>往布隆过滤器增加元素，添加的key需要根据k个无偏hash函数计算得到多个hash值，然后对数组长度进行取模得到数组下标的位置，然后将对应数组下标的位置的值置为1</p><ul><li>通过k个无偏hash函数计算得到k个hash值</li><li>依次取模数组长度，得到数组索引</li><li>将计算得到的数组索引下标位置数据修改为1</li></ul><h5 id="查询元素"><a href="#查询元素" class="headerlink" title="查询元素"></a>查询元素</h5><p>布隆过滤器最大的用处就在于判断某样东西一定不存在或者可能存在，而这个就是查询元素的结果。其查询元素的过程如下：</p><ul><li>通过k个无偏hash函数计算得到k个hash值</li><li>依次取模数组长度，得到数组索引</li><li>判断索引处的值是否全部为1，如果全部为1则存在（这种存在可能是误判），如果存在一个0则必定不存在</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 布隆过滤器 </tag>
            
            <tag> 查找算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生指南</title>
      <link href="/2023/08/12/%E6%96%B0%E7%94%9F%E6%8C%87%E5%8D%97/"/>
      <url>/2023/08/12/%E6%96%B0%E7%94%9F%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="入学の准备"><a href="#入学の准备" class="headerlink" title="入学の准备"></a>入学の准备</h2><p>计算机学院的同学要在南校区度过三年，大四搬到校本部</p><h3 id="杂物篇"><a href="#杂物篇" class="headerlink" title="杂物篇"></a>杂物篇</h3><ol><li>携带录取通知书及告知需要的各项资料，可以直接装在通知书邮件信封里；</li><li>准备专用文件袋（卡包）装各种证件、银行卡；</li><li>各底色的证件照纸质版和电子版；</li><li>防晒霜（21级的学长学姐军训时长沙位于全国气温前列）和雨伞（笔者建议大伞和小伞都可以准备，小伞随身携带应急，大伞固定公寓预备）及常备药物；</li><li>尽量准备能够装入电脑的大背包（笔者是身背游戏本的勇士）以及只能装基本书籍的小背包，能够根据学习需求切换，毕竟中南的通勤时间有目共睹。</li></ol><h3 id="军训篇"><a href="#军训篇" class="headerlink" title="军训篇"></a>军训篇</h3><p>军训原则上来说是国庆过完开始军训，时长为三周，国庆过完之后气温已经不会很高了，但是还是需要做好防晒。</p><p>军训期间听从教官（教官是部队退役或自训营的<strong>学长学姐</strong>）指令，一般来说教官不会为难同学，但是<strong>出现出格行为不要因为成绩而忍耐，及时向辅导员反映</strong>！</p><p><del>听说隔壁兄弟学校曾经曝光过教官打人，涉事教官被处分</del></p><p><strong>军训也是算在加权成绩内的</strong>，所以军训也要好好表现，军训中间会有一次理论考试（区别于正常上课时的军事理论）需要好好准备；</p><blockquote><p>此外，军训成绩的方式不再是等级制 (即优、良等)，而是以具体成绩呈现，一般不会出现满分。<a href="%E3%80%8A%E6%96%B0%E7%94%9F%E5%BB%BA%E8%AE%AE%EF%BC%882023%E7%BA%A7%E5%AD%A6%E7%94%9F%E8%87%AA%E7%BC%96%E7%89%88%EF%BC%89%E3%80%8B%EF%BC%8C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%8D%8F%E4%BC%9A%E5%B9%B2%E4%BA%8B%E5%9B%A2%E9%98%9F">^1</a></p></blockquote><p>由于军训在开学一个月以后，班委集体已经建立起来了，不出意外，军训负责人应该就是班长和团支书了。</p><h2 id="日常生活"><a href="#日常生活" class="headerlink" title="日常生活"></a>日常生活</h2><h3 id="衣"><a href="#衣" class="headerlink" title="衣"></a>衣</h3><p>行李中装上较多的夏装，由于长沙的春秋比较短，不用装过多的秋装，冬装准备应急用的就可以了，即将入冬的时候从老家邮寄过去就行了（快递点将在后文进行介绍），以上操作不会造成衣物占据行李箱的较大容积的情况（仅为笔者建议，笔者的开学行李包括一大一小两只行李箱+一个包，以上建议依据个人需求选择）；</p><p>到了冬天一定要<strong>备足过冬衣物</strong>，长沙的冬天在体感上会比气温冷亿点点</p><p>此外如果有帽子记得带上（长沙的阳光格外的灿烂），要把运动鞋（体育课及课外跑步打卡）休闲鞋带上，拖鞋视情况而定（长沙阴晴不定，笔者已经在通勤路上湿身多次了），根据个人的需求及行李箱空间选配；</p><p>当然，长沙的天气较潮湿，所以笔者的建议是<strong>到校后买衣架将衣服挂起来，然后在横杆上挂上除湿袋，</strong>笔者亲测：衣柜里的除湿袋在两周左右就会失去吸湿效果。</p><h3 id="食"><a href="#食" class="headerlink" title="食"></a>食</h3><p>来到星城，少不了的是美食，整个长沙市的美食在此就不过多赘述，等待自己去探索。</p><p>本文基于中南大学及整个岳麓大学城周边进行描述。</p><p>中南大学的食堂是挺多的，在南校区就有三座食堂：二食堂、七食堂和八食堂。</p><ul><li><p>二食堂共有四层，一楼为小吃层，二楼三楼就是基本的饭菜，四楼有自选餐厅和清真餐厅，还有几个笔者不曾尝试、很少有人问津的小餐厅。至于七食堂和八食堂，笔者探访的比较少，大概知道八食堂的选择可能更加丰富，七食堂也是基本的饭菜。此外，还有校本部的三五食堂、教工食堂（均比较远），味道尚可，可以尝试。总的来说<strong>不会太辣，但是挺油</strong>。</p></li><li><p>中南大学的教学区与生活区较远，所以在平时上课期间，有可能会来不及赶回南校吃饭，就在新校区对付对付，选择有 B座架空层食堂、BC座之间盒饭售卖点、图书馆侧方盒饭售卖点，以及在图书馆背侧的二十四食餐厅，<strong>感觉一般</strong></p><p><del>据说新校已经在修新食堂了，但是不知道什么时候能够吃上新食堂的饭菜</del></p></li><li><p>以上部分皆是学校后勤部门提供的餐食，其二选择就是<strong>后湖小区</strong>（从新校A座大门出门左转）。后湖小区的店在广大中南学子的检验下卫生能够保证，价格公道。后湖小区里的店还挺多的，后湖的店等着各位自己去探！</p></li></ul><h3 id="住"><a href="#住" class="headerlink" title="住"></a>住</h3><p>不出意外，大一新生应该都是住在南校区（升华学生公寓）</p><p><img src="/imgs/xinshengjianyi/2.jpg" alt="img"></p><p> 升华的配置是四人一间，两寝共用一个阳台，上床下桌，独卫（无热水），每层有大淋浴间（独立单间，热水，<strong>17：30-24：00供应</strong>），24小时水电网（但是可能不定时停水，及时关注宿舍群），有空调（需要另外租赁)，宿舍门有校园卡刷卡门锁，宿舍大门有门禁，23：30准时关门。需要注意的是宿舍电费需要宿舍四人承担，及时充值，线上充值时间为<strong>5：00-23：00</strong></p><p><img src="/imgs/xinshengjianyi/1.jpg" alt="img"></p><p>床位的分配应当是先到先得。床铺尺寸2*0.9（单位：米)，笔者建议<strong>自备寝具</strong>，学校售卖的寝具质量不佳。</p><p>图为笔者选择的床位（②）</p><p>床上建议配上<strong>带有床帘的蚊帐</strong>，一方面能够遮挡外部光源（有一部分同学喜欢熬大夜学习或者…），另一方面能够给自己创造一部分隐私空间。</p><p>在与天南海北的室友见面后，要及时地建立寝室公约：</p><ol><li><strong>约定一个DDL，到了那个时间一定要关掉所有灯光，准备休息</strong>（尽量不晚于24：00，笔者认为深夜学习效率不高，充足的休息能够提高学习效率）；</li><li><strong>及时打扫寝室卫生</strong>（这点非常重要！！！笔者大一的宿舍卫生状况极好，但是在分流搬宿舍之后，搬到的那个寝室简直是…俄乌战场都没那惨烈，我们四个同学都还爱干净，搞了两天卫生才清理干净）；</li><li><strong>注意个人卫生，及时清洗个人衣物</strong>（宿舍一楼有公共洗衣机，但是不推荐使用，尤其是私人直接接触皮肤衣物，一定使用建议<strong>加入消毒液一起清洗</strong>；另宿舍条约规定<em><strong>禁止使用大功率电器</strong></em>，21级开始查洗衣机比较严，所以四人合购洗衣机的事情还要开学后再观望观望）</li></ol><h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><p>新生出站应该就有中南大学志愿者手持引导牌接站，只需跟着他们就可以做中南大学的班车抵达中南大学新校区报道点，然后就有相应公寓楼栋志愿者分流引导新生到各自宿舍。</p><p>生活区与教学区相去甚远，因此需要代步工具（除非有强身健体的需求），具体有以下选择：</p><ol><li><strong>电瓶车</strong>，速度快，但是行车风险较大，且外出<strong>骑车必须佩戴头盔</strong>，路上会有交警叔叔检查，同时充电不方便，学校有效充电桩数量较少（切记：<strong>禁止携带电瓶车电瓶进入宿舍充电</strong>，在2021学年春季学期曾经有一位同学将电池带入宿舍充电，然后电瓶起火了，所以<strong>如果看到有同学将电瓶带入宿舍，及时点点举报</strong>）；</li><li><strong>自行车</strong>，这个为笔者的选择，节能环保，速度不慢且安全性更高，是性价比较高的选择；</li><li><strong>共享单车</strong>，学校共享电瓶车较少，自行车居多，而且需要拼手速抢车，建议月卡；</li><li><strong>公交车或学校班车</strong>；</li></ol><p><strong>学校原则上是禁摩的</strong>，22学年春季学期在新校区就出过事故，有一位优秀的学长不幸去世，所以防护措施要做好</p><p>平时出去游玩可以靠导航，在此就不作赘述。</p><h3 id="快递点"><a href="#快递点" class="headerlink" title="快递点"></a>快递点</h3><ol><li>南校区菜鸟驿站（分东西两区）分别位于十二栋底层东侧和西侧；</li><li>南校区顺丰收件处位于十二栋底层东侧（东菜鸟背面）；</li><li>南校区京东代收点位于教工16栋小蜜蜂智慧服务中心；</li><li>南校区中国邮政驿站位于七栋底层南侧；</li></ol><p>南校区寄件地址：<strong>湖南省长沙市岳麓区清水路中南大学升华学生公寓XX栋。</strong></p><h3 id="校园网"><a href="#校园网" class="headerlink" title="校园网"></a>校园网</h3><ol><li>南校区升华学生公寓内WiFi信号全网全覆盖，同一学工号最多同时在线3台设备，但是需要绑定校园网电话卡号（？存疑），属于长沙号码，校园电话卡移动电信联通各有优劣，可以联系同院学长学姐了解（<em><strong>敲门进入公寓推销电话卡的一定要提高警惕，可能会是诈骗，会存在学长学姐代理电话卡业务的现象，并且相比于营业厅会有一定优惠，但一定要仔细鉴别，若想认购一定要知根知底，并保存好聊天证据</strong></em>）</li><li>新校区教室、图书馆覆盖名为CSU-WiFi、CSU-Student的无线网络用学工号和信息门户登录密码登录即可，免费使用，同一学工号最多同时在线两台设备，在该IP（包括宿舍无线网）下能够通过校内登录使用“中国知网”“万方”“维普”等期刊论文数据库（亦可通过校外登录）</li></ol><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="学习前的准备"><a href="#学习前的准备" class="headerlink" title="学习前的准备"></a>学习前的准备</h3><p>关于设备方面的配置我不做推荐，需要自己衡量利弊</p><p>但是需要一些有用的链接：</p><ol><li><p><a href="http://libdb.csu.edu.cn/reslist">中南大学图书馆-数据库导航系统 (csu.edu.cn)</a></p><p>中南大学购买过相关的文献库，登陆账号是用内网就可以进行使用</p></li><li><p><a href="http://csujwc.its.csu.edu.cn/">中南大学教务系统 (csu.edu.cn)</a></p><p>这个不必多说</p></li><li><p><a href="https://ms.csu.edu.cn/">中南大学正版软件管理与服务平台 (csu.edu.cn)</a></p></li></ol><h3 id="课内学习"><a href="#课内学习" class="headerlink" title="课内学习"></a>课内学习</h3><p>声明：本文将不会对具体课程给出相关建议</p><p>大学一门课最终修读成绩与高中完全不一样，其包括<strong>期末成绩和平时成绩</strong>，在大学生圈子里流传很广的“老师 菜菜 捞捞”中的“捞”基本上就是老师在平时成绩上拉你一把。大学的计分方式要求<strong>大学生不仅要认真准备期末考试，还要注重平时的考勤、上课表现、作业提交</strong>。关于平时分的具体问题，将在后文展开讲解。</p><p>与一些高校的绩点制不同，中南大学直接采用加权制体现学生成绩：</p><blockquote><ol><li><strong>加权平均分&#x3D;$\Sigma$(课程成绩X课程学分)$&#x2F;\Sigma$课程学分</strong><a href="%E3%80%8A%E5%85%B3%E4%BA%8E%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8A%A0%E6%9D%83%E5%B9%B3%E5%9D%87%E6%88%90%E7%BB%A9%E8%AE%A1%E7%AE%97%E7%9A%84%E8%AF%B4%E6%98%8E%E3%80%8B">^2</a></li><li>课程初修成绩合格，取初修成绩计算（不同课目期末成绩和平时成绩占比不同）；</li><li>课程初修成绩不合格，有效成绩&gt;&#x3D;60，按60分计算；</li><li>课程初修成绩不合格，有效成绩不合格，取最高成绩计算；</li><li>各种政策加分不计算；</li><li>课程初修缓考，后一学期无成绩该课程比计算，录入成绩按初修计算；</li><li>课程考核成绩采用五级制的折算办法：</li></ol><table><thead><tr><th align="center">五级制</th><th align="center">优秀</th><th align="center">良好</th><th align="center">中等</th><th align="center">及格</th><th align="center">不及格</th></tr></thead><tbody><tr><td align="center">折算分</td><td align="center">95</td><td align="center">85</td><td align="center">75</td><td align="center">65</td><td align="center">0</td></tr></tbody></table></blockquote><p>不同课目的不同标准要求学生不仅要争取更高的期末成绩，还要在平时与老师搞好关系，尽量<strong>给老师留下深刻（良好）的印象</strong>，不然老师只会给你一个平庸的平时分，对于一些有更高追求的同学这显然是不够的。当然对于一些能在期末拿到满分的课目来说，这一点不一定，只要在期末拿到相当高的分数，老师就会拉满平时分。</p><p>此外，不能把希望完全寄托在平时分上，关于总评还有一条不成文规定：存在一条斩杀线（<strong>比及格线低</strong>），如果期末成绩未达到，那么老师也不会“海底捞”，如高等数学、大学英语的“斩杀线”就是45分。</p><h3 id="自习场所"><a href="#自习场所" class="headerlink" title="自习场所"></a>自习场所</h3><p>众所周知，所谓大学（<del>大不了自学</del>），其精髓在于“自学”。</p><ol><li><p>图书馆；</p><p>从22年春季学期开始，图书馆恢复疫情之前的双排座椅，因此图书馆的座位变多了，但是变得拥挤了，同时学习的时候对面还有人（社恐犯了）</p></li><li><p>教学楼；</p><p>教学楼教室只要在没有课的情况下就可以自习，当然在教学楼也会有每日的自习教室公布在黑板上；不推荐D座教室，因为D座比较偏僻，又靠近情人坡人比较少，所以<del>在那边自习可能会遇见一些奇奇怪怪的事情</del>；A座东侧教室基本上都是工程制图教室，一般在里面画图；教室自习的缺点是有人可能会不太守规矩讲话，会有情侣放飞自我，而且在没有课的时间空调是不开放的，所以夏天的教室就像蒸笼一样，学习效率不高；</p></li><li><p>知新馆</p><p>这一自习场所笔者基本没有去过，笔者不太了解，据笔者所知，该馆的座位是先到先得，且位置不多，但环境尚可；</p></li><li><p>校外自习室</p><p>校外自习室好像是可以通宵学习（？），但是<em><strong>夜不归宿一定要向寝室长报备且报告辅导员</strong></em>，而且笔者不推荐通宵学习，笔者认为该种学习方式效率低下，充足的睡眠能够更专注的学习（仅为个人观点，不喜勿喷）；</p></li><li><p>宿舍</p><p>此为笔者最不推荐的自习场所，因为宿舍环境过于安逸，目光可及之处就有分心之物，不利于专注学习。</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新生建议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT生成内容鉴别的实现</title>
      <link href="/2023/08/06/ChatGPT%E7%94%9F%E6%88%90%E5%86%85%E5%AE%B9%E9%89%B4%E5%88%AB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/06/ChatGPT%E7%94%9F%E6%88%90%E5%86%85%E5%AE%B9%E9%89%B4%E5%88%AB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://challenge.xfyun.cn/topic/info?type=text-detector&option=phb">ChatGPT生成文本检测器</a></p><p>友情链接：<a href="https://datawhaler.feishu.cn/docx/OQjWdEuAZo2nTSxHmT6crhZ2nmf">Datawhale-NLP实践</a></p><p>项目地址：<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project</a></p><h2 id="跑通一个baseline"><a href="#跑通一个baseline" class="headerlink" title="跑通一个baseline"></a>跑通一个baseline</h2><p>这次的baseline使用<strong>手工确定提取文本特征</strong>，在第四点中有体现</p><ol><li><p><strong>导入库</strong>：开始时导入必要的库，包括numpy、pandas和scikit-learn的LogisticRegression。</p></li><li><p><strong>加载数据</strong>：加载两个CSV文件——‘train.csv’和’test.csv’，并分别存储在pandas的DataFrame ‘train_data’和’test_data’中。</p></li><li><p><strong>数据预处理</strong>：对’train_data’和’test_data’的’content’列应用了一些预处理步骤。它使用lambda函数从’content’列中的每个字符串中移除第一个和最后一个字符，也就是移除“[”和“]”</p></li><li><p><strong>特征工程</strong>：定义一个名为’simple_feature(s)’的函数，它接受一个字符串’s’作为输入，并基于输入字符串的特性返回一个numpy数组作为特征，特征都是人为的选取所以效果并不是特别好这些特征包括：</p><ul><li>原始字符串的长度。</li><li>字符串中字符的数量。</li><li>字符串中唯一字符的数量。</li><li>字符串中重复字符的数量。</li><li>唯一字符数占总字符数的比例。</li><li>字符串中字符频率的最大值。</li><li>字符串中字符频率的最小值。</li><li>字符串中字符频率的平均值。</li><li>字符串中字符频率的标准差。</li><li>字符串中字符频率的极差（最大值与最小值之间的差值）。</li></ul></li><li><p><strong>生成训练和测试特征</strong>：使用<code>apply</code>方法将’simple_feature’函数应用于’train_data’和’test_data’的’content’列中的每个字符串。得到的特征被垂直堆叠以创建numpy数组’train_feature’和’test_feature’。</p></li><li><p><strong>模型训练</strong>：通过调用scikit-learn的<code>LogisticRegression()</code>来初始化一个逻辑回归模型’m’。然后，使用<code>fit</code>方法将训练特征’train_feature’和’train_data’中对应的’label’列用于训练模型。</p></li><li><p><strong>进行预测</strong>：训练好的模型使用<code>predict</code>方法对测试数据进行预测，得到测试集的标签。</p></li><li><p><strong>将结果保存为CSV</strong>：将预测的标签添加到’test_data’的’label’列中，然后创建一个只包含’name’和’label’列的新DataFrame。最后，将这个DataFrame保存为名为’simple.csv’的CSV文件，可以用于提交或进一步分析。</p></li></ol><p>baseline跑出来的分数中规中矩，只有0.85+，还需要进行调整</p><p>详细见附录</p><h2 id="冲榜尝试，upper的产生"><a href="#冲榜尝试，upper的产生" class="headerlink" title="冲榜尝试，upper的产生"></a>冲榜尝试，upper的产生</h2><p>upper基于TF-IDF，简单了解一下TF-IDF</p><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>TF-IDF (Term Frequency-Inverse Document Frequency) 是一种在文本挖掘和信息检索中常用的特征表示方法，用于衡量一个词语对于一个文档集合中某个文档的重要程度。</p><p>TF-IDF 特征由两部分组成：Term Frequency (TF) 和 Inverse Document Frequency (IDF)。</p><ol><li><p>**Term Frequency (TF)**：指定词语在文档中出现的频率。它表示一个词在文档中的重要程度。一般情况下，一个词在文档中出现的次数越多，它对文档的内容表达越重要。</p><p>TF &#x3D; (词语在文档中出现的次数) &#x2F; (文档中总词语数)</p></li><li><p>**Inverse Document Frequency (IDF)**：指定词语在整个文档集合中的重要程度。它是通过对所有文档计算某个词的出现频率，然后取其倒数来计算的。IDF 的目的是降低在多个文档中频繁出现的常见词的权重，增加对于少数文档中出现但对于整个文档集合较为重要的词的权重。</p><p>IDF &#x3D; log(文档集合中的文档总数 &#x2F; 含有该词的文档数 + 1)</p></li></ol><p>最终的 TF-IDF 特征是将 TF 和 IDF 相乘得到的。TF-IDF 特征考虑了一个词在当前文档中的重要性（TF），以及它在整个文档集合中的全局重要性（IDF）。因此，TF-IDF 特征能够在文本分类和信息检索任务中更好地捕捉每个词在文档中的信息价值，从而在构建特征表示时更好地区分不同的文档。</p><h3 id="upper的思路"><a href="#upper的思路" class="headerlink" title="upper的思路"></a>upper的思路</h3><ol><li><p><strong>导入库</strong>：开始时导入所需的库，包括pandas、sklearn的LogisticRegression类、TfidfVectorizer类以及一些评估指标相关的库。</p></li><li><p><strong>加载数据</strong>：加载两个CSV文件——‘train.csv’和’test.csv’，并将它们分别存储在pandas的DataFrame ‘train_data’和’test_data’中。</p></li><li><p><strong>数据预处理</strong>：对’train_data’和’test_data’的’content’列应用了一些预处理步骤。它使用lambda函数从’content’列中的每个字符串中移除第一个和最后一个字符。</p></li><li><p><strong>TF-IDF特征提取</strong>：</p><ul><li>使用TfidfVectorizer类来将文本内容转换为TF-IDF向量表示。</li><li>尝试了三种不同的TF-IDF参数设置：<ul><li>第1种参数：token_pattern&#x3D;r’\w{1}’，max_features&#x3D;2000。token_pattern指定了用于提取词语的正则表达式，r’\w{1}’表示提取长度为1的单词。max_features设置为2000表示最多选择2000个最重要的特征词。</li><li>第2种参数：token_pattern&#x3D;r’\w{1}’，max_features&#x3D;5000。max_features设置为5000表示最多选择5000个最重要的特征词。</li><li>第3种参数：token_pattern&#x3D;r’\w{1}’，max_features&#x3D;5000，ngram_range&#x3D;(1,2)。ngram_range&#x3D;(1,2)表示同时提取单个词和二元（两个词）的组合作为特征。</li></ul></li><li>对于每种参数设置，分别将训练集和测试集的文本内容转换为TF-IDF向量表示。</li></ul></li><li><p><strong>模型训练和评估</strong>：</p><ul><li>对于每种TF-IDF参数设置，使用交叉验证（cross_val_predict）对逻辑回归模型进行评估，以得到更稳定的性能评估结果。</li><li>使用<code>cross_val_predict</code>方法对训练集的TF-IDF向量和对应的标签进行交叉验证预测，然后通过classification_report函数输出分类结果的评估报告，包括精确度、召回率、F1-score等指标。</li></ul></li><li><p><strong>模型训练和预测</strong>：</p><ul><li>选择其中一种TF-IDF参数设置（这里使用第3种参数）来训练逻辑回归模型。</li><li>使用训练好的模型对测试集的TF-IDF向量进行预测，并将预测结果保存在’test_data’的’label’列中。</li></ul></li><li><p><strong>保存结果为CSV文件</strong>：</p><ul><li>将测试集的’name’和’label’列保存为名为’tfidf.csv’的CSV文件，用于后续的提交或分析。</li></ul></li></ol><p>总体来说，使用TF-IDF特征提取方法和逻辑回归模型进行文本分类任务，并通过交叉验证来评估模型的性能。通过尝试不同的TF-IDF参数设置，可以找到最佳的特征提取策略，以获得更好的分类结果。</p><p>对于upper，冲榜的分数能够达到0.91+，但是这还不够，可以考虑之前使用过的BERT模型进行分类</p><p>详细代码见附录</p><p>后续尝试方向：</p><ul><li>调用BERT模型进行鉴别</li><li>调用大模型进行鉴别</li></ul><h2 id="使用BERT模型进行分类"><a href="#使用BERT模型进行分类" class="headerlink" title="使用BERT模型进行分类"></a>使用BERT模型进行分类</h2><p>简单了解一下BERT模型</p><h3 id="BERT模型"><a href="#BERT模型" class="headerlink" title="BERT模型"></a>BERT模型</h3><p>BERT（Bidirectional Encoder Representations from Transformers） 是一种预训练的自然语言处理模型，由Google研发并于2018年发布。BERT采用了<strong>Transformer网络结构</strong>，通过大规模无监督训练从而学习到单词或字符级别的语言表示。相比于传统的基于循环神经网络的模型，BERT采用了双向编码器（Bidirectional Encoder）的思想，可以同时利用上下文中的信息来理解单词的语义和含义。</p><p>BERT的预训练过程分为两个阶段：<strong>Masked Language Model（MLM）</strong>和<strong>Next Sentence Prediction（NSP）</strong>。在MLM阶段，BERT会随机遮盖输入文本中的部分单词，并尝试预测这些遮盖的单词是什么。在NSP阶段，BERT会输入两个句子，并预测这两个句子是否是连续的。</p><p>预训练后，BERT可以通过微调（Fine-tuning）的方式在特定任务上进行训练，例如文本分类、命名实体识别等。通过微调，BERT可以根据不同任务的数据进行适应性学习，提取有关任务的上下文相关特征，从而更好地完成特定的自然语言处理任务。</p><p>BERT的出现填补了自然语言处理领域在预训练模型上的空白，它在多个基准数据集上取得了显著的性能提升，并且对于多种自然语言处理任务都具有泛化能力。BERT的成功也促进了许多后续的预训练模型的发展，为自然语言处理的研究和应用提供了重要的推动力。</p><p>BERT模型的结构主要由Transformer网络组成，它由多个编码器层叠加而成。每个编码器层由两个子层组成，分别是多头自注意力机制（Multi-Head Self-Attention）和前馈神经网络（Feed-Forward Neural Network）。下面我们逐步解释BERT模型的结构和各个组件的作用。</p><ol><li><p>输入表示：BERT的输入表示采用了词嵌入和位置编码的结合。首先，对输入的文本进行分词处理，然后将每个分词映射为一个固定维度的词向量。位置编码会为每个词向量附加一个位置信息，以捕捉单词在句子中的相对位置关系。</p></li><li><p>编码器层：BERT模型通常包含多个相同结构的编码器层，每个编码器层都由两个子层组成。</p><ul><li>多头自注意力机制（Multi-Head Self-Attention）：在这个子层中，输入的序列经过一系列的自注意力计算，从而学习到每个单词与其他单词之间的相互作用和关联。通过引入多个注意力头，可以并行地学习多个表示，增加模型的泛化能力。</li><li>前馈神经网络（Feed-Forward Neural Network）：在这个子层中，每个位置的隐藏表示会经过两层全连接网络进行非线性变换，增强模型的表示能力。前馈神经网络采用了激活函数（如ReLU）来引入非线性。</li></ul></li><li><p>预训练目标：</p><ul><li>遮盖语言模型（Masked Language Model，MLM）：BERT采用遮盖部分输入单词的方式，然后通过预测被遮盖单词的方式进行训练。这使得模型能够学习到单词之间的上下文信息，从而更好地理解句子。</li><li>下一句预测（Next Sentence Prediction，NSP）：BERT的预训练还包括判断两个句子之间是否连续的任务。通过这个任务，模型可以学习到句子之间的语义关系和连接方式。</li></ul></li></ol><p>BERT模型的核心思想是通过大规模的无监督预训练，学习到通用的句子表示，然后通过微调的方式在具体任务上进行训练。预训练过程使得BERT模型具备了更好的语义理解能力和句子关系建模能力，从而在各种自然语言处理任务中取得了显著的性能提升。</p><h3 id="BERT的思路"><a href="#BERT的思路" class="headerlink" title="BERT的思路"></a>BERT的思路</h3><p>关于使用BERT模型，之前的<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project: Text classification and keyword extraction based on abstracts</a>已经实现过，基于BERT模型判断文本是否属于医学论文，也就是说可以依靠原有代码，在原有代码的基础上进行相关改动就可以实现了，关于BERT模型进行文本分类脚本的实现，可以在《<a href="https://jiang-wu-19.github.io/2023/07/30/upper%E7%9A%84%E5%AE%9E%E7%8E%B0/">upper的实现 | J&amp;Ocean BLOG</a>》这篇blog中进一步了解</p><p>BERT模型的训练可以在本地实现，考虑到笔者的配置有限，将batch_size设置为10，运行时只需要使用3.8G的显存。</p><p>BERT跑出来的结果还不错，高于原有的进阶分数，达到0.93+</p><h2 id="不死心，仍要使用大模型的API"><a href="#不死心，仍要使用大模型的API" class="headerlink" title="不死心，仍要使用大模型的API"></a>不死心，仍要使用大模型的API</h2><p>事实证明，API最多只能回答一些生成式的问题，也许是API背后的模型是综合类型的，并没有经过二分类的fine-tune，代码确实写好了，但是由于鉴别的文本相当冗长，每进行一次request耗费大量的tokens还有时间</p><p><del>对API的调用感兴趣的可以看一看失败的的代码</del></p><h2 id="选择ernie模型，取得阶段性小胜利"><a href="#选择ernie模型，取得阶段性小胜利" class="headerlink" title="选择ernie模型，取得阶段性小胜利"></a>选择ernie模型，取得阶段性小胜利</h2><p>使用paddle框架和ernie模型</p><h3 id="paddlepaddle和"><a href="#paddlepaddle和" class="headerlink" title="paddlepaddle和"></a>paddlepaddle和</h3><p>PaddlePaddle（百度飞桨）是百度开发的开源深度学习框架，旨在为科研人员和工程师提供高效、灵活、全面的深度学习平台。它在深度学习领域具有广泛的应用，特别在自然语言处理、计算机视觉、语音识别等领域表现出色。以下是PaddlePaddle框架的一些关键特点和组成部分的简要介绍：</p><ol><li><p><strong>动态图和静态图支持</strong>：PaddlePaddle支持动态图和静态图两种计算模式。动态图适用于快速原型设计和交互式调试，而静态图则可以优化计算图以提高性能和效率。</p></li><li><p><strong>高性能优化</strong>：PaddlePaddle针对多种硬件和平台进行了高性能优化，包括CPU、GPU、FPGA等。它采用了诸如自动混合精度、异步数据加载等技术，以提高训练和推理的速度。</p></li><li><p><strong>多样的模型库和工具</strong>：PaddlePaddle提供了丰富的预训练模型和模型库，涵盖自然语言处理、计算机视觉、推荐系统等多个领域。同时，它还提供了数据处理、模型评估、可视化等一系列工具，方便用户进行全面的深度学习任务。</p></li><li><p><strong>易用性和灵活性</strong>：PaddlePaddle设计了简单易用的API，使得初学者可以快速上手。同时，它也提供了灵活的自定义功能，以满足高级用户的需求。</p></li><li><p><strong>分布式训练和部署</strong>：PaddlePaddle支持分布式训练，可以在多个机器和设备上并行进行训练。此外，它还提供了模型转换和部署工具，使模型部署更加便捷。</p></li><li><p><strong>自然语言处理工具包</strong>：PaddlePaddle自然语言处理工具包（PaddleNLP）为处理文本数据提供了丰富的功能，包括预训练模型、分词、命名实体识别、文本分类等。</p></li><li><p><strong>社区支持和文档</strong>：PaddlePaddle有活跃的社区，提供了丰富的教程、文档和示例代码，帮助用户更好地了解和使用框架。</p></li></ol><h3 id="paddleNLP"><a href="#paddleNLP" class="headerlink" title="paddleNLP"></a>paddleNLP</h3><p>PaddleNLP是百度飞桨（PaddlePaddle）深度学习框架的自然语言处理（NLP）工具包，专门为处理文本数据和解决自然语言处理问题而设计。它提供了丰富的预训练模型、数据处理工具和任务特定的API，使得NLP任务的开发和研究更加便捷和高效。以下是PaddleNLP的一些主要特点和组成部分的简要介绍：</p><ol><li><p><strong>预训练模型库</strong>：PaddleNLP提供了丰富的预训练模型，包括BERT、ERNIE、RoBERTa、GPT等。这些模型在大规模文本数据上进行预训练，可以用于多种NLP任务的迁移学习和微调。</p></li><li><p><strong>任务特定API</strong>：PaddleNLP为常见的NLP任务（如文本分类、序列标注、句子对匹配等）提供了专门的API接口，使得模型的训练和评估变得更加简单。开发者可以直接使用这些API来完成各种任务，无需从头开始构建模型。</p></li><li><p><strong>分词和数据处理工具</strong>：PaddleNLP提供了强大的分词和数据处理工具，用于将原始文本数据转换为模型可以处理的格式。这些工具支持中文、英文等多种语言，帮助用户有效地准备数据集。</p></li><li><p><strong>模型可解释性工具</strong>：PaddleNLP还提供了模型可解释性工具，可以帮助用户理解模型的预测结果，分析哪些部分影响了模型的决策。</p></li><li><p><strong>多语言支持</strong>：PaddleNLP支持多种语言，包括中文和英文，使其适用于全球范围的NLP研究和应用。</p></li><li><p><strong>与PaddlePaddle集成</strong>：PaddleNLP与PaddlePaddle深度学习框架无缝集成，用户可以直接将PaddleNLP的模型和功能与PaddlePaddle的其他组件结合使用。</p></li></ol><h3 id="Ernie模型"><a href="#Ernie模型" class="headerlink" title="Ernie模型"></a>Ernie模型</h3><p>ERNIE（Enhanced Representation through kNowledge IntEgration）是一种基于Transformer架构的预训练语言模型，由百度研究团队开发。ERNIE的网络架构与Transformer的基本结构类似，但在细节上进行了一些创新和改进，以适应多领域、多语种的知识融合。以下是ERNIE模型的网络架构的简要介绍：</p><ol><li><p><strong>Transformer基本结构</strong>：ERNIE模型采用了Transformer架构，它由多个编码器层和解码器层组成。每个编码器和解码器层包含自注意力机制和前馈神经网络。自注意力机制有助于模型捕捉输入序列中不同位置之间的依赖关系。</p></li><li><p><strong>多头注意力</strong>：类似于Transformer，ERNIE的注意力机制也采用了多头注意力。这使得模型可以在不同的注意力头上并行学习不同的信息，从而更好地捕捉序列中的各种关系。</p></li><li><p><strong>连续字词表示</strong>：ERNIE引入了连续字词表示，对于中文等没有明确分词边界的语言尤为重要。它通过将字母、音节等形式进行建模，以更好地捕获复杂的语言结构。</p></li><li><p><strong>双向语言模型预训练</strong>：ERNIE使用了双向语言模型（Bidirectional Language Model，BiLM）进行预训练。这意味着模型在预测当前词语时，可以利用前面和后面的词语信息，从而获得更好的上下文表示。</p></li><li><p><strong>多领域、多语种知识融合</strong>：ERNIE的创新之一是将多领域、多语种的知识融合到预训练中。它通过同时在多个领域和多种语言的数据上进行预训练，使模型能够学习丰富的知识和表示。</p></li><li><p><strong>多任务学习</strong>：ERNIE在预训练和微调阶段使用了多任务学习。这意味着模型在同一时间可以同时学习多个任务，从而增强模型的泛化能力和效果。</p></li></ol><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>使用PaddlePaddle深度学习框架和PaddleNLP自然语言处理工具包构建文本分类模型。该模型用于将文本分类为两个类别，并通过训练数据进行模型训练和验证，然后使用该模型对测试数据进行分类，并生成一个提交文件。</p><p>以下是代码的详细分析：</p><ol><li><p><strong>导入库</strong>：首先，导入了必要的库，包括NumPy（用于数值计算）、Pandas（用于数据分析）、tqdm（用于显示进度条）、PaddlePaddle（深度学习框架）、PaddleNLP（用于自然语言处理）、以及其他用于数据加载、模型训练等的库。</p></li><li><p><strong>加载数据</strong>：使用Pandas库从CSV文件中加载训练数据和测试数据。</p></li><li><p><strong>载入模型与分词器</strong>：使用<code>AutoModelForSequenceClassification</code>从预训练的ernie-3.0-mini-zh模型中加载序列分类模型，并设置分类类别数为2。同样，使用<code>AutoTokenizer</code>加载相应的分词器。</p></li><li><p><strong>定义优化器和损失函数</strong>：定义AdamW优化器和交叉熵损失函数。</p></li><li><p><strong>划分训练集和验证集</strong>：使用<code>train_test_split</code>将训练数据划分为训练集和验证集。</p></li><li><p><strong>数据处理与加载</strong>：将数据转换为适合数据加载器的格式，并创建数据加载器。训练数据可以随机打乱，以便模型更好地学习。注意，这里的数据加载器用的是PaddlePaddle的<code>DataLoader</code>，可以在训练过程中并行加载数据，提高训练效率。</p></li><li><p><strong>模型训练循环</strong>：使用循环进行模型训练，训练多个epochs。在每个epoch内，模型会被切换到训练模式，然后遍历训练数据批次进行训练。具体步骤包括：</p><ul><li>将文本数据转换为模型可以处理的格式，包括使用分词器进行分词并填充到固定长度。</li><li>将数据输入模型，得到预测结果。</li><li>计算预测结果与真实标签之间的交叉熵损失。</li><li>执行反向传播以计算梯度。</li><li>使用优化器更新模型参数。</li></ul></li><li><p><strong>验证过程</strong>：在每个epoch结束后，切换模型为验证模式，并使用验证数据集计算验证损失。同样，将数据转换为模型可以处理的格式，进行前向传播计算，并计算验证损失。</p></li><li><p><strong>保存最佳模型</strong>：如果当前epoch的准确率优于之前的最佳准确率，将模型和优化器参数保存为检查点文件。</p></li><li><p><strong>模型保存</strong>：在所有epoch训练完成后，将最终模型和优化器参数保存。</p></li><li><p><strong>模型推理</strong>：定义了一个用于对输入文本进行预测的函数<code>infer</code>，该函数将输入文本转换为模型可以处理的格式，然后使用训练好的模型进行预测，并返回预测结果。</p></li><li><p><strong>对测试数据进行预测</strong>：使用上述<code>infer</code>函数将测试数据的文本送入模型，得到预测结果。然后创建一个包含预测结果的新数据表，准备生成提交文件。</p></li><li><p><strong>生成提交文件</strong>：将包含预测结果的测试数据表保存为CSV文件，用于提交到竞赛平台。</p></li></ol><p>在使用Ernie模型的时候，为了加快速度，放弃了本地环境，使用了百度AI Studio云环境进行训练，每一轮训练时间为60s，验证时间为6s</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="baseline-py"><a href="#baseline-py" class="headerlink" title="baseline.py"></a>baseline.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># Load data</span>train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Get the feature</span><span class="token keyword">def</span> <span class="token function">simple_feature</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'123 123'</span>    w <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 统计字符出现次数</span>    w_count <span class="token operator">=</span> np<span class="token punctuation">.</span>bincount<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    w_count <span class="token operator">=</span> w_count<span class="token punctuation">[</span>w_count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 原始字符长度</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符个数</span>        <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 不重复字符个数</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符个数 - 不重复字符个数</span>        <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 不重复字符个数占比</span>        np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的最大值</span>        np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的最小值</span>        np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的平均值</span>        np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的方差</span>        np<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的极差</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>train_feature <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>simple_feature<span class="token punctuation">)</span>test_feature <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>simple_feature<span class="token punctuation">)</span>train_feature <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>train_feature<span class="token punctuation">.</span>values<span class="token punctuation">)</span>test_feature <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>test_feature<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token comment"># 模型训练</span>m <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_feature<span class="token punctuation">,</span> train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 生成测试集提交结果</span>test_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_feature<span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'simple.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="upper-py"><a href="#upper-py" class="headerlink" title="upper.py"></a>upper.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_predict<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_reporttrain_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 第1种tfidf参数</span>tfidf <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">r'\w&#123;1&#125;'</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span>train_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>    cross_val_predict<span class="token punctuation">(</span>        LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        train_tfidf<span class="token punctuation">,</span>        train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    digits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 第2种tfidf参数</span>tfidf <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">r'\w&#123;1&#125;'</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>train_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>    cross_val_predict<span class="token punctuation">(</span>        LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        train_tfidf<span class="token punctuation">,</span>        train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    digits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 第3种tfidf参数</span>tfidf <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">r'\w&#123;1&#125;'</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> ngram_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>    cross_val_predict<span class="token punctuation">(</span>        LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        train_tfidf<span class="token punctuation">,</span>        train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    digits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>    train_tfidf<span class="token punctuation">,</span>    train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_tfidf<span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'tfidf.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bert-py"><a href="#bert-py" class="headerlink" title="bert.py"></a>bert.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入前置依赖</span><span class="token keyword">import</span> os<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token comment"># 用于加载bert模型的分词器</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token comment"># 用于加载bert模型</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertModel<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathbatch_size <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 文本的最大长度</span>text_max_length <span class="token operator">=</span> <span class="token number">128</span><span class="token comment"># 总训练的epochs数，我只是随便定义了个数</span>epochs <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 学习率</span>lr <span class="token operator">=</span> <span class="token number">3e-5</span><span class="token comment"># 取多少训练集的数据作为验证集</span>validation_ratio <span class="token operator">=</span> <span class="token number">0.1</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token comment"># 每多少步，打印一次loss</span>log_per_step <span class="token operator">=</span> <span class="token number">50</span><span class="token comment"># 数据集所在位置</span>dataset_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./ChatGPT生成文本检测器"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token comment"># 模型存储路径</span>model_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./model/bert_checkpoints"</span><span class="token punctuation">)</span><span class="token comment"># 如果模型目录不存在，则创建一个</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Device:"</span><span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token comment"># 读取数据集，进行数据处理</span>pd_train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token operator">=</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token operator">=</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 从训练集中随机采样测试集</span>validation_data <span class="token operator">=</span> pd_train_data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span>validation_ratio<span class="token punctuation">)</span>train_data <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token operator">~</span>pd_train_data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>isin<span class="token punctuation">(</span>validation_data<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 构建Dataset</span><span class="token keyword">class</span> <span class="token class-name">MyDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MyDataset<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode        <span class="token comment"># 拿到对应的数据</span>        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> train_data        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'validation'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> validation_data        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果是测试模式，则返回内容和uuid。拿uuid做target主要是方便后面写入结果。</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> test_data        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Unknown mode &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 取第index条</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment"># 取其内容</span>        text <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>        <span class="token comment"># 根据状态返回内容</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果是test，将uuid做为target</span>            label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        <span class="token comment"># 返回内容和label</span>        <span class="token keyword">return</span> text<span class="token punctuation">,</span> label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>train_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span><span class="token string">'train'</span><span class="token punctuation">)</span>validation_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span><span class="token string">'validation'</span><span class="token punctuation">)</span>train_dataset<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 获取Bert预训练模型</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"bert-base-uncased"</span><span class="token punctuation">)</span><span class="token comment"># 接着构造我们的Dataloader。</span><span class="token comment"># 我们需要定义一下collate_fn，在其中完成对句子进行编码、填充、组装batch等动作：</span><span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将一个batch的文本句子转成tensor，并组成batch。    :param batch: 一个batch的句子，例如: [('推文', target), ('推文', target), ...]    :return: 处理后的结果，例如：             src: &#123;'input_ids': tensor([[ 101, ..., 102, 0, 0, ...], ...]), 'attention_mask': tensor([[1, ..., 1, 0, ...], ...])&#125;             target：[1, 1, 0, ...]    """</span>    text<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span>    text<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>    <span class="token comment"># src是要送给bert的，所以不需要特殊处理，直接用tokenizer的结果即可</span>    <span class="token comment"># padding='max_length' 不够长度的进行填充</span>    <span class="token comment"># truncation=True 长度过长的进行裁剪</span>    src <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>text<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'max_length'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span>text_max_length<span class="token punctuation">,</span> return_tensors<span class="token operator">=</span><span class="token string">'pt'</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> src<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>label<span class="token punctuation">)</span>train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>validation_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>validation_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"inputs:"</span><span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"targets:"</span><span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token comment"># 定义预测模型，该模型由bert模型加上最后的预测层组成</span><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MyModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 加载bert模型</span>        self<span class="token punctuation">.</span>bert <span class="token operator">=</span> BertModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'bert-base-uncased'</span><span class="token punctuation">,</span> mirror<span class="token operator">=</span><span class="token string">'tuna'</span><span class="token punctuation">)</span>        <span class="token comment"># 最后的预测层</span>        self<span class="token punctuation">.</span>predictor <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">768</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param src: 分词后的推文数据        """</span>        <span class="token comment"># 将src直接序列解包传入bert，因为bert和tokenizer是一套的，所以可以这么做。</span>        <span class="token comment"># 得到encoder的输出，用最前面[CLS]的输出作为最终线性层的输入</span>        outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>bert<span class="token punctuation">(</span><span class="token operator">**</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span>last_hidden_state<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># 使用线性层来做最终的预测</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>predictor<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span>model <span class="token operator">=</span> MyModel<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 定义出损失函数和优化器。这里使用Binary Cross Entropy：</span>criteria <span class="token operator">=</span> nn<span class="token punctuation">.</span>BCELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span><span class="token comment"># 由于inputs是字典类型的，定义一个辅助函数帮助to(device)</span><span class="token keyword">def</span> <span class="token function">to_device</span><span class="token punctuation">(</span>dict_tensors<span class="token punctuation">)</span><span class="token punctuation">:</span>    result_tensors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dict_tensors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result_tensors<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token keyword">return</span> result_tensors<span class="token comment"># 定义一个验证方法，获取到验证集的精准率和loss</span><span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_loss <span class="token operator">=</span> <span class="token number">0.</span>    total_correct <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> targets <span class="token keyword">in</span> validation_loader<span class="token punctuation">:</span>        inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> to_device<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criteria<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        total_loss <span class="token operator">+=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        correct_num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>outputs <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        total_correct <span class="token operator">+=</span> correct_num    <span class="token keyword">return</span> total_correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataset<span class="token punctuation">)</span><span class="token punctuation">,</span> total_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataset<span class="token punctuation">)</span><span class="token comment"># 首先将模型调成训练模式</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 清空一下cuda缓存</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>empty_cache<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 定义几个变量，帮助打印loss</span>total_loss <span class="token operator">=</span> <span class="token number">0.</span><span class="token comment"># 记录步数</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 记录在验证集上最好的准确率</span>best_accuracy <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 开始训练</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 从batch中拿到训练数据</span>        inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> to_device<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token comment"># 传入模型进行前向传递</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        <span class="token comment"># 计算损失</span>        loss <span class="token operator">=</span> criteria<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_loss <span class="token operator">+=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        step <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> step <span class="token operator">%</span> log_per_step <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Epoch &#123;&#125;/&#123;&#125;, Step: &#123;&#125;/&#123;&#125;, total loss:&#123;:.4f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> epochs<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                       total_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            total_loss <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">del</span> inputs<span class="token punctuation">,</span> targets    <span class="token comment"># 一个epoch后，使用过验证集进行验证</span>    accuracy<span class="token punctuation">,</span> validation_loss <span class="token operator">=</span> validate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Epoch &#123;&#125;, accuracy: &#123;:.4f&#125;, validation loss: &#123;:.4f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">,</span> validation_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span> model_dir <span class="token operator">/</span> <span class="token string-interpolation"><span class="token string">f"model_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch<span class="token punctuation">&#125;</span></span><span class="token string">.pt"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 保存最好的模型</span>    <span class="token keyword">if</span> accuracy <span class="token operator">></span> best_accuracy<span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span> model_dir <span class="token operator">/</span> <span class="token string-interpolation"><span class="token string">f"model_best.pt"</span></span><span class="token punctuation">)</span>        best_accuracy <span class="token operator">=</span> accuracy<span class="token comment"># 加载最好的模型，然后进行测试集的预测</span>model <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_dir <span class="token operator">/</span> <span class="token string-interpolation"><span class="token string">f"model_best.pt"</span></span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> inputs<span class="token punctuation">,</span> ids <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>    outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>    outputs <span class="token operator">=</span> <span class="token punctuation">(</span>outputs <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    ids <span class="token operator">=</span> ids<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    results <span class="token operator">=</span> results <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token keyword">for</span> result<span class="token punctuation">,</span> <span class="token builtin">id</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">]</span>test_label <span class="token operator">=</span> <span class="token punctuation">[</span>pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> pair <span class="token keyword">in</span> results<span class="token punctuation">]</span>test_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_labeltest_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'result.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="api-py"><a href="#api-py" class="headerlink" title="api.py"></a>api.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> copy<span class="token keyword">import</span> zhipuai<span class="token keyword">import</span> time<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmtrain <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>zhipuai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> <span class="token string">"YOUR_API_KEY"</span>n <span class="token operator">=</span> <span class="token number">5</span>prompt_data <span class="token operator">=</span> train<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span>n<span class="token punctuation">)</span>prompt_data <span class="token operator">=</span> prompt_data<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>prompt_data<span class="token punctuation">)</span>tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>prompt_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> prompt_data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    instruction <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"将给定的文本分成两类，并给出标签0或1，给定文本如下：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    answer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span>        <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>instruction<span class="token punctuation">)</span>    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>test_item <span class="token operator">=</span> test<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>test_item<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    test_instruction <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"将给定的文本分成两类，并给出标签0或1，给定文本如下：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>test_item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    prompt<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_instruction<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>    <span class="token comment"># response = zhipuai.model_api.invoke(</span>    <span class="token comment">#     model="chatglm_pro",</span>    <span class="token comment">#     prompt=prompt</span>    <span class="token comment"># )</span>    <span class="token comment"># print(response)</span>predict<span class="token punctuation">(</span>test_item<span class="token operator">=</span>test_item<span class="token punctuation">,</span> tmp<span class="token operator">=</span>tmp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ernie-py"><a href="#ernie-py" class="headerlink" title="ernie.py"></a>ernie.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment"># 数值计算</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token comment"># 数据分析</span><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm <span class="token comment"># 进度条显示</span><span class="token keyword">import</span> paddle <span class="token comment"># PaddlePaddle 深度学习框架</span><span class="token keyword">from</span> paddlenlp<span class="token punctuation">.</span>transformers <span class="token keyword">import</span> AutoModelForSequenceClassification<span class="token punctuation">,</span> AutoTokenizer <span class="token comment"># 飞桨自然语言处理工具包（模型、分词器）</span><span class="token keyword">from</span> paddle<span class="token punctuation">.</span>io <span class="token keyword">import</span> DataLoader <span class="token comment"># 数据加载器</span><span class="token keyword">from</span> paddlenlp<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> MapDataset <span class="token comment"># 数据集转换</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token comment"># 训练集与验证集拆分</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token comment"># 绘图</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"/home/aistudio/data/ChatGPT生成文本检测器公开数据-更新/train.csv"</span><span class="token punctuation">)</span> <span class="token comment"># 加载赛事提供的训练数据</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"/home/aistudio/data/ChatGPT生成文本检测器公开数据-更新/test.csv"</span><span class="token punctuation">)</span> <span class="token comment"># 加载赛事所需提交的测试数据</span>data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 随机查看 5 行训练数据中的内容</span><span class="token comment"># 载入模型与分词器</span><span class="token comment"># 使用 ernie-3.0-mini-zh 序列分类模型，并将分类类别数设置为 2</span>model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"ernie-3.0-mini-zh"</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 使用 ernie-3.0-mini-zh 分词器</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"ernie-3.0-mini-zh"</span><span class="token punctuation">)</span><span class="token comment"># 定义 AdamW 优化器，学习率为 0.000001</span>optimizer <span class="token operator">=</span> paddle<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span><span class="token number">1e-5</span><span class="token punctuation">,</span> parameters<span class="token operator">=</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义损失函数为交叉熵函数，计算每个 mini batch 的均值</span>loss_fn <span class="token operator">=</span> paddle<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>loss<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token comment"># 按照 10% 的比例划分训练集与验证集</span>train_data<span class="token punctuation">,</span> valid_data <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment"># 下面就是一堆操作，把数据变成数据加载器可以识别的格式，自定义数据集类也是同样的效果</span>train_dict <span class="token operator">=</span> train_data<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'records'</span><span class="token punctuation">)</span>valid_dict <span class="token operator">=</span> valid_data<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'records'</span><span class="token punctuation">)</span>train_ds <span class="token operator">=</span> MapDataset<span class="token punctuation">(</span>train_dict<span class="token punctuation">)</span>valid_ds <span class="token operator">=</span> MapDataset<span class="token punctuation">(</span>valid_dict<span class="token punctuation">)</span><span class="token comment"># 将整体数据拆分为 30 份，放入数据加载器，就是一次性会有 &lt;总样本数 / 30> 份数据同时并行计算，份数越多，并行越多，显存占用越大，需要根据需求来选择</span>train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dict<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 训练数据可以随机打乱，让模型更好地学习，减轻学习到无关特征的问题</span>valid_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>valid_dict<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment"># 这里用的是 V100 32G，如果是显存更小的卡，需要调小一点，不然会炸显存</span>epochs<span class="token operator">=</span><span class="token number">200</span>best_accuracy<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 训练 30 轮</span>    <span class="token comment"># 训练过程</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 切换模型为训练模式</span>    <span class="token keyword">for</span> batch_x <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 每次从数据加载器读入一批(batch)数据</span>        X <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>batch_x<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">1015</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 将数据转换为模块可处理的数据形式</span>        input_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span> <span class="token comment"># 将 input_ids 变为张量，方便并行计算</span>        token_type_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'token_type_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span> <span class="token comment"># 将 token_type_ids 变为张量</span>        pred <span class="token operator">=</span> model<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> token_type_ids<span class="token punctuation">)</span> <span class="token comment"># 将数据读入模型，并得到计算后的结果</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>batch_x<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对比预测结果与真实结果，计算损失函数的值</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 反向传播，计算梯度</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 优化器根据梯度与学习率调整模型参数</span>        optimizer<span class="token punctuation">.</span>clear_gradients<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 清空梯度，避免下次梯度计算时累加</span>    <span class="token comment"># 验证过程</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 切换模型为验证模式</span>    val_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 验证集数据的损失函数合集</span>    <span class="token keyword">with</span> paddle<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 在模型验证时，只做前向计算，因此不需要保存梯度信息</span>        <span class="token keyword">for</span> batch_x <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>valid_loader<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 下面的操作与训练过程相同</span>            X <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>batch_x<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">1015</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            input_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span>            token_type_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'token_type_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> token_type_ids<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>batch_x<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            val_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将计算出的损失函数值存入合集</span>                <span class="token comment"># 打印本轮训练的验证集损失函数值，与预测正确率</span>    accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> batch_x<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch &#123;0&#125;, Val loss &#123;1:3f&#125;, Val Accuracy &#123;2:3f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    epoch<span class="token punctuation">,</span>    np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>val_loss<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> batch_x<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> accuracy<span class="token operator">></span>best_accuracy<span class="token punctuation">:</span>        paddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/home/aistudio/work/model_best.pdparams"</span><span class="token punctuation">)</span>        paddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/home/aistudio/work/optimizer_best.pdopt"</span><span class="token punctuation">)</span>        best_accuracy<span class="token operator">=</span>accuracypaddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/home/aistudio/work/model.pdparams"</span><span class="token punctuation">)</span>paddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/home/aistudio/work/optimizer.pdopt"</span><span class="token punctuation">)</span><span class="token comment"># 如果你拿到了模型参数（在 AIStudio 中提供），你可以运行这行代码，如果直接运行模型，则没有必要运行</span><span class="token comment"># 载入模型参数、优化器参数的最后一个epoch保存的检查点</span>layer_state_dict <span class="token operator">=</span> paddle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"/home/aistudio/work/model_best.pdparams"</span><span class="token punctuation">)</span>opt_state_dict <span class="token operator">=</span> paddle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"/home/aistudio/work/optimizer_best.pdopt"</span><span class="token punctuation">)</span><span class="token comment"># 将加载后的参数与模型关联起来</span>model<span class="token punctuation">.</span>set_state_dict<span class="token punctuation">(</span>layer_state_dict<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>set_state_dict<span class="token punctuation">(</span>opt_state_dict<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">infer</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将文本传入模型并返回预测结果        输入：        - string: str            待预测的文本内容        输出:        - result: int            模型的预测结果    """</span>    X <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span><span class="token punctuation">[</span>string<span class="token punctuation">]</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">1015</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    input_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span>    token_type_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'token_type_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span>    pred <span class="token operator">=</span> model<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> token_type_ids<span class="token punctuation">)</span>    result <span class="token operator">=</span> pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取预测概率最大的那个类别</span>    <span class="token keyword">return</span> resulttest_data<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>infer<span class="token punctuation">)</span> <span class="token comment"># 将测试集的每个文本送入模型返回结果</span>submit <span class="token operator">=</span> test_data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 生成提交数据（就是把带结果的测试集丢掉内容，复制一份）</span>submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"submit3.csv"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 保存 CSV 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>2023年8月4日：跑通baseline并进行微调，收效甚微甚至不如baseline，仅提交了baseline，获得分数0.85+</p><p>2023年8月5日：跑通upper，获得分数0.91+</p><p>2023年8月6日：尝试使用BERT模型进行鉴别，效果比较好，获得分数0.93+</p><p>2023年8月7日：尝试使用大模型API进行分类，效果相当不理想；尝试使用ernie模型进行分类，分类效果随着训练轮数的增加而有一定程度的提升，得到0.98+、0.99+分数</p><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upper的实现</title>
      <link href="/2023/07/30/upper%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/07/30/upper%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>友情连接：<a href="https://datawhaler.feishu.cn/docx/WirRd4oB5oMe2ixw1rxcTnHFnHh">Datawhale-NLP实践</a></p><p>GitHub项目地址：<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project</a></p><p>NLP进阶冲榜使用了BERT模型进行文本分类和关键词提取</p><h2 id="BERT模型"><a href="#BERT模型" class="headerlink" title="BERT模型"></a>BERT模型</h2><p><a href="https://arxiv.org/pdf/1810.04805">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a></p><p>BERT模型由Google,stands for Bidirectional Encoder Representations from<br>Transformers.</p><blockquote><p>BERT’s model architecture is a multi-layer bidirectional Transformer encoder based on the original implementation described in Vaswani et al.</p></blockquote><p>BERT模型架构是一个多层的Transformer Encoder堆叠，也就是为人们所熟知的《<a href="https://arxiv.org/pdf/1706.03762">Attention Is All You Need</a>》中提出的多层Transformer结构，抛弃了传统的RNN和CNN，通过Attention机制将任意位置的两个单词的距离转换成1。</p><p>具体BERT原理在此不再赘述，值得关注的是BERT模型的训练包含pre-training和fine-tuning两个阶段，在这里用到的是BERT预训练的模型，使用训练集对BERT模型进行微调。</p><h2 id="导入前置依赖"><a href="#导入前置依赖" class="headerlink" title="导入前置依赖"></a>导入前置依赖</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导入前置依赖</span><span class="token keyword">import</span> os<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token comment"># 用于加载bert模型的分词器</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token comment"># 用于加载bert模型</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertModel<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>os</code>: 用于操作文件路径和目录。</li><li><code>pandas (pd)</code>: 用于数据处理，读取CSV文件和处理DataFrame。</li><li><code>torch</code>: PyTorch库，用于构建深度学习模型。</li><li><code>torch.nn</code>: PyTorch中的神经网络模块。</li><li><code>torch.utils.data</code>: PyTorch中的数据加载和处理工具。</li><li><code>transformers</code>: Hugging Face的transformers库，用于加载和使用BERT等预训练模型。</li><li><code>pathlib.Path</code>: 用于处理文件路径。</li><li><code>TfidfVectorizer</code>: sklearn库中的TF-IDF向量化器，用于文本特征提取。</li><li><code>SentenceTransformer</code>: 用于获取句子的嵌入表示。</li><li><code>cosine_similarity</code>: 计算余弦相似度的函数。</li><li><code>nltk.word_tokenize</code>: 用于对文本进行分词。</li><li><code>nltk.corpus.stopwords</code>: NLTK中包含的英文停用词集合，用于文本预处理。</li></ul><h2 id="定义训练参数"><a href="#定义训练参数" class="headerlink" title="定义训练参数"></a>定义训练参数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 文本的最大长度</span>text_max_length <span class="token operator">=</span> <span class="token number">128</span><span class="token comment"># 总训练的epochs数，我只是随便定义了个数</span>epochs <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 学习率</span>lr <span class="token operator">=</span> <span class="token number">3e-5</span><span class="token comment"># 取多少训练集的数据作为验证集</span>validation_ratio <span class="token operator">=</span> <span class="token number">0.1</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token comment"># 每多少步，打印一次loss</span>log_per_step <span class="token operator">=</span> <span class="token number">50</span><span class="token comment"># 数据集所在位置</span>dataset_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./基于论文摘要的文本分类与关键词抽取挑战赛公开数据"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token comment"># 模型存储路径</span>model_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./model/bert_checkpoints"</span><span class="token punctuation">)</span><span class="token comment"># 如果模型目录不存在，则创建一个</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Device:"</span><span class="token punctuation">,</span> device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了各种常量，如批量大小(<code>batch_size</code>)、文本最大长度(<code>text_max_length</code>)、学习率(<code>lr</code>)、训练轮数(<code>epochs</code>)等。它还设定了设备类型(<code>device</code>)，如果有GPU，则设为’cuda’，否则设为’cpu’。</p><p><code>log_per_step</code>表示每经过多少个步骤（batch）打印一次损失。</p><p><code>dataset_dir</code>和<code>model_dir</code>分别定义了数据集和模型存储路径。<code>os.makedirs</code>用于创建这些目录。</p><p>在这里由于使用了anaconda的虚拟环境，也就是之前安装好的pytorch环境，内部已经配置好pytorch、transformer等，而且硬件方面有独显，所以device是cuda。</p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd_train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'testB.csv'</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> \                        pd_train_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test_data<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test_data<span class="token punctuation">[</span>    <span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>pandas</code>库从两个CSV文件（<code>train.csv</code>和<code>testB.csv</code>）中读取数据。然后，使用<code>fillna</code>方法填充缺失的标题（’title’）和摘要（’abstract’）字段，并将它们拼接成新的文本内容（’text’）。</p><p>然后从训练集中随机抽样，sample to train</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从训练集中随机采样测试集</span>validation_data <span class="token operator">=</span> pd_train_data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span>validation_ratio<span class="token punctuation">)</span>train_data <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token operator">~</span>pd_train_data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>isin<span class="token punctuation">(</span>validation_data<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="构建自定义数据集类"><a href="#构建自定义数据集类" class="headerlink" title="构建自定义数据集类"></a>构建自定义数据集类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MyDataset<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode        <span class="token comment"># 拿到对应的数据</span>        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> train_data        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'validation'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> validation_data        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果是测试模式，则返回内容和uuid。拿uuid做target主要是方便后面写入结果。</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> test_data        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Unknown mode &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 取第index条</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment"># 取其内容</span>        text <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span>        <span class="token comment"># 根据状态返回内容</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果是test，将uuid做为target</span>            label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        <span class="token comment"># 返回内容和label</span>        <span class="token keyword">return</span> text<span class="token punctuation">,</span> label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义数据集类 <code>MyDataset</code> 的定义。在深度学习中，通常需要将数据封装成一个可迭代的数据集，以便于模型的训练和验证。PyTorch提供了<code>Dataset</code>和<code>DataLoader</code>这两个类来实现数据集的处理和加载。</p><p><code>upper</code>中定义了一个自定义的数据集类 <code>MyDataset</code>，继承自PyTorch的<code>Dataset</code>类。这个类用于处理文本分类和关键词抽取的数据集，并根据传入的模式（’train’、’validation’、’test’）选择对应的数据子集。</p><p>在<code>MyDataset</code>类中，实现了以下几个重要的方法：</p><ol><li><code>__init__(self, mode=&#39;train&#39;)</code>: 这个方法是类的初始化方法，用于创建数据集对象时执行。<code>mode</code>参数用于指定数据集的模式，可以是’train’、’validation’或者’test’。根据不同的模式，选择对应的数据子集。</li><li><code>__getitem__(self, index)</code>: 这个方法是数据集类的核心方法之一，用于返回指定索引<code>index</code>处的数据样本。在这里，根据索引取出对应的文本内容和标签。如果是测试模式，则将uuid作为标签，否则将标签取出。</li><li><code>__len__(self)</code>: 这个方法返回数据集的大小，即样本的总数。</li></ol><p>数据集类 <code>MyDataset</code> 的主要功能是根据不同的模式选择对应的数据子集，并根据索引取出对应的数据样本。当使用<code>DataLoader</code>加载数据时，它会调用<code>__getitem__</code>方法来获取每个批次的数据样本，并调用<code>__len__</code>方法获取数据集的大小。这样，就可以通过<code>DataLoader</code>来迭代地遍历整个数据集，方便地用于模型的训练和验证。</p><h2 id="获取BERT预训练模型的tokenizer"><a href="#获取BERT预训练模型的tokenizer" class="headerlink" title="获取BERT预训练模型的tokenizer"></a>获取BERT预训练模型的tokenizer</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"bert-base-uncased"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用Hugging Face的<code>AutoTokenizer</code>类从预训练的BERT模型（’bert-base-uncased’）中获取对应的分词器。这个分词器将原始文本内容转换成BERT模型所需的输入格式</p><h2 id="函数加载器的定义和使用"><a href="#函数加载器的定义和使用" class="headerlink" title="函数加载器的定义和使用"></a>函数加载器的定义和使用</h2><p>在深度学习中，数据集通常包含大量的样本，每个样本都有其对应的特征和标签。数据加载器是一个迭代器，它能够按照指定的批量大小（<code>batch_size</code>）将数据集划分成小批量进行加载和处理。</p><p>通常使用PyTorch的<code>DataLoader</code>来加载训练数据集和验证数据集，从而方便地将数据输入到模型中进行训练和验证。</p><h3 id="数据加载器的定义"><a href="#数据加载器的定义" class="headerlink" title="数据加载器的定义"></a>数据加载器的定义</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>validation_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>validation_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>train_dataset</code> 和 <code>validation_dataset</code>: 这两个参数分别是之前定义的自定义数据集类 <code>MyDataset</code> 的实例，用于加载训练数据集和验证数据集。</p></li><li><p><code>batch_size</code>: 这个参数指定每个批次的样本数。数据加载器会将数据集按照这个大小进行划分，每次返回一个小批量的样本。</p></li><li><p><code>shuffle</code>: 这个参数用于控制数据是否在每个epoch（训练周期）开始时随机打乱顺序。在训练时，通常会将数据打乱，以增加数据的随机性，有助于模型学习到更广泛的特征。但在验证时，不需要打乱数据，以保持数据的顺序。</p></li><li><p><code>collate_fn</code>: 这个参数用于定义如何将样本组合成一个批次。在这里，使用了之前定义的<code>collate_fn</code>函数。这个函数的作用是将每个样本中的文本数据（<code>text</code>）进行编码、填充，并组装成一个批次。具体地，它将样本的文本输入传递给BERT模型，得到BERT模型的输入，然后将输入和标签组装成一个字典形式的数据，用于模型的输入和训练。</p></li></ul><p>其中的大部分参数都已经定义好了，比较重要的是<code>collate_fn</code>函数并没有定义</p><h3 id="collate-fn函数的定义"><a href="#collate-fn函数的定义" class="headerlink" title="collate_fn函数的定义"></a>collate_fn函数的定义</h3><p><code>collate_fn</code> 函数是在数据加载器（<code>DataLoader</code>）中使用的一个函数，用于对每个样本进行处理并组合成一个批次。在项目中，自定义了<code>collate_fn</code>函数，用于将每个样本中的文本数据进行编码、填充，并组装成一个批次，以便于模型的输入和训练。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将一个batch的文本句子转成tensor，并组成batch。    :param batch: 一个batch的句子，例如: [('推文', target), ('推文', target), ...]    :return: 处理后的结果，例如：             src: &#123;'input_ids': tensor([[ 101, ..., 102, 0, 0, ...], ...]), 'attention_mask': tensor([[1, ..., 1, 0, ...], ...])&#125;             target：[1, 1, 0, ...]    """</span>    text<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span>    text<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>    <span class="token comment"># src是要送给bert的，所以不需要特殊处理，直接用tokenizer的结果即可</span>    <span class="token comment"># padding='max_length' 不够长度的进行填充</span>    <span class="token comment"># truncation=True 长度过长的进行裁剪</span>    src <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>text<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'max_length'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span>text_max_length<span class="token punctuation">,</span> return_tensors<span class="token operator">=</span><span class="token string">'pt'</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> src<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>将文本列表转换为文本张量：使用 <code>tokenizer</code> 对文本进行编码，将文本转换为BERT模型需要的输入格式。<code>tokenizer</code> 是之前引入的一个来自 <code>transformers</code> 库的分词器（tokenizer），它可以将文本句子转换成BERT输入的 <code>input_ids</code> 和 <code>attention_mask</code> 张量。</p></li><li><p>padding和truncation：由于BERT模型的输入要求每个样本长度相同，因此需要对文本进行填充（padding）或截断（truncation）操作，使得所有文本都有相同的长度。在这里，将文本长度填充到 <code>text_max_length</code>，超过这个长度的部分会被截断。</p></li><li><p>组装为字典形式：将编码后的文本张量 <code>input_ids</code> 和 <code>attention_mask</code> 组装成一个字典 <code>src</code>，它是模型的输入数据。<code>src</code> 的结构如下：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#39;input_ids&#39;: tensor([[ 101, ..., 102, 0, 0, ...], ...]), &#39;attention_mask&#39;: tensor([[1, ..., 1, 0, ...], ...])&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，<code>input_ids</code> 是文本的编码表示，<code>attention_mask</code> 是用于告诉BERT哪些部分是真实输入，哪些部分是填充的掩码。</p></li><li><p>处理标签：将标签列表 <code>label</code> 转换为PyTorch的Long型张量 <code>torch.LongTensor(label)</code>。标签是用于文本分类的二分类问题，所以需要将标签转换成数值型数据。</p></li></ol><p>最终，<code>collate_fn</code> 函数返回处理后的结果，包含了一个批次的输入数据 <code>src</code> 和对应的标签 <code>label</code>。这样，在使用 <code>DataLoader</code> 加载数据时，每次迭代返回的就是一个批次的数据，可以直接输入到模型中进行训练</p><h2 id="定义预测模型"><a href="#定义预测模型" class="headerlink" title="定义预测模型"></a>定义预测模型</h2><p>当训练深度学习模型时，需要定义一个模型结构，并确定用于评估模型性能的损失函数（loss function）。在这个代码中，定义了一个自定义的预测模型 <code>MyModel</code>，它由预训练的BERT模型和最后的预测层组成。在这个模型中，使用BCELoss作为损失函数，用于进行二分类任务的训练。</p><h3 id="定义预测模型（MyModel）"><a href="#定义预测模型（MyModel）" class="headerlink" title="定义预测模型（MyModel）"></a>定义预测模型（MyModel）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MyModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 加载bert模型</span>        self<span class="token punctuation">.</span>bert <span class="token operator">=</span> BertModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'bert-base-uncased'</span><span class="token punctuation">,</span> mirror<span class="token operator">=</span><span class="token string">'tuna'</span><span class="token punctuation">)</span>        <span class="token comment"># 最后的预测层</span>        self<span class="token punctuation">.</span>predictor <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">768</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param src: 分词后的推文数据        """</span>        <span class="token comment"># 将src直接序列解包传入bert，因为bert和tokenizer是一套的，所以可以这么做。</span>        <span class="token comment"># 得到encoder的输出，用最前面[CLS]的输出作为最终线性层的输入</span>        outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>bert<span class="token punctuation">(</span><span class="token operator">**</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span>last_hidden_state<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># 使用线性层来做最终的预测</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>predictor<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>MyModel</code>中，首先定义了模型的初始化方法（<code>__init__</code>）。在这个方法中，做了以下几个事情：</p><ol><li><p>加载BERT模型：使用<code>BertModel.from_pretrained</code>方法加载了预训练的BERT模型。<code>&#39;bert-base-uncased&#39;</code>表示加载了小写字母的BERT模型，<code>mirror=&#39;tuna&#39;</code>是为了使用TUNA（清华大学开源软件镜像站）的镜像下载预训练的权重。</p></li><li><p>定义最后的预测层：通过<code>nn.Sequential</code>定义了一个包含多个线性层和激活函数的预测层。这个预测层用于将BERT模型的输出特征映射到一个单一的数值，用于进行二分类预测。在这里，使用了两个线性层，大小为768到256，再到1，以及一个ReLU激活函数和一个Sigmoid激活函数。</p></li></ol><p>在神经网络中，最后的Sigmoid激活函数会将输出值压缩到0到1之间，用于表示概率。输出接近0表示负类（Negative Class），输出接近1表示正类（Positive Class）。的任务是根据文本内容对样本进行二分类，所以这个输出值可以表示样本属于正类的概率。</p><h3 id="forward-方法"><a href="#forward-方法" class="headerlink" title="forward()方法"></a>forward()方法</h3><p>在PyTorch中，每个自定义模型都需要定义<code>forward</code>方法。这个方法是模型的前向传递过程，用于定义数据从输入到输出的流动。在<code>MyModel</code>中，定义了<code>forward</code>方法，将输入的分词后的文本数据 <code>src</code> 传递给BERT模型，并通过最后的预测层获取模型的预测结果。</p><ol><li><p>将<code>src</code>输入BERT模型：将分词后的文本数据 <code>src</code> 传递给BERT模型。在这里，使用了双星号（<code>**</code>）将字典中的键值对拆分为参数形式，相当于<code>self.bert(input_ids=src[&#39;input_ids&#39;], attention_mask=src[&#39;attention_mask&#39;])</code>。<code>input_ids</code> 是分词后的句子的索引，<code>attention_mask</code> 是告诉BERT哪些部分是真实的输入，哪些部分是填充的。</p></li><li><p>得到BERT输出：BERT模型的输出是一个包含多个隐藏层的元组，只需要最后一个隐藏层的输出。通过<code>last_hidden_state</code>选取最后一个隐藏层。</p></li><li><p>使用线性层进行预测：最后，将BERT模型的输出传递给预测层 <code>self.predictor</code>，用于获得模型的预测结果。在这里，选取BERT输出中 <code>[CLS]</code> 符号对应的位置作为整个句子的表示，并通过预测层将其映射到一个单一的数值。</p></li></ol><p>该方法的返回值就是模型的预测结果，即样本属于正类的概率。根据这个概率值，可以进行二分类预测。如果输出值接近0，则判定为负类；如果输出值接近1，则判定为正类。</p><p>总的来说，定义预测模型 <code>MyModel</code> 的过程是将预训练的BERT模型与一个预测层组合在一起，使得模型能够对输入文本进行二分类预测。预测层将BERT输出特征映射到一个数值，表示样本属</p><h2 id="定义转移函数"><a href="#定义转移函数" class="headerlink" title="定义转移函数"></a>定义转移函数</h2><p>定义了一个辅助函数<code>to_device</code>，用于将数据移动到指定的设备（CPU或GPU），以便在GPU上进行加速计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">to_device</span><span class="token punctuation">(</span>dict_tensors<span class="token punctuation">)</span><span class="token punctuation">:</span>    result_tensors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dict_tensors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result_tensors<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token keyword">return</span> result_tensors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_loss <span class="token operator">=</span> <span class="token number">0.</span>    total_correct <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> targets <span class="token keyword">in</span> validation_loader<span class="token punctuation">:</span>        inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> to_device<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criteria<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        total_loss <span class="token operator">+=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        correct_num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>outputs <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        total_correct <span class="token operator">+=</span> correct_num    <span class="token keyword">return</span> total_correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataset<span class="token punctuation">)</span><span class="token punctuation">,</span> total_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataset<span class="token punctuation">)</span><span class="token comment"># 首先将模型调成训练模式</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 清空一下cuda缓存</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>empty_cache<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 定义几个变量，帮助打印loss</span>total_loss <span class="token operator">=</span> <span class="token number">0.</span><span class="token comment"># 记录步数</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 记录在验证集上最好的准确率</span>best_accuracy <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 开始训练</span><span class="token comment"># for epoch in range(epochs):</span><span class="token comment">#     model.train()</span><span class="token comment">#     for i, (inputs, targets) in enumerate(train_loader):</span><span class="token comment">#         # 从batch中拿到训练数据</span><span class="token comment">#         inputs, targets = to_device(inputs), targets.to(device)</span><span class="token comment">#         # 传入模型进行前向传递</span><span class="token comment">#         outputs = model(inputs)</span><span class="token comment">#         # 计算损失</span><span class="token comment">#         loss = criteria(outputs.view(-1), targets.float())</span><span class="token comment">#         loss.backward()</span><span class="token comment">#         optimizer.step()</span><span class="token comment">#         optimizer.zero_grad()</span><span class="token comment">#</span><span class="token comment">#         total_loss += float(loss)</span><span class="token comment">#         step += 1</span><span class="token comment">#</span><span class="token comment">#         if step % log_per_step == 0:</span><span class="token comment">#             print("Epoch &#123;&#125;/&#123;&#125;, Step: &#123;&#125;/&#123;&#125;, total loss:&#123;:.4f&#125;".format(epoch + 1, epochs, i, len(train_loader),</span><span class="token comment">#                                                                        total_loss))</span><span class="token comment">#             total_loss = 0</span><span class="token comment">#</span><span class="token comment">#         del inputs, targets</span><span class="token comment">#</span><span class="token comment">#     # 一个epoch后，使用过验证集进行验证</span><span class="token comment">#     accuracy, validation_loss = validate()</span><span class="token comment">#     print("Epoch &#123;&#125;, accuracy: &#123;:.4f&#125;, validation loss: &#123;:.4f&#125;".format(epoch + 1, accuracy, validation_loss))</span><span class="token comment">#     torch.save(model, model_dir / f"model_&#123;epoch&#125;.pt")</span><span class="token comment">#</span><span class="token comment">#     # 保存最好的模型</span><span class="token comment">#     if accuracy > best_accuracy:</span><span class="token comment">#         torch.save(model, model_dir / f"model_best.pt")</span><span class="token comment">#         best_accuracy = accuracy</span><span class="token comment"># 加载最好的模型，然后进行测试集的预测</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>开始训练：</strong> 在未被注释的代码部分，我们可以看到关于模型训练的代码。在这部分代码中，使用了一个外层的<code>for</code>循环来遍历训练的多个epoch（训练周期）。每个epoch内部使用一个<code>for</code>循环遍历训练数据加载器<code>train_loader</code>中的每个小批量数据。</li><li><strong>模型训练：</strong> 在内部的循环中，首先从数据加载器中获取一个批次的数据。然后，将这些数据传入模型进行前向传递得到预测输出，并计算预测输出与真实标签之间的损失（loss）。接着，调用反向传播（backpropagation）计算梯度，并利用优化器（<code>optimizer</code>）来更新模型的参数。</li><li><strong>打印loss：</strong> 在内部循环的每一步（<code>step</code>）之后，代码会根据预先定义的<code>log_per_step</code>来打印当前的总损失（<code>total_loss</code>）。这样可以帮助我们监控训练的进展。</li><li><strong>验证：</strong> 在每个epoch结束后，使用验证集数据来验证当前模型在验证集上的性能。调用<code>validate()</code>函数来实现验证。在<code>validate()</code>函数中，模型会切换到评估模式（<code>model.eval()</code>），然后对验证集的每个批次数据进行前向传递，并计算损失和正确预测的数量。最后，返回验证集上的准确率和平均损失。</li><li><strong>保存模型：</strong> 在每个epoch结束后，将当前的模型保存到文件系统中，使用<code>torch.save()</code>函数。模型文件名包含epoch的编号，用于后续选择最佳模型进行测试。</li><li><strong>记录最佳模型：</strong> 在每个epoch结束后，检查当前epoch的验证集准确率是否优于之前的最佳准确率（<code>best_accuracy</code>）。如果是，则将当前模型保存为最佳模型，并更新<code>best_accuracy</code>的值。</li></ol><h2 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 加载最好的模型，然后进行测试集的预测</span>model <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_dir <span class="token operator">/</span> <span class="token string-interpolation"><span class="token string">f"model_best.pt"</span></span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载最佳模型，加载测试集数据并进行文本分类预测，完成任务一</p><h2 id="提取关键词"><a href="#提取关键词" class="headerlink" title="提取关键词"></a>提取关键词</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test_data<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test_data<span class="token punctuation">[</span>    <span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>stops<span class="token operator">=</span> stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token string">'english'</span><span class="token punctuation">)</span>model<span class="token operator">=</span>SentenceTransformer<span class="token punctuation">(</span><span class="token string">r'xlm-r-distilroberta-base-paraphrase-v1'</span><span class="token punctuation">)</span>test_words<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> test_data<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取第每一行数据的标题与摘要并提取关键词</span>    <span class="token comment"># 修改n_gram_range来改变结果候选词的词长大小。例如，如果我们将它设置为(3，3)，那么产生的候选词将是包含3个关键词的短语。</span>    n_gram_range <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># 这里我们使用TF-IDF算法来获取候选关键词</span>    count <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>ngram_range<span class="token operator">=</span>n_gram_range<span class="token punctuation">,</span> stop_words<span class="token operator">=</span>stops<span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span>    candidates <span class="token operator">=</span> count<span class="token punctuation">.</span>get_feature_names_out<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将文本标题以及候选关键词/关键短语转换为数值型数据（numerical data）。我们使用BERT来实现这一目的</span>    title_embedding <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">]</span><span class="token punctuation">)</span>    candidate_embeddings <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>    <span class="token comment"># 通过修改这个参数来更改关键词数量</span>    top_n <span class="token operator">=</span> <span class="token number">15</span>    <span class="token comment"># 利用文章标题进一步提取关键词</span>    distances <span class="token operator">=</span> cosine_similarity<span class="token punctuation">(</span>title_embedding<span class="token punctuation">,</span> candidate_embeddings<span class="token punctuation">)</span>    keywords <span class="token operator">=</span> <span class="token punctuation">[</span>candidates<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">for</span> index <span class="token keyword">in</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span>top_n<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>    test_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>keywords<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'success </span><span class="token interpolation"><span class="token punctuation">&#123;</span>row<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_wordstest_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span><span class="token string">'Keywords'</span><span class="token punctuation">,</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'result.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本预处理和关键词抽取，并将提取的关键词结果保存到<code>result.csv</code>文件中。</p><p>让我们逐步解释代码的功能：</p><ol><li><p><strong>文本预处理：</strong> 首先，通过<code>test_data[&#39;title&#39;].fillna(&#39;&#39;)</code>，<code>test_data[&#39;author&#39;].fillna(&#39;&#39;)</code> 和 <code>test_data[&#39;abstract&#39;].fillna(&#39;&#39;)</code> 分别对标题、作者和摘要列进行NaN值填充。这样可以确保所有文本数据都是字符串类型，并填充缺失的部分为空字符串。然后，通过拼接这三列的文本数据，并将结果存储在新的<code>text</code>列中，<code>test_data[&#39;text&#39;] = ...</code>。</p></li><li><p><strong>停用词处理：</strong> 使用NLTK库中的<code>stopwords.words(&#39;english&#39;)</code>函数获取英文停用词列表，存储在<code>stops</code>变量中。停用词是在信息检索中被忽略的常见词汇，这些词汇通常不携带太多实际意义，例如”the”、”a”、”and”等。</p></li><li><p><strong>关键词抽取：</strong> 通过迭代<code>test_data</code>数据表中的每一行数据（样本），对每个样本的标题和摘要进行关键词抽取。其中，<code>test_data.iterrows()</code>是一个迭代器，用于遍历数据表的每一行。</p></li><li><p><strong>TF-IDF特征提取：</strong> 对于每个样本，首先根据设置的<code>n_gram_range</code>，使用TF-IDF算法从文本中提取候选关键词。<code>TfidfVectorizer</code>是scikit-learn库中的一个工具，用于计算TF-IDF特征。</p></li><li><p><strong>BERT嵌入：</strong> 使用预训练的<code>xlm-r-distilroberta-base-paraphrase-v1</code>模型，即<code>SentenceTransformer</code>，对样本的标题进行BERT嵌入编码。这样，每个样本的标题都被转换为一个向量表示。</p></li><li><p><strong>计算相似度：</strong> 计算候选关键词的嵌入向量与标题嵌入向量之间的余弦相似度。相似度计算后，根据相似度的大小，选择相似度最高的前<code>top_n</code>个关键词作为最终的关键词。</p></li><li><p><strong>处理提取结果：</strong> 如果从标题中没有提取到关键词（即<code>len(keywords) == 0</code>），则设置默认的关键词为 <code>[&#39;A&#39;, &#39;B&#39;]</code>。将提取到的关键词转换成一个用分号分隔的字符串，并将该字符串添加到<code>test_words</code>列表中。</p></li><li><p><strong>保存结果：</strong> 将提取的关键词列表 <code>test_words</code> 添加到<code>test_data</code>数据表的<code>Keywords</code>列中。然后从<code>test_data</code>数据表中选取<code>uuid</code>、<code>Keywords</code>和<code>label</code>列，并将结果保存为<code>result.csv</code>文件，用于后续的提交和分析。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>upper</code>完全体跑出来的分数相当可观，能够达到0.41792。</p><p>对于任务二，抽取式关键词应该已经到达极限了，再要提分就需要通过理解语义概括得到关键词，这也就转向了生成式关键词，也就是再进阶就需要用到LLM来冲榜了。</p>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenaiAPI的调用</title>
      <link href="/2023/07/28/OpenaiAPI%E7%9A%84%E8%B0%83%E7%94%A8/"/>
      <url>/2023/07/28/OpenaiAPI%E7%9A%84%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/JIANG-Wu-19/OpenAIAPI">OpenAIAPI</a></p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><ul><li>输入文本，返回API对文本的分类操作</li><li>在本地使用chain of thought，进行文本清洗、特征提取</li><li>调用API对文本进行分类</li><li>断点重爬</li><li>多线程</li></ul><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="启动画面"><a href="#启动画面" class="headerlink" title="启动画面"></a>启动画面</h3><p><img src="/imgs/openaiapi/1.png" alt="启动画面"></p><h3 id="情感分析界面"><a href="#情感分析界面" class="headerlink" title="情感分析界面"></a>情感分析界面</h3><p><img src="/imgs/openaiapi/2.png" alt="情感分析界面"></p><h3 id="断点重爬"><a href="#断点重爬" class="headerlink" title="断点重爬"></a>断点重爬</h3><p>清空当前输入界面</p><p><img src="/imgs/openaiapi/3.png" alt="清空输入界面"></p><p>点击Load Breakpoint</p><p><img src="/imgs/openaiapi/4.png" alt="断点重爬"></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p><img src="/imgs/openaiapi/5.png" alt="多线程"></p><h2 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h2><ul><li>使用Python作为主要编程语言</li></ul><h3 id="wxPython"><a href="#wxPython" class="headerlink" title="wxPython"></a>wxPython</h3><p>使用wxPython用于构建GUI</p><h3 id="OpenAI-API"><a href="#OpenAI-API" class="headerlink" title="OpenAI API"></a>OpenAI API</h3><p>用于进行实现情感分析等文本分类问题</p><h3 id="NLTK"><a href="#NLTK" class="headerlink" title="NLTK"></a>NLTK</h3><p>Natural Language Toolkit，主要在实现chain of thought中使用</p><ul><li>首先进行文本清洗，全部转化成小写字母、去除标点符号、去除停用词</li><li>然后进行特征提取</li></ul><h3 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h3><p>用于断点数据的序列化和反序列化</p><h2 id="难点和解决方法"><a href="#难点和解决方法" class="headerlink" title="难点和解决方法"></a>难点和解决方法</h2><h3 id="多步处理文本"><a href="#多步处理文本" class="headerlink" title="多步处理文本"></a>多步处理文本</h3><p>通过定义多个函数，将处理逻辑模块化，按照顺序组合调用。</p><p>在实现中分别定义了不同文本处理函数，然后按照顺序依次进行处理一和处理二</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def process_step1(text):    # 文本清洗    cleaned_text &#x3D; text.lower()  # 将文本转换为小写    cleaned_text &#x3D; remove_punctuation(cleaned_text)  # 去除标点符号    cleaned_text &#x3D; remove_stopwords(cleaned_text)  # 去除停用词    return cleaned_textdef process_step2(text):    # 特征提取    features &#x3D; extract_features(text)  # 提取文本特征    print(features)    feature_text &#x3D; &quot;&quot;    while len(features) !&#x3D; 0:        key &#x3D; max(features)        feature_text &#x3D; feature_text + key + &#39; &#39;        del features[key]    return feature_text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理文本时文本清洗"><a href="#处理文本时文本清洗" class="headerlink" title="处理文本时文本清洗"></a>处理文本时文本清洗</h3><p>大小写转换、去除标点符号和停用词</p><blockquote><p>使用Python的<code>string</code>中的大小写转换</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">cleaned_text &#x3D; text.lower()  # 将文本转换为小写<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>使用Python的<code>string</code>模块中的<code>punctuation</code>字符串，利用<code>str.translate()</code>方法去除标点符号。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def remove_punctuation(text): # 去除标点符号 cleaned_text &#x3D; text.translate(str.maketrans(&quot;&quot;, &quot;&quot;, string.punctuation)) return cleaned_text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>对于停用词，使用NLTK中的<code>stopwords</code>语料库，结合<code>word_tokenize()</code>方法对文本进行分词，然后通过列表推导式去除停用词。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def remove_stopwords(text): # 去除停用词 stop_words &#x3D; set(stopwords.words(&quot;english&quot;)) word_tokens &#x3D; word_tokenize(text) filtered_text &#x3D; [word for word in word_tokens if word.lower() not in stop_words] cleaned_text &#x3D; &quot; &quot;.join(filtered_text) return cleaned_text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="断点重爬-1"><a href="#断点重爬-1" class="headerlink" title="断点重爬"></a>断点重爬</h3><p>在断点功能中，使用Pickle模块将断点数据保存为二进制文件，并在需要时加载和恢复数据，将加载按钮在图形化界面显示</p><h3 id="OpenAI-API的调用"><a href="#OpenAI-API的调用" class="headerlink" title="OpenAI API的调用"></a>OpenAI API的调用</h3><p>使用OpenAI官方提供的Python SDK，通过创建API对象并设置API密钥，调用相应的API方法实现文本分类</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>由于需要在GitHub中设置public，API密钥并未在源代码给出，需要修改API密钥</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
            <tag> OpenAI API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题八</title>
      <link href="/2023/07/27/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%85%AB/"/>
      <url>/2023/07/27/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%85%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出策略打印旋转矩阵</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>$\left[\begin{array}{cccc}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1 n} \ a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2 n} \ a_{31} &amp; a_{32} &amp; \cdots &amp; a_{3 n} \ \cdots &amp; \cdots &amp; &amp; \cdots \ a_{m 1} &amp; a_{m 2} &amp; \cdots &amp; a_{m n}\end{array}\right]$</p><p>对于上述矩阵，假定采用顺时针进行旋转打印</p><p>对打印顺序进行分析，顺时针旋转一圈，打印的是在外面的一层元素</p><p>因此对矩阵进行分层，从外向内划分依次得到以下分层：</p><p>$[1,1,1,1,1,1,1]$<br>$[1,2,2,2,2,2,1]$<br>$[1,2,3,3,3,2,1]$<br>$[1,2,2,2,2,2,1]$<br>$[1,1,1,1,1,1,1]$</p><p>采用左上$(top,left)$、左下$(bottom,left)$、右上$(top,right)$、右下$(top,right)$四个点定位各层的位置，将打印层分为上下左右四个片区分别进行打印，遍历完当前层的元素后<em>left</em>++、<em>top</em>++、<em>right</em>–、<em>bottom</em>–，进入下一层开始遍历，最终得到整个旋转矩阵。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;void PrintMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;int r &#x3D; matrix.size();int c &#x3D; matrix[0].size();int top &#x3D; 0, bottom &#x3D; r - 1, left &#x3D; 0, right &#x3D; c - 1;while (left &lt;&#x3D; right &amp;&amp; top &lt;&#x3D; bottom) &#123;for (int i &#x3D; left; i &lt;&#x3D; right; i++) &#123;cout &lt;&lt; matrix[top][i] &lt;&lt; &quot; &quot;;&#125;for (int i &#x3D; top + 1; i &lt;&#x3D; bottom; i++) &#123;cout &lt;&lt; matrix[i][right] &lt;&lt; &quot; &quot;;&#125;if (left &lt; right &amp;&amp; top &lt; bottom) &#123;for (int i &#x3D; right - 1; i &gt; left; i--) &#123;cout &lt;&lt; matrix[bottom][i] &lt;&lt; &quot; &quot;;&#125;for (int i &#x3D; bottom; i &gt; top; i--) &#123;cout &lt;&lt; matrix[i][left] &lt;&lt; &quot; &quot;;&#125;&#125;top++;left++;right--;bottom--;&#125;cout &lt;&lt; endl;&#125;int main() &#123;vector&lt;vector&lt;int&gt;&gt; matrix &#x3D; &#123; &#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125; &#125;;vector&lt;vector&lt;int&gt;&gt; matrix1 &#x3D; &#123; &#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;,&#123;13,14,15,16&#125; &#125;;PrintMatrix(matrix);PrintMatrix(matrix1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个问题中，每一元素都要被遍历一次，因此算法的时间复杂度是$O(r*c)$，r为矩阵行数，c为矩阵列数，本算法并不需要开辟额外的空间，故空间复杂度为$O(1)$。</p><h3 id="附加思考"><a href="#附加思考" class="headerlink" title="附加思考"></a>附加思考</h3><h4 id="顺时针旋转矩阵-90°"><a href="#顺时针旋转矩阵-90°" class="headerlink" title="顺时针旋转矩阵$90°$"></a>顺时针旋转矩阵$90°$</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;int&gt;&gt; RotateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;vector&lt;vector&lt;int&gt; &gt; rotate;vector&lt;int&gt; temp;int r &#x3D; matrix.size(), c &#x3D; matrix[0].size();for (int j &#x3D; 0; j &lt; c; j++) &#123;for (int i &#x3D; r - 1; i &gt;&#x3D; 0; i--) &#123;temp.push_back(matrix[i][j]);&#125;rotate.push_back(temp);temp.clear();&#125;return rotate;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="“之”字形打印矩阵"><a href="#“之”字形打印矩阵" class="headerlink" title="“之”字形打印矩阵"></a>“之”字形打印矩阵</h4><p>使用两个指针分别从00位置开始，一个指针沿右下的路线抵达矩阵右下角元素，另一个沿下右的路线抵达矩阵右下角，两指针确定的直线上再根据奇偶性判断打印方向</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void ZhiPrint(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;int r &#x3D; matrix.size();int c &#x3D; matrix[0].size();int ar &#x3D; 0, ac &#x3D; 0;int br &#x3D; 0, bc &#x3D; 0;int n;do &#123;n &#x3D; ar + ac;if ( n % 2 &#x3D;&#x3D; 0) &#123;for (int i &#x3D; ar; i &lt;&#x3D; br; i++) &#123;cout &lt;&lt; matrix[i][n - i] &lt;&lt; &quot; &quot;;&#125;&#125;else &#123;for (int i &#x3D; br; i &gt;&#x3D; ar; i--) &#123;cout &lt;&lt; matrix[i][n - i] &lt;&lt; &quot; &quot;;&#125;&#125;if (br &lt; r) &#123;br++;&#125;else &#123;bc++;&#125;if (ac &lt; c) &#123;ac++;&#125;else &#123;ar++;&#125;&#125; while (ar !&#x3D; br &amp;&amp; ac !&#x3D; bc);cout &lt;&lt; matrix[r - 1][c - 1] &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出策略返回一个m*n矩阵中从[1,1]到[m,n]的和最小的一条路径。</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>已知在某一点时想要确定路径下一个元素的位置，路径方向只能是向下&#x2F;向右，因此网格的第一行&#x2F;第一列上的元素下一位置只能是该元素的右边&#x2F;左边，然后确定剩下路径</p><p>对于每一待定元素可由其左边&#x2F;上边的元素到达，比较两数的大小，确定更小的那一个，然后依次得到不同路径，直至抵达[m,n]，再通过回溯得到最小路径。</p><ul><li>当 $i&gt;0$ 且 $j&#x3D;0$ 时， $d p[i][0]&#x3D;d p[i-1][0]+\operatorname{grid}[i][0]$ </li><li>当 $i&#x3D;0$ 且 $j&gt;0$ 时， $d p[0][j]&#x3D;d p[0][j-1]+\operatorname{grid}[0][j]$ </li><li>当 $i&gt;0$ 且 $j&gt;0$ 时， $d p[i][j]&#x3D;\min (d p[i-1][j], d p[i][j-1])+\operatorname{grid}[i][j]$</li></ul><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;int MinPath(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;int r &#x3D; matrix.size(), c &#x3D; matrix.size();auto dp &#x3D; vector&lt;vector&lt;int&gt; &gt;(r, vector&lt;int&gt;(c));dp[0][0] &#x3D; matrix[0][0];for (int i &#x3D; 1; i &lt; r; i++) &#123;dp[i][0] &#x3D; dp[i - 1][0] + matrix[i][0];&#125;for (int i &#x3D; 1; i &lt; c; i++) &#123;dp[0][i] &#x3D; dp[0][i - 1] + matrix[0][i];&#125;for (int i &#x3D; 1; i &lt; r; i++) &#123;for (int j &#x3D; 1; j &lt; c; j++) &#123;dp[i][j] &#x3D; min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j];&#125;&#125;return dp[r - 1][c - 1];&#125;int main() &#123;vector&lt;vector&lt;int&gt; &gt; matrix &#x3D; &#123; &#123;1,3,1&#125;,&#123;1,5,1&#125;,&#123;4,2,1&#125; &#125;;cout &lt;&lt; MinPath(matrix) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要遍历整个数组，时间复杂度是$O(mn)$</p><p>重新开辟了一个大小相同的向量空间，空间复杂度是$O(mn)$，在空间方面可以进行优化，直接在原矩阵上进行dp操作，不使用额外空间，改进到$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 旋转矩阵 </tag>
            
            <tag> 二维最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Baseline实现</title>
      <link href="/2023/07/27/Baseline%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/07/27/Baseline%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>友情连接：<a href="https://datawhaler.feishu.cn/docx/WirRd4oB5oMe2ixw1rxcTnHFnHh">Datawhale-NLP实践</a></p><p>GitHub项目地址：<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project</a></p><h2 id="import库"><a href="#import库" class="headerlink" title="import库"></a>import库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入LogisticRegression回归模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarning<span class="token comment"># 引入分词器</span><span class="token keyword">from</span> nltk <span class="token keyword">import</span> word_tokenize<span class="token punctuation">,</span> ngramssimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中比较重要的几个库：<code>pandas</code>,<code>sklearn</code>,<code>nltk</code>。上述三个库进行分开讲解。</p><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><ul><li>pandas是一个第三方的库，因此需要先下载</li></ul><pre class="line-numbers language-none"><code class="language-none">pip install pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pandas的功能非常强大，早在学习的时候便能窥见一二。</p><p>pandas的主要数据结构<code>Series</code>和<code>DataFrame</code>，分别对应一维数据和二维数据</p><p>Pandas 就像一把万能瑞士军刀，下面仅列出了它的部分优势 ：</p><ul><li>处理浮点与非浮点数据里的<strong>缺失数据</strong>，表示为 <code>NaN</code>；</li><li>大小可变：<strong>插入或删除</strong> DataFrame 等多维对象的列；</li><li>自动、显式<strong>数据对齐</strong>：显式地将对象与一组标签对齐，也可以忽略标签，在 Series、DataFrame 计算时自动与数据对齐；</li><li>强大、灵活的<strong>分组</strong>（group by）功能：<strong>拆分-应用-组合</strong>数据集，聚合、转换数据；</li><li>把 Python 和 NumPy 数据结构里不规则、不同索引的数据<strong>轻松</strong>地转换为 DataFrame 对象；</li><li>基于智能标签，对大型数据集进行<strong>切片</strong>、<strong>花式索引</strong>、<strong>子集分解</strong>等操作；</li><li>直观地<strong>合并（merge）</strong>、<strong>连接（join）</strong>数据集；</li><li>灵活地<strong>重塑（reshape）</strong>、<strong>透视（pivot）</strong>数据集；</li><li><strong>轴</strong>支持结构化标签：一个刻度支持多个标签；</li><li>成熟的 IO 工具：读取<strong>文本文件</strong>（CSV 等支持分隔符的文件）、Excel 文件、数据库等来源的数据，利用超快的 <strong>HDF5</strong> 格式保存 &#x2F; 加载数据；</li><li><strong>时间序列</strong>：支持日期范围生成、频率转换、移动窗口统计、移动窗口线性回归、日期位移等时间序列功能。</li></ul><p>在这里，我们主要用到的就是读取csv文件，然后对读取到的数据进行行操作、列操作。</p><h3 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h3><p>scikit-learn，又写作sklearn，是一个开源的基于python语言的机器学习工具包。它通过NumPy, SciPy和Matplotlib等python数值计算的库实现高效的算法应用，并且涵盖了几乎所有主流机器学习算法。</p><p>在这里baseline使用的是Logistic Regression，当然对于分类而言，还可以使用random forest、SVM等等，也是sklearn库中的模块，可以在baseline的基础上进行操作。</p><h3 id="nltk"><a href="#nltk" class="headerlink" title="nltk"></a>nltk</h3><p>nltk全称Natural Language Toolkit，自然语言处理工具包，在NLP领域中，最常使用的一个Python库。</p><p>在baseline中，使用了nltk库，对文本进行一系列操作如单词切分、去除停用词、抽取关键词等等操作</p><h2 id="实现任务一"><a href="#实现任务一" class="headerlink" title="实现任务一"></a>实现任务一</h2><ul><li>task 1：判断是否是医学论文</li></ul><p>官方给出的A集中已经含有Keywords一项，也就是说在前期工作中并不需要完成任务二。</p><p>对于任务一来说，是一个简单的文本分类问题，官方给出了训练集，那么可以采用Logistic Regression来做分类的预测，实际上random forest和SVM也可以，在后文会略微提到一点，因为没有得到显著的提升效果。</p><h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><p>逻辑回归（Logistic Regression）与线性回归（Linear Regression）都是一种广义线性模型（generalized linear model）。逻辑回归假设因变量 y 服从伯努利分布，而线性回归假设因变量 y 服从高斯分布。 因此与线性回归有很多相同之处，去除Sigmoid映射函数的话，逻辑回归算法就是一个线性回归。可以说，逻辑回归是以线性回归为理论支持的，但是逻辑回归通过Sigmoid函数引入了非线性因素，因此可以轻松处理0&#x2F;1分类问题。</p><p>首先引入Sigmoid函数，称逻辑函数：<br>$$<br>g(z)&#x3D; \frac {1}{1+e^{-z}}<br>$$<br>上述函数对于解决二分类问题十分重要</p><p>逻辑回归的假设函数形式如下：<br>$$<br>h_\theta(x)&#x3D;g\left(\theta^T x\right), g(z)&#x3D;\frac{1}{1+e^{-z}}<br>$$<br>得到：<br>$$<br>h_\theta(x)&#x3D;\frac{1}{1+e^{-\theta^T x}}<br>$$<br>$x$是输入数据，$\theta$是求取参数</p><p>逻辑回归就是计算在给定上述两个参数的条件下$y&#x3D;1$的概率。</p><p>做假设：<br>$$<br>P(y&#x3D;1 \mid x ; \theta)&#x3D;g\left(\theta^T x\right)&#x3D;\frac{1}{1+e^{-\theta^T}}<br>$$<br>决策函数就是：<br>$$<br>P(y&#x3D;1|x)&gt;0.5 \Rightarrow y^*&#x3D;1<br>$$</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>上一节中都是Logistic Regression的原理，在这里一笔带过，如果单纯的手撕逻辑回归代码会相当耗时，sklearn库已经为我们封装好了模型，只要将训练集的相关列组成文本向量然后进行训练就可以得到预测结果。</p><p>首先使用pandas提供的IO操作进行数据集的读取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行训练集、测试集的文本拼接：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上都是数据的预处理，接下来才是重点</p><ul><li><p>将文本向量化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>将数据集输入模型进行训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token operator">**</span>param_dist<span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，Logistic Regression模型中的超参数在另一个程序中通过交叉验证得到，以下是程序运行后得到的一个优解</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">param_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">2.8496190796154743</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token string">'l2'</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体程序不在这里赘述，感兴趣的见附录。</p></li><li><p>对测试机label进行预测</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成csv文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>最终，在笔者使用了一点trick的情况下，跑出来的分数还是比较可观的</p><p><img src="/imgs/baseline/2.png" alt="image-20230727173735393"></p><p>但是，如果是关键词未给出的B集，Logistic Regression的表现就会比较糟糕</p><h2 id="任务一模型的选择"><a href="#任务一模型的选择" class="headerlink" title="任务一模型的选择"></a>任务一模型的选择</h2><p>在超参数缺省的情况下，random forest的表现最好，随后依次是Logistic Regression、SVM；</p><p>如果分别对模型的参数进行交叉验证得到一组优化的参数，Logistic Regression的表现最好，随后依次是random forest、SVM；</p><p>也就是说，SVM在本分类中并不适合。</p><p>Logistic Regression和random forest两者的差距不大，都可以选择</p><h2 id="实现任务二"><a href="#实现任务二" class="headerlink" title="实现任务二"></a>实现任务二</h2><ul><li>task 2：关键词抽取</li></ul><p>官方更新的B集中，去除了Keywords一列，因此需要进行提取</p><p>baseline中的实现过程是对文本进行关键词的抽取</p><p>相关库已经import，在上述任务一的基础上进行后续操作</p><ul><li><p>停用词的设置，这里直接使用nltk自带的停用词库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">stops <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定义筛选函数</p><p>从给定文档的标题和摘要中提取关键词吗，遵循特定的过程来识别频繁出现的词组（二元组），作为潜在的关键词。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_keywords_by_freq</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> abstract<span class="token punctuation">)</span><span class="token punctuation">:</span>    ngrams_count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>title<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>abstract<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>ngrams_count<span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams_count<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ngrams_count = list(ngrams(word_tokenize(title.lower()), 2)) + list(ngrams(word_tokenize(abstract.lower()), 2))</code>：首先，将<code>title</code>和<code>abstract</code>拆分成小写单词，并从标题和摘要中创建二元组（两个连续的单词序列）。这些二元组存储在<code>ngrams_count</code>列表中</li><li><code>ngrams_count = pd.DataFrame(ngrams_count)</code>：将<code>ngrams_count</code>列表中的二元组转换为pandas DataFrame，以便更容易地进行数据处理</li><li><code>ngrams_count = ngrams_count[~ngrams_count[0].isin(stops)]</code> 和 <code>ngrams_count = ngrams_count[~ngrams_count[1].isin(stops)]</code>：在这里，函数过滤掉包含停用词的二元组。停用词是常用词，在文本分析中通常被忽略，因为它们没有很重要的意义</li><li><code>ngrams_count = ngrams_count[ngrams_count[0].apply(len) &gt; 3]</code> 和 <code>ngrams_count = ngrams_count[ngrams_count[1].apply(len) &gt; 3]</code>：函数过滤掉第一个和第二个单词长度小于等于3个字符的二元组。这样做是为了去除非常短和不太有信息量的短语</li><li><code>ngrams_count[&#39;phrase&#39;] = ngrams_count[0] + &#39; &#39; + ngrams_count[1]</code>：将每个二元组的第一个单词和第二个单词连接起来，创建一个名为’phrase’的新列</li><li><code>ngrams_count = ngrams_count[&#39;phrase&#39;].value_counts()</code>：然后，函数计算每个唯一二元组短语的出现次数</li><li><code>ngrams_count = ngrams_count[ngrams_count &gt; 1]</code>：它过滤掉仅出现一次的二元组短语，因为它们可能作为关键词的相关性较低</li><li><code>return list(ngrams_count.index)[:6]</code>：最后，函数返回出现频率最高的前6个二元组短语作为提取的关键词</li></ul></li><li><p>对测试集提取关键词</p><p>使用之前定义的<code>extract_keywords_by_freq</code>函数从给定的测试数据中提取关键词，并将提取到的关键词拼接成一个字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> test<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取第每一行数据的标题与摘要并提取关键词</span>    prediction_keywords <span class="token operator">=</span> extract_keywords_by_freq<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>abstract<span class="token punctuation">)</span>    <span class="token comment"># 利用文章标题进一步提取关键词</span>    prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> prediction_keywords<span class="token punctuation">]</span>    <span class="token comment"># 如果未能提取到关键词</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>    test_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>prediction_keywords = extract_keywords_by_freq(row[1].title, row[1].abstract)</code>: 从当前行的标题和摘要中调用<code>extract_keywords_by_freq</code>函数提取关键词，并将结果存储在<code>prediction_keywords</code>变量中。</p></li><li><p><code>prediction_keywords = [x.title() for x in prediction_keywords]</code>: 将<code>prediction_keywords</code>中的每个关键词的首字母大写，形成一个新的列表，这是为了统一关键词的格式。</p></li><li><p><code>if len(prediction_keywords) == 0: prediction_keywords = [&#39;A&#39;, &#39;B&#39;]</code>: 如果未能提取到关键词（即<code>prediction_keywords</code>为空列表），则将默认关键词<code>[&#39;A&#39;, &#39;B&#39;]</code>赋值给<code>prediction_keywords</code>。</p></li><li><p><code>test_words.append(&#39;; &#39;.join(prediction_keywords))</code>: 将处理后的关键词列表转换为以分号为分隔符的字符串，并将这个字符串添加到<code>test_words</code>列表中。</p></li></ul></li><li><p>将得到的test_words存入Series中，并生成csv文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_wordstest<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task2.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>抽取式关键字存在比较大的缺陷，文献的标题、摘要中不一定会出现关键字，因此造成的准确率不高，跑出来的分数也不是很好看。</p><h2 id="任务顺序的变换"><a href="#任务顺序的变换" class="headerlink" title="任务顺序的变换"></a>任务顺序的变换</h2><p>由于任务二是提取关键字，而任务一的准确率又和关键字挂钩，有没有可能通过调整任务的顺序，先提取关键字，然后将关键字加入进行训练以得到更准确的分类。</p><p>这种idea很容易实现，因为代码都是现成的，只需要稍加改动就可以了，原理在前面两节都已经提及，实现代码见附录。</p><p>虽然分数都不是很好看，但是有那么一丢丢进步。</p><p><img src="/imgs/baseline/3.png" alt="image-20230727173918592"></p><p><img src="/imgs/baseline/4.png" alt="image-20230727174658234"></p><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>上述都只是一个baseline的实现过程，也就是说都还有进步空间，对于传统机器学习，已经到达极限。</p><p>后续笔者冲榜的时候对任务一的实现进行改进，使用了BERT模型，对于文本分类的准确度，有较大的提升。</p><p>对于任务二，笔者没有进行改动，但是看了群友的思路后，觉得抽取式关键词的准确率也就那样了，可能要转向生成式关键词，也就是使用LLM，笔者困于时间，在deadline前没有足够时间完成</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="baseline-tuning-py"><a href="#baseline-tuning-py" class="headerlink" title="baseline_tuning.py"></a>baseline_tuning.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> RandomizedSearchCV<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> uniform<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 定义参数搜索空间</span>param_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> uniform<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'l1'</span><span class="token punctuation">,</span> <span class="token string">'l2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">]</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span class="token comment"># 创建CountVectorizer</span>vectorizer <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 转换文本数据为特征向量</span>train_vector <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 创建LogisticRegression分类器</span>logreg <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 初始化RandomizedSearchCV，传入模型、参数搜索空间、交叉验证的折数等</span>random_search <span class="token operator">=</span> RandomizedSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>logreg<span class="token punctuation">,</span> param_distributions<span class="token operator">=</span>param_dist<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_iter<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 开始参数搜索与交叉验证</span>random_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 输出最佳参数组合</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best parameters: "</span><span class="token punctuation">,</span> random_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="baseline1-py"><a href="#baseline1-py" class="headerlink" title="baseline1.py"></a>baseline1.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入LogisticRegression回归模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarningsimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>param_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">2.8496190796154743</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token string">'l2'</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token operator">**</span>param_dist<span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="baseline2-py"><a href="#baseline2-py" class="headerlink" title="baseline2.py"></a>baseline2.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入LogisticRegression回归模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarning<span class="token comment"># 引入分词器</span><span class="token keyword">from</span> nltk <span class="token keyword">import</span> word_tokenize<span class="token punctuation">,</span> ngramssimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwordsparam_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">2.8496190796154743</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token string">'l2'</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'testB.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token operator">**</span>param_dist<span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 定义停用词，去掉出现较多，但对文章不关键的词语</span>stops <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义方法按照词频筛选关键词</span><span class="token keyword">def</span> <span class="token function">extract_keywords_by_freq</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> abstract<span class="token punctuation">)</span><span class="token punctuation">:</span>    ngrams_count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>title<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>abstract<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>ngrams_count<span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams_count<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">## 对测试集提取关键词</span>test_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> test<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取第每一行数据的标题与摘要并提取关键词</span>    prediction_keywords <span class="token operator">=</span> extract_keywords_by_freq<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>abstract<span class="token punctuation">)</span>    <span class="token comment"># 利用文章标题进一步提取关键词</span>    prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> prediction_keywords<span class="token punctuation">]</span>    <span class="token comment"># 如果未能提取到关键词</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>    test_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_wordstest<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task2.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="baseline3-py"><a href="#baseline3-py" class="headerlink" title="baseline3.py"></a>baseline3.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入LogisticRegression回归模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarning<span class="token comment"># 引入分词器</span><span class="token keyword">from</span> nltk <span class="token keyword">import</span> word_tokenize<span class="token punctuation">,</span> ngramssimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwordsparam_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">2.8496190796154743</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token string">'l2'</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'testB.csv'</span><span class="token punctuation">)</span><span class="token comment"># fillna()函数用于填充缺失数据，这里将标题和摘要的缺失值填充为空字符串</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 定义停用词，去掉出现较多，但对文章不关键的词语</span>stops <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义方法按照词频筛选关键词</span><span class="token keyword">def</span> <span class="token function">extract_keywords_by_freq</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> abstract<span class="token punctuation">)</span><span class="token punctuation">:</span>    ngrams_count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>title<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>abstract<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>ngrams_count<span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams_count<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment"># 对测试集提取关键词</span>test_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> test<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取第每一行数据的标题与摘要并提取关键词</span>    prediction_keywords <span class="token operator">=</span> extract_keywords_by_freq<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>abstract<span class="token punctuation">)</span>    <span class="token comment"># 利用文章标题进一步提取关键词</span>    prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> prediction_keywords<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span>    <span class="token comment"># 如果未能提取到关键词</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>    test_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_words<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token operator">**</span>param_dist<span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task2.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="svm-test-py"><a href="#svm-test-py" class="headerlink" title="svm_test.py"></a>svm_test.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarningsimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> SVC<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'svm.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="randomforest-test-py"><a href="#randomforest-test-py" class="headerlink" title="randomforest_test.py"></a>randomforest_test.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入随机森林分类器</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token comment"># 导入warnings库，过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarningsimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>    <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> \               train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入随机森林分类器</span>model <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 开始训练，可以考虑修改n_estimators（树的数量）和其他超参数来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'randomforest.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP实践的一点点笔记</title>
      <link href="/2023/07/26/NLP%E5%AE%9E%E8%B7%B5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/26/NLP%E5%AE%9E%E8%B7%B5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>友情链接：<a href="https://datawhaler.feishu.cn/docx/WirRd4oB5oMe2ixw1rxcTnHFnHh">Datawhale-NLP实践</a></p><p>GitHub项目地址：<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>miniconda的安装，本人选择了anaconda的安装，本质上来说miniconda是anaconda的轻量版，anaconda完整性更好</li><li>对于镜像源，本人并没有进行替换，增加了清华源</li></ul><h3 id="pytorch环境的搭建"><a href="#pytorch环境的搭建" class="headerlink" title="pytorch环境的搭建"></a>pytorch环境的搭建</h3><ul><li><p>创建conda环境</p><pre class="line-numbers language-none"><code class="language-none">conda create -n pytorch python&#x3D;3.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>环境名称：pytorch</p><p>python版本：3.10</p></li><li><p>激活pytorch环境</p><pre class="line-numbers language-none"><code class="language-none">conda activate pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从base-&gt;pytorch</p></li><li><p>安装pytorch</p><p>先在<strong>Anaconda Powershell Prompt</strong>中输入：</p><pre class="line-numbers language-none"><code class="language-none">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到如下图片：</p><p><img src="/imgs/nlpproject/1.png" alt="image-20230721163031733"></p><p>CUDA Version&#x3D;12.0，因此我的pytorch-cuda版本最高不能超过12.0，在这里安装了11.8版本：</p><pre class="line-numbers language-none"><code class="language-none">conda install pytorch torchvision torchaudio pytorch-cuda&#x3D;11.8 -c pytorch -c nvidia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证pytorch是否安装成功</p><p>进入pytorch环境，键入python进入python编译器，输入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchtorch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回<code>True</code>则安装成功</p></li></ul><h2 id="读题"><a href="#读题" class="headerlink" title="读题"></a>读题</h2><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p><a href="https://challenge.xfyun.cn/topic/info?type=abstract-of-the-paper&ch=ZuoaKcY">基于论文摘要的文本分类与关键词抽取挑战赛</a></p><ul><li><p>task 1</p><p>判断是否是医学论文</p></li><li><p>task 2</p><p>关键词抽取</p></li></ul><h3 id="baseline"><a href="#baseline" class="headerlink" title="baseline"></a>baseline</h3><ol><li>传统方法</li><li>BERT预训练模型</li><li>微调chatGLM2-6B</li></ol><h2 id="跑通baseline"><a href="#跑通baseline" class="headerlink" title="跑通baseline"></a>跑通baseline</h2><p>首先fork了其中一个<a href="https://aistudio.baidu.com/aistudio/projectdetail/6522950?sUid=377372&shared=1&ts=1689827255213">baseline</a>，运行在百度AI Studio上，选择<code>V100 16G</code>运行</p><p>运行完之后，提交<code>submit_task1.csv</code>，获得分数0.99384</p><p><del>对于第二段代码生成的<code>submit_task2.csv</code>，结果存在一定问题，还需要进行相关debug</del></p><h2 id="对baseline进行fine-tune"><a href="#对baseline进行fine-tune" class="headerlink" title="对baseline进行fine-tune"></a>对baseline进行fine-tune</h2><p>将baseline下载到本地，对于Logistic回归模型进行替换，替换模型有：SVM（支持向量机）、随机森林模型，对baseline进行相关代码替换</p><p>结果显示，在default参数的情况下，Logistic回归模型表现更好，Random Forest次之，SVM表现最差，因此这条选择不同分类器的优化路径行不通。</p><p>仍然基于baseline，对LogisticRegression模型的超参数进行调参优化，使用交叉验证技术来找到最佳的参数组合，将得到的参数组合重新应用于baseline，得到的结果略微优于原结果</p><h2 id="使用BERT模型进行分类"><a href="#使用BERT模型进行分类" class="headerlink" title="使用BERT模型进行分类"></a>使用BERT模型进行分类</h2><p>使用了BERT模型进行预训练</p><p>相关参数进行调整：</p><ul><li>考虑到本地的硬件配置（4GB显存），采用batch_xize&#x3D;16，在第二轮训练中就会爆显存；设置batch_size&#x3D;10</li><li>为了防止数据过拟合，设置epoch&#x3D;10</li></ul><p>训练过程如下：</p><pre class="line-numbers language-none"><code class="language-none">Device: cudainputs: &#123;&#39;input_ids&#39;: tensor([[  101,  2470,  2006,  ...,  6742,  4118,   102],        [  101,  2070,  2047,  ...,  2951,  4106,   102],        [  101, 12509,  1011,  ...,  3728,  2764,   102],        ...,        [  101, 11968,  6767,  ...,  1998,  3707,   102],        [  101,  3935,  8360,  ...,  2256,  9896,   102],        [  101, 11742,  6047,  ...,  1006, 24529,   102]]), &#39;token_type_ids&#39;: tensor([[0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        ...,        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0]]), &#39;attention_mask&#39;: tensor([[1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        ...,        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1]])&#125;targets: tensor([0, 1, 1, 0, 0, 1, 1, 1, 0, 0])Epoch 1&#x2F;10, Step: 49&#x2F;540, total loss:15.7107Epoch 1&#x2F;10, Step: 99&#x2F;540, total loss:7.6416Epoch 1&#x2F;10, Step: 149&#x2F;540, total loss:6.4683Epoch 1&#x2F;10, Step: 199&#x2F;540, total loss:7.7938Epoch 1&#x2F;10, Step: 249&#x2F;540, total loss:6.7497Epoch 1&#x2F;10, Step: 299&#x2F;540, total loss:6.3569Epoch 1&#x2F;10, Step: 349&#x2F;540, total loss:5.7305Epoch 1&#x2F;10, Step: 399&#x2F;540, total loss:7.5373Epoch 1&#x2F;10, Step: 449&#x2F;540, total loss:3.2843Epoch 1&#x2F;10, Step: 499&#x2F;540, total loss:5.0083Epoch 1, accuracy: 0.9567, validation loss: 0.0112Epoch 2&#x2F;10, Step: 9&#x2F;540, total loss:6.4998Epoch 2&#x2F;10, Step: 59&#x2F;540, total loss:3.8504Epoch 2&#x2F;10, Step: 109&#x2F;540, total loss:4.3037Epoch 2&#x2F;10, Step: 159&#x2F;540, total loss:3.7314Epoch 2&#x2F;10, Step: 209&#x2F;540, total loss:2.8143Epoch 2&#x2F;10, Step: 259&#x2F;540, total loss:2.6459Epoch 2&#x2F;10, Step: 309&#x2F;540, total loss:4.2030Epoch 2&#x2F;10, Step: 359&#x2F;540, total loss:4.3778Epoch 2&#x2F;10, Step: 409&#x2F;540, total loss:3.6712Epoch 2&#x2F;10, Step: 459&#x2F;540, total loss:3.7527Epoch 2&#x2F;10, Step: 509&#x2F;540, total loss:4.8828Epoch 2, accuracy: 0.9717, validation loss: 0.0076Epoch 3&#x2F;10, Step: 19&#x2F;540, total loss:4.3283Epoch 3&#x2F;10, Step: 69&#x2F;540, total loss:1.9251Epoch 3&#x2F;10, Step: 119&#x2F;540, total loss:3.9258Epoch 3&#x2F;10, Step: 169&#x2F;540, total loss:3.9836Epoch 3&#x2F;10, Step: 219&#x2F;540, total loss:2.5203Epoch 3&#x2F;10, Step: 269&#x2F;540, total loss:3.0695Epoch 3&#x2F;10, Step: 319&#x2F;540, total loss:3.0718Epoch 3&#x2F;10, Step: 369&#x2F;540, total loss:2.8674Epoch 3&#x2F;10, Step: 419&#x2F;540, total loss:1.6683Epoch 3&#x2F;10, Step: 469&#x2F;540, total loss:3.6798Epoch 3&#x2F;10, Step: 519&#x2F;540, total loss:2.5205Epoch 3, accuracy: 0.9667, validation loss: 0.0095Epoch 4&#x2F;10, Step: 29&#x2F;540, total loss:1.2602Epoch 4&#x2F;10, Step: 79&#x2F;540, total loss:1.7367Epoch 4&#x2F;10, Step: 129&#x2F;540, total loss:1.7730Epoch 4&#x2F;10, Step: 179&#x2F;540, total loss:2.7801Epoch 4&#x2F;10, Step: 229&#x2F;540, total loss:2.7113Epoch 4&#x2F;10, Step: 279&#x2F;540, total loss:2.2387Epoch 4&#x2F;10, Step: 329&#x2F;540, total loss:1.8035Epoch 4&#x2F;10, Step: 379&#x2F;540, total loss:3.1783Epoch 4&#x2F;10, Step: 429&#x2F;540, total loss:2.4875Epoch 4&#x2F;10, Step: 479&#x2F;540, total loss:1.0889Epoch 4&#x2F;10, Step: 529&#x2F;540, total loss:1.8472Epoch 4, accuracy: 0.9717, validation loss: 0.0093Epoch 5&#x2F;10, Step: 39&#x2F;540, total loss:1.4521Epoch 5&#x2F;10, Step: 89&#x2F;540, total loss:2.7088Epoch 5&#x2F;10, Step: 139&#x2F;540, total loss:1.3743Epoch 5&#x2F;10, Step: 189&#x2F;540, total loss:0.9969Epoch 5&#x2F;10, Step: 239&#x2F;540, total loss:3.5632Epoch 5&#x2F;10, Step: 289&#x2F;540, total loss:1.6101Epoch 5&#x2F;10, Step: 339&#x2F;540, total loss:0.6479Epoch 5&#x2F;10, Step: 389&#x2F;540, total loss:1.6050Epoch 5&#x2F;10, Step: 439&#x2F;540, total loss:1.4850Epoch 5&#x2F;10, Step: 489&#x2F;540, total loss:1.8811Epoch 5&#x2F;10, Step: 539&#x2F;540, total loss:1.7147Epoch 5, accuracy: 0.9800, validation loss: 0.0079Epoch 6&#x2F;10, Step: 49&#x2F;540, total loss:0.9615Epoch 6&#x2F;10, Step: 99&#x2F;540, total loss:0.7971Epoch 6&#x2F;10, Step: 149&#x2F;540, total loss:1.5873Epoch 6&#x2F;10, Step: 199&#x2F;540, total loss:4.3790Epoch 6&#x2F;10, Step: 249&#x2F;540, total loss:1.6141Epoch 6&#x2F;10, Step: 299&#x2F;540, total loss:2.8523Epoch 6&#x2F;10, Step: 349&#x2F;540, total loss:2.9342Epoch 6&#x2F;10, Step: 399&#x2F;540, total loss:1.8583Epoch 6&#x2F;10, Step: 449&#x2F;540, total loss:1.2382Epoch 6&#x2F;10, Step: 499&#x2F;540, total loss:2.0442Epoch 6, accuracy: 0.9633, validation loss: 0.0106Epoch 7&#x2F;10, Step: 9&#x2F;540, total loss:1.9456Epoch 7&#x2F;10, Step: 59&#x2F;540, total loss:0.3481Epoch 7&#x2F;10, Step: 109&#x2F;540, total loss:0.7371Epoch 7&#x2F;10, Step: 159&#x2F;540, total loss:1.0779Epoch 7&#x2F;10, Step: 209&#x2F;540, total loss:0.5513Epoch 7&#x2F;10, Step: 259&#x2F;540, total loss:0.6267Epoch 7&#x2F;10, Step: 309&#x2F;540, total loss:0.6717Epoch 7&#x2F;10, Step: 359&#x2F;540, total loss:0.0804Epoch 7&#x2F;10, Step: 409&#x2F;540, total loss:0.7880Epoch 7&#x2F;10, Step: 459&#x2F;540, total loss:1.2405Epoch 7&#x2F;10, Step: 509&#x2F;540, total loss:0.3852Epoch 7, accuracy: 0.9717, validation loss: 0.0113Epoch 8&#x2F;10, Step: 19&#x2F;540, total loss:0.0597Epoch 8&#x2F;10, Step: 69&#x2F;540, total loss:0.1654Epoch 8&#x2F;10, Step: 119&#x2F;540, total loss:0.0882Epoch 8&#x2F;10, Step: 169&#x2F;540, total loss:0.0558Epoch 8&#x2F;10, Step: 219&#x2F;540, total loss:2.7450Epoch 8&#x2F;10, Step: 269&#x2F;540, total loss:2.9093Epoch 8&#x2F;10, Step: 319&#x2F;540, total loss:0.2964Epoch 8&#x2F;10, Step: 369&#x2F;540, total loss:2.9049Epoch 8&#x2F;10, Step: 419&#x2F;540, total loss:0.8974Epoch 8&#x2F;10, Step: 469&#x2F;540, total loss:0.8773Epoch 8&#x2F;10, Step: 519&#x2F;540, total loss:0.8961Epoch 8, accuracy: 0.9783, validation loss: 0.0136Epoch 9&#x2F;10, Step: 29&#x2F;540, total loss:0.6021Epoch 9&#x2F;10, Step: 79&#x2F;540, total loss:0.2185Epoch 9&#x2F;10, Step: 129&#x2F;540, total loss:0.0978Epoch 9&#x2F;10, Step: 179&#x2F;540, total loss:0.8829Epoch 9&#x2F;10, Step: 229&#x2F;540, total loss:0.9440Epoch 9&#x2F;10, Step: 279&#x2F;540, total loss:0.4725Epoch 9&#x2F;10, Step: 329&#x2F;540, total loss:0.8252Epoch 9&#x2F;10, Step: 379&#x2F;540, total loss:0.2206Epoch 9&#x2F;10, Step: 429&#x2F;540, total loss:0.2055Epoch 9&#x2F;10, Step: 479&#x2F;540, total loss:1.2238Epoch 9&#x2F;10, Step: 529&#x2F;540, total loss:0.3699Epoch 9, accuracy: 0.9767, validation loss: 0.0137Epoch 10&#x2F;10, Step: 39&#x2F;540, total loss:0.1256Epoch 10&#x2F;10, Step: 89&#x2F;540, total loss:0.0799Epoch 10&#x2F;10, Step: 139&#x2F;540, total loss:0.0696Epoch 10&#x2F;10, Step: 189&#x2F;540, total loss:0.0255Epoch 10&#x2F;10, Step: 239&#x2F;540, total loss:0.2567Epoch 10&#x2F;10, Step: 289&#x2F;540, total loss:0.0501Epoch 10&#x2F;10, Step: 339&#x2F;540, total loss:1.4652Epoch 10&#x2F;10, Step: 389&#x2F;540, total loss:2.1342Epoch 10&#x2F;10, Step: 439&#x2F;540, total loss:0.2545Epoch 10&#x2F;10, Step: 489&#x2F;540, total loss:0.0748Epoch 10&#x2F;10, Step: 539&#x2F;540, total loss:0.2158Epoch 10, accuracy: 0.9633, validation loss: 0.0198<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出，第五轮训练的模型最好，跑了测试集之后，得到的分数是0.99425，有所提升。</p><h2 id="更新了B集"><a href="#更新了B集" class="headerlink" title="更新了B集"></a>更新了B集</h2><p>7月24日0时，官方更新了数据集B，与原始测试集不同的是取消了Keywords那一列，因此需要对baseline进行调整。</p><p>然而，仅仅使用baseline的适应版本会出大问题，先不说Keywords是否能够提取到，最要命的是连文本分类都错误频出，分数仅有0.27164。</p><p>所以选择转换思路，选用BERT模型重新进行训练，本次训练过程如下：</p><pre class="line-numbers language-none"><code class="language-none">Device: cudainputs: &#123;&#39;input_ids&#39;: tensor([[  101, 24655,  4997,  ...,  2057, 16599,   102],        [  101,  2943,  4487,  ...,  4725,  2000,   102],        [  101,  5090,  1998,  ...,  2050,  1010,   102],        ...,        [  101,  1996,  2110,  ...,  2192,  1010,   102],        [  101, 11643,  2986,  ..., 11650,  4819,   102],        [  101,  4254,  1997,  ...,  2426,  3633,   102]]), &#39;token_type_ids&#39;: tensor([[0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        ...,        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0]]), &#39;attention_mask&#39;: tensor([[1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        ...,        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1]])&#125;targets: tensor([0, 0, 1, 0, 1, 0, 1, 0, 1, 1])Epoch 1&#x2F;10, Step: 49&#x2F;540, total loss:17.4060Epoch 1&#x2F;10, Step: 99&#x2F;540, total loss:8.2182Epoch 1&#x2F;10, Step: 149&#x2F;540, total loss:4.8785Epoch 1&#x2F;10, Step: 199&#x2F;540, total loss:4.3230Epoch 1&#x2F;10, Step: 249&#x2F;540, total loss:6.6983Epoch 1&#x2F;10, Step: 299&#x2F;540, total loss:5.8578Epoch 1&#x2F;10, Step: 349&#x2F;540, total loss:6.6283Epoch 1&#x2F;10, Step: 399&#x2F;540, total loss:6.4032Epoch 1&#x2F;10, Step: 449&#x2F;540, total loss:5.9323Epoch 1&#x2F;10, Step: 499&#x2F;540, total loss:7.5971Epoch 1, accuracy: 0.9850, validation loss: 0.0058Epoch 2&#x2F;10, Step: 9&#x2F;540, total loss:5.0577Epoch 2&#x2F;10, Step: 59&#x2F;540, total loss:3.1802Epoch 2&#x2F;10, Step: 109&#x2F;540, total loss:3.2457Epoch 2&#x2F;10, Step: 159&#x2F;540, total loss:2.3691Epoch 2&#x2F;10, Step: 209&#x2F;540, total loss:5.8829Epoch 2&#x2F;10, Step: 259&#x2F;540, total loss:4.4065Epoch 2&#x2F;10, Step: 309&#x2F;540, total loss:3.9642Epoch 2&#x2F;10, Step: 359&#x2F;540, total loss:3.4601Epoch 2&#x2F;10, Step: 409&#x2F;540, total loss:3.7005Epoch 2&#x2F;10, Step: 459&#x2F;540, total loss:2.4082Epoch 2&#x2F;10, Step: 509&#x2F;540, total loss:4.9357Epoch 2, accuracy: 0.9817, validation loss: 0.0051Epoch 3&#x2F;10, Step: 19&#x2F;540, total loss:3.0975Epoch 3&#x2F;10, Step: 69&#x2F;540, total loss:3.5217Epoch 3&#x2F;10, Step: 119&#x2F;540, total loss:2.2069Epoch 3&#x2F;10, Step: 169&#x2F;540, total loss:2.1020Epoch 3&#x2F;10, Step: 219&#x2F;540, total loss:2.2251Epoch 3&#x2F;10, Step: 269&#x2F;540, total loss:1.9019Epoch 3&#x2F;10, Step: 319&#x2F;540, total loss:5.7179Epoch 3&#x2F;10, Step: 369&#x2F;540, total loss:2.3129Epoch 3&#x2F;10, Step: 419&#x2F;540, total loss:2.5967Epoch 3&#x2F;10, Step: 469&#x2F;540, total loss:3.6328Epoch 3&#x2F;10, Step: 519&#x2F;540, total loss:3.5887Epoch 3, accuracy: 0.9783, validation loss: 0.0083Epoch 4&#x2F;10, Step: 29&#x2F;540, total loss:2.9215Epoch 4&#x2F;10, Step: 79&#x2F;540, total loss:2.5634Epoch 4&#x2F;10, Step: 129&#x2F;540, total loss:2.2718Epoch 4&#x2F;10, Step: 179&#x2F;540, total loss:2.1903Epoch 4&#x2F;10, Step: 229&#x2F;540, total loss:3.9422Epoch 4&#x2F;10, Step: 279&#x2F;540, total loss:4.1438Epoch 4&#x2F;10, Step: 329&#x2F;540, total loss:2.5862Epoch 4&#x2F;10, Step: 379&#x2F;540, total loss:2.5173Epoch 4&#x2F;10, Step: 429&#x2F;540, total loss:2.3017Epoch 4&#x2F;10, Step: 479&#x2F;540, total loss:2.8343Epoch 4&#x2F;10, Step: 529&#x2F;540, total loss:2.1349Epoch 4, accuracy: 0.9817, validation loss: 0.0047Epoch 5&#x2F;10, Step: 39&#x2F;540, total loss:1.4322Epoch 5&#x2F;10, Step: 89&#x2F;540, total loss:0.5360Epoch 5&#x2F;10, Step: 139&#x2F;540, total loss:1.1301Epoch 5&#x2F;10, Step: 189&#x2F;540, total loss:1.0405Epoch 5&#x2F;10, Step: 239&#x2F;540, total loss:1.5703Epoch 5&#x2F;10, Step: 289&#x2F;540, total loss:1.2585Epoch 5&#x2F;10, Step: 339&#x2F;540, total loss:2.3381Epoch 5&#x2F;10, Step: 389&#x2F;540, total loss:1.5830Epoch 5&#x2F;10, Step: 439&#x2F;540, total loss:1.9213Epoch 5&#x2F;10, Step: 489&#x2F;540, total loss:2.2533Epoch 5&#x2F;10, Step: 539&#x2F;540, total loss:2.3482Epoch 5, accuracy: 0.9700, validation loss: 0.0080Epoch 6&#x2F;10, Step: 49&#x2F;540, total loss:0.6322Epoch 6&#x2F;10, Step: 99&#x2F;540, total loss:1.8027Epoch 6&#x2F;10, Step: 149&#x2F;540, total loss:0.9355Epoch 6&#x2F;10, Step: 199&#x2F;540, total loss:0.7137Epoch 6&#x2F;10, Step: 249&#x2F;540, total loss:0.2431Epoch 6&#x2F;10, Step: 299&#x2F;540, total loss:0.7320Epoch 6&#x2F;10, Step: 349&#x2F;540, total loss:1.9910Epoch 6&#x2F;10, Step: 399&#x2F;540, total loss:0.5313Epoch 6&#x2F;10, Step: 449&#x2F;540, total loss:2.3987Epoch 6&#x2F;10, Step: 499&#x2F;540, total loss:1.3163Epoch 6, accuracy: 0.9767, validation loss: 0.0059Epoch 7&#x2F;10, Step: 9&#x2F;540, total loss:2.2099Epoch 7&#x2F;10, Step: 59&#x2F;540, total loss:1.0356Epoch 7&#x2F;10, Step: 109&#x2F;540, total loss:0.3613Epoch 7&#x2F;10, Step: 159&#x2F;540, total loss:0.3013Epoch 7&#x2F;10, Step: 209&#x2F;540, total loss:0.9905Epoch 7&#x2F;10, Step: 259&#x2F;540, total loss:0.9220Epoch 7&#x2F;10, Step: 309&#x2F;540, total loss:1.8809Epoch 7&#x2F;10, Step: 359&#x2F;540, total loss:0.6842Epoch 7&#x2F;10, Step: 409&#x2F;540, total loss:0.8110Epoch 7&#x2F;10, Step: 459&#x2F;540, total loss:0.5501Epoch 7&#x2F;10, Step: 509&#x2F;540, total loss:0.1008Epoch 7, accuracy: 0.9783, validation loss: 0.0114Epoch 8&#x2F;10, Step: 19&#x2F;540, total loss:0.1257Epoch 8&#x2F;10, Step: 69&#x2F;540, total loss:0.6099Epoch 8&#x2F;10, Step: 119&#x2F;540, total loss:0.0731Epoch 8&#x2F;10, Step: 169&#x2F;540, total loss:0.0690Epoch 8&#x2F;10, Step: 219&#x2F;540, total loss:0.0463Epoch 8&#x2F;10, Step: 269&#x2F;540, total loss:0.7255Epoch 8&#x2F;10, Step: 319&#x2F;540, total loss:1.3453Epoch 8&#x2F;10, Step: 369&#x2F;540, total loss:0.9634Epoch 8&#x2F;10, Step: 419&#x2F;540, total loss:2.3351Epoch 8&#x2F;10, Step: 469&#x2F;540, total loss:1.0744Epoch 8&#x2F;10, Step: 519&#x2F;540, total loss:0.9177Epoch 8, accuracy: 0.9833, validation loss: 0.0094Epoch 9&#x2F;10, Step: 29&#x2F;540, total loss:0.0825Epoch 9&#x2F;10, Step: 79&#x2F;540, total loss:0.5531Epoch 9&#x2F;10, Step: 129&#x2F;540, total loss:0.1029Epoch 9&#x2F;10, Step: 179&#x2F;540, total loss:1.6060Epoch 9&#x2F;10, Step: 229&#x2F;540, total loss:1.4814Epoch 9&#x2F;10, Step: 279&#x2F;540, total loss:0.2794Epoch 9&#x2F;10, Step: 329&#x2F;540, total loss:0.8993Epoch 9&#x2F;10, Step: 379&#x2F;540, total loss:0.2361Epoch 9&#x2F;10, Step: 429&#x2F;540, total loss:0.8100Epoch 9&#x2F;10, Step: 479&#x2F;540, total loss:1.0517Epoch 9&#x2F;10, Step: 529&#x2F;540, total loss:1.9690Epoch 9, accuracy: 0.9800, validation loss: 0.0081Epoch 10&#x2F;10, Step: 39&#x2F;540, total loss:0.3611Epoch 10&#x2F;10, Step: 89&#x2F;540, total loss:1.1712Epoch 10&#x2F;10, Step: 139&#x2F;540, total loss:1.2629Epoch 10&#x2F;10, Step: 189&#x2F;540, total loss:0.4406Epoch 10&#x2F;10, Step: 239&#x2F;540, total loss:0.7798Epoch 10&#x2F;10, Step: 289&#x2F;540, total loss:0.7707Epoch 10&#x2F;10, Step: 339&#x2F;540, total loss:0.9512Epoch 10&#x2F;10, Step: 389&#x2F;540, total loss:0.1460Epoch 10&#x2F;10, Step: 439&#x2F;540, total loss:0.4900Epoch 10&#x2F;10, Step: 489&#x2F;540, total loss:1.2117Epoch 10&#x2F;10, Step: 539&#x2F;540, total loss:0.6272Epoch 10, accuracy: 0.9783, validation loss: 0.0093<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，第一轮的模型就是最优，准确率达到0.9850，使用该模型得到的分数是0.39905</p><h2 id="调用ChatGLM的API的一点点尝试"><a href="#调用ChatGLM的API的一点点尝试" class="headerlink" title="调用ChatGLM的API的一点点尝试"></a>调用ChatGLM的API的一点点尝试</h2><p>看了群友的发言，感觉单纯采用从text中提取keywords已经无法提高准确率，于是转向使用生成式，that’s to say，微调大模型</p><p><del>在deadline前，才想起来尝试使用大模型</del></p><p>困于本地环境不足，尝试调用API，这里为了保持稳定性选用了国产ChatGLM-std的API，代码也敲好了（属于是第一个完完整整自己敲下来的东西），<del>创业未半而中道崩殂</del>，跑到第9个被官方ban掉了，原因是里面有敏感词，验证可行（<strong>请不要输入易生成敏感用语的话题</strong>）</p><blockquote><p>To be continued</p></blockquote><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>2023年7月21日：跑通了baseline</p><p>2023年7月22日：对baseline进行了fine-tune，实际结果略微优于baseline；尝试使用BERT模型，但是从运行中输出的部分参数来看，结果不尽如人意，同时显存爆了，建议上云</p><p>2023年7月23日：使用BERT模型进行训练，epoch&#x3D;10，训练出的最优模型的准确率是0.9800，实际获得分数也优于22日的fine-tuned baseline</p><p>2023年7月24日：官方更新了B集，砍掉了Keywords，准确率下降不少，选用BERT模型的分数稍微高一点点</p><p>2023年7月26日：调用ChatGLM的API，但是由于触碰敏感词被ban掉了，所以可能需要本地的Chat GLM模型，但是huggingface上下载下来的是原始模型，自己无法完成训练，有训练完的模型可以使用，之后再进行尝试</p>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程设计的index</title>
      <link href="/2023/07/22/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E7%9A%84index/"/>
      <url>/2023/07/22/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E7%9A%84index/</url>
      
        <content type="html"><![CDATA[<ul><li>高级程序设计实践：联系J&amp;Ocean，联系方式在本页底部</li><li>计算机原理与汇编语言课程设计：<a href="https://github.com/JIANG-Wu-19/AssenblyLanguage_Practice">AssenblyLanguage_Practice</a></li><li>应用基础实践一（网络+Java）：<a href="https://github.com/JIANG-Wu-19/JavaNetworks">JavaNetworks</a></li></ul><blockquote><p>To be continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> index </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课内实验的index</title>
      <link href="/2023/07/22/%E8%AF%BE%E5%86%85%E5%AE%9E%E9%AA%8C%E7%9A%84index/"/>
      <url>/2023/07/22/%E8%AF%BE%E5%86%85%E5%AE%9E%E9%AA%8C%E7%9A%84index/</url>
      
        <content type="html"><![CDATA[<h2 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h2><ul><li>数据结构：<a href="https://gitee.com/wu-jiang-nineteen/dsexperiment">DSExperiment</a></li></ul><h2 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h2><ul><li><p>汇编实验：<a href="https://github.com/JIANG-Wu-19/Assembly_experiments">Assembly_experiments</a></p></li><li><p>Java实验：<a href="https://github.com/JIANG-Wu-19/Java_experiments">Java_experiments</a></p></li><li><p>数据库实验：<a href="https://github.com/JIANG-Wu-19/database_experiments">database_experiments</a></p></li><li><p>计算机网络实验：<a href="https://github.com/JIANG-Wu-19/ComputerNetworks_experiment">ComputerNetworks_experiment</a></p></li><li><p>Python数据处理实验：<a href="https://github.com/JIANG-Wu-19/python_dataprocess">python_dataprocess</a></p></li><li><p>算法实验：<a href="https://github.com/JIANG-Wu-19/Algorithms_experiments">Algorithms_experiments</a></p></li><li><p>操作系统实验：<a href="https://github.com/JIANG-Wu-19/OS_Experiment">OS_Experiment</a></p></li></ul><blockquote><p>To be continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> index </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课内实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法实验</title>
      <link href="/2023/07/22/%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/07/22/%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>项目GitHub地址：<a href="https://github.com/JIANG-Wu-19/Algorithms_experiments">Algorithms_experiments</a></p><h1 id="实验一：递归与分治"><a href="#实验一：递归与分治" class="headerlink" title="实验一：递归与分治"></a>实验一：递归与分治</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>理解递归算法的思想和递归程序的执行过程，并能熟练编写递归程序。</p><p>掌握分治算法的思想，对给定的问题能设计出分治算法予以解决。</p><h2 id="实验预习内容"><a href="#实验预习内容" class="headerlink" title="实验预习内容"></a>实验预习内容</h2><p>编程实现讲过的例题：二分搜索、合并排序、快速排序。</p><p>对本实验中的问题，设计出算法并编程实现。</p><h2 id="实验内容和步骤"><a href="#实验内容和步骤" class="headerlink" title="实验内容和步骤"></a>实验内容和步骤</h2><h3 id="快速排序及第k小数"><a href="#快速排序及第k小数" class="headerlink" title="快速排序及第k小数"></a>快速排序及第k小数</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="问题分析及算法思路"><a href="#问题分析及算法思路" class="headerlink" title="问题分析及算法思路"></a>问题分析及算法思路</h5><p>快速排序的基本思想：</p><ul><li>通过一趟排序将待排序列分割成<strong>独立的两部分</strong>，其中一部分的值比另一部分的小，则分别对两部分序列继续进行排序，达到整个序列有序</li></ul><p>实现逻辑：</p><p>使用分治法将序列分成两个子序列</p><blockquote><ol><li>从序列中选出一个元素，称为基准值（pivot），即<strong>确定分界点</strong>，可以选取$q[1]$,$q[(1+r)&#x2F;2]$,$q[r]$或者随机</li><li>重新排序序列，所有元素小于基准值的放在基准值前面，所有元素比基准值大的摆在基准的后面（相同的数规定放到确定的某一边）。分区推出之后，基准处于中间位置，这一步称为<strong>调整区间</strong></li><li>对于分出的两个子序列继续进行上述操作，<strong>递归处理左右两段</strong></li></ol></blockquote><p>对于<strong>调整区间</strong>可实现的方法有：</p><blockquote><blockquote><ul><li>开辟额外的数组a[]、b[]</li><li>扫描$q[1:r]$<ul><li>当$q[i] \le x$时，将x插入到a[]</li><li>当$q[i] \ge x$时，将x插入到b[]</li></ul></li><li>分别将a[],b[]中的数放在q中</li></ul></blockquote><blockquote><p>双指针法，设置i、j指针分别指向第一个和末尾一个，分别向左向右移动，知道重合</p></blockquote></blockquote><p>在本实验中，使用双指针法进行快排</p><h5 id="算法设计与代码实现"><a href="#算法设计与代码实现" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quicksort(int q[], int l, int r)&#123;    if (l &gt;&#x3D; r) return;&#x2F;&#x2F;判边界    int x &#x3D; q[l], i &#x3D; l - 1, j &#x3D; r + 1;    while (i &lt; j)    &#123;        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        if (i &lt; j) swap(q[i], q[j]);    &#125;    quicksort(q, l, j), quicksort(q, j + 1, r);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="算法演示"><a href="#算法演示" class="headerlink" title="算法演示"></a>算法演示</h5><p><img src="/imgs/suanfashiyan/1.png" alt="image-20230604152213930"></p><p>经过多次测试，算法的运行结果均正确，符合题意。</p><p>快速排序的算法时间复杂度是$O(N*logN)$</p><h4 id="第k小数"><a href="#第k小数" class="headerlink" title="第k小数"></a>第k小数</h4><p>这道题目是课外思考题<code>top_k</code>的一个变式，找到序列中第k小的数</p><h5 id="问题分析及算法思路-1"><a href="#问题分析及算法思路-1" class="headerlink" title="问题分析及算法思路"></a>问题分析及算法思路</h5><h6 id="基于快速排序的减治法"><a href="#基于快速排序的减治法" class="headerlink" title="基于快速排序的减治法"></a>基于快速排序的减治法</h6><p>借用“快速排序”的思想，对整个序列进行<strong>划分</strong>(取序列第一个元素作为枢轴，也可采用随机法、三数取中法等方法)，并返回<strong>划分后的位置</strong>，若等于<code>k</code>则得到答案；若大于<code>k</code>，则说明该元素左边的元素都小于<code>k</code>，递归求解该位置前面序列第<code>k</code>小的元素即可；若小于<code>k</code>，则递归求解该位置后面序列第<code>k - count</code>(<code>count</code>为该序列中<code>[l,j]</code>的元素数量，其中<code>j</code>为划分后的元素位置)小的元素即可。由此，每次仅需求解大问题的一个子问题，最后即可得到第<code>k</code>小的数。</p><h6 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h6><p>使用冒泡排序的思想，每次冒泡都是找到了序列中的第i小的数（i为冒泡次数），i&#x3D;k时找到第k小数</p><h6 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h6><p>堆排序中，每次弹出一个最小的值，只需要执行k次弹数操作就可以得到第k小数</p><p>堆</p><blockquote><p>是一个完全二叉树</p><p>每个节点的值都大于或等于其叶子的值，为最大堆；反之为最小堆</p></blockquote><p>堆排序</p><blockquote><ol><li>将待排序的序列构造成一个最大堆，此时序列的最大值为根节点</li><li>依次将根节点与待排序序列的最后一个元素交换</li><li>再维护从根节点到该元素的前一个节点为最大堆，如此往复，得到一个递增序列</li></ol></blockquote><h5 id="算法设计与代码实现-1"><a href="#算法设计与代码实现-1" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h5><h6 id="减治法"><a href="#减治法" class="headerlink" title="减治法"></a>减治法</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int quicksort(int a[], int l, int r)&#123;int pivot &#x3D; a[l];int i &#x3D; l - 1, j &#x3D; r + 1;do&#123;do &#123; i++; &#125; while (a[i] &lt; pivot);do &#123; j--; &#125; while (a[j] &gt; pivot);if (i &lt; j)  swap(a[i], a[j]);&#125; while (i &lt; j);return j;&#125;void Top_k(int a[], int l, int r, int k)&#123;if (l &gt;&#x3D; r) return;int j &#x3D; quicksort(a, l, r);int count &#x3D; j - l + 1;if (count &#x3D;&#x3D; k)&#123;return;&#125;else if(count &gt; k)&#123;Top_k(a, l, j, k);&#125;else&#123;Top_k(a, j + 1, r, k - count);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/suanfashiyan/2.png" alt="image-20230604163142845"></p><h6 id="冒泡排序-1"><a href="#冒泡排序-1" class="headerlink" title="冒泡排序"></a>冒泡排序</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void bubblesort(int a[], int k, int n)&#123;for (int i &#x3D; 0; i &lt; k; i++)&#123;for (int j &#x3D; n - 2; j &gt;&#x3D; i; j--) &#123;if (a[j + 1] &lt; a[j])&#123;int temp &#x3D; a[j];a[j] &#x3D; a[j + 1];a[j + 1] &#x3D; temp;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/suanfashiyan/3.png" alt="image-20230604164023408"></p><h6 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void down(int u)&#123;    int t &#x3D; u;&#x2F;&#x2F; t为点、左孩子、右孩子三个点中最小的一个点    if (u * 2 &lt;&#x3D; cnt &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;    if (u * 2 + 1 &lt;&#x3D; cnt &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;    if (u !&#x3D; t)&#x2F;&#x2F; 根节点不是最小的    &#123;        &#x2F;&#x2F; 与最小的点交换        swap(h[u], h[t]);        down(t);&#x2F;&#x2F; 递归处理    &#125;&#125;void up(int u)&#123;    while (u &#x2F; 2 &amp;&amp; h[u] &lt; h[u &#x2F; 2])    &#123;        swap(h[u &#x2F; 2], h[u]);        u &gt;&gt;&#x3D; 1;&#x2F;&#x2F; u &#x2F;&#x3D; 2换上去    &#125;&#125;void HeapSort(int h[], int k, int n)&#123;    for (int i &#x3D; n &#x2F; 2; i; i--) down(i);&#x2F;&#x2F; O(n)的时间复杂度建堆    while (m--)    &#123;        if(m &#x3D;&#x3D; 0)&#123;        cout&lt;&lt;h[1]&lt;&lt;endl;&#125;        h[1] &#x3D; h[cnt--];        down(1);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/suanfashiyan/4.png" alt="image-20230604165037548"></p><p>经过测试，上述方法均能实现查找第k小数的功能</p><h5 id="关于上述方法的时间复杂度分析"><a href="#关于上述方法的时间复杂度分析" class="headerlink" title="关于上述方法的时间复杂度分析"></a>关于上述方法的时间复杂度分析</h5><ul><li>对于减治法，时间复杂度是$O(n)$</li><li>对于冒泡排序，时间复杂度是$O(kn)$</li><li>对于堆排序，由于需要构建完整堆，时间复杂度是$O(n*logn)$</li></ul><blockquote><p>对于减治法，设每次划分的pivot恰好是序列的中值，可以保证每一次减治去掉一半的区间，由于一次划分耗费$O(n)$的时间，因此只需要处理剩下的一半大小的子序列，得到递推公式<br>$$<br>T(n)&#x3D;T(n&#x2F;2)+O(n)\<br>T(n)&#x3D;O(n)<br>$$</p></blockquote><h3 id="棋盘覆盖问题"><a href="#棋盘覆盖问题" class="headerlink" title="棋盘覆盖问题"></a>棋盘覆盖问题</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在一个$2^k*2^k$方格组成的棋盘中，恰有一个方格与其它方格不同，称该方格为一特殊方格，且称该棋盘为一特殊棋盘。在棋盘覆盖问题中，要用图示的4种不同形态的L型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖；</p><p><img src="/imgs/suanfashiyan/5.png" alt="image-20221126115310770"></p><h4 id="问题分析与算法思路"><a href="#问题分析与算法思路" class="headerlink" title="问题分析与算法思路"></a>问题分析与算法思路</h4><p>采用<strong>分治</strong>的思想，首先将棋盘进行划分：</p><blockquote><ol><li>当k&#x3D;0时，是一个**$1*1$的棋盘**，棋盘中的骨牌数是0</li><li>当k&gt;0时，将$2^k*2^k$分割成4个$2^{k-1}*2^{k-1}$的子棋盘，特殊方格必定位于4个子棋盘注意，其余3个子棋盘中没有特殊方格</li></ol></blockquote><p>对于划分出来的四个子棋盘，用一个L型骨牌覆盖3个没有特殊方格的子棋盘的连接处</p><p><img src="/imgs/suanfashiyan/6.png" alt="6"></p><p>至此，对每个棋盘按照左上、右上、右下、左下的顺时针顺序铺满棋盘；每次都对分割后的四个小方块进行特殊方格判断：</p><blockquote><ul><li>如果特殊方块在里面，递归</li><li>不在，根据分割的不同位置，把三个角落的方格标记为特殊方块，递归、</li></ul></blockquote><h4 id="算法设计与代码实现-2"><a href="#算法设计与代码实现-2" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 函数：棋盘覆盖void chessboardCover(int tr, int tc, int dr, int dc, int size) &#123;    if (size &#x3D;&#x3D; 1)        return;    int t &#x3D; tileID++;    int s &#x3D; size &#x2F; 2;    &#x2F;&#x2F; 左上角子棋盘    if (dr &lt; tr + s &amp;&amp; dc &lt; tc + s)        chessboardCover(tr, tc, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在左上角，用t号骨牌覆盖右下角        board[tr + s - 1][tc + s - 1] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr, tc, tr + s - 1, tc + s - 1, s);    &#125;    &#x2F;&#x2F; 右上角子棋盘    if (dr &lt; tr + s &amp;&amp; dc &gt;&#x3D; tc + s)        chessboardCover(tr, tc + s, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在右上角，用t号骨牌覆盖左下角        board[tr + s - 1][tc + s] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr, tc + s, tr + s - 1, tc + s, s);    &#125;    &#x2F;&#x2F; 左下角子棋盘    if (dr &gt;&#x3D; tr + s &amp;&amp; dc &lt; tc + s)        chessboardCover(tr + s, tc, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在左下角，用t号骨牌覆盖右上角        board[tr + s][tc + s - 1] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr + s, tc, tr + s, tc + s - 1, s);    &#125;    &#x2F;&#x2F; 右下角子棋盘    if (dr &gt;&#x3D; tr + s &amp;&amp; dc &gt;&#x3D; tc + s)        chessboardCover(tr + s, tc + s, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在右下角，用t号骨牌覆盖左上角        board[tr + s][tc + s] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr + s, tc + s, tr + s, tc + s, s);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法演示-1"><a href="#算法演示-1" class="headerlink" title="算法演示"></a>算法演示</h4><p><img src="/imgs/suanfashiyan/7.png" alt="image-20230604174723961"></p><p>经过多组测试，算法运行正确</p><h5 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h5><p>分析时间复杂度：</p><p>递推式<br>$$<br>T(k)&#x3D;\left{\begin{array}{cc}<br>O(1) &amp; k&#x3D;0 \<br>4 T(k-1)+O(1) &amp; k&gt;0<br>\end{array}\right.<br>$$<br>解得<br>$$<br>T(k)&#x3D;O(4^k)<br>$$<br>设$n&#x3D;2^k$，得到时间复杂度是$O(n^2)$</p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>分治即“<strong>分而治之</strong>”，一个规模很大的问题若要直接求解起来是非常困难的，将一个复杂的问题分解为若干个规模较小但是类似于原问题的子问题，子问题可以再分为更小的子问题，最终达到子问题可以简单的直接求解的目的，那么原问题的解即子问题的解的并集。分治算法可以缩小问题的规模，使得问题的求解变得十分容易。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="快速排序源代码"><a href="#快速排序源代码" class="headerlink" title="快速排序源代码"></a>快速排序源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#define N 20using namespace std;void quicksort(int q[], int l, int r)&#123;    if (l &gt;&#x3D; r) return;&#x2F;&#x2F;判边界    int x &#x3D; q[l], i &#x3D; l - 1, j &#x3D; r + 1;    while (i &lt; j)    &#123;        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        if (i &lt; j) swap(q[i], q[j]);    &#125;    quicksort(q, l, j), quicksort(q, j + 1, r);&#125;int main()&#123; int n,q[N];cout&lt;&lt;&quot;请输入元素个数与序列：&quot;&lt;&lt;endl;cin&gt;&gt;n;for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;q[i];&#125;quicksort(q,0,n-1);for(int i&#x3D;0;i&lt;n;i++)&#123;cout&lt;&lt;q[i]&lt;&lt;&quot; &quot;;&#125;cout&lt;&lt;endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第k小数源代码"><a href="#第k小数源代码" class="headerlink" title="第k小数源代码"></a>第k小数源代码</h3><h4 id="减治法-1"><a href="#减治法-1" class="headerlink" title="减治法"></a>减治法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 20;int quicksort(int a[], int l, int r)&#123;int pivot &#x3D; a[l];int i &#x3D; l - 1, j &#x3D; r + 1;do&#123;do &#123; i++; &#125; while (a[i] &lt; pivot);do &#123; j--; &#125; while (a[j] &gt; pivot);if (i &lt; j)  swap(a[i], a[j]);&#125; while (i &lt; j);return j;&#125;void Top_k(int a[], int l, int r, int k)&#123;if (l &gt;&#x3D; r) return;int j &#x3D; quicksort(a, l, r);int count &#x3D; j - l + 1;if (count &#x3D;&#x3D; k)&#123;return;&#125;else if(count &gt; k)&#123;Top_k(a, l, j, k);&#125;else&#123;Top_k(a, j + 1, r, k - count);&#125;&#125;int main()&#123;int a[N], k, n;cout &lt;&lt; &quot;请输入元素个数与序列:&quot; &lt;&lt; endl;cin &gt;&gt; n;for (int i &#x3D; 0; i &lt; n; i++)&#123;cin &gt;&gt; a[i];&#125;cout &lt;&lt; &quot;请输入要获得的第k小数&quot; &lt;&lt; endl;cin &gt;&gt; k;Top_k(a, 0, n - 1, k);    cout &lt;&lt; &quot;第&quot; &lt;&lt; k &lt;&lt; &quot;小数是&quot; &lt;&lt; a[k - 1] &lt;&lt; endl;cout &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="冒泡排序-2"><a href="#冒泡排序-2" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 20;void bubblesort(int a[], int k, int n)&#123;for (int i &#x3D; 0; i &lt; k; i++)&#123;for (int j &#x3D; n - 2; j &gt;&#x3D; i; j--) &#123;if (a[j + 1] &lt; a[j])&#123;int temp &#x3D; a[j];a[j] &#x3D; a[j + 1];a[j + 1] &#x3D; temp;&#125;&#125;&#125;&#125;int main()&#123;int a[N], k, n;cout &lt;&lt; &quot;请输入元素个数与序列:&quot; &lt;&lt; endl;cin &gt;&gt; n;for (int i &#x3D; 0; i &lt; n; i++)&#123;cin &gt;&gt; a[i];&#125;cout &lt;&lt; &quot;请输入要获得的第k小数&quot; &lt;&lt; endl;cin &gt;&gt; k;bubblesort(a, k, n);cout &lt;&lt; a[k - 1] &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排序-2"><a href="#堆排序-2" class="headerlink" title="堆排序"></a>堆排序</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int n, m;int h[N], cnt;void down(int u)&#123;    int t &#x3D; u;&#x2F;&#x2F; t为点、左孩子、右孩子三个点中最小的一个点    if (u * 2 &lt;&#x3D; cnt &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;    if (u * 2 + 1 &lt;&#x3D; cnt &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;    if (u !&#x3D; t)&#x2F;&#x2F; 根节点不是最小的    &#123;        &#x2F;&#x2F; 与最小的点交换        swap(h[u], h[t]);        down(t);&#x2F;&#x2F; 递归处理    &#125;&#125;void up(int u)&#123;    while (u &#x2F; 2 &amp;&amp; h[u] &lt; h[u &#x2F; 2])    &#123;        swap(h[u &#x2F; 2], h[u]);        u &gt;&gt;&#x3D; 1;&#x2F;&#x2F; u &#x2F;&#x3D; 2换上去    &#125;&#125;void HeapSort(int h[], int k, int n)&#123;    for (int i &#x3D; n &#x2F; 2; i; i--) down(i);&#x2F;&#x2F; O(n)的时间复杂度建堆    while (m--)    &#123;        if(m &#x3D;&#x3D; 0)&#123;        cout&lt;&lt;h[1]&lt;&lt;endl;&#125;        h[1] &#x3D; h[cnt--];        down(1);    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) cin&gt;&gt;h[i];    cnt &#x3D; n;    HeapSort(h, m, n);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="棋盘覆盖问题源代码"><a href="#棋盘覆盖问题源代码" class="headerlink" title="棋盘覆盖问题源代码"></a>棋盘覆盖问题源代码</h3> <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS 1#include&lt;iostream&gt;  using namespace std;int num &#x3D; 1;                   &#x2F;&#x2F;L型骨牌的编号(递增)  int board[100][100];  &#x2F;&#x2F;棋盘  &#x2F;****************************************************** tr--当前棋盘左上角的行号* tc--当前棋盘左上角的列号* dr--当前特殊方格所在的行号* dc--当前特殊方格所在的列号* size：当前棋盘的:2^k*****************************************************&#x2F;void chessboardCover(int tr, int tc, int dr, int dc, int size) &#123;    if (size &#x3D;&#x3D; 1)        return;    int t &#x3D; num++;    int s &#x3D; size &#x2F; 2;    &#x2F;&#x2F; 左上角子棋盘    if (dr &lt; tr + s &amp;&amp; dc &lt; tc + s)        chessboardCover(tr, tc, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在左上角，用t号骨牌覆盖右下角        board[tr + s - 1][tc + s - 1] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr, tc, tr + s - 1, tc + s - 1, s);    &#125;    &#x2F;&#x2F; 右上角子棋盘    if (dr &lt; tr + s &amp;&amp; dc &gt;&#x3D; tc + s)        chessboardCover(tr, tc + s, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在右上角，用t号骨牌覆盖左下角        board[tr + s - 1][tc + s] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr, tc + s, tr + s - 1, tc + s, s);    &#125;    &#x2F;&#x2F; 左下角子棋盘    if (dr &gt;&#x3D; tr + s &amp;&amp; dc &lt; tc + s)        chessboardCover(tr + s, tc, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在左下角，用t号骨牌覆盖右上角        board[tr + s][tc + s - 1] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr + s, tc, tr + s, tc + s - 1, s);    &#125;    &#x2F;&#x2F; 右下角子棋盘    if (dr &gt;&#x3D; tr + s &amp;&amp; dc &gt;&#x3D; tc + s)        chessboardCover(tr + s, tc + s, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在右下角，用t号骨牌覆盖左上角        board[tr + s][tc + s] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr + s, tc + s, tr + s, tc + s, s);    &#125;&#125;int main()&#123;    int size;    cout &lt;&lt; &quot;输入棋盘的size(大小必须是2的n次幂): &quot;;    cin &gt;&gt; size;    int index_x, index_y;    cout &lt;&lt; &quot;输入特殊方格位置的坐标: &quot;;    getchar();    cin&gt;&gt;index_x&gt;&gt;index_y;    chessboardCover(0, 0, index_x - 1, index_y - 1, size);    for (int i &#x3D; 0; i &lt; size; i++)    &#123;        for (int j &#x3D; 0; j &lt; size; j++)            cout &lt;&lt; board[i][j] &lt;&lt; &quot;\t&quot;;        cout &lt;&lt; endl;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验四：动态规划"><a href="#实验四：动态规划" class="headerlink" title="实验四：动态规划"></a>实验四：动态规划</h1><h2 id="计算矩阵连乘积"><a href="#计算矩阵连乘积" class="headerlink" title="计算矩阵连乘积"></a>计算矩阵连乘积</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>在科学计算中经常要计算矩阵的乘积。矩阵A和B可乘的条件是矩阵A的列数等于矩阵B的行数。若A是一个$p×q$的矩阵，B是一个$q×r$的矩阵，则其乘积C&#x3D;AB是一个$p×r$的矩阵。由该公式知计算C&#x3D;AB总共需要<strong>pqr</strong>次的数乘。其标准计算公式为：<br>$$<br>C_{ij}&#x3D;\sum_{k&#x3D;1}^qA_{ik}B_{kj}(1\le i\le p,1\le j \le r)<br>$$<br>现在问题是现在的问题是，给定n个矩阵$\lbrace A1,A2,…,An \rbrace$。其中Ai与Ai+1是可乘的，i&#x3D;1,2,…,n-1。要求计算出这n个矩阵的连乘积A1A2…An。</p><h3 id="问题分析与算法思想"><a href="#问题分析与算法思想" class="headerlink" title="问题分析与算法思想"></a>问题分析与算法思想</h3><p>设二维数组$m[N][N]$表示当前矩阵的连乘次数，一维数组$p[N]$表示各矩阵的维度（其中$p[0]$表示第一个矩阵的行数，$p[i]$表示第i个矩阵的列数），则得到以下递推公式：</p><p>$$<br>m[i][j]&#x3D;\left{\begin{array}{cc}<br>0 &amp; i&#x3D;j \<br>\min <em>{i \leq k&lt;j}\left{m[i][k]+m[k+1][j]+p</em>{i-1} p_k p_j\right} &amp; i&lt;j<br>\end{array}\right.<br>$$<br>将m数组的对角线初始化为0，然后依次计算第i个矩阵与第i+r-1个矩阵到最后一个矩阵连乘的最优解情况：依次在r-1个分隔位置中依次检测最优分隔点：对于每个分隔点，变换依次分隔位置，再进行逐一测试，如果有更有的分隔点，就替换掉当前的分隔点。</p><p>由此，输出$m[1][n]$，得到最少的连乘计算次数；记录间隔位置，可以输出计算连乘的顺序，即最佳添加括号的方式</p><h3 id="算法设计与代码实现-3"><a href="#算法设计与代码实现-3" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void MatrixChain(int n)&#123;int r, i, j, k;for (i &#x3D; 0; i &lt;&#x3D; n; i++)&#x2F;&#x2F; 初始化对角线&#123;m[i][i] &#x3D; 0;&#125;for (r &#x3D; 2; r &lt;&#x3D; n; r++)&#x2F;&#x2F; r 个矩阵连乘&#123;for (i &#x3D; 1; i &lt;&#x3D; n - r + 1; i++)&#x2F;&#x2F; 依次计算每r个矩阵相连乘的最优解情况&#123;j &#x3D; i + r - 1;m[i][j] &#x3D; m[i][i] + m[i + 1][j] + p[i - 1] * p[i] * p[j];s[i][j] &#x3D; i;&#x2F;&#x2F; 分隔位置for (k &#x3D; i + 1; k &lt; j; k++) &#x2F;&#x2F; 变换分隔位置，逐一测试&#123;int t &#x3D; m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];if (t &lt; m[i][j])&#x2F;&#x2F; 如果变换后的位置更优，则替换原来的分隔方法&#123;m[i][j] &#x3D; t;s[i][j] &#x3D; k;&#125;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="/imgs/suanfashiyan/8.png" alt="image-20230605122639394"></p><p><img src="/imgs/suanfashiyan/9.png" alt="image-20230605122812755"></p><h3 id="算法讨论"><a href="#算法讨论" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>通过动态规划来确定矩阵连乘顺序的时间复杂度是$O(n^3)$，在大规模矩阵连乘是，选择最优的连乘顺序，可以大幅度减少计算量，提高计算效率</p><h2 id="防卫导弹"><a href="#防卫导弹" class="headerlink" title="防卫导弹"></a>防卫导弹</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>一种新型的防卫导弹可截击多个攻击导弹。它可以向前飞行，也可以用很快的速度向下飞行，可以毫无损伤地截击进攻导弹，但不可以向后或向上飞行。但有一个缺点，尽管它发射时可以达到任意高度，但它只能截击比它上次截击导弹时所处高度低或者高度相同的导弹。现对这种新型防卫导弹进行测试，在每一次测试中，发射一系列的测试导弹（这些导弹发射的间隔时间固定，飞行速度相同），该防卫导弹所能获得的信息包括各进攻导弹的高度，以及它们发射次序。现要求编一程序，求在每次测试中，该防卫导弹最多能截击的进攻导弹数量，一个导弹能被截击应满足下列两个条件之一：</p><ol><li>它是该次测试中第一个被防卫导弹截击的导弹</li><li>它是在上一次被截击导弹的发射后发射，且高度不大于上一次被截击导弹的高度的导弹</li></ol><p>输入数据：第一行是一个整数n，以后的n各有一个整数表示导弹的高度</p><p>输出数据：截击导弹的最大数目</p><h3 id="问题分析与算法思想-1"><a href="#问题分析与算法思想-1" class="headerlink" title="问题分析与算法思想"></a>问题分析与算法思想</h3><p>对于本题的拦截导弹问题，因为一个导弹能被截击应满足高度不大于上一次被截击导弹的高度的导弹可以将其抽象成求一个最长不上升子序列的问题。</p><p>以下是最长不上升子序列的一个算法分析：</p><ol><li>定义状态：我们可以使用一个数组<code>dp</code>来表示最长不上升子序列的长度。dp[i]表示以第i个元素为结尾的最长不上升子序列的长度。</li><li>初始化：将<code>dp</code>数组的所有元素初始化为1，因为每个单独的元素都可以视为一个长度为1的非递增子序列。</li><li>状态转移：对于每个位置i（从1到n-1），我们需要考虑所有在i之前的位置j（从0到i-1）。如果$nums[i] \le nums[j]$，则可以将元素i添加到以j为结尾的非递增子序列中，从而得到以i为结尾的非递增子序列。因此，我们可以更新$dp[i] &#x3D; max(dp[i], dp[j] + 1)$。</li><li>找到最大值：遍历整个dp数组，找到其中的最大值，即为最长不上升子序列的长度。</li></ol><p>算法中的一些细节：</p><ul><li>状态表示$f[i]$：<ul><li>集合：所有以第$i$个数结尾的不升子序列；</li><li>属性：$Max$</li></ul></li><li>状态计算：集合划分——$f[i]$<ul><li>划分依据：最后一个不同的点</li><li>以上一个数的位置进行划分</li><li>若$a_i \le a_j$，则$f[i]&#x3D;max \lbrace f[j]+1 \rbrace(j&#x3D;0,1,2,···i-1)$</li></ul></li></ul><h3 id="算法设计与代码实现-4"><a href="#算法设计与代码实现-4" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void FindMissileNum(int n)&#123;    int res &#x3D; 0, cnt &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++ )    &#123;        f[i] &#x3D; 1;        for (int j &#x3D; 0; j &lt; i; j ++ )            if (h[i] &lt;&#x3D; h[j])                f[i] &#x3D; max(f[i], f[j] + 1);        res &#x3D; max(res, f[i]);    &#125;    cout&lt;&lt;res&lt;&lt;endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="/imgs/suanfashiyan/11" alt="image-20230606220038621"></p><h3 id="算法讨论-1"><a href="#算法讨论-1" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>算法的时间复杂度是$O(n^2)$，可以对遍历进行优化，进行树状数组优化或者二分优化，可以将时间复杂度优化到$O(n logn)$。</p><h2 id="皇宫看守"><a href="#皇宫看守" class="headerlink" title="皇宫看守"></a>皇宫看守</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>太平王世子事件后，陆小凤成了皇上特聘的御前一品侍卫。皇宫以午门为起点，直到后宫嫔妃们的寝宫，呈一棵树的形状；某些宫殿间可以互相望见。大内保卫森严，三步一岗，五步一哨，每个宫殿都要有人全天候看守，在不同的宫殿安排看守所需的费用不同。可是陆小凤手上的经费不足，无论如何也没法在每个宫殿都安置留守侍卫。</p><p>请你编程计算帮助陆小凤布置侍卫，在看守全部宫殿的前提下，使得花费的经费最少。</p><p>输入数据：数据表示一棵树，描述如下：</p><p>第1行 n，表示树中结点的数目。</p><p>第2行至第n+1行，每行描述每个宫殿结点信息，依次为：该宫殿结点标号i（0&lt;i&lt;&#x3D;n），在该宫殿安置侍卫所需的经费k，该边的儿子数m，接下来m个数，分别是这个节点的m个儿子的标号r1，r2，…，rm。</p><p>对于一个n（0 &lt; n &lt;&#x3D; 1500）个结点的树，结点标号在1到n之间，且标号不重复。</p><p>输出数据：输出到output.txt文件中。输出文件仅包含一个数，为所求的最少的经费。</p><p>如下示例：</p><p><img src="/imgs/suanfashiyan/10.png" alt="image-20230605174537453"></p><blockquote><p>sample input</p><pre class="line-numbers language-none"><code class="language-none">&gt;6 &gt;1 30 3 2 3 4&gt;2 16 2 5 6&gt;3 5 0&gt;4 4 0&gt;5 11 0&gt;6 5 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sample output</p><pre class="line-numbers language-none"><code class="language-none">&gt;25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="问题分析与算法思想-2"><a href="#问题分析与算法思想-2" class="headerlink" title="问题分析与算法思想"></a>问题分析与算法思想</h3><p>这道题目是求权值最小的点支配集，要求图中<strong>每个点都能被观察到</strong>，因此有下列情况：</p><ul><li>父节点<strong>放置</strong>哨兵，所有子节点的哨兵都<strong>可放可不放</strong></li><li>父节点<strong>不设置</strong>哨兵，<strong>至少有一个</strong>子节点需要放置哨兵</li><li>父结点<strong>不设置</strong>哨兵，但其<strong>父节点</strong>设置哨兵观察，则子节点哨兵<strong>可放可不放</strong></li></ul><p>总结上述情况可以得到每个节点总共有三种情况：</p><ul><li>被父节点看守</li><li>被子节点看守</li><li>被节点自身看守</li></ul><p>将上述三种情况分别编为0，1，2</p><p>建立<strong>状态转移函数</strong>$f[i][3]$，其中：</p><ol><li>$f[i][0]$表示第i个节点由父节点看守下的最小代价</li><li>$f[i][1]$表示第i个节点由子节点看守下的最小代价</li><li>$f[i][2]$表示第i个节点由自身看守下的最小代价</li></ol><p>转移关系：</p><ol><li>$f[i][0] +&#x3D;min \lbrace f[j][1],f[j][2] \rbrace$</li><li>$f[i][1]&#x3D;min \lbrace f[i][1],sum-min(f[j][1],f[j][2])+f[j][2] \rbrace$</li><li>$f[i][2]+&#x3D;min \lbrace min(f[j][0],f[j][1]),f[j][2] \rbrace$</li></ol><p>从根节点开始DFS，然后遍历所有当前节点的所有子节点，进行递归。</p><h3 id="算法设计与代码实现-5"><a href="#算法设计与代码实现-5" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void dfs(int u)&#123;    f[u][2] &#x3D; w[u];    for (int i &#x3D; h[u]; ~i; i &#x3D; ne[i])    &#123;        int j &#x3D; e[i];&#x2F;&#x2F; 遍历所有子节点        dfs(j);        f[u][0] +&#x3D; min(f[j][1], f[j][2]);        f[u][2] +&#x3D; min(min(f[j][0], f[j][1]), f[j][2]);    &#125;    f[u][1] &#x3D; 1e9;    for (int i &#x3D; h[u]; ~i; i &#x3D; ne[i])    &#123;        int j &#x3D; e[i];        &#x2F;&#x2F; f[u][0]为所有子节点的摆放方案代价之和, 减去 min(f[j][1], f[j][2]) 即是除了j节点其余节点的代价之和        f[u][1] &#x3D; min(f[u][1], f[j][2] + f[u][0]- min(f[j][1], f[j][2]));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="/imgs/suanfashiyan/12.png" alt="image-20230607004451288"></p><h3 id="算法讨论-2"><a href="#算法讨论-2" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>本题是树形DP的应用，涉及到了父节点、子节点的邻接关系。算法遍历了树中的所有节点，时间复杂度是$O(n)$</p><h2 id="附录-1"><a href="#附录-1" class="headerlink" title="附录"></a>附录</h2><h3 id="计算矩阵连乘积源代码"><a href="#计算矩阵连乘积源代码" class="headerlink" title="计算矩阵连乘积源代码"></a>计算矩阵连乘积源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 100;int p[N];&#x2F;&#x2F; 矩阵规模int m[N][N];&#x2F;&#x2F; 最优解int s[N][N];void MatrixChain(int n)&#123;int r, i, j, k;for (i &#x3D; 0; i &lt;&#x3D; n; i++)&#x2F;&#x2F; 初始化对角线&#123;m[i][i] &#x3D; 0;&#125;for (r &#x3D; 2; r &lt;&#x3D; n; r++)&#x2F;&#x2F; r 个矩阵连乘&#123;for (i &#x3D; 1; i &lt;&#x3D; n - r + 1; i++)&#x2F;&#x2F; 依次计算每r个矩阵相连乘的最优解情况&#123;j &#x3D; i + r - 1;m[i][j] &#x3D; m[i][i] + m[i + 1][j] + p[i - 1] * p[i] * p[j];s[i][j] &#x3D; i;&#x2F;&#x2F; 分隔位置for (k &#x3D; i + 1; k &lt; j; k++) &#x2F;&#x2F; 变换分隔位置，逐一测试&#123;int t &#x3D; m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];if (t &lt; m[i][j])&#x2F;&#x2F; 如果变换后的位置更优，则替换原来的分隔方法&#123;m[i][j] &#x3D; t;s[i][j] &#x3D; k;&#125;&#125;&#125;&#125;&#125;void print(int i, int j)&#x2F;&#x2F; 输出连乘顺序&#123;if (i &#x3D;&#x3D; j)&#123;cout &lt;&lt; &quot;p[&quot; &lt;&lt; i &lt;&lt; &quot;]&quot;;return;&#125;cout &lt;&lt; &quot;(&quot;;print(i, s[i][j]);print(s[i][j] + 1, j);cout &lt;&lt; &quot;)&quot;;&#125;int main()&#123;int n;&#x2F;&#x2F; n个矩阵cout &lt;&lt; &quot;请输入矩阵的数目：&quot;;cin &gt;&gt; n;int i, j;cout &lt;&lt; &quot;请输入各个矩阵的维度(相邻维度只需输入一个即可):&quot;;for (i &#x3D; 0; i &lt;&#x3D; n; i++)&#123;cin &gt;&gt; p[i];&#125;MatrixChain(n);cout &lt;&lt; &quot;最佳添加括号的方式为：&quot;;print(1, n);cout &lt;&lt; &quot;\n最小计算量的值为：&quot; &lt;&lt; m[1][n] &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防卫导弹源代码"><a href="#防卫导弹源代码" class="headerlink" title="防卫导弹源代码"></a>防卫导弹源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;sstream&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1000;int h[N], f[N], q[N];&#x2F;&#x2F; q数组记录开好的子序列结尾的数void FindMissileNum(int n)&#123;    int res &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++ )    &#123;        f[i] &#x3D; 1;        for (int j &#x3D; 0; j &lt; i; j ++ )            if (h[i] &lt;&#x3D; h[j])                f[i] &#x3D; max(f[i], f[j] + 1);        res &#x3D; max(res, f[i]);    &#125;    cout&lt;&lt;res&lt;&lt;endl;&#125;int main()&#123;    int n&#x3D;0;    while (cin &gt;&gt; h[n])  n ++ ;    FindMissileNum(n);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="皇宫看守源代码"><a href="#皇宫看守源代码" class="headerlink" title="皇宫看守源代码"></a>皇宫看守源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1510;int n;int h[N], w[N], e[N], ne[N], idx;int f[N][3];bool st[N];void add(int a, int b)&#123;    e[idx] &#x3D; b, ne[idx] &#x3D; h[a], h[a] &#x3D; idx ++ ;&#125;void dfs(int u)&#123;    f[u][2] &#x3D; w[u];    for (int i &#x3D; h[u]; ~i; i &#x3D; ne[i])    &#123;        int j &#x3D; e[i];&#x2F;&#x2F; 遍历所有子节点        dfs(j);        f[u][0] +&#x3D; min(f[j][1], f[j][2]);        f[u][2] +&#x3D; min(min(f[j][0], f[j][1]), f[j][2]);    &#125;    f[u][1] &#x3D; 1e9;    for (int i &#x3D; h[u]; ~i; i &#x3D; ne[i])    &#123;        int j &#x3D; e[i];        &#x2F;&#x2F; f[u][0]为所有子节点的摆放方案代价之和, 减去 min(f[j][1], f[j][2]) 即是除了j节点其余节点的代价之和        f[u][1] &#x3D; min(f[u][1], f[j][2] + f[u][0]- min(f[j][1], f[j][2]));    &#125;&#125;int main()&#123;    cin &gt;&gt; n;    memset(h, -1, sizeof h);    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )    &#123;        int id, cost, cnt;        cin &gt;&gt; id &gt;&gt; cost &gt;&gt; cnt;        w[id] &#x3D; cost;           &#x2F;&#x2F; 在点上记录花费        while (cnt -- )        &#123;            int ver;            cin &gt;&gt; ver;            add(id, ver);            st[ver] &#x3D; true;     &#x2F;&#x2F; 标记不是根节点        &#125;    &#125;    int root &#x3D; 1;    while (st[root]) root ++ ;  &#x2F;&#x2F; 找到根节点    dfs(root);    cout &lt;&lt; min(f[root][1], f[root][2]) &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验五：贪心算法和随机算法"><a href="#实验五：贪心算法和随机算法" class="headerlink" title="实验五：贪心算法和随机算法"></a>实验五：贪心算法和随机算法</h1><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>有一个背包，背包容量是M&#x3D;150。有7个物品，物品可以分割成任意大小。要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。</p><table><thead><tr><th>物品</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th></tr></thead><tbody><tr><td>重量</td><td>35</td><td>30</td><td>60</td><td>50</td><td>40</td><td>10</td><td>25</td></tr><tr><td>价值</td><td>10</td><td>40</td><td>30</td><td>50</td><td>35</td><td>40</td><td>30</td></tr></tbody></table><h3 id="问题分析及算法思路-2"><a href="#问题分析及算法思路-2" class="headerlink" title="问题分析及算法思路"></a>问题分析及算法思路</h3><p>首先计算每种物品单位重量的价值，然后依照贪心策略，将<strong>尽可能多的单位重量价值最高的物品</strong>装入背包。将某种物品全部装入背包，背包内的物品总重量未超过C，则选择单位重量价值次高的物品并尽可能地多装入背包</p><p>使用贪心算法解决背包问题的思路如下：</p><ol><li><p>计算每个物品的单位价值：对于每个物品，计算其单位重量的价值（即价值除以重量），并将其降序排序。</p></li><li><p>初始化结果变量：创建一个结果变量，用于记录当前已选择的物品的总重量和总价值，初始值为0。</p></li><li><p>遍历物品：按照单位价值降序的顺序，依次遍历每个物品。</p></li><li><p>判断是否可以放入背包：对于当前遍历到的物品，判断是否可以放入背包中。如果当前物品的重量小于等于背包剩余容量，则将该物品放入背包，并将其重量和价值加到结果变量中。否则，跳过该物品。</p></li><li><p>返回结果：遍历完所有物品后，返回结果变量中记录的总重量和总价值。</p></li></ol><p>贪心算法的核心思想是每次选择当前最优的解决方案，即单位价值最高的物品放入背包。若某次不按照最大单位重量价值的物品进行放置，所得到的总价值一定不是最大的，则可以确定<strong>贪心解就是最优解</strong>，保证了贪心策略的正确性。</p><h3 id="算法设计与代码实现-6"><a href="#算法设计与代码实现-6" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Obj&#123;int id;&#x2F;&#x2F; 物品序号int w;&#x2F;&#x2F; w为各物品的重量int v;&#x2F;&#x2F; v为各物品的价值float unit;&#x2F;&#x2F; 单位重量的价值bool operator&lt; (const Obj&amp; W)const&#123;return unit &lt; W.unit;&#125;&#125;obj[N];void FindMaxValue(int n, int m)&#123;float value &#x3D; 0;sort(obj, obj + n);&#x2F;&#x2F; 按照单位重量的价值对物品进行升序排序for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i--)&#123;if (m - obj[i].w &gt;&#x3D; 0)&#x2F;&#x2F; 存在剩余容量&#123;m -&#x3D; obj[i].w;&#x2F;&#x2F; 去掉这部分的背包容量value +&#x3D; obj[i].v;&#x2F;&#x2F; 加入这部分的价值cout &lt;&lt; &quot;装入整个第&quot; &lt;&lt; l[obj[i].id] &lt;&lt; &quot;个物品&quot; &lt;&lt; endl;if (m &#x3D;&#x3D; 0) break;&#125;else&#123;float ratio &#x3D; (float) m &#x2F; obj[i].w;cout &lt;&lt; &quot;装入&quot; &lt;&lt; ratio * 100 &lt;&lt; &quot;%第&quot; &lt;&lt; l[obj[i].id] &lt;&lt; &quot;个物品&quot; &lt;&lt; endl;value +&#x3D; ratio * obj[i].v;break;&#125;&#125;cout &lt;&lt; &quot;装入背包中的物品的总价值最大为&quot; &lt;&lt; value &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="E:/xiazai/img/13.png" alt="image-20230607101048438"></p><h3 id="算法讨论-3"><a href="#算法讨论-3" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>背包问题有多个不同的变体，其中一些常见的种类包括：</p><ol><li><p>0&#x2F;1背包问题（0&#x2F;1 Knapsack Problem）：在这种问题中，每个物品要么完全放入背包，要么完全不放入背包，不能进行分割。即每个物品只有两种选择：放入背包或不放入背包。</p></li><li><p>分数背包问题（Fractional Knapsack Problem）：这个问题允许物品被分割放入背包，即可以选择物品的一部分放入背包。每个物品有一个对应的重量和价值，目标是找到使总价值最大化的物品组合。</p></li><li><p>多重背包问题（Multiple Knapsack Problem）：多重背包问题与0&#x2F;1背包问题类似，但是每个物品有多个可用的实例（数量不限），可以选择将多个相同的物品放入背包中。</p></li><li><p>无限背包问题（Unbounded Knapsack Problem）：在这个问题中，每个物品有无限个可用实例，可以无限次地选择物品放入背包。</p></li><li><p>有限背包问题（Bounded Knapsack Problem）：这个问题介于0&#x2F;1背包问题和无限背包问题之间，每个物品有一定数量的可用实例，可以选择将物品放入背包的次数受限。</p></li><li><p>值约束背包问题（Knapsack Problem with Value Constraints）：在这个问题中，除了背包的容量限制外，还有对总价值的限制。目标是找到在满足总重量不超过背包容量的前提下，使总价值最大化的物品组合。</p></li></ol><p>通常来说，背包问题使用动态规划来解决，但是在本题中，物品可以分割成任意大小，故可以通过贪心策略，从最大单位重量价值的物品开始装入背包，是背包的纵价值最大，算法的时间复杂度主要消耗在排序上，使用了C++自带的sort排序，时间复杂度是$O(nlogn)$</p><h2 id="照亮的山景"><a href="#照亮的山景" class="headerlink" title="照亮的山景"></a>照亮的山景</h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>在一片山的上空，高度为T处有N个处于不同位置的灯泡，如图。如果山的边界上某一点于某灯i的连线不经过山的其它点，我们称灯i可以照亮该点。开尽量少的灯，使得整个山景都被照亮。山被表示成有m个转折点的折线。</p><p>提示：照亮整个山景相当于照亮每一个转折点。</p><p><img src="E:/xiazai/img/1.gif" alt="img"></p><h3 id="问题分析及算法思路-3"><a href="#问题分析及算法思路-3" class="headerlink" title="问题分析及算法思路"></a>问题分析及算法思路</h3><p>一座山想要能被照亮，那么把这座山的两侧分别延长，与灯所在的高度相交于两个点，在这个区间内如果有一盏灯，就可以照亮这座山，如果没有，就必须在区间两侧各有一盏灯。那么我们把每座山的区间放到一个集合中，遍历所有的灯，每次贪心的寻找覆盖区间最多的灯，同时将已经照亮的山移出集合，标记灯为已使用，直到集合为空，所求的灯的数量就是最小的灯的数量。</p><p>这是在笔算时的解决方案，在计算时应该将其数据化。</p><p>首先找到<strong>每个顶点能被灯照到的左端点和右端点</strong>，可以采用遍历每个灯的做法，计算灯到顶点的直线的斜率 $k$ 和截距 $b$，然后计算该灯到顶点这段距离区间内<strong>所有顶点的横坐标投影到该直线的纵坐标</strong>是否小于<strong>该顶点的纵坐标</strong>：</p><ul><li>若成立，则认为该灯是无法照射到该顶点的，转而判断下一个灯；</li><li>若这段距离区间中所有顶点都存在以上条件，则认为该灯可以照射到该顶点，由该灯在顶点处的左右关系对顶点能被灯照到的左、右端点进行更新，并判断下一个灯。</li></ul><p>若判断的灯已经在该顶点的右侧且该灯无法照到该顶点，则无需继续判断后续灯是否能照射到该顶点。</p><p>经过上述过程，我们得到了每个顶点被哪些灯照到, 记录到$l$和$r$中，接着根据<strong>贪心策略</strong>获得开灯最少的数量：</p><p>依次计算区间内每个数出现的次数，找出区间中出现次数最多的数，由贪心策略可知，其是我们要找的灯的序号。点亮该灯后，将能照射到的顶点删除，然后对剩余顶点重复上述过程，直到顶点被全部照亮。</p><p>若贪心策略不是最优解，我们可以通过换部分灯的开关情况使其变为最优解，且不增加要亮灯的数目，则该贪心策略是正确的。</p><h3 id="算法设计与代码实现-7"><a href="#算法设计与代码实现-7" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Mou&#123;int x;int y;int l;&#x2F;&#x2F; l 为顶点能被灯照到的左端点int r;&#x2F;&#x2F; r 为顶点能被灯照到的右端点&#125;;vector&lt;Mou&gt; mou;void FindLightRegion(int m, int n, int t)&#123;for (int i &#x3D; 0; i &lt; m; i++)&#x2F;&#x2F; 遍历每个顶点&#123;for (int j &#x3D; 0; j &lt; n; j++)&#x2F;&#x2F; 遍历每个灯&#123;bool flag &#x3D; true;if (l[j] !&#x3D; mou[i].x)&#123;&#x2F;&#x2F; 计算直线的斜率k和截距bfloat k &#x3D; (float)(t - mou[i].y) &#x2F; (l[j] - mou[i].x);float b &#x3D; t - k * l[j];int s &#x3D; i;while ((l[j] &lt; mou[i].x &amp;&amp; --s &amp;&amp; l[j] &lt; mou[s].x)|| (l[j] &gt; mou[i].x &amp;&amp; ++s &amp;&amp; l[j] &gt; mou[s].x))&#x2F;&#x2F; 遍历灯到该点区间内的所有点&#123;if (k * mou[s].x + b &lt; mou[s].y)&#123;flag &#x3D; false;break;&#125;&#125;&#125;if (flag)&#123;if (mou[i].l &#x3D;&#x3D; -1)&#123;mou[i].l &#x3D; mou[i].r &#x3D; j;&#125;else&#123;mou[i].r++;&#125;&#125;else&#123;if (l[j] &gt; mou[i].x)break;&#x2F;&#x2F; 无需继续遍历&#125;&#125;&#125;&#125;int FindMinLight(int m, int n, int t)&#123;int res &#x3D; 0;FindLightRegion(m, n, t);&#x2F;&#x2F; 得到每个顶点被哪些灯照到, 记录到 l 和 r 中while (mou.size() !&#x3D; 0)&#123;&#x2F;&#x2F; 统计区间每个数出现的次数int max &#x3D; 0, cishu &#x3D; 0;for (auto t : mou)&#123;map&lt;int, int&gt; nums;for (int i &#x3D; t.l; i &lt;&#x3D; t.r; i++)&#123;nums[i]++;&#125;&#x2F;&#x2F; 找出区间中出现次数最多的数for (auto num : nums)&#123;if (num.second &gt; cishu)&#123;max &#x3D; num.first;cishu &#x3D; num.second;&#125;&#125;&#125;&#x2F;&#x2F; 将出现次数最多的数设为当前需要的灯, 然后删除所有有关的顶点res++;for (auto it &#x3D; mou.begin(); it !&#x3D; mou.end();)&#123;if (it[0].l &lt;&#x3D; max &amp;&amp; it[0].r &gt;&#x3D; max)it &#x3D; mou.erase(it);else++it;&#125;&#125;return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="E:/xiazai/img/14.png" alt="image-20230607105633359"></p><h3 id="算法讨论-4"><a href="#算法讨论-4" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>在本题的求解中通过求解每个顶点能被灯照到的左端点和右端点，然后运用贪心策略依次计算区间内每个数出现的次数，找出区间中出现次数最多的数，开相应序号的灯，从而求解开灯最少的数量，算法的时间复杂度是$O(m*n^2)$。</p><h2 id="搬桌子问题"><a href="#搬桌子问题" class="headerlink" title="搬桌子问题"></a>搬桌子问题</h2><h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><p>某教学大楼一层有n个教室，从左到右依次编号为1、2、…、n。现在要把一些课桌从某些教室搬到另外一些教室，每张桌子都是从编号较小的教室搬到编号较大的教室，每一趟，都是从左到右走，搬完一张课桌后，可以继续从当前位置或往右走搬另一张桌子。</p><p>输入数据：先输入n、m，然后紧接着m行输入这m张要搬课桌的起始教室和目标教室。</p><p>输出数据：最少需要跑几趟。</p><blockquote><p><strong>sample input</strong></p><pre class="line-numbers language-none"><code class="language-none">10  51  33  94  66  107  8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>sample output</strong></p><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="问题分析及算法实现"><a href="#问题分析及算法实现" class="headerlink" title="问题分析及算法实现"></a>问题分析及算法实现</h3><p>使用贪心策略，尽可能在一趟从左向右的移动中移动尽可能多的桌子。</p><p>将每一次移动桌子的起始教室和目的教室作为一个区间，对剩余卓子的区间进行比较</p><ul><li>如果存在剩余桌子的左界限大于上一张桌子的右界限，则可以进行下一张桌子的移动，进行上一步操作</li><li>反之，则结束这一趟移动，返回下一张桌子的左界限，重复上一个操作</li></ul><h3 id="算法设计与代码实现-8"><a href="#算法设计与代码实现-8" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Move &#123;int start;int end;bool use;bool operator&lt; (const Move&amp; W)const&#123;return start &lt; W.start;&#125;&#125;mov[N];int runnum(int n, int m)&#123;sort(mov, mov + m);&#x2F;&#x2F; 按照任务起始教室的编号排序int res &#x3D; 0, num &#x3D; 0, work &#x3D; 0; &#x2F;&#x2F; res为趟数while (work &lt; m)&#123;int num &#x3D; 0;&#x2F;&#x2F; num为当前到的教室编号for (int i &#x3D; 0; i &lt; m; i++)&#123;if (mov[i].use &#x3D;&#x3D; false &amp;&amp; mov[i].start &gt;&#x3D; num)&#123;mov[i].use &#x3D; true;work++;num &#x3D; mov[i].end;if (num &#x3D;&#x3D; n) break;&#125;&#125;res++;&#125;return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="E:/xiazai/img/15.png" alt="image-20230607111611389"></p><h3 id="算法讨论-5"><a href="#算法讨论-5" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>本算法需要进行遍历m张桌子的移动区间，消耗的时间复杂度$O(m^2)$，贪心的策略可以让单趟遍历到的教室属于任务范围内的比例最大，从而使得整个算法性能达到最优。</p><h2 id="附录-2"><a href="#附录-2" class="headerlink" title="附录"></a>附录</h2><h3 id="背包问题源代码"><a href="#背包问题源代码" class="headerlink" title="背包问题源代码"></a>背包问题源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 20;char l[35] &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;struct Obj&#123;int id;&#x2F;&#x2F; 物品序号int w;&#x2F;&#x2F; w为各物品的重量int v;&#x2F;&#x2F; v为各物品的价值float unit;&#x2F;&#x2F; 单位重量的价值bool operator&lt; (const Obj&amp; W)const&#123;return unit &lt; W.unit;&#125;&#125;obj[N];void FindMaxValue(int n, int m)&#123;float value &#x3D; 0;sort(obj, obj + n);&#x2F;&#x2F; 按照单位重量的价值对物品进行升序排序for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i--)&#123;if (m - obj[i].w &gt;&#x3D; 0)&#x2F;&#x2F; 存在剩余容量&#123;m -&#x3D; obj[i].w;&#x2F;&#x2F; 去掉这部分的背包容量value +&#x3D; obj[i].v;&#x2F;&#x2F; 加入这部分的价值cout &lt;&lt; &quot;装入整个第&quot; &lt;&lt; l[obj[i].id] &lt;&lt; &quot;个物品&quot; &lt;&lt; endl;if (m &#x3D;&#x3D; 0) break;&#125;else&#123;float ratio &#x3D; (float) m &#x2F; obj[i].w;cout &lt;&lt; &quot;装入&quot; &lt;&lt; ratio * 100 &lt;&lt; &quot;%第&quot; &lt;&lt; l[obj[i].id] &lt;&lt; &quot;个物品&quot; &lt;&lt; endl;value +&#x3D; ratio * obj[i].v;break;&#125;&#125;cout &lt;&lt; &quot;装入背包中的物品的总价值最大为&quot; &lt;&lt; value &lt;&lt; endl;&#125;int main()&#123;int n, m;&#x2F;&#x2F; n为物品数, m为背包容量cout &lt;&lt; &quot;请输入物品数和背包容量:&quot;;cin &gt;&gt; n &gt;&gt; m;cout &lt;&lt; &quot;请输入各个物品的重量和价值:\n&quot;;for (int i &#x3D; 0; i &lt; n; i++)&#123;cin &gt;&gt; obj[i].w &gt;&gt; obj[i].v;obj[i].id &#x3D; i;obj[i].unit &#x3D; (float) obj[i].v &#x2F; obj[i].w;&#125;FindMaxValue(n, m);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="照亮的山景源代码"><a href="#照亮的山景源代码" class="headerlink" title="照亮的山景源代码"></a>照亮的山景源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;map&gt;#include&lt;vector&gt;using namespace std;const int N &#x3D; 20;int l[N], top[N];&#x2F;&#x2F; top[N] 表示山峰的编号struct Mou&#123;int x;int y;int l;&#x2F;&#x2F; l 为顶点能被灯照到的左端点int r;&#x2F;&#x2F; r 为顶点能被灯照到的右端点&#125;;vector&lt;Mou&gt; mou;void FindLightRegion(int m, int n, int t)&#123;for (int i &#x3D; 0; i &lt; m; i++)&#x2F;&#x2F; 遍历每个顶点&#123;for (int j &#x3D; 0; j &lt; n; j++)&#x2F;&#x2F; 遍历每个灯&#123;bool flag &#x3D; true;if (l[j] !&#x3D; mou[i].x)&#123;&#x2F;&#x2F; 计算直线的斜率k和截距bfloat k &#x3D; (float)(t - mou[i].y) &#x2F; (l[j] - mou[i].x);float b &#x3D; t - k * l[j];int s &#x3D; i;while ((l[j] &lt; mou[i].x &amp;&amp; --s &amp;&amp; l[j] &lt; mou[s].x)|| (l[j] &gt; mou[i].x &amp;&amp; ++s &amp;&amp; l[j] &gt; mou[s].x))&#x2F;&#x2F; 遍历灯到该点区间内的所有点&#123;if (k * mou[s].x + b &lt; mou[s].y)&#123;flag &#x3D; false;break;&#125;&#125;&#125;if (flag)&#123;if (mou[i].l &#x3D;&#x3D; -1)&#123;mou[i].l &#x3D; mou[i].r &#x3D; j;&#125;else&#123;mou[i].r++;&#125;&#125;else&#123;if (l[j] &gt; mou[i].x)break;&#x2F;&#x2F; 无需继续遍历&#125;&#125;&#125;&#125;int FindMinLight(int m, int n, int t)&#123;int res &#x3D; 0;FindLightRegion(m, n, t);&#x2F;&#x2F; 得到每个顶点被哪些灯照到, 记录到 l 和 r 中while (mou.size() !&#x3D; 0)&#123;&#x2F;&#x2F; 统计区间每个数出现的次数int max &#x3D; 0, cishu &#x3D; 0;for (auto t : mou)&#123;map&lt;int, int&gt; nums;for (int i &#x3D; t.l; i &lt;&#x3D; t.r; i++)&#123;nums[i]++;&#125;&#x2F;&#x2F; 找出区间中出现次数最多的数for (auto num : nums)&#123;if (num.second &gt; cishu)&#123;max &#x3D; num.first;cishu &#x3D; num.second;&#125;&#125;&#125;&#x2F;&#x2F; 将出现次数最多的数设为当前需要的灯, 然后删除所有有关的顶点res++;for (auto it &#x3D; mou.begin(); it !&#x3D; mou.end();)&#123;if (it[0].l &lt;&#x3D; max &amp;&amp; it[0].r &gt;&#x3D; max)it &#x3D; mou.erase(it);else++it;&#125;&#125;return res;&#125;int main()&#123;int m, n, t;&#x2F;&#x2F; m为山棱转折点的个数, n为灯泡个数, t为灯泡的高度cin &gt;&gt; m;for (int i &#x3D; 0; i &lt; m; i++)&#123;int x, y;cin &gt;&gt; x &gt;&gt; y;mou.push_back(&#123; x,y,-1,-1 &#125;);&#x2F;&#x2F; 转折点的水平坐标和垂直海拔高度, 并预初始化区间&#125;cin &gt;&gt; n &gt;&gt; t;for (int i &#x3D; 0; i &lt; n; i++)&#123;cin &gt;&gt; l[i];&#125;cout &lt;&lt; &quot;开灯最少的数量是&quot; &lt;&lt; FindMinLight(m, n, t);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搬桌子问题源代码"><a href="#搬桌子问题源代码" class="headerlink" title="搬桌子问题源代码"></a>搬桌子问题源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 20;struct Move &#123;int start;int end;bool use;bool operator&lt; (const Move&amp; W)const&#123;return start &lt; W.start;&#125;&#125;mov[N];int runnum(int n, int m)&#123;sort(mov, mov + m);&#x2F;&#x2F; 按照任务起始教室的编号排序int res &#x3D; 0, num &#x3D; 0, work &#x3D; 0;&#x2F;&#x2F; res为趟数while (work &lt; m)&#123;int num &#x3D; 0;&#x2F;&#x2F; num为当前到的教室编号for (int i &#x3D; 0; i &lt; m; i++)&#123;if (mov[i].use &#x3D;&#x3D; false &amp;&amp; mov[i].start &gt;&#x3D; num)&#123;mov[i].use &#x3D; true;work++;num &#x3D; mov[i].end;if (num &#x3D;&#x3D; n) break;&#125;&#125;res++;&#125;return res;&#125;int main()&#123;int n, m;&#x2F;&#x2F; n为教室数, m为要搬运的工作数cin &gt;&gt; n &gt;&gt; m;for (int i &#x3D; 0; i &lt; m; i++)&#123;cin &gt;&gt; mov[i].start &gt;&gt; mov[i].end;mov[i].use &#x3D; false;&#125;cout &lt;&lt; runnum(n, m) &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 课内实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题七</title>
      <link href="/2023/07/10/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%83/"/>
      <url>/2023/07/10/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%83/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一-Voronoi图及相关算法的调研报告"><a href="#问题一-Voronoi图及相关算法的调研报告" class="headerlink" title="问题一 Voronoi图及相关算法的调研报告"></a>问题一 Voronoi图及相关算法的调研报告</h2><h3 id="Voronoi图的定义和相关性质"><a href="#Voronoi图的定义和相关性质" class="headerlink" title="Voronoi图的定义和相关性质"></a>Voronoi图的定义和相关性质</h3><p>Voronoi Diagram又称Thiessen Polygon，其数学描述如下：</p><p>设平面区域B上有一组离散点$\left(X_i, Y_j\right)(\mathrm{i}&#x3D;1,2,3, \ldots, \mathrm{k} ; \mathrm{j}&#x3D;1,2,3, \ldots, \mathrm{k}, \mathrm{k}$ 为离散点点数) ，将区域B用一组直线段分成k个互相邻接的多边形，使得：</p><ol><li>每个多边形内含有且仅含有一个离散点；</li><li>若区域B上任意一点$\left(x^1, y^1\right)$位于含离散点$\left(x_i, y_j\right)$的多边形内，不等式$\sqrt{\left(x^1-x_i\right)^2+\left(y^1-y_j\right)^2}&lt;\sqrt{\left(x^1-x_j\right)^2+\left(y^1-y_i\right)^2}$在$i\neq j$时恒成立；</li><li>若点$\left(x^1, y^1\right)$位于含离散点$\left(x_i, y_j\right)$的两个多边形的公共边上，则等式$\sqrt{\left(x^1-x_i\right)^2+\left(y^1-y_j\right)^2}&#x3D;\sqrt{\left(x^1-x_j\right)^2+\left(y^1-y_i\right)^2}$成立</li></ol><p>Voronoi图的特征如下：</p><ol><li>每个泰森多边形内仅含有一个离散点数据</li><li>泰森多边形的点到相应离散点的距离最近</li><li>位于泰森多边形边上的点到其两边的离散点的距离相等</li></ol><h3 id="Voronoi图生成算法"><a href="#Voronoi图生成算法" class="headerlink" title="Voronoi图生成算法"></a>Voronoi图生成算法</h3><h4 id="使用分治法"><a href="#使用分治法" class="headerlink" title="使用分治法"></a>使用分治法</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">VoronoiDiagram* partition(vector&lt;point&gt;&amp; origin,int left,int right)&#123;    if(right-left&lt;3)    &#123;        VoronoiDiagram* result&#x3D;smallVD(origin,left,right);        return result;    &#125;else&#123;        VoronoiDiagram* leftresult&#x3D;partition(origin,left,(left+right)&#x2F;2);        VoronoiDiagram* rightresult&#x3D;partition(origin,(left+right)&#x2F;2+1,right);        return mergeVD(leftresult,rightresult);    &#125;&#125;VoronoiDiagram* mergeVD(VoronoiDiagram* left,VoronoiDiagram* right)&#123;    VoronoiDiagram* result&#x3D;new VoronoiDiagram();    vector&lt;Devidechain&gt; devidechain;    left-&gt;convex hull&#x3D;getConvexHull(left-&gt;sites);        right-&gt;convex hull&#x3D;getConvexHull(right-&gt;sites);    tangentline(left-&gt;convex,right-&gt;convex hull,*leftMax,*leftMin,*rightMax,*rightMin);    bool tobottom&#x3D;false;    do    &#123;        chain&#x3D;bisector(leftMax,rightMax);        leftpoint&#x3D;IntersectionPoint(leftMax,chain);        rightpoint&#x3D;IntersectionPoint(rightMax,chain);        if(leftpoint.y&gt;rightpoint.y)&#123;            updateLeftSite();        &#125;else if(leftpoint.y&lt;rightpoint.y)&#123;            updateRightSite();        &#125;else&#123;            break;        &#125;    &#125;while(!tobottom);    connectchain();    result&#x3D;(*right)+(*left);    return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Lawson算法"><a href="#Lawson算法" class="headerlink" title="Lawson算法"></a>Lawson算法</h4><ol><li>建立一个大三角形，将所有数据点包围起来</li><li>向三角形中插入一点，将该点与三角形三个顶点项链，形成三个新的三角形</li><li>逐个对三角形进行空外接圆测试，用Lawson的局部优化过程进行优化（交换对角线保证Delaunay三角网的形成）</li></ol><h4 id="Bowyer-Watson算法"><a href="#Bowyer-Watson算法" class="headerlink" title="Bowyer-Watson算法"></a>Bowyer-Watson算法</h4><ol><li>构造一个超级三角形，包含所有散点，放入三角形链表</li><li>将散点依次插入，在三角形链表中找出外接圆包含插入点的三角形，删除三角形的公共边，将插入点同三角形的顶点全部连接起来，完成一个点在Delaunay三角形链表中的插入</li><li>对新三角形进行优化，将形成的三角形放入Delaunay三角形链表</li><li>循环2.至所有散点插入完毕</li></ol><h3 id="Voronoi图的应用"><a href="#Voronoi图的应用" class="headerlink" title="Voronoi图的应用"></a>Voronoi图的应用</h3><p>计算最近邻问题</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;CGAL&#x2F;Exact_predicates_exact_constructions_kernel.h&gt;#include &lt;CGAL&#x2F;Voronoi_diagram_2.h&gt;using namespace std;typedef CGAL::Exact_predicates_exact_constructions_kernel Kernel;typedef Kernel::Point_2 Point;typedef CGAL::Voronoi_diagram_2&lt;Kernel&gt; Voronoi_diagram;int main() &#123;  vector&lt;Point&gt; points &#x3D; &#123;&#123;1, 2&#125;, &#123;3, 4&#125;, &#123;5, 6&#125;, &#123;7, 8&#125;&#125;;  Voronoi_diagram voronoi;  voronoi.insert(points.begin(), points.end());  Point query_point(2, 3);  Voronoi_diagram::Locate_result locate_result &#x3D; voronoi.locate(query_point);  if (Voronoi_diagram::Face_handle fh &#x3D; boost::get&lt;Voronoi_diagram::Face_handle&gt;(&amp;*locate_result)) &#123;    Point closest_point &#x3D; fh-&gt;dual()-&gt;point();    cout &lt;&lt; &quot;Closest point: (&quot; &lt;&lt; closest_point.x() &lt;&lt; &quot;, &quot; &lt;&lt; closest_point.y() &lt;&lt; &quot;)&quot; &lt;&lt; endl;  &#125;  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了CGAL库（计算几何算法库）</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>前面已经学习在一维序列中某元素的查找算法，现若查找是在一个二维矩阵中进行，并且矩阵中行列均为升序排列，请给出相应查找算法并进行分析。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>采用逐行逐列的搜索方式，从矩阵的左下角开始搜索，直到找到元素或返回未找到</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>采用减治算法，也就是说采用二维的二分查找算法，找到矩阵的中心位置的元素，执行大小判断，然后在排除掉的剩余矩阵中继续进行查找</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;void searchMatrix1(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123;if (matrix.size() &#x3D;&#x3D; 0 || matrix[0].size() &#x3D;&#x3D; 0) &#123;cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;return;&#125;int r &#x3D; matrix.size();int c &#x3D; matrix[0].size();int x &#x3D; r - 1, y &#x3D; 0;while (x &gt;&#x3D; 0 &amp;&amp; y &lt; c) &#123;if (matrix[x][y] &#x3D;&#x3D; target) &#123;cout &lt;&lt; &quot;matrix[&quot; &lt;&lt; x+1 &lt;&lt; &quot;][&quot; &lt;&lt; y+1 &lt;&lt; &quot;]&quot; &lt;&lt; endl;return;&#125;else if (matrix[x][y] &lt; target) &#123;y++;&#125;else &#123;x--;&#125;&#125;cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;&#125;void search(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target, int x1, int x2, int y1, int y2) &#123;int mx &#x3D; x1 + (x2 - x1) &gt;&gt; 1;int my &#x3D; y1 + (y2 - y1) &gt;&gt; 1;if (matrix[mx][my] &#x3D;&#x3D; target) &#123;cout &lt;&lt; &quot;matrix[&quot; &lt;&lt; mx + 1 &lt;&lt; &quot;][&quot; &lt;&lt; my + 1 &lt;&lt; &quot;]&quot; &lt;&lt; endl;return;&#125;else if (matrix[mx][my] &lt; target) &#123;search(matrix, target, mx + 1, x2, y1, my);search(matrix, target, x1, mx, my + 1, y2);search(matrix, target, mx + 1, x2, my + 1, y2);&#125;else &#123;search(matrix, target, x1, mx - 1, my, y2);search(matrix, target, mx, x2, y1, my - 1);search(matrix, target, x1, mx - 1, y1, my - 1);&#125;cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;&#125;void searchMatrix2(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123;int r &#x3D; matrix.size();int c &#x3D; matrix[0].size();int x1 &#x3D; 0, y1 &#x3D; 0, x2 &#x3D; r - 1, y2 &#x3D; c - 1;search(matrix,target,x1,x2,y1,y2);&#125;int main() &#123;vector&lt;vector&lt;int&gt;&gt; matrix &#x3D; &#123; &#123;1,4,7,11,15&#125;,&#123;2,5,8,12,19&#125;,&#123;3,6,9,16,22&#125;,&#123;10,13,14,17,24&#125;,&#123;18,21,23,26,30&#125; &#125;;searchMatrix1(matrix, 9);searchMatrix2(matrix, 9);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><p><img src="/imgs/sikao7/1.png" alt="image-20230409165251520"></p><p>方法一的时间复杂度是$O(m+n)$，m、n分别为矩阵的行数和列数</p><p>方法二的时间复杂度是$O(mn^{log_43})$</p><p>针对方法二，还有一定的改进空间，如果该矩阵是方阵，则在方阵的主对角线先进行比较，找到大于target的主对角线上的元素，再对该元素所在行和列进行两次二分查找，则该算法的时间复杂度为$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Voronoi图 </tag>
            
            <tag> 二维矩阵查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题六</title>
      <link href="/2023/07/10/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%85%AD/"/>
      <url>/2023/07/10/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出不同策略返回一序列数中的众数（出现次数不小于序列长度的一半），并分析</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>最简单的算法是先对序列进行排序，然后选取$(n&#x2F;2)$和$(n&#x2F;2-1)$位置的元素，分别与序列初值和末尾进行比较，如果有其中一个元素相等，则该元素是众数</p><p>选取其中一个元素作为侯选数，众数是出现次数不小于序列长度的一半的数，根据鸽笼原理得到序列中的其他元素的个数少于众数的个数，依据上述原理，能够判断侯选数是否为众数，这就是<strong>摩尔投票算法</strong>的基本步骤。</p><p>使用$hashtable$来存储</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quickSort(int arr[], int left, int right) &#123;int i &#x3D; left, j &#x3D; right;int temp;int pivot &#x3D; arr[(left + right) &#x2F; 2];while (i &lt;&#x3D; j) &#123;while (arr[i] &lt; pivot)i++;while (arr[j] &gt; pivot)j--;if (i &lt;&#x3D; j) &#123;temp &#x3D; arr[i];arr[i] &#x3D; arr[j];arr[j] &#x3D; temp;i++;j--;&#125;&#125;if (left &lt; j)quickSort(arr, left, j);if (i &lt; right)quickSort(arr, i, right);&#125;int FindMajority1(int arr[], int n) &#123;quickSort(arr, 0, n - 1);if (n % 2 &#x3D;&#x3D; 0) &#123;if (arr[n &#x2F; 2] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2];&#125;if (arr[n &#x2F; 2 - 1] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2 - 1] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2 - 1];&#125;&#125;else &#123;if (arr[n &#x2F; 2] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2];&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="摩尔投票算法"><a href="#摩尔投票算法" class="headerlink" title="摩尔投票算法"></a>摩尔投票算法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int FindMajority1(int array[],int n) &#123;int count &#x3D; 0;int cur;for (int i &#x3D; 0; i &lt; n; i++) &#123;if (count &#x3D;&#x3D; 0) &#123;cur &#x3D; array[i];&#125;if (cur &#x3D;&#x3D; array[i]) &#123;count++;&#125;else &#123;count--;&#125;&#125;if (n !&#x3D; 2 &amp;&amp; cur &#x3D;&#x3D; array[n - 1]) &#123;return INT_MAX;&#125;else &#123;return cur;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hashtable-法"><a href="#hashtable-法" class="headerlink" title="$hashtable$法"></a>$hashtable$法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int FindMajority3(int arr[], int n) &#123;unordered_map&lt;int, int&gt; counts;int maxCount &#x3D; 0;int mode &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;counts[arr[i]]++;if (counts[arr[i]] &gt; maxCount) &#123;maxCount &#x3D; counts[arr[i]];mode &#x3D; arr[i];&#125;&#125;if (maxCount &gt;&#x3D; n &#x2F; 2) &#123;return mode;&#125;return INT_MAX;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;unordered_map&gt;using namespace std;void quickSort(int arr[], int left, int right) &#123;int i &#x3D; left, j &#x3D; right;int temp;int pivot &#x3D; arr[(left + right) &#x2F; 2];while (i &lt;&#x3D; j) &#123;while (arr[i] &lt; pivot)i++;while (arr[j] &gt; pivot)j--;if (i &lt;&#x3D; j) &#123;temp &#x3D; arr[i];arr[i] &#x3D; arr[j];arr[j] &#x3D; temp;i++;j--;&#125;&#125;if (left &lt; j)quickSort(arr, left, j);if (i &lt; right)quickSort(arr, i, right);&#125;int FindMajority1(int arr[], int n) &#123;quickSort(arr, 0, n - 1);if (n % 2 &#x3D;&#x3D; 0) &#123;if (arr[n &#x2F; 2] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2];&#125;if (arr[n &#x2F; 2 - 1] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2 - 1] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2 - 1];&#125;&#125;else &#123;if (arr[n &#x2F; 2] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2];&#125;&#125;&#125;int FindMajority2(int array[],int n) &#123;int count &#x3D; 0;int cur &#x3D; INT_MAX;for (int i &#x3D; 0; i &lt; n; i++) &#123;if (count &#x3D;&#x3D; 0) &#123;cur &#x3D; array[i];&#125;if (cur &#x3D;&#x3D; array[i]) &#123;count++;&#125;else &#123;count--;&#125;&#125;if (n !&#x3D; 2 &amp;&amp; cur &#x3D;&#x3D; array[n - 1]) &#123;return INT_MAX;&#125;else &#123;return cur;&#125;&#125;int FindMajority3(int arr[], int n) &#123;unordered_map&lt;int, int&gt; counts;int maxCount &#x3D; 0;int mode &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;counts[arr[i]]++;if (counts[arr[i]] &gt; maxCount) &#123;maxCount &#x3D; counts[arr[i]];mode &#x3D; arr[i];&#125;&#125;if (maxCount &gt;&#x3D; n &#x2F; 2) &#123;return mode;&#125;return INT_MAX;&#125;int main() &#123;int array[] &#x3D; &#123; 1,1,1,2,3,4 &#125;;int n &#x3D; sizeof(array) &#x2F; sizeof(array[0]);cout &lt;&lt; FindMajority1(array, n) &lt;&lt; endl;cout &lt;&lt; FindMajority2(array, n) &lt;&lt; endl;cout &lt;&lt; FindMajority3(array, n) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><p><img src="/imgs/sikao6/1.png" alt="image-20230323094831456"></p><p><strong>针对方法一</strong>，使用快速排序，因此时间复杂度是$O(nlogn)$，空间复杂度是$O(logn)$；</p><p><strong>针对方法二</strong>，遍历一次数组，时间复杂度是$O(n)$，空间复杂度是$O(1)$；</p><p><strong>针对方法三</strong>，遍历一次数组，时间复杂度是$O(n)$，空间复杂度是$O(n)$。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出不同策略将偶数个元素形成的序列分成两个子序列$S_1$$、$$S_2$$，要求$$S_1$$、$$S_2$的和差值最大</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>方法一是使用动态规划算法，使用一个二维数组$dp[i][j]$表示前i个元素中是否存在一些元素的和为j，通过动态规划的方式逐步地求出$dp$数组地所有制，在dp数组中找到一个满足条件的最大的j。如果$dp[n][j]$的值为true，S1的和为j，S2为sum-j，两者差为$sum-2j$。</p><p>方法二是使用暴力枚举法，例举出两子序列分别进行求和，比较不同子序列之差</p><h3 id="算法实现与分析-1"><a href="#算法实现与分析-1" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;using namespace std;vector&lt;vector&lt;int&gt;&gt; MaxDifference(vector&lt;int&gt; nums) &#123;int n &#x3D; nums.size();int sum &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;sum +&#x3D; nums[i];&#125;vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;((sum &gt;&gt; 1) + 1, 0));dp[0][0] &#x3D; 1;for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;for (int j &#x3D; 0; j &lt;&#x3D; (sum &gt;&gt; 1); j++) &#123;dp[i][j] &#x3D; dp[i - 1][j];if (j &gt;&#x3D; nums[i - 1]) &#123;dp[i][j] |&#x3D; dp[i - 1][j - nums[i - 1]];&#125;&#125;&#125;int maxdiff &#x3D; 0;int index &#x3D; 0;for (int j &#x3D; (sum &gt;&gt; 1); j &gt;&#x3D; 0; j--) &#123;if (dp[n][j]) &#123;maxdiff &#x3D; sum - 2 * j;index &#x3D; j;break;&#125;&#125;vector&lt;int&gt; S1, S2;int i &#x3D; n;int j &#x3D; index;while (i &gt; 0 &amp;&amp; j &gt; 0) &#123;if (dp[i - 1][j]) &#123;i--;&#125;else &#123;S1.push_back(nums[i - 1]);j -&#x3D; nums[i - 1];i--;&#125;&#125;for (int i &#x3D; 0; i &lt; n; i++) &#123;if (find(S1.begin(), S1.end(), nums[i]) &#x3D;&#x3D; S1.end()) &#123;S2.push_back(nums[i]);&#125;&#125;return &#123; S1,S2 &#125;;&#125;int main() &#123;vector&lt;int&gt; nums &#x3D; &#123; 1,6,5,11,3,2 &#125;;vector&lt;int&gt; S1, S2;int n &#x3D; nums.size();vector&lt;vector&lt;int&gt;&gt; result &#x3D; MaxDifference(nums);S1 &#x3D; result[0];S2 &#x3D; result[1];for (int i &#x3D; 1; i &lt; (n &gt;&gt; 1); i++) &#123;cout &lt;&lt; S1[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;for (int i &#x3D; 1; i &lt; (n &gt;&gt; 1); i++) &#123;cout &lt;&lt; S2[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该算法的时间复杂度是$O(n^2)$，针对元素较多的序列处理能力强</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;vector&lt;int&gt; findMaxDiffSubsequence(const vector&lt;int&gt;&amp; nums) &#123;    int n &#x3D; nums.size();    int maxDiff &#x3D; INT_MIN;    vector&lt;int&gt; maxS1, maxS2;    for (int i &#x3D; 0; i &lt; (1 &lt;&lt; n); i++) &#123;        int s1sum &#x3D; 0, s2sum &#x3D; 0;        vector&lt;int&gt; s1, s2;        for (int j &#x3D; 0; j &lt; n; j++) &#123;            if (i &amp; (1 &lt;&lt; j)) &#123;                s1.push_back(nums[j]);                s1sum +&#x3D; nums[j];            &#125; else &#123;                s2.push_back(nums[j]);                s2sum +&#x3D; nums[j];            &#125;        &#125;        int diff &#x3D; s1sum - s2sum;        if (diff &gt; maxDiff) &#123;            maxDiff &#x3D; diff;            maxS1 &#x3D; s1;            maxS2 &#x3D; s2;        &#125;    &#125;    return maxDiff &gt; 0 ? maxS1 : maxS2;&#125;int main() &#123;    vector&lt;int&gt; nums &#x3D; &#123;1, 2, 3, 4, 5, 6&#125;;    vector&lt;int&gt; subsequence &#x3D; findMaxDiffSubsequence(nums);    for (int i &#x3D; 0; i &lt; subsequence.size(); i++) &#123;        cout &lt;&lt; subsequence[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暴力枚举法的时间复杂度是$O(n2^n)$，处理方法简单，能够保证结果的正确性，但是时间复杂度很高，针对长序列不适用</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 摩尔投票算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题五</title>
      <link href="/2023/07/07/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%BA%94/"/>
      <url>/2023/07/07/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在计算机科学与社会生活中，经常涉及到要求前K个元素即top-k的问题，请给出不同策解决这一问题，并对比分析</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>本题假设取最大的k个元素</p><p>首先最直接的想法就是先进行排序，再取前k个元素，选取快速排序作为本题的排序算法，时间复杂度是$O(nlogn)$，然后选择前k个元素，总时间复杂度是$O(nlogn)$，以下是快速排序的实现。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quickSort(int arr[], int left, int right) &#123;    int i &#x3D; left, j &#x3D; right;    int tmp;    int pivot &#x3D; arr[(left + right) &gt;&gt; 1];    while (i &lt;&#x3D; j) &#123;        while (arr[i] &gt; pivot) &#123;            i++;        &#125;                    while (arr[j] &lt; pivot) &#123;            j--;        &#125;        if (i &lt;&#x3D; j) &#123;            tmp &#x3D; arr[i];            arr[i] &#x3D; arr[j];            arr[j] &#x3D; tmp;            i++;            j--;        &#125;    &#125;;        if (left &lt; j) &#123;        quickSort(arr, left, j);    &#125;    if (i &lt; right) &#123;        quickSort(arr, i, right);    &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二采用堆的数据结构，采用先进先出的策略，建立一个最小堆存取最大的k个元素，对整个序列进行遍历，将序列中的前k个元素压入堆中，从第k+1个元素开始进行队首元素进行判定，若当前元素大于队首元素，将队首弹出，将当前元素加入队列中；否则不进行任何操作。遍历结束后，反转顺序，打印输出。以下是堆排序的实现</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void MaxKElements(int arr[], int n, int k) &#123;    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; MinHeap;    for (int i &#x3D; 0; i &lt; n; i++) &#123;        if (i &lt; k) &#123;            MinHeap.push(arr[i]);        &#125;        else &#123;            if (arr[i] &gt; MinHeap.top()) &#123;                MinHeap.pop();                MinHeap.push(arr[i]);            &#125;        &#125;    &#125;    vector&lt;int&gt; res;    while (!MinHeap.empty()) &#123;        res.push_back(MinHeap.top());        MinHeap.pop();    &#125;    reverse(res.begin(), res.end());    for (int i &#x3D; 0; i &lt; k; i++) &#123;        cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法三是对方法一的改进，将快速排序改成快速选择算法，找到第k大的元素，然后对整个序列进行遍历，筛选出大于第k大元素的元素组成数组，到这里为止，时间复杂度是$O(n)$，但是还要进行降序输出，因此进行排序，在下列实现中，调用了sort函数，但是排序消耗的时间是$O(klogk)$。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int QuickSelect(vector&lt;int&gt;&amp; nums, int left, int right, int k) &#123;    int pivot &#x3D; nums[left];    int i &#x3D; left, j &#x3D; right;    while (i &lt; j) &#123;        while (i &lt; j &amp;&amp; nums[j] &lt;&#x3D; pivot) &#123;            j--;        &#125;        nums[i] &#x3D; nums[j];        while (i &lt; j &amp;&amp; nums[i] &gt;&#x3D; pivot) &#123;            i++;        &#125;        nums[j] &#x3D; nums[i];    &#125;    nums[i] &#x3D; pivot;    if (i &#x3D;&#x3D; k - 1) &#123;        return pivot;    &#125;    else if (i &lt; k - 1) &#123;        return QuickSelect(nums, i + 1, right, k);    &#125;    else &#123;        return QuickSelect(nums, left, i - 1, k);    &#125;&#125;void MaxKElements(vector&lt;int&gt;&amp; nums, int k) &#123;    int kth &#x3D; QuickSelect(nums, 0, nums.size() - 1, k);    vector&lt;int&gt; res;    for (int i &#x3D; 0; i &lt; nums.size(); ++i) &#123;        if (nums[i] &gt;&#x3D; kth) &#123;            res.push_back(nums[i]);        &#125;    &#125;    sort(res.begin(), res.end(), greater&lt;int&gt;()); &#x2F;&#x2F; 降序排序    res.resize(k); &#x2F;&#x2F; 取前k个元素    for (int i &#x3D; 0; i &lt; k; i++) &#123;        cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;vector&gt;using namespace std;void QuickSort(int arr[], int left, int right) &#123;    int i &#x3D; left, j &#x3D; right;    int tmp;    int pivot &#x3D; arr[(left + right) &gt;&gt; 1];    while (i &lt;&#x3D; j) &#123;        while (arr[i] &gt; pivot) &#123;            i++;        &#125;                    while (arr[j] &lt; pivot) &#123;            j--;        &#125;        if (i &lt;&#x3D; j) &#123;            tmp &#x3D; arr[i];            arr[i] &#x3D; arr[j];            arr[j] &#x3D; tmp;            i++;            j--;        &#125;    &#125;;        if (left &lt; j) &#123;        QuickSort(arr, left, j);    &#125;    if (i &lt; right) &#123;        QuickSort(arr, i, right);    &#125;        &#125;void MaxKElements(int arr[], int n, int k) &#123;    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; MinHeap;    for (int i &#x3D; 0; i &lt; n; i++) &#123;        if (i &lt; k) &#123;            MinHeap.push(arr[i]);        &#125;        else &#123;            if (arr[i] &gt; MinHeap.top()) &#123;                MinHeap.pop();                MinHeap.push(arr[i]);            &#125;        &#125;    &#125;    vector&lt;int&gt; res;    while (!MinHeap.empty()) &#123;        res.push_back(MinHeap.top());        MinHeap.pop();    &#125;    reverse(res.begin(), res.end());    for (int i &#x3D; 0; i &lt; k; i++) &#123;        cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int QuickSelect(vector&lt;int&gt;&amp; nums, int left, int right, int k) &#123;    int pivot &#x3D; nums[left];    int i &#x3D; left, j &#x3D; right;    while (i &lt; j) &#123;        while (i &lt; j &amp;&amp; nums[j] &lt;&#x3D; pivot) &#123;            j--;        &#125;        nums[i] &#x3D; nums[j];        while (i &lt; j &amp;&amp; nums[i] &gt;&#x3D; pivot) &#123;            i++;        &#125;        nums[j] &#x3D; nums[i];    &#125;    nums[i] &#x3D; pivot;    if (i &#x3D;&#x3D; k - 1) &#123;        return pivot;    &#125;    else if (i &lt; k - 1) &#123;        return QuickSelect(nums, i + 1, right, k);    &#125;    else &#123;        return QuickSelect(nums, left, i - 1, k);    &#125;&#125;void MaxKElements(vector&lt;int&gt;&amp; nums, int k) &#123;    int kth &#x3D; QuickSelect(nums, 0, nums.size() - 1, k);    vector&lt;int&gt; res;    for (int i &#x3D; 0; i &lt; nums.size(); ++i) &#123;        if (nums[i] &gt;&#x3D; kth) &#123;            res.push_back(nums[i]);        &#125;    &#125;    sort(res.begin(), res.end(), greater&lt;int&gt;()); &#x2F;&#x2F; 降序排序    res.resize(k); &#x2F;&#x2F; 取前k个元素    for (int i &#x3D; 0; i &lt; k; i++) &#123;        cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int main() &#123;    int arr[] &#x3D; &#123; 5, 3, 8, 4, 2 &#125;;    int n &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);    QuickSort(arr, 0, n - 1);    cout &lt;&lt; &quot;前2个元素是&quot;;    for (int i &#x3D; 0; i &lt; 2; i++) &#123;        cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    int arr1[] &#x3D; &#123; 5, 3, 8, 4, 2 &#125;;    MaxKElements(arr1, 5, 2);    vector&lt;int&gt; arr2 &#x3D; &#123; 5, 3, 8, 4, 2 &#125;;    MaxKElements(arr2, 2);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><p><img src="/imgs/sikao5/1.png" alt="image-20230319213101105"></p><p>方法一的时间复杂度是$O(nlogn)$</p><p>方法二的时间复杂度是$O(nlogk)$</p><p>方法三的时间复杂度是$O(n+klogk)$</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>请用递归方式实现堆排序，并进行性能分析</p><h3 id="算法实现与分析-1"><a href="#算法实现与分析-1" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;void heapify(vector&lt;int&gt;&amp; arr, int n, int i) &#123;int largest &#x3D; i;int l &#x3D; 2 * i + 1;int r &#x3D; 2 * i + 2;if (l&lt;n &amp;&amp; arr[l]&gt;arr[largest]) &#123;largest &#x3D; l;&#125;if (r&lt;n &amp;&amp; arr[r]&gt;arr[largest]) &#123;largest &#x3D; r;&#125;if (largest !&#x3D; i) &#123;int temp &#x3D; arr[i];arr[i] &#x3D; arr[largest];arr[largest] &#x3D; temp;heapify(arr, n, largest);&#125;&#125;void HeapSort(vector&lt;int&gt;&amp; arr, int n) &#123;for (int i &#x3D; (n &gt;&gt; 1) - 1; i &gt;&#x3D; 0; i--) &#123;heapify(arr, n, i);&#125;for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i--) &#123;int temp &#x3D; arr[i];arr[i] &#x3D; arr[0];arr[0] &#x3D; temp;heapify(arr, i, 0);&#125;&#125;int main() &#123;vector&lt;int&gt; arr &#x3D; &#123; 5,3,8,4,2 &#125;;HeapSort(arr, 5);for (int i &#x3D; 0; i &lt; 5; i++) &#123;cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><p><img src="/imgs/sikao5/2.png" alt="image-20230319222526781"></p><p>对于递归方式的堆排序，每次对子树进行heapify操作的时间复杂度是$O(logn)$，对于每一棵包含n个结点的完全二叉树，高度为$logn$，因此堆排序的时间复杂度是$O(nlogn)$。</p><p>递归方式的堆排序使用了函数递归调用，每次递归都会将一部分数据压入栈中，栈的深度等于堆的高度，最坏情况下堆的高度是$logn$，空间复杂度是$O(logn)$。</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> top-k </tag>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据处理</title>
      <link href="/2023/07/06/Python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2023/07/06/Python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python">_hello<span class="token operator">=</span><span class="token string">"helloworld"</span>score<span class="token operator">=</span><span class="token number">0</span>y<span class="token operator">=</span><span class="token number">20</span>y<span class="token operator">=</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>python是动态类型语言，不检查数据类型<br>可以接收其他类型的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>python支持链式赋值语句</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>10</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token comment">#file:chapter4/4.4/hello.py</span>_hello<span class="token operator">=</span><span class="token string">"helloworld"</span>score_for_student<span class="token operator">=</span><span class="token number">10.0</span> <span class="token comment">#没有错误发生</span>y<span class="token operator">=</span><span class="token number">20</span>name1<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">;</span>name2<span class="token operator">=</span><span class="token string">"Tony"</span><span class="token comment">#链式赋值语句</span>a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">if</span> y<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>score_for_student<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2010.0helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token comment">#file:chapter4/4.4/hello.py</span>_hello<span class="token operator">=</span><span class="token string">"helloworld"</span>score_for_student<span class="token operator">=</span><span class="token number">10.0</span> <span class="token comment">#没有错误发生</span>y<span class="token operator">=</span><span class="token number">20</span>name1<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">;</span>name2<span class="token operator">=</span><span class="token string">"Tony"</span><span class="token comment">#链式赋值语句</span>a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">if</span> y<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>score_for_student<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2010.0helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## coding=utf-8</span><span class="token keyword">import</span> module1<span class="token keyword">from</span> module1 <span class="token keyword">import</span> zy<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>20True10.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## coding=utf-8</span><span class="token keyword">import</span> module1<span class="token keyword">from</span> module1 <span class="token keyword">import</span> zy<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>20True10.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> com<span class="token punctuation">.</span>pkg2<span class="token punctuation">.</span>hello <span class="token keyword">as</span> module1<span class="token keyword">from</span> com<span class="token punctuation">.</span>pkg2<span class="token punctuation">.</span>hello <span class="token keyword">import</span> z <span class="token keyword">as</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>y<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10.120True10.0</code></pre><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>包名： 全部小写字母，中间可以由的隔开，不推荐使用下画线。作为命名空间，包名野窍应该具有唯一性，推荐采用公司或组织域名的倒置，如com.apple . quicktime . v2 。</li><li>模块名： 全部小写字母，如果是多个单词构成， 可以用下画线隔开， 如dummy_threading 。</li><li>类名： 采用大驼峰法命名③，如SplitViewController 。</li><li>异常名：异常属于类， 命名同类命名，但应该使用Error 作为后缀。如FileNotFoundError 。</li><li>变量名： 全部小写字母，如果由多个单词构成，可以用下画线隔开。如果变量应用于模块或函数内部，则变量名可以由单下画线开头： 变量类内部私有使用变量名可以双下画线开头。不要命名双下画线开头和结尾的变量，这是Python 保留的。另外，避免使用小写L 、大写0 和大写I 作为变量名。</li><li>函数名和方法名： 命名同变量命名，如balance_account 、<em>push_cm</em> exit 。</li><li>常量名： 全部大写字母，如果是由多个单词构成，可以用下画线隔开，如YEAR 和WEEK OF MONTH 。</li></ul><h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><p>单行注释、多行注释和文档注释</p><h4 id="文件注释"><a href="#文件注释" class="headerlink" title="文件注释"></a>文件注释</h4><p>文件注释就是在每一个文件开头添加注释，采用多行注释。文件注释通常包括如下信息：版权信息、文件名、所在模块、作者信息、历史版本信息、文件内容和作用等。</p><pre class="line-numbers language-none"><code class="language-none">##版权所有2015 北京智捷东方科技有限公司#许可信息查看LICENSE . txt 文件#描述：## 实现日期基本功能#历史版本：## 2015 7 22 ：创建关东升## 2015 - 8 - 20 ： 添加socket 库## 2015 - 8 - 22 ：添加math 库#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述注释只是提供了版权信息、文件内容和历史版本信息等，文件注释要根据实际情况包<br>括内容。</p><h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><h4 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h4><h4 id="使用todo注释"><a href="#使用todo注释" class="headerlink" title="使用todo注释"></a>使用todo注释</h4><h3 id="导入规范"><a href="#导入规范" class="headerlink" title="导入规范"></a>导入规范</h3><p>导入语句应该按照从通用到特殊的顺序分组， 顺序是： 标准库→ 第三方库→ 自己模块。每一组之间有一个空行，而且组中模块是按照英文字母顺序排序的。</p><pre class="line-numbers language-none"><code class="language-none">import ioimport osimport pkgutilimport platformimport reimport sysimport timefrom html import unescapefrom com.pkgl import example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><ul><li>import 语句块前后保留两个空行</li><li>函数声明之前保留两个空行</li><li>类声明之前保留两个空行</li><li>方法声明之前保留一个空行</li><li>两个逻辑代码块之间应该保留一个空行</li></ul><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><ul><li>赋值符号“＝”前后各有一个空格</li><li>所有的二元运算符都应该使用空格与操作数分开</li><li>一元运算符：算法运算符取反“”和运算符取反“ ～ ”</li><li>括号内不要有空格， Python 中括号包括小括号“（）飞中括号“ ［］”和大括号“｛｝”</li><li>不要在逗号、分号、冒号前面有空格，而是要在它们后面有一个空格，除非该符号已经是行尾了</li><li>参数列表、索引或切片的左括号前不应有空格</li></ul><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>4 个空格常被作为缩进排版的一个级别。虽然在开发时程序员可以使用制表符进行缩进，而默认情况下一个制表符等于8 个空格，但是不同的IDE 工具中一个制表符与空格对应个数会有不同，所以不要使用制表符缩进。</p><h4 id="断行"><a href="#断行" class="headerlink" title="断行"></a>断行</h4><p>一行代码中最多79 个字符， 对于文档注释和多行注释时一行最多72 个字符，但是如果注释中包含URL 地址可以不受这个限制。否则，如果超过则需断行，可以依据下面的一般规范断开。</p><ul><li>在逗号后面断开</li><li>在运算符前面断开</li><li>尽量不要使用续行符“ ＼ ” ， 当有括号（包括大括号、中括号和小括号） 则在括号中断开， 这样可以不使用续行符</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>28</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0b11100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>28</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0o34</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>28</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0x1c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>28</code></pre><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">3.36e2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>336.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.56e-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.0156</code></pre><h4 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(1+2j)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(2+4j)</code></pre><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><h3 id="数字类型相互转换"><a href="#数字类型相互转换" class="headerlink" title="数字类型相互转换"></a>数字类型相互转换</h3><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>float</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.0</code></pre><h4 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">19.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>19</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>5.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.0</code></pre><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><h4 id="字符串表示方式"><a href="#字符串表示方式" class="headerlink" title="字符串表示方式"></a>字符串表示方式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"Hello World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'\u0048\u0065\u006c\u006c\u006f\u0020\u0057\u006f\u0072\u006c\u0064'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"\u0048\u0065\u006c\u006c\u006f\u0020\u0057\u006f\u0072\u006c\u0064"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><ul><li>转义符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'Hello\n World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'Hello\t World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'Hello \'World'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Hello &#39;World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"hello'world"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello&#39;world</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'hello"world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello&quot;world</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'hello\\world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello\world</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'hello\u005c world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello\ world</code></pre><ul><li>原始字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'hello\tworld'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">r'hello\tworld'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello\tworld</code></pre><ul><li>长字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token triple-quoted-string string">'''helloworld'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token triple-quoted-string string">'''hello\tworld'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>hello    world</code></pre><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">name<span class="token operator">=</span><span class="token string">'Mary'</span>age<span class="token operator">=</span><span class="token number">18</span>s<span class="token operator">=</span><span class="token string">'她的年龄是&#123;0&#125;岁。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>她的年龄是18岁。</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'&#123;0&#125;芳龄是&#123;1&#125;岁'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Mary芳龄是18岁</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'&#123;1&#125;芳龄是&#123;0&#125;岁'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Mary芳龄是18岁</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'&#123;n&#125;芳龄是&#123;a&#125;岁'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token operator">=</span>name<span class="token punctuation">,</span>a<span class="token operator">=</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Mary芳龄是18岁</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name<span class="token operator">=</span><span class="token string">'Mary'</span>age<span class="token operator">=</span><span class="token number">18</span>money<span class="token operator">=</span><span class="token number">1234.5678</span><span class="token string">"&#123;0&#125;芳龄是&#123;1:d&#125;岁。"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Mary芳龄是18岁。&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;1&#125;芳龄是&#123;0:5d&#125;岁。"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary芳龄是   18岁。&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:f&#125;元"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1234.567800元&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:.2f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1234.57&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:10.2f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是   1234.57&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:g&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1234.57&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:G&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1234.57&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:e&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1.234568e+03&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:E&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1.234568E+03&#39;</code></pre><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token operator">=</span><span class="token string">"there is a string accessing example"</span><span class="token builtin">len</span><span class="token punctuation">(</span>source_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>35</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;g&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>13</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>14</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>24</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>21</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>14</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>24</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>24</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ingg'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>-1</code></pre><h5 id="字符串与数字相互转换"><a href="#字符串与数字相互转换" class="headerlink" title="字符串与数字相互转换"></a>字符串与数字相互转换</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>9</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'9.6'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [24], in &lt;cell line: 1&gt;()----&gt; 1 int(&#39;9.6&#39;)ValueError: invalid literal for int() with base 10: &#39;9.6&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'9.6'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>9.6</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'AB'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [26], in &lt;cell line: 1&gt;()----&gt; 1 int(&#39;AB&#39;)ValueError: invalid literal for int() with base 10: &#39;AB&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;3.24&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;True&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;[]&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;[1, 2, 3]&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;34&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'&#123;0:2f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;3.240000&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'&#123;:.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;3.2&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'&#123;:10.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;       3.2&#39;</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">12</span><span class="token operator">-</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>-12</code></pre><h4 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>6</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.5</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">3</span><span class="token operator">%</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">3</span><span class="token operator">//</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token number">3</span><span class="token operator">//</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>-2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">10</span><span class="token operator">**</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>100</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">10.22</span><span class="token operator">+</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>20.22</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">10.0</span><span class="token operator">+</span><span class="token boolean">True</span><span class="token operator">+</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>13.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'hello'</span><span class="token operator">+</span><span class="token string">'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;helloworld&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'hello'</span><span class="token operator">+</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Input In [47], in &lt;cell line: 1&gt;()----&gt; 1 &#39;hello&#39;+2TypeError: can only concatenate str (not &quot;int&quot;) to str</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'hello'</span><span class="token operator">*</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hellohello&#39;</code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span>b<span class="token operator">=</span><span class="token number">2</span>a<span class="token operator">></span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">&lt;</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">>=</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">&lt;=</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.0</span><span class="token operator">!=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'hello'</span>b<span class="token operator">=</span><span class="token string">'hello'</span>a<span class="token operator">==</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'World'</span>a<span class="token operator">></span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">&lt;</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>a<span class="token operator">==</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">&lt;</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>a<span class="token operator">==</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>True</code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token number">0</span>a<span class="token operator">=</span><span class="token number">10</span>b<span class="token operator">=</span><span class="token number">9</span><span class="token keyword">if</span> a<span class="token operator">></span>b <span class="token keyword">or</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"或运算为真"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"或运算为假"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b <span class="token keyword">and</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"与运算为真"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"与运算为假"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--f2--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token operator">==</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>或运算为真与运算为假True</code></pre><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">0b10110010</span>b<span class="token operator">=</span><span class="token number">0b01011110</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a|b=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a&amp;b=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a^b=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"~a=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a>>2=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a&lt;&lt;2=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0b1100</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c>>2=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c&lt;&lt;2=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a|b=254a&amp;b=18a^b=236~a=-179a&gt;&gt;2=44a&lt;&lt;2=712c&gt;&gt;2=-3c&lt;&lt;2=-48</code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span>b<span class="token operator">=</span><span class="token number">2</span>a<span class="token operator">+=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">+=</span>b<span class="token operator">+</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">-=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">*=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">/=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">%=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token number">0b10110010</span>b<span class="token operator">=</span><span class="token number">0b01011110</span>a<span class="token operator">|</span><span class="token operator">=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">^</span><span class="token operator">=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>386126.00.0254160</code></pre><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><h4 id="同一性测试运算符"><a href="#同一性测试运算符" class="headerlink" title="同一性测试运算符"></a>同一性测试运算符</h4><h4 id="成员测试运算符"><a href="#成员测试运算符" class="headerlink" title="成员测试运算符"></a>成员测试运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        p1<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>p2<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token keyword">is</span> p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">!=</span>p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token keyword">is</span> <span class="token keyword">not</span> p2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseFalseTrueTrue</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>name<span class="token operator">==</span>other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>age<span class="token operator">==</span>other<span class="token punctuation">.</span>age<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>          p1<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>p2<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token keyword">is</span> p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">!=</span>p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token keyword">is</span> <span class="token keyword">not</span> p2<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>TrueFalseFalseTrue</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">string_a<span class="token operator">=</span><span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e'</span> <span class="token keyword">in</span> string_a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ell'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> string_a<span class="token punctuation">)</span>list_a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">in</span> list_a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> list_a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>TrueFalseTrueFalse</code></pre><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">85</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'perfect'</span><span class="token punctuation">)</span><span class="token keyword">if</span> score<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hard'</span><span class="token punctuation">)</span><span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">and</span> score<span class="token operator">&lt;</span><span class="token number">85</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'justsoso'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>hard</code></pre><h4 id="if-else结构"><a href="#if-else结构" class="headerlink" title="if-else结构"></a>if-else结构</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score<span class="token operator">=</span><span class="token number">75</span><span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'justsoso'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'perfect'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>justsoso</code></pre><h4 id="elif结构"><a href="#elif结构" class="headerlink" title="elif结构"></a>elif结构</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score<span class="token operator">=</span><span class="token number">80</span><span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'A'</span><span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">80</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'B'</span><span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">70</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'C'</span><span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'D'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'F'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>B</code></pre><h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score<span class="token operator">=</span><span class="token number">85</span>result<span class="token operator">=</span><span class="token string">'justsoso'</span> <span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">else</span> <span class="token string">'hard'</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>justsoso</code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">*</span>i<span class="token operator">&lt;</span><span class="token number">100_000</span><span class="token punctuation">:</span>    i<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>317100489</code></pre><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----范围----'</span><span class="token punctuation">)</span><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;*&#123;0&#125;=&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num<span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----字符串----'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token string">"hello"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----整数列表----'</span><span class="token punctuation">)</span>numbers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----范围----1*1=12*2=43*3=94*4=165*5=256*6=367*7=498*8=649*9=81----字符串----hello----整数列表----4332535475710</code></pre><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> item<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>012</code></pre><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> item<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>012456789</code></pre><h4 id="while和for中的else语句"><a href="#while和for中的else语句" class="headerlink" title="while和for中的else语句"></a>while和for中的else语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">*</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>    i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;*&#123;0&#125;=&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num<span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"whileover"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> item<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'forover'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>9*9=819*9=819*9=819*9=81whileover----------012</code></pre><h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><p>range()函数语法：<br>$$<br>range([start,]stop[,step])<br>$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>13579------------1-2-5-8</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><h5 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;h&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;e&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;l&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;l&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;o&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)Input In [7], in &lt;cell line: 1&gt;()----&gt; 1 a[5]IndexError: string index out of range</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;o&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">min</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;e&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>5</code></pre><h5 id="序列的-和"><a href="#序列的-和" class="headerlink" title="序列的+和*"></a>序列的+和*</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">*</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hellohellohello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>hello</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">+=</span><span class="token string">' '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">+=</span><span class="token string">'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>hello world</code></pre><h5 id="序列分片"><a href="#序列分片" class="headerlink" title="序列分片"></a>序列分片</h5><ul><li>[start:end]：start是开始索引，end是结束索引</li><li>[start:end:step]：start是开始索引，end是结束索引，step是步长，可取正负整数<br>实际切下分片为：[start,end)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;el&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hel&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hel&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;ello worl&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;ello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;el&#39;</code></pre><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">21</span>，<span class="token number">32</span>，<span class="token number">43</span>，<span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>  Input In [26]    21，32，43，45      ^SyntaxError: invalid character &#39;，&#39; (U+FF0C)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(21, 32, 43, 45)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(21, 32, 43, 45)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>hello world</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(21, 32, 43, 45)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(&#39;hello&#39;, &#39;world&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(&#39;hello&#39;, &#39;world&#39;, 1, 2, 3)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(21, 32, 43, 45)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>int</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tuple</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tuple</code></pre><h4 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(&#39;world&#39;, 1)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(1, 2, 3)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(&#39;hello&#39;, &#39;world&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3<span class="token operator">=</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span><span class="token operator">*</span>n<span class="token operator">=</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[1, 2, 3]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span class="token punctuation">,</span>_<span class="token punctuation">,</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>_<span class="token operator">=</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><h4 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---------------------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125;-&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>21324345---------------------0-211-322-433-45</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表创建"><a href="#列表创建" class="headerlink" title="列表创建"></a>列表创建</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[20, 10, 50, 40, 30]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;hello&#39;, &#39;world&#39;, 1, 2, 3]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>list</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>list</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[20, 10, 50, 40, 30]</code></pre><h4 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h4><pre class="line-numbers language-none"><code class="language-none">list.append(x)list.extend(t)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'董六'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;董六&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">+=</span><span class="token punctuation">[</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token string">'关羽'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;董六&#39;, &#39;刘备&#39;, &#39;关羽&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'张飞'</span><span class="token punctuation">,</span><span class="token string">'赵云'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;董六&#39;, &#39;刘备&#39;, &#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;]</code></pre><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><pre class="line-numbers language-none"><code class="language-none">list.insert(i,x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'liubei'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;liubei&#39;, &#39;wangwu&#39;]</code></pre><h4 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'zhugeliang'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhugeliang&#39;, &#39;lisi&#39;, &#39;wangwu&#39;]</code></pre><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><h5 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h5><p>如果找到多个，只会删除第一个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhangsan&#39;, &#39;lisi&#39;]</code></pre><h5 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h5><pre class="line-numbers language-none"><code class="language-none">item&#x3D;list.pop([i])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>i是指定删除元素的索引</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;wangwu&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhangsan&#39;, &#39;lisi&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;zhangsan&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;lisi&#39;]</code></pre><h4 id="其他常用办法"><a href="#其他常用办法" class="headerlink" title="其他常用办法"></a>其他常用办法</h4><ul><li>reverse():倒置列表</li><li>copy():复制列表</li><li>clear():清楚列表中的所有元素</li><li>index(x[,i[,j]]):返回x第一次出现的索引，i为开始查找索引，j是结束查找索引，继承序列</li><li>count(x):返回x出现的次数，方法继承序列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[45, 43, 32, 21]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token operator">=</span>a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[45, 43, 32, 21]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[45, 43, 32, 21]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_tuple<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_tuple<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_tuple<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        n_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[0, 4, 16, 36, 64]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[0, 4, 16, 36, 64]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]</code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="创建可变集合"><a href="#创建可变集合" class="headerlink" title="创建可变集合"></a>创建可变集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;lisi&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;lisi&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;10, 20, 30, 40, 50&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>set</code></pre><h4 id="修改可变集合"><a href="#修改可变集合" class="headerlink" title="修改可变集合"></a>修改可变集合</h4><ul><li>add(elem):添加元素，已存在不能添加</li><li>remove(elem):删除元素，不存在则抛出错误</li><li>discard(elem):删除元素，不存在不抛出</li><li>pop():删除返回集合中任意元素，返回值是删除的元素</li><li>clear():清楚集合</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dongliu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;dongliu&#39;, &#39;lisi&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;dongliu&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------KeyError                                  Traceback (most recent call last)Input In [129], in &lt;cell line: 1&gt;()----&gt; 1 student_set.remove(&#39;lisi&#39;)KeyError: &#39;lisi&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;dongliu&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;dongliu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;dongliu&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>set()</code></pre><h4 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> item <span class="token keyword">in</span> student_set<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>student_set<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125;-&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>lisiwangwuzhangsan----------0-lisi1-wangwu2-zhangsan</code></pre><h4 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token operator">=</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>frozenset(&#123;&#39;lisi&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>student_set<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>frozenset</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dongliu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [142], in &lt;cell line: 1&gt;()----&gt; 1 student_set.add(&#39;dongliu&#39;)AttributeError: &#39;frozenset&#39; object has no attribute &#39;add&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">seta<span class="token operator">=</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">seta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>frozenset(&#123;21, 32, 43, 45&#125;)</code></pre><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">&#123;</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>n_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#123;0, 70, 40, 10, 80, 50, 20, 90, 60, 30&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>n_set<span class="token operator">=</span><span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> input_list<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[4, 9, 4, 16, 25, 36, 36, 36]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">&#123;</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> input_list<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;4, 9, 16, 25, 36&#125;</code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">:</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">:</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">t1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">t2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">t3<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">t<span class="token operator">=</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1<span class="token operator">=</span><span class="token punctuation">[</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><h4 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h4><ul><li>get(key[,default]):通过键返回值，如果键不存在返回默认值</li><li>items()：返回字典的所有键值对</li><li>keys()：返回字典键视图</li><li>values()：返回字典值视图</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">:</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;lisi&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'dongliu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;dongliu&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict_items([(102, &#39;zhangsan&#39;), (105, &#39;lisi&#39;), (109, &#39;wangwu&#39;)])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict_keys([102, 105, 109])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict_values([&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">:</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">102</span> <span class="token keyword">in</span> student_dict<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'lisi'</span> <span class="token keyword">in</span> student_dict<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---bianlijian---'</span><span class="token punctuation">)</span><span class="token keyword">for</span> student_id <span class="token keyword">in</span> student_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuehao:'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>student_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---bianlizhi---'</span><span class="token punctuation">)</span><span class="token keyword">for</span> student_name <span class="token keyword">in</span> student_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuesheng:'</span><span class="token operator">+</span>student_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---bianlijian:zhi---'</span><span class="token punctuation">)</span><span class="token keyword">for</span> student_id<span class="token punctuation">,</span>student_name <span class="token keyword">in</span> student_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuehao:&#123;0&#125;-xuesheng:&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>student_id<span class="token punctuation">,</span>student_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---bianlijian---xuehao:102xuehao:105xuehao:109---bianlizhi---xuesheng:zhangsanxuesheng:lisixuesheng:wangwu---bianlijian:zhi---xuehao:102-xuesheng:zhangsanxuehao:105-xuesheng:lisixuehao:109-xuesheng:wangwu</code></pre><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'one'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span>output_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span>k<span class="token punctuation">:</span>v <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> input_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">&#125;</span>output_dict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#123;&#39;two&#39;: 2, &#39;four&#39;: 4&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">keys<span class="token operator">=</span><span class="token punctuation">[</span>k <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> input_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;two&#39;, &#39;four&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><pre class="line-numbers language-none"><code class="language-none">def ---:    ---    return ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rectangle_area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    area<span class="token operator">=</span>width<span class="token operator">*</span>height    <span class="token keyword">return</span> arear_area<span class="token operator">=</span>rectangle_area<span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span><span class="token number">420</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"320*420的矩形面积&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>r_area<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>320*420的矩形面积134400</code></pre><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="使用关键字参数调用函数"><a href="#使用关键字参数调用函数" class="headerlink" title="使用关键字参数调用函数"></a>使用关键字参数调用函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    area<span class="token operator">=</span>width<span class="token operator">*</span>height    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;*&#123;1&#125;矩形的面积是：&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_area<span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span><span class="token number">420</span><span class="token punctuation">)</span>print_area<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">320</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">420</span><span class="token punctuation">)</span>print_area<span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">420</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>height<span class="token operator">=</span><span class="token number">420</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">320</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>320*420矩形的面积是：134400320*420矩形的面积是：134400320*420矩形的面积是：134400---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Input In [4], in &lt;cell line: 8&gt;()      6 print_area(width=320,height=420)      7 print_area(320,height=420)----&gt; 8 print(height=420,width=320)TypeError: &#39;height&#39; is an invalid keyword argument for print()</code></pre><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_coffee</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Cappuccino"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"制作一杯&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>coffee1<span class="token operator">=</span>make_coffee<span class="token punctuation">(</span><span class="token string">"Latte"</span><span class="token punctuation">)</span>coffee2<span class="token operator">=</span>make_coffee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coffee1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coffee2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>制作一杯Latte制作一杯Cappuccino</code></pre><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><h5 id="可变参数-1"><a href="#可变参数-1" class="headerlink" title="*可变参数"></a>*可变参数</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>numbers<span class="token punctuation">,</span>multiple<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    total<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        total<span class="token operator">+=</span>number    <span class="token keyword">return</span> total<span class="token operator">*</span>multiple<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span><span class="token number">20.0</span><span class="token punctuation">,</span><span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span>multiple<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>double_tuple<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">50.0</span><span class="token punctuation">,</span><span class="token number">60.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token operator">*</span>double_tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>150.0110220220.0</code></pre><h5 id="可变参数-2"><a href="#可变参数-2" class="headerlink" title="**可变参数"></a>**可变参数</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token operator">**</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----info----'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; &#123;2&#125; &#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token string">'->'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'tony'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>student_name<span class="token operator">=</span><span class="token string">'tony'</span><span class="token punctuation">,</span>student_no<span class="token operator">=</span><span class="token string">'1000'</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'='</span><span class="token punctuation">)</span>stu_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span>show<span class="token punctuation">(</span><span class="token operator">**</span>stu_dict<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'='</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----info----name -&gt; tonyage -&gt; 18sex -&gt; True----info----student_name = tonystudent_no = 1000----info----name = tonyage = 18sex = True</code></pre><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><h4 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token operator">**</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----info----'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; &#123;2&#125; &#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>result<span class="token operator">=</span>show<span class="token punctuation">(</span><span class="token string">'->'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'tony'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>numbers<span class="token punctuation">,</span>multiple<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    total<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        total<span class="token operator">+=</span>number    <span class="token keyword">return</span> total<span class="token operator">*</span>multiple<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span><span class="token number">20.0</span><span class="token punctuation">,</span><span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----info----name -&gt; tonyage -&gt; 18sex -&gt; TrueNone150.0110</code></pre><h4 id="多返回值函数"><a href="#多返回值函数" class="headerlink" title="多返回值函数"></a>多返回值函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">position</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span>speed<span class="token punctuation">)</span><span class="token punctuation">:</span>    posx<span class="token operator">=</span>speed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>dt    posy<span class="token operator">=</span>speed<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>dt    <span class="token keyword">return</span><span class="token punctuation">(</span>posx<span class="token punctuation">,</span>posy<span class="token punctuation">)</span>move<span class="token operator">=</span>position<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"物体位移：(&#123;0&#125;,&#123;1&#125;)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>move<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>move<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>物体位移：(600,-300)</code></pre><h3 id="函数变量作用域"><a href="#函数变量作用域" class="headerlink" title="函数变量作用域"></a>函数变量作用域</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">def</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数中x=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"全局变量=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>函数中x=20全局变量=20</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">def</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数中x=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"全局变量=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>函数中x=10全局变量=20</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">def</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    x<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数中x=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"全局变量=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>函数中x=10全局变量=10</code></pre><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    n_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        n_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span>            <span class="token keyword">return</span> n_list<span class="token keyword">for</span> i <span class="token keyword">in</span> square<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1 4 9 16 25 </code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    n_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token operator">*</span>i            <span class="token keyword">return</span> n_list<span class="token keyword">for</span> i <span class="token keyword">in</span> square<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1 4 9 16 25 </code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token operator">*</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token operator">=</span>square<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>4</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>9</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>16</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------StopIteration                             Traceback (most recent call last)Input In [14], in &lt;cell line: 1&gt;()----&gt; 1 n_seq.__next__()StopIteration: </code></pre><h3 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>opr<span class="token punctuation">)</span><span class="token punctuation">:</span>    multiple<span class="token operator">=</span><span class="token number">2</span>        <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">*</span>multiple        <span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">*</span>multiple        <span class="token keyword">if</span> opr<span class="token operator">==</span><span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> add<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> sub<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>calculate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>30</code></pre><h3 id="函数式编程基础"><a href="#函数式编程基础" class="headerlink" title="函数式编程基础"></a>函数式编程基础</h3><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_fun</span><span class="token punctuation">(</span>opr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b        <span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">-</span>b        <span class="token keyword">if</span> opr<span class="token operator">==</span><span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> add    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> subf1<span class="token operator">=</span>calculate_fun<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>calculate_fun<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10+5=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10-5=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;function&#39;&gt;10+5=1510-5=5</code></pre><h4 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_fun</span><span class="token punctuation">(</span>opr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> opr<span class="token operator">==</span><span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span>f1<span class="token operator">=</span>calculate_fun<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>calculate_fun<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10+5=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10-5=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;function&#39;&gt;10+5=1510-5=5</code></pre><h4 id="三大基础函数"><a href="#三大基础函数" class="headerlink" title="三大基础函数"></a>三大基础函数</h4><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'ben'</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">]</span>users_filter<span class="token operator">=</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>users_filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;tony&#39;, &#39;tom&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">number_list<span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>number_filter<span class="token operator">=</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> it<span class="token punctuation">:</span>it<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span>number_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>number_filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[2, 4, 6, 8, 10]</code></pre><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'ben'</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">]</span>users_map<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>users_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;tony&#39;, &#39;tom&#39;, &#39;ben&#39;, &#39;alex&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'ben'</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">]</span>users_filter<span class="token operator">=</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span>users_map<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>users_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;tony&#39;, &#39;tom&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span>a_reduce<span class="token operator">=</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> acc<span class="token punctuation">,</span>i<span class="token punctuation">:</span>acc<span class="token operator">+</span>i<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_reduce<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10</code></pre><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="面向对象概述oop"><a href="#面向对象概述oop" class="headerlink" title="面向对象概述oop"></a>面向对象概述oop</h3><h3 id="面向对象三个基本特性"><a href="#面向对象三个基本特性" class="headerlink" title="面向对象三个基本特性"></a>面向对象三个基本特性</h3><h4 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h4><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><pre class="line-numbers language-none"><code class="language-none">class 类名[(父类)]:    类体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">animal<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;__main__.Animal object at 0x00000222D7FA4160&gt;</code></pre><h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>weight<span class="token operator">=</span>weightanimal<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sex:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'female'</span> <span class="token keyword">if</span> animal<span class="token punctuation">.</span>sex<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'weight:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>age:2sex:maleweight:10.0</code></pre><h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    interest_rate<span class="token operator">=</span><span class="token number">0.0668</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner        self<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount        account<span class="token operator">=</span>Account<span class="token punctuation">(</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token number">1_800_000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'account:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>owner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'amount:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'interest_rate:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>interest_rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>account:tonyamount:1800000.0interest_rate:0.0668</code></pre><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>weight<span class="token operator">=</span>weight        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span>a2<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">)</span>a3<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sex:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'female'</span> <span class="token keyword">if</span> a3<span class="token punctuation">.</span>sex<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'weight:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>age:2sex:femaleweight:5.0</code></pre><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>weight<span class="token operator">=</span>weight    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">+=</span><span class="token number">0.05</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">-=</span><span class="token number">0.01</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span>        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10.0eat10.05run10.040000000000001</code></pre><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    interest_rate<span class="token operator">=</span><span class="token number">0.0668</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner        self<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount            <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">interest_by</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>amt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>interest_rate<span class="token operator">*</span>amt    interest<span class="token operator">=</span>Account<span class="token punctuation">.</span>interest_by<span class="token punctuation">(</span><span class="token number">12000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>interest<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>801.6</code></pre><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    interest_rate<span class="token operator">=</span><span class="token number">0.0668</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner        self<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount            <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">interest_by</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>amt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>interest_rate<span class="token operator">*</span>amt        <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">interest_with</span><span class="token punctuation">(</span>amt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Account<span class="token punctuation">.</span>interest_by<span class="token punctuation">(</span>amt<span class="token punctuation">)</span>    interest1<span class="token operator">=</span>Account<span class="token punctuation">.</span>interest_by<span class="token punctuation">(</span><span class="token number">12000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>interest1<span class="token punctuation">)</span>interest2<span class="token operator">=</span>Account<span class="token punctuation">.</span>interest_with<span class="token punctuation">(</span><span class="token number">12000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>interest2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>801.6801.6</code></pre><h3 id="封装性-1"><a href="#封装性-1" class="headerlink" title="封装性"></a>封装性</h3><h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">+=</span><span class="token number">0.05</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">-=</span><span class="token number">0.01</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span>        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [4], in &lt;cell line: 14&gt;()     11         print(&#39;run&#39;)     13 a1=Animal(2,0,10.0)---&gt; 14 print(a1.weight)     15 a1.eat()     16 a1.run()AttributeError: &#39;Animal&#39; object has no attribute &#39;weight&#39;</code></pre><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight<span class="token operator">+=</span><span class="token number">0.05</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight<span class="token operator">-=</span><span class="token number">0.01</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span>        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>eat---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [5], in &lt;cell line: 15&gt;()     13 a1=Animal(2,0,10.0)     14 a1.eat()---&gt; 15 a1.run()AttributeError: &#39;Animal&#39; object has no attribute &#39;run&#39;</code></pre><h4 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight            <span class="token keyword">def</span> <span class="token function">set_weight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight    <span class="token keyword">def</span> <span class="token function">get_weight</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__weight    a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>get_weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>set_weight<span class="token punctuation">(</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>get_weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;bound method Animal.get_weight of &lt;__main__.Animal object at 0x000002310CC31CA0&gt;&gt;&lt;bound method Animal.get_weight of &lt;__main__.Animal object at 0x000002310CC31CA0&gt;&gt;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight            <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">weight</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__weight        <span class="token decorator annotation punctuation">@weight<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">weight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>weight<span class="token operator">=</span><span class="token number">123.45</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10.0123.45</code></pre><h3 id="继承性-1"><a href="#继承性-1" class="headerlink" title="继承性"></a>继承性</h3><h4 id="继承概念"><a href="#继承概念" class="headerlink" title="继承概念"></a>继承概念</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age            <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        template<span class="token operator">=</span><span class="token string">'Person[name=&#123;0&#125;,age=&#123;1&#125;]'</span>        s<span class="token operator">=</span>template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">return</span> s    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>school<span class="token operator">=</span>school<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>weight<span class="token operator">=</span>weight            <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">+=</span><span class="token number">0.05</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">+=</span><span class="token number">0.1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gougouchi...'</span><span class="token punctuation">)</span>        a1<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>gougouchi...</code></pre><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ParentClass1</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ParentClass1 run...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">ParentClass2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ParentClass2 run...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">SubClass1</span><span class="token punctuation">(</span>ParentClass1<span class="token punctuation">,</span>ParentClass2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">SubClass2</span><span class="token punctuation">(</span>ParentClass2<span class="token punctuation">,</span>ParentClass1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">SubClass3</span><span class="token punctuation">(</span>ParentClass1<span class="token punctuation">,</span>ParentClass2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SubClass3 run...'</span><span class="token punctuation">)</span>        sub1<span class="token operator">=</span>SubClass1<span class="token punctuation">(</span><span class="token punctuation">)</span>sub1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>sub2<span class="token operator">=</span>SubClass2<span class="token punctuation">(</span><span class="token punctuation">)</span>sub2<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>sub3<span class="token operator">=</span>SubClass3<span class="token punctuation">(</span><span class="token punctuation">)</span>sub3<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>ParentClass1 run...ParentClass2 run...SubClass3 run...</code></pre><h3 id="多态性-1"><a href="#多态性-1" class="headerlink" title="多态性"></a>多态性</h3><h4 id="多态概念"><a href="#多态概念" class="headerlink" title="多态概念"></a>多态概念</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Figure</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw figure...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Ellipse</span><span class="token punctuation">(</span>Figure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw Ellipse'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span>Figure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw Triangle'</span><span class="token punctuation">)</span>        f1<span class="token operator">=</span>Figure<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>Ellipse<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token operator">=</span>Triangle<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>draw figure...draw Ellipsedraw Triangle</code></pre><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Figure</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw figure...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Ellipse</span><span class="token punctuation">(</span>Figure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw Ellipse'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span>Figure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw Triangle'</span><span class="token punctuation">)</span>        f1<span class="token operator">=</span>Figure<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>Ellipse<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token operator">=</span>Triangle<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span>Triangle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span>Triangle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f3<span class="token punctuation">,</span>Triangle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span>Figure<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>draw figure...draw Ellipsedraw TriangleFalseFalseTrueTrue</code></pre><h4 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'animal run'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dog run'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'car run'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    go<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>go<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>go<span class="token punctuation">(</span>Car<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>animal rundog runcar run</code></pre><h3 id="Python根类——object"><a href="#Python根类——object" class="headerlink" title="Python根类——object"></a>Python根类——object</h3><p>两个重要方法</p><ul><li><strong>str</strong>()</li><li><strong>eq</strong>(other)</li></ul><h4 id="str-方法"><a href="#str-方法" class="headerlink" title="str()方法"></a><strong>str</strong>()方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age            <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        template<span class="token operator">=</span><span class="token string">'Person [name=&#123;0&#125;,age=&#123;1&#125;]'</span>        s<span class="token operator">=</span>template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">return</span> sperson<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Person [name=Tony,age=18]</code></pre><h4 id="对象比较方法"><a href="#对象比较方法" class="headerlink" title="对象比较方法"></a>对象比较方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age            <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        template<span class="token operator">=</span><span class="token string">'Person [name=&#123;0&#125;,age=&#123;1&#125;]'</span>        s<span class="token operator">=</span>template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">return</span> s        <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>name<span class="token operator">==</span>other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>age<span class="token operator">==</span>other<span class="token punctuation">.</span>age<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        p1<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>p2<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><h4 id="定义枚举类"><a href="#定义枚举类" class="headerlink" title="定义枚举类"></a>定义枚举类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> enum<span class="token keyword">class</span> <span class="token class-name">WeekDays</span><span class="token punctuation">(</span>enum<span class="token punctuation">.</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    MONDAY<span class="token operator">=</span><span class="token number">1</span>    TUESDAY<span class="token operator">=</span><span class="token number">2</span>    WEDNESDAY<span class="token operator">=</span><span class="token number">3</span>    THURSDAY<span class="token operator">=</span><span class="token number">4</span>    FRIDAY<span class="token operator">=</span><span class="token number">5</span>    day<span class="token operator">=</span>WeekDays<span class="token punctuation">.</span>FRIDAY<span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>WeekDays.FRIDAY5FRIDAY</code></pre><h4 id="限制枚举类"><a href="#限制枚举类" class="headerlink" title="限制枚举类"></a>限制枚举类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> enum<span class="token decorator annotation punctuation">@enum<span class="token punctuation">.</span>unique</span><span class="token keyword">class</span> <span class="token class-name">WeekDays</span><span class="token punctuation">(</span>enum<span class="token punctuation">.</span>IntEnum<span class="token punctuation">)</span><span class="token punctuation">:</span>    MONDAY<span class="token operator">=</span><span class="token number">1</span>    TUESDAY<span class="token operator">=</span><span class="token number">2</span>    WEDNESDAY<span class="token operator">=</span><span class="token number">3</span>    THURSDAY<span class="token operator">=</span><span class="token number">4</span>    FRIDAY<span class="token operator">=</span><span class="token number">5</span>    day<span class="token operator">=</span>WeekDays<span class="token punctuation">.</span>FRIDAY<span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>WeekDays.FRIDAY5FRIDAY</code></pre><h4 id="使用枚举类"><a href="#使用枚举类" class="headerlink" title="使用枚举类"></a>使用枚举类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> enum<span class="token decorator annotation punctuation">@enum<span class="token punctuation">.</span>unique</span><span class="token keyword">class</span> <span class="token class-name">WeekDays</span><span class="token punctuation">(</span>enum<span class="token punctuation">.</span>IntEnum<span class="token punctuation">)</span><span class="token punctuation">:</span>    MONDAY<span class="token operator">=</span><span class="token number">1</span>    TUESDAY<span class="token operator">=</span><span class="token number">2</span>    WEDNESDAY<span class="token operator">=</span><span class="token number">3</span>    THURSDAY<span class="token operator">=</span><span class="token number">4</span>    FRIDAY<span class="token operator">=</span><span class="token number">5</span>    day<span class="token operator">=</span>WeekDays<span class="token punctuation">.</span>FRIDAY<span class="token keyword">if</span> day<span class="token operator">==</span>WeekDays<span class="token punctuation">.</span>MONDAY<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'work'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> day<span class="token operator">==</span>WeekDays<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'study'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>study</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><h4 id="AttributeError异常"><a href="#AttributeError异常" class="headerlink" title="AttributeError异常"></a>AttributeError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">al<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">al<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [3], in &lt;cell line: 1&gt;()----&gt; 1 al.run()AttributeError: &#39;Animal&#39; object has no attribute &#39;run&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [4], in &lt;cell line: 1&gt;()----&gt; 1 print(al.age)AttributeError: &#39;Animal&#39; object has no attribute &#39;age&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [5], in &lt;cell line: 1&gt;()----&gt; 1 print(Animal.weight)AttributeError: type object &#39;Animal&#39; has no attribute &#39;weight&#39;</code></pre><h4 id="OSError异常"><a href="#OSError异常" class="headerlink" title="OSError异常"></a>OSError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'abc.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------FileNotFoundError                         Traceback (most recent call last)Input In [6], in &lt;cell line: 1&gt;()----&gt; 1 f=open(&#39;abc.txt&#39;)FileNotFoundError: [Errno 2] No such file or directory: &#39;abc.txt&#39;</code></pre><h4 id="IndexError异常"><a href="#IndexError异常" class="headerlink" title="IndexError异常"></a>IndexError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">code_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">]</span>code_list<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)Input In [7], in &lt;cell line: 2&gt;()      1 code_list=[125,56,89,36]----&gt; 2 code_list[4]IndexError: list index out of range</code></pre><h4 id="KeyError异常"><a href="#KeyError异常" class="headerlink" title="KeyError异常"></a>KeyError异常</h4><p>访问字典里不存在的键时引发</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [9], in &lt;cell line: 1&gt;()----&gt; 1 dict1[104]NameError: name &#39;dict1&#39; is not defined</code></pre><h4 id="NameError异常"><a href="#NameError异常" class="headerlink" title="NameError异常"></a>NameError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">value1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [10], in &lt;cell line: 1&gt;()----&gt; 1 value1NameError: name &#39;value1&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span>value1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [11], in &lt;cell line: 1&gt;()----&gt; 1 a=value1NameError: name &#39;value1&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">value1<span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TypeError异常"><a href="#TypeError异常" class="headerlink" title="TypeError异常"></a>TypeError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token string">'2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Input In [14], in &lt;cell line: 1&gt;()----&gt; 1 print(5/i)TypeError: unsupported operand type(s) for /: &#39;int&#39; and &#39;str&#39;</code></pre><h4 id="ValueError异常"><a href="#ValueError异常" class="headerlink" title="ValueError异常"></a>ValueError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token string">'QWE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [16], in &lt;cell line: 1&gt;()----&gt; 1 print(5/int(i))ValueError: invalid literal for int() with base 10: &#39;QWE&#39;</code></pre><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><h4 id="try-except语句"><a href="#try-except语句" class="headerlink" title="try-except语句"></a>try-except语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date</span><span class="token punctuation">(</span>in_date<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>str_date<span class="token operator">=</span><span class="token string">'2018-8-18'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>read_date<span class="token punctuation">(</span>str_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>日期=2018-08-18 00:00:00</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">read_date</span><span class="token punctuation">(</span>in_date<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str_date<span class="token operator">=</span><span class="token string">'201B-8-18'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>read_date<span class="token punctuation">(</span>str_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>处理ValueError异常time data &#39;201B-8-18&#39; does not match format &#39;%Y-%m-%d&#39;日期=None</code></pre><h4 id="多except代码块"><a href="#多except代码块" class="headerlink" title="多except代码块"></a>多except代码块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理FileNotFoundError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理FileNotFoundError异常[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理FileNotFoundError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理FileNotFoundError异常[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><h4 id="try-except语句嵌套"><a href="#try-except语句嵌套" class="headerlink" title="try-except语句嵌套"></a>try-except语句嵌套</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            in_date <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            in_date <span class="token operator">=</span> in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            date <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> date        <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理FileNotFoundError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理FileNotFoundError异常[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><h4 id="多重异常捕获"><a href="#多重异常捕获" class="headerlink" title="多重异常捕获"></a>多重异常捕获</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> <span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span>OSError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用---'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>调用---[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><h3 id="异常堆栈跟踪"><a href="#异常堆栈跟踪" class="headerlink" title="异常堆栈跟踪"></a>异常堆栈跟踪</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">import</span> traceback <span class="token keyword">as</span> tb<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> <span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span>OSError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用---'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>调用---[Errno 2] No such file or directory: &#39;read.txt&#39;日期=NoneTraceback (most recent call last):  File &quot;C:\Users\HP\AppData\Local\Temp\ipykernel_8772\538862610.py&quot;, line 5, in read_date_from_file    file=open(filename)FileNotFoundError: [Errno 2] No such file or directory: &#39;read.txt&#39;</code></pre><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><h4 id="finally代码块"><a href="#finally代码块" class="headerlink" title="finally代码块"></a>finally代码块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理FileNotFoundError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理FileNotFoundError异常[Errno 2] No such file or directory: &#39;read.txt&#39;---------------------------------------------------------------------------UnboundLocalError                         Traceback (most recent call last)Input In [7], in &lt;cell line: 21&gt;()     18     finally:     19         file.close()---&gt; 21 date=read_date_from_file(&#39;read.txt&#39;)     22 print(&#39;日期=&#123;0&#125;&#39;.format(date))Input In [7], in read_date_from_file(filename)     17     print(e)     18 finally:---&gt; 19     file.close()UnboundLocalError: local variable &#39;file&#39; referenced before assignment</code></pre><h4 id="else代码块"><a href="#else代码块" class="headerlink" title="else代码块"></a>else代码块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">import</span> traceback <span class="token keyword">as</span> tb<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开文件失败'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开文件成功'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            in_date <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            in_date <span class="token operator">=</span> in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            date <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> date        <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>打开文件失败日期=None</code></pre><h4 id="with-as-代码块自动资源管理"><a href="#with-as-代码块自动资源管理" class="headerlink" title="with as 代码块自动资源管理"></a>with as 代码块自动资源管理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理OSError异常[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="显式抛出异常"><a href="#显式抛出异常" class="headerlink" title="显式抛出异常"></a>显式抛出异常</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token string">'不是有效日期'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token string">'文件找不到'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token string">'文件无法打开或无法读取'</span><span class="token punctuation">)</span>date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------FileNotFoundError                         Traceback (most recent call last)Input In [4], in read_date_from_file(filename)      7 try:----&gt; 8     file=open(filename)      9     in_date=file.read()FileNotFoundError: [Errno 2] No such file or directory: &#39;read.txt&#39;</code></pre><p>​    </p><pre><code>During handling of the above exception, another exception occurred:MyException                               Traceback (most recent call last)Input In [4], in &lt;cell line: 20&gt;()     17     except OSError as e:     18         raise MyException(&#39;文件无法打开或无法读取&#39;)---&gt; 20 date=read_date_from_file(&#39;read.txt&#39;)     21 print(&#39;日期=&#123;0&#125;&#39;.format(date))Input In [4], in read_date_from_file(filename)     14     raise MyException(&#39;不是有效日期&#39;)     15 except FileNotFoundError as e:---&gt; 16     raise MyException(&#39;文件找不到&#39;)     17 except OSError as e:     18     raise MyException(&#39;文件无法打开或无法读取&#39;)MyException: 文件找不到</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h2><h3 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h3><h4 id="舍入函数"><a href="#舍入函数" class="headerlink" title="舍入函数"></a>舍入函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><h4 id="幂和对数函数"><a href="#幂和对数函数" class="headerlink" title="幂和对数函数"></a>幂和对数函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>8.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.0794415416798357</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.2649110640673518</code></pre><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>90.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>radians<span class="token punctuation">(</span><span class="token number">180</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span>math<span class="token punctuation">.</span>radians<span class="token punctuation">(</span><span class="token number">45</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.24740395925452294</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>asin<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>asin<span class="token punctuation">(</span><span class="token number">0.2474</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.24999591371483254</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>asin<span class="token punctuation">(</span><span class="token number">0.24740395925452294</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.9689124217106447</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>acos<span class="token punctuation">(</span><span class="token number">0.9689124217106447</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.2500000000000002</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>acos<span class="token punctuation">(</span>math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.2500000000000002</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25534192122103627</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>atan<span class="token punctuation">(</span>math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>atan<span class="token punctuation">(</span><span class="token number">0.25534192122103627</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0.0&lt;=x&lt;1.0 random'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0&lt;x&lt;5 random'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'05&lt;=x&lt;10 random'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'05&lt;=x&lt;=10 random'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.0&lt;=x&lt;1.0 random0.39058630379347560.89224076323299420.213520477604615340.52115230154019280.300308704356647470.98629849194903580.211719935601607620.66532801074885340.324880431761971340.35620997733970640&lt;x&lt;5 random004021330405&lt;=x&lt;10 random787685987705&lt;=x&lt;=10 random5587799875</code></pre><h3 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h3><h4 id="datetime、date和time类"><a href="#datetime、date和time类" class="headerlink" title="datetime、date和time类"></a>datetime、date和time类</h4><h5 id="datetime类"><a href="#datetime类" class="headerlink" title="datetime类"></a>datetime类</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [37], in &lt;cell line: 1&gt;()----&gt; 1 dt=datetime.datetime(2018,2,29)ValueError: day is out of range for month</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2018, 2, 28, 0, 0)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [40], in &lt;cell line: 1&gt;()----&gt; 1 dt=datetime.datetime(2018,2,28,23,60,59,10000)ValueError: minute must be in 0..59</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2018, 2, 28, 23, 30, 59, 10000)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2023, 3, 21, 18, 2, 6, 436821)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2023, 3, 21, 18, 2, 32, 837270)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2023, 3, 21, 10, 2, 48, 100681)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">999999999.999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2001, 9, 9, 9, 46, 39, 999000)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcfromtimestamp<span class="token punctuation">(</span><span class="token number">999999999.999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2001, 9, 9, 1, 46, 39, 999000)</code></pre><h5 id="date类"><a href="#date类" class="headerlink" title="date类"></a>date类</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [48], in &lt;cell line: 1&gt;()----&gt; 1 d=datetime.date(2018,2,29)ValueError: day is out of range for month</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2018, 2, 28)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2023, 3, 21)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">999999999.999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2001, 9, 9)</code></pre><h5 id="time类"><a href="#time类" class="headerlink" title="time类"></a>time类</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [53], in &lt;cell line: 1&gt;()----&gt; 1 datetime.time(24,59,58,1999)ValueError: hour must be in 0..23</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.time(23, 59, 58, 1999)</code></pre><h4 id="日期时间计算"><a href="#日期时间计算" class="headerlink" title="日期时间计算"></a>日期时间计算</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2023, 3, 21)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">delta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">+=</span>delta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2023, 3, 31)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">delta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>weeks<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">-=</span>delta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2017, 11, 27)</code></pre><h4 id="日期时间格式化和解析"><a href="#日期时间格式化和解析" class="headerlink" title="日期时间格式化和解析"></a>日期时间格式化和解析</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2023-03-21 18:10:33&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2023-03-21&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str_date<span class="token operator">=</span><span class="token string">'2018-02-29 10:40:26'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [69], in &lt;cell line: 1&gt;()----&gt; 1 date=datetime.datetime.strptime(in_date,&#39;%Y-%m-%d %H:%M:%S&#39;)NameError: name &#39;in_date&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str_date<span class="token operator">=</span><span class="token string">'2018-02-28 10:40:26'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2018, 2, 28, 10, 40, 26)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [74], in &lt;cell line: 1&gt;()----&gt; 1 date=datetime.datetime.strptime(str_date,&#39;%Y-%m-%d&#39;)File E:\anaconda\lib\_strptime.py:568, in _strptime_datetime(cls, data_string, format)    565 def _strptime_datetime(cls, data_string, format=&quot;%a %b %d %H:%M:%S %Y&quot;):    566     &quot;&quot;&quot;Return a class cls instance based on the input string and the    567     format string.&quot;&quot;&quot;--&gt; 568     tt, fraction, gmtoff_fraction = _strptime(data_string, format)    569     tzname, gmtoff = tt[-2:]    570     args = tt[:6] + (fraction,)File E:\anaconda\lib\_strptime.py:352, in _strptime(data_string, format)    349     raise ValueError(&quot;time data %r does not match format %r&quot; %    350                      (data_string, format))    351 if len(data_string) != found.end():--&gt; 352     raise ValueError(&quot;unconverted data remains: %s&quot; %    353                       data_string[found.end():])    355 iso_year = year = None    356 month = day = 1ValueError: unconverted data remains:  10:40:26</code></pre><h4 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span>timezone<span class="token punctuation">,</span>timedelta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">utc_dt<span class="token operator">=</span>datetime<span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span>tzinfo<span class="token operator">=</span>timezone<span class="token punctuation">.</span>utc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">utc_dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2008, 8, 19, 23, 59, 59, tzinfo=datetime.timezone.utc)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">utc_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-19 23:59:59&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">utc_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S %z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-19 23:59:59 +0000&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_tz<span class="token operator">=</span>timezone<span class="token punctuation">(</span>offset<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Asia/Beijing'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_tz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.timezone(datetime.timedelta(seconds=28800), &#39;Asia/Beijing&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token operator">=</span>utc_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>bj_tz<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2008, 8, 20, 7, 59, 59, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800), &#39;Asia/Beijing&#39;))</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S %Z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-20 07:59:59 Asia/Beijing&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S %z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-20 07:59:59 +0800&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_tz<span class="token operator">=</span>timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token operator">=</span>utc_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>bj_tz<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S %z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-20 07:59:59 +0800&#39;</code></pre><h3 id="logging日志模块"><a href="#logging日志模块" class="headerlink" title="logging日志模块"></a>logging日志模块</h3><h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-03-21 20:15:10,230-MainThread-root-&lt;cell line: 5&gt;-INFO-this is info2023-03-21 20:15:10,246-MainThread-root-&lt;cell line: 6&gt;-WARNING-this is warning2023-03-21 20:15:10,247-MainThread-root-&lt;cell line: 7&gt;-ERROR-this is error2023-03-21 20:15:10,248-MainThread-root-&lt;cell line: 8&gt;-CRITICAL-this is critical</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-03-21 20:14:59,694-MainThread-__main__-&lt;cell line: 6&gt;-INFO-this is info2023-03-21 20:14:59,694-MainThread-__main__-&lt;cell line: 7&gt;-WARNING-this is warning2023-03-21 20:14:59,698-MainThread-__main__-&lt;cell line: 8&gt;-ERROR-this is error2023-03-21 20:14:59,700-MainThread-__main__-&lt;cell line: 9&gt;-CRITICAL-this is critical</code></pre><h4 id="日志信息格式化"><a href="#日志信息格式化" class="headerlink" title="日志信息格式化"></a>日志信息格式化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s-%(threadName)s-'</span>                    <span class="token string">'%(name)s-%(funcName)s-%(levelname)s-%(message)s'</span><span class="token punctuation">)</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">funlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'enter funlog'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'use funlog'</span><span class="token punctuation">)</span>funlog<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-03-21 20:14:51,110-MainThread-__main__-&lt;cell line: 8&gt;-INFO-this is info2023-03-21 20:14:51,120-MainThread-__main__-&lt;cell line: 9&gt;-WARNING-this is warning2023-03-21 20:14:51,122-MainThread-__main__-&lt;cell line: 10&gt;-ERROR-this is error2023-03-21 20:14:51,123-MainThread-__main__-&lt;cell line: 11&gt;-CRITICAL-this is critical2023-03-21 20:14:51,124-MainThread-__main__-&lt;cell line: 16&gt;-INFO-use funlog2023-03-21 20:14:51,124-MainThread-__main__-funlog-INFO-enter funlog</code></pre><h4 id="日志重定位"><a href="#日志重定位" class="headerlink" title="日志重定位"></a>日志重定位</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s-%(threadName)s-'</span>                    <span class="token string">'%(name)s-%(funcName)s-%(levelname)s-%(message)s'</span><span class="token punctuation">)</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">funlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'enter funlog'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'use funlog'</span><span class="token punctuation">)</span>funlog<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-03-21 20:17:26,157-MainThread-__main__-&lt;cell line: 8&gt;-INFO-this is info2023-03-21 20:17:26,165-MainThread-__main__-&lt;cell line: 9&gt;-WARNING-this is warning2023-03-21 20:17:26,166-MainThread-__main__-&lt;cell line: 10&gt;-ERROR-this is error2023-03-21 20:17:26,167-MainThread-__main__-&lt;cell line: 11&gt;-CRITICAL-this is critical2023-03-21 20:17:26,169-MainThread-__main__-&lt;cell line: 16&gt;-INFO-use funlog2023-03-21 20:17:26,171-MainThread-__main__-funlog-INFO-enter funlog</code></pre><h4 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> logging<span class="token punctuation">.</span>configlogging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>fileConfig<span class="token punctuation">(</span><span class="token string">"logger.conf"</span><span class="token punctuation">)</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'loggerl'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">funlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'enter funlog'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'use funlog'</span><span class="token punctuation">)</span>funlog<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>this is debugthis is infothis is warningthis is errorthis is criticaluse funlogenter funlog</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式字符串"><a href="#正则表达式字符串" class="headerlink" title="正则表达式字符串"></a>正则表达式字符串</h3><ul><li>普通字符</li><li>元字符</li></ul><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><h4 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h4><h4 id="开始与结束字符"><a href="#开始与结束字符" class="headerlink" title="开始与结束字符"></a>开始与结束字符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep1 <span class="token operator">=</span> <span class="token string">r'\w+@zhijieketang\.com'</span>p2 <span class="token operator">=</span> <span class="token string">r'^\w+@zhijieketang\.com$'</span>text <span class="token operator">=</span> <span class="token string">"Tony's email is tony_guan588@zhijieketang.com."</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p2<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>email <span class="token operator">=</span> <span class="token string">'tony_guan588@zhijieketang.com'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p2<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(16, 45), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;None&lt;re.Match object; span=(0, 29), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;</code></pre><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><h4 id="定义字符类"><a href="#定义字符类" class="headerlink" title="定义字符类"></a>定义字符类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'[Jj]ava'</span><span class="token comment">## p = r'Java|java|JAVA'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'I like Java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'I like JAVA and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'I like java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(7, 11), match=&#39;Java&#39;&gt;None&lt;re.Match object; span=(7, 11), match=&#39;java&#39;&gt;</code></pre><h4 id="字符类取反"><a href="#字符类取反" class="headerlink" title="字符类取反"></a>字符类取反</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'[^0123456789]'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'Python 3'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>None&lt;re.Match object; span=(0, 1), match=&#39;P&#39;&gt;</code></pre><h4 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rem <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'[A-Za-z0-9]'</span><span class="token punctuation">,</span> <span class="token string">'A10.3'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'[0-25-7]'</span><span class="token punctuation">,</span> <span class="token string">'A3489C'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 1), match=&#39;A&#39;&gt;None</code></pre><h4 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment">## p = r'[^0123456789]'</span>p <span class="token operator">=</span> <span class="token string">r'\D'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'Python 3'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>text <span class="token operator">=</span> <span class="token string">'你们好Hello'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\w'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>None&lt;re.Match object; span=(0, 1), match=&#39;P&#39;&gt;&lt;re.Match object; span=(0, 1), match=&#39;你&#39;&gt;</code></pre><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><h4 id="量词的使用"><a href="#量词的使用" class="headerlink" title="量词的使用"></a>量词的使用</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rem <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d?'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字一次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'8'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d?'</span><span class="token punctuation">,</span> <span class="token string">'ABC'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字零次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符''</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d*'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字多次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d*'</span><span class="token punctuation">,</span> <span class="token string">'ABC'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字零次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符''</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字多次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">,</span> <span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;8&#125;'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字8次</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'8765432'</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;8&#125;'</span><span class="token punctuation">,</span> <span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;7,8&#125;'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字8次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;9,&#125;'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 1), match=&#39;8&#39;&gt;&lt;re.Match object; span=(0, 0), match=&#39;&#39;&gt;&lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;&lt;re.Match object; span=(0, 0), match=&#39;&#39;&gt;&lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;None8765432 &lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;None&lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;None</code></pre><h4 id="贪婪量词和懒惰量词"><a href="#贪婪量词和懒惰量词" class="headerlink" title="贪婪量词和懒惰量词"></a>贪婪量词和懒惰量词</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment">## 使用贪婪量词</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;5,8&#125;'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字8次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span><span class="token comment">## 使用惰性量词</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;5,8&#125;?'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字5次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;&lt;re.Match object; span=(0, 5), match=&#39;87654&#39;&gt;</code></pre><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><h4 id="分组的使用"><a href="#分组的使用" class="headerlink" title="分组的使用"></a>分组的使用</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'(121)&#123;2&#125;'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'121121abcabc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 返回匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 获得第一组内容</span>p <span class="token operator">=</span> <span class="token string">r'(\d&#123;3,4&#125;)-(\d&#123;7,8&#125;)'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'010-87654321'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 返回匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 获得所有组内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 6), match=&#39;121121&#39;&gt;121121121&lt;re.Match object; span=(0, 12), match=&#39;010-87654321&#39;&gt;010-87654321(&#39;010&#39;, &#39;87654321&#39;)</code></pre><h4 id="分组命名"><a href="#分组命名" class="headerlink" title="分组命名"></a>分组命名</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'(?P&lt;area_code>\d&#123;3,4&#125;)-(?P&lt;phone_code>\d&#123;7,8&#125;)'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'010-87654321'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 返回匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 获得所有组内容</span><span class="token comment">## 通过组编号返回组内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## 通过组名返回组内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'area_code'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'phone_code'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 12), match=&#39;010-87654321&#39;&gt;010-87654321(&#39;010&#39;, &#39;87654321&#39;)0108765432101087654321</code></pre><h4 id="反向引用分组"><a href="#反向引用分组" class="headerlink" title="反向引用分组"></a>反向引用分组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment">## p = r'&lt;([\w]+)>.*&lt;/([\w]+)>'</span>p <span class="token operator">=</span> <span class="token string">r'&lt;([\w]+)>.*&lt;/\1>'</span>  <span class="token comment">## 使用反向引用</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'&lt;a>abc&lt;/a>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'&lt;a>abc&lt;/b>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 10), match=&#39;&lt;a&gt;abc&lt;/a&gt;&#39;&gt;None</code></pre><h4 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'img1.jpg,img2.jpg,img3.bmp'</span><span class="token comment">#捕获分组</span>p <span class="token operator">=</span> <span class="token string">r'\w+(\.jpg)'</span>mlist <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mlist<span class="token punctuation">)</span><span class="token comment">#非捕获分组</span>p <span class="token operator">=</span> <span class="token string">r'\w+(?:\.jpg)'</span>mlist <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;.jpg&#39;, &#39;.jpg&#39;][&#39;img1.jpg&#39;, &#39;img2.jpg&#39;]</code></pre><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><h4 id="search（）和match（）函数"><a href="#search（）和match（）函数" class="headerlink" title="search（）和match（）函数"></a>search（）和match（）函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'\w+@zhijieketang\.com'</span>text <span class="token operator">=</span> <span class="token string">"Tony's email is tony_guan588@zhijieketang.com."</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>email <span class="token operator">=</span> <span class="token string">'tony_guan588@zhijieketang.com'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span class="token comment">## match对象几个方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'match对象几个方法:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(16, 45), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;None&lt;re.Match object; span=(0, 29), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;&lt;re.Match object; span=(0, 29), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;match对象几个方法:tony_guan588@zhijieketang.com029(0, 29)</code></pre><h4 id="findall-和finditer（）函数"><a href="#findall-和finditer（）函数" class="headerlink" title="findall()和finditer（）函数"></a>findall()和finditer（）函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'[Jj]ava'</span>text <span class="token operator">=</span> <span class="token string">'I like Java and java.'</span>match_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match_list<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>match_iter <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> match_iter<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Java&#39;, &#39;java&#39;]Javajava</code></pre><h4 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'\d+'</span>text <span class="token operator">=</span> <span class="token string">'AB12CD34EF'</span>clist <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span>clist <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">,</span> maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span>clist <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">,</span> maxsplit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;AB&#39;, &#39;CD&#39;, &#39;EF&#39;][&#39;AB&#39;, &#39;CD34EF&#39;][&#39;AB&#39;, &#39;CD&#39;, &#39;EF&#39;]</code></pre><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'\d+'</span>text <span class="token operator">=</span> <span class="token string">'AB12CD34EF'</span>repace_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repace_text<span class="token punctuation">)</span>repace_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repace_text<span class="token punctuation">)</span>repace_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repace_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>AB CD EFAB CD34EFAB CD EF</code></pre><h3 id="编译正则表达式"><a href="#编译正则表达式" class="headerlink" title="编译正则表达式"></a>编译正则表达式</h3><p>re.compile(pattern[,flags&#x3D;0])</p><h4 id="已编译正则表达式对象"><a href="#已编译正则表达式对象" class="headerlink" title="已编译正则表达式对象"></a>已编译正则表达式对象</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'\w+@zhijieketang\.com'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">"Tony's email is tony_guan588@zhijieketang.com."</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>p <span class="token operator">=</span> <span class="token string">r'[Jj]ava'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">'I like Java and java.'</span>match_list <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match_list<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>match_iter <span class="token operator">=</span> regex<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> match_iter<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">r'\d+'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">'AB12CD34EF'</span>clist <span class="token operator">=</span> regex<span class="token punctuation">.</span>split<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span>repace_text <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repace_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(16, 45), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;None[&#39;Java&#39;, &#39;java&#39;]Javajava[&#39;AB&#39;, &#39;CD&#39;, &#39;EF&#39;]AB CD EF</code></pre><h4 id="编译标志"><a href="#编译标志" class="headerlink" title="编译标志"></a>编译标志</h4><h5 id="ASCII和Unicode"><a href="#ASCII和Unicode" class="headerlink" title="ASCII和Unicode"></a>ASCII和Unicode</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> retext <span class="token operator">=</span> <span class="token string">'你们好Hello'</span>p <span class="token operator">=</span> <span class="token string">r'\w+'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>U<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>A<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 8), match=&#39;你们好Hello&#39;&gt;&lt;re.Match object; span=(0, 8), match=&#39;你们好Hello&#39;&gt;&lt;re.Match object; span=(3, 8), match=&#39;Hello&#39;&gt;None</code></pre><h5 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'(java).*(python)'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like Java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like JAVA and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(7, 22), match=&#39;Java and Python&#39;&gt;&lt;re.Match object; span=(7, 22), match=&#39;JAVA and Python&#39;&gt;&lt;re.Match object; span=(7, 22), match=&#39;java and Python&#39;&gt;</code></pre><h5 id="点元字符匹配换行符"><a href="#点元字符匹配换行符" class="headerlink" title="点元字符匹配换行符"></a>点元字符匹配换行符</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'.+'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello\nWorld.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello\nWorld.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 5), match=&#39;Hello&#39;&gt;&lt;re.Match object; span=(0, 12), match=&#39;Hello\nWorld.&#39;&gt;</code></pre><h5 id="多行模式"><a href="#多行模式" class="headerlink" title="多行模式"></a>多行模式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'^World'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello\nWorld.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello\nWorld.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>None&lt;re.Match object; span=(6, 11), match=&#39;World&#39;&gt;</code></pre><h5 id="详细模式"><a href="#详细模式" class="headerlink" title="详细模式"></a>详细模式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token triple-quoted-string string">"""(java)     #匹配java字符串        .*        #匹配任意字符零或多个        (python)  #匹配python字符串    """</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I <span class="token operator">|</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like Java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like JAVA and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(7, 22), match=&#39;Java and Python&#39;&gt;&lt;re.Match object; span=(7, 22), match=&#39;JAVA and Python&#39;&gt;&lt;re.Match object; span=(7, 22), match=&#39;java and Python&#39;&gt;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h2><h3 id="CSV数据交换格式"><a href="#CSV数据交换格式" class="headerlink" title="CSV数据交换格式"></a>CSV数据交换格式</h3><h4 id="reader（）函数"><a href="#reader（）函数" class="headerlink" title="reader（）函数"></a>reader（）函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/books.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span>  encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rf<span class="token punctuation">:</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>rf<span class="token punctuation">,</span> dialect<span class="token operator">=</span>csv<span class="token punctuation">.</span>excel<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1|软件工程|戴国强|机械工业出版社|19980528|22|汇编语言|李利光|北京大学出版社|19980318|23|计算机基础|王飞|经济科学出版社|19980218|14|FLASH精选|刘扬|中国纺织出版社|19990312|25|java基础|王一|电子工业出版社|19990528|36|世界杯|柳飞|世界出版社|19990412|27|JAVA程序设计|张余|人民邮电出版社|19990613|18|新概念3|余智|外语出版社|19990723|29|军事要闻|张强|解放军出版社|19990722|310|大众生活|许阳|电子出版社|19990819|311|南方旅游|王爱国|南方出版社|19990930|213|幽灵|钱力华|华光出版社|19991008|114|期货分析|孙宝|飞鸟出版社|19991122|315|人工智能|周未|机械工业出版社|19991223|316|数据库系统概念|吴红|机械工业出版社|20000328|317|计算机理论基础|戴家|机械工业出版社|20000218|418|编译原理|郑键|机械工业出版社|20000415|219|通讯与网络|欧阳杰|机械工业出版社|20000517|120|现代操作系统|王小国|机械工业出版社|20010128|121|网络基础|王大尉|北京大学出版社|20000617|122|万紫千红|丛丽|北京大学出版社|20000702|323|经济概论|思佳|北京大学出版社|20000819|324|经济与科学|毛波|经济科学出版社|20000923|225|计算机体系结构|方丹|机械工业出版社|20000328|426|软件工程|牛田|经济科学出版社|20000328|427|世界语言大观|候丙辉|经济科学出版社|20000814|228|高级语言程序设计|寇国华|清华大学出版社|20000117|329|操作系统概论|聂元名|清华大学出版社|20001028|130|数据库及应用|孙家萧|清华大学出版社|20000619|131|软件工程|戴志名|电子工业出版社|20000324|332|SOL使用手册|贺民|电子工业出版社|19990425|233|模拟电路|邓英才|电子工业出版社|20000527|234|集邮爱好者|李云|人民邮电出版社|20000630|136|高等数学|李放|人民邮电出版社|20000812|137|南方周末|邓光明|南方出版社|20000923|338|十大旅游胜地|潭晓明|南方出版社|20000403|239|黑幕|李仪|华光出版社|20000508|24</code></pre><h4 id="writer-函数"><a href="#writer-函数" class="headerlink" title="writer()函数"></a>writer()函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/books.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rf<span class="token punctuation">:</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>rf<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/books2.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> wf<span class="token punctuation">:</span>        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>wf<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span>            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1|软件工程|戴国强|机械工业出版社|19980528|22|汇编语言|李利光|北京大学出版社|19980318|23|计算机基础|王飞|经济科学出版社|19980218|14|FLASH精选|刘扬|中国纺织出版社|19990312|25|java基础|王一|电子工业出版社|19990528|36|世界杯|柳飞|世界出版社|19990412|27|JAVA程序设计|张余|人民邮电出版社|19990613|18|新概念3|余智|外语出版社|19990723|29|军事要闻|张强|解放军出版社|19990722|310|大众生活|许阳|电子出版社|19990819|311|南方旅游|王爱国|南方出版社|19990930|213|幽灵|钱力华|华光出版社|19991008|114|期货分析|孙宝|飞鸟出版社|19991122|315|人工智能|周未|机械工业出版社|19991223|316|数据库系统概念|吴红|机械工业出版社|20000328|317|计算机理论基础|戴家|机械工业出版社|20000218|418|编译原理|郑键|机械工业出版社|20000415|219|通讯与网络|欧阳杰|机械工业出版社|20000517|120|现代操作系统|王小国|机械工业出版社|20010128|121|网络基础|王大尉|北京大学出版社|20000617|122|万紫千红|丛丽|北京大学出版社|20000702|323|经济概论|思佳|北京大学出版社|20000819|324|经济与科学|毛波|经济科学出版社|20000923|225|计算机体系结构|方丹|机械工业出版社|20000328|426|软件工程|牛田|经济科学出版社|20000328|427|世界语言大观|候丙辉|经济科学出版社|20000814|228|高级语言程序设计|寇国华|清华大学出版社|20000117|329|操作系统概论|聂元名|清华大学出版社|20001028|130|数据库及应用|孙家萧|清华大学出版社|20000619|131|软件工程|戴志名|电子工业出版社|20000324|332|SOL使用手册|贺民|电子工业出版社|19990425|233|模拟电路|邓英才|电子工业出版社|20000527|234|集邮爱好者|李云|人民邮电出版社|20000630|136|高等数学|李放|人民邮电出版社|20000812|137|南方周末|邓光明|南方出版社|20000923|338|十大旅游胜地|潭晓明|南方出版社|20000403|239|黑幕|李仪|华光出版社|20000508|24</code></pre><h3 id="XML数据交换格式"><a href="#XML数据交换格式" class="headerlink" title="XML数据交换格式"></a>XML数据交换格式</h3><h4 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h4><ol><li>声明</li><li>根元素</li><li>子元素</li><li>属性</li><li>命名空间</li><li>限定名</li></ol><h4 id="解析XML文档"><a href="#解析XML文档" class="headerlink" title="解析XML文档"></a>解析XML文档</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ETtree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'data1/Notes.xml'</span><span class="token punctuation">)</span>  <span class="token comment">## 创建XML文档树</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## xml.etree.ElementTree.ElementTree</span>root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## root是根元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## xml.etree.ElementTree.Element</span><span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>tag<span class="token punctuation">)</span>  <span class="token comment">## Notes</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> child <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第&#123;0&#125;个&#123;1&#125;元素，属性：&#123;2&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> child<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> child<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> child_child <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'    标签：&#123;0&#125;，内容：&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>child_child<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> child_child<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;xml.etree.ElementTree.ElementTree&#39;&gt;&lt;class &#39;xml.etree.ElementTree.Element&#39;&gt;Notes第0个Note元素，属性：&#123;&#39;id&#39;: &#39;1&#39;&#125;    标签：CDate，内容：2018-3-21    标签：Content，内容：发布Python0    标签：UserID，内容：tony第1个Note元素，属性：&#123;&#39;id&#39;: &#39;2&#39;&#125;    标签：CDate，内容：2018-3-22    标签：Content，内容：发布Python1    标签：UserID，内容：tony第2个Note元素，属性：&#123;&#39;id&#39;: &#39;3&#39;&#125;    标签：CDate，内容：2018-3-23    标签：Content，内容：发布Python2    标签：UserID，内容：tony第3个Note元素，属性：&#123;&#39;id&#39;: &#39;4&#39;&#125;    标签：CDate，内容：2018-3-24    标签：Content，内容：发布Python3    标签：UserID，内容：tony第4个Note元素，属性：&#123;&#39;id&#39;: &#39;5&#39;&#125;    标签：CDate，内容：2018-3-25    标签：Content，内容：发布Python4    标签：UserID，内容：tony</code></pre><h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4><ol><li>find(match,namespace&#x3D;None)</li><li>findall(match,namespace&#x3D;None)</li><li>findtext(match,default&#x3D;None,namespace&#x3D;None)</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ETtree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'data1/Notes.xml'</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note"</span><span class="token punctuation">)</span>  <span class="token comment">## 当前节点下的第一个Note子节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note/CDate"</span><span class="token punctuation">)</span>  <span class="token comment">## Note子节点下的第一个CDate节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>text<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note/CDate/.."</span><span class="token punctuation">)</span>  <span class="token comment">## Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">".//CDate"</span><span class="token punctuation">)</span>  <span class="token comment">## 当前节点查找所有后代节点中第一个CDate节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>text<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[@id]"</span><span class="token punctuation">)</span>  <span class="token comment">## 具有id属性Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[@id='2']"</span><span class="token punctuation">)</span>  <span class="token comment">## id属性等于'2'的Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[2]"</span><span class="token punctuation">)</span>  <span class="token comment">## 第二个Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[last()]"</span><span class="token punctuation">)</span>  <span class="token comment">## 最后一个Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[last()-2]"</span><span class="token punctuation">)</span>  <span class="token comment">## 倒数第三个Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Note &#123;&#39;id&#39;: &#39;1&#39;&#125;2018-3-21Note &#123;&#39;id&#39;: &#39;1&#39;&#125;2018-3-21Note &#123;&#39;id&#39;: &#39;1&#39;&#125;Note &#123;&#39;id&#39;: &#39;2&#39;&#125;Note &#123;&#39;id&#39;: &#39;2&#39;&#125;Note &#123;&#39;id&#39;: &#39;5&#39;&#125;Note &#123;&#39;id&#39;: &#39;3&#39;&#125;</code></pre><h3 id="JSON数据交换格式"><a href="#JSON数据交换格式" class="headerlink" title="JSON数据交换格式"></a>JSON数据交换格式</h3><h4 id="JSON文档结构"><a href="#JSON文档结构" class="headerlink" title="JSON文档结构"></a>JSON文档结构</h4><h4 id="JSON数据编码"><a href="#JSON数据编码" class="headerlink" title="JSON数据编码"></a>JSON数据编码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment">## 准备数据</span>py_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'tony'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>  <span class="token comment">## 创建字典对象</span>py_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment">## 创建列表对象</span>py_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span>  <span class="token comment">## 创建元组对象</span>py_dict<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> py_list  <span class="token comment">## 添加列表到字典中</span>py_dict<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> py_tuple  <span class="token comment">## 添加元组到字典中</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'dict'></span><span class="token comment">## 编码过程</span>json_obj <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>py_dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>json_obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>json_obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'str'></span><span class="token comment">## 编码过程</span>json_obj <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>py_dict<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">## 输出格式化后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>json_obj<span class="token punctuation">)</span><span class="token comment">## 写入JSON数据到data1.json文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data2/data1.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>py_dict<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment">## 写入JSON数据到data2.json文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data2/data2.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>py_dict<span class="token punctuation">,</span> f<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#123;&#39;name&#39;: &#39;tony&#39;, &#39;age&#39;: 30, &#39;sex&#39;: True, &#39;a&#39;: [1, 3], &#39;b&#39;: (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)&#125;&lt;class &#39;dict&#39;&gt;&#123;&quot;name&quot;: &quot;tony&quot;, &quot;age&quot;: 30, &quot;sex&quot;: true, &quot;a&quot;: [1, 3], &quot;b&quot;: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]&#125;&lt;class &#39;str&#39;&gt;&#123;    &quot;name&quot;: &quot;tony&quot;,    &quot;age&quot;: 30,    &quot;sex&quot;: true,    &quot;a&quot;: [        1,        3    ],    &quot;b&quot;: [        &quot;A&quot;,        &quot;B&quot;,        &quot;C&quot;    ]&#125;</code></pre><h4 id="JSON数据解码"><a href="#JSON数据解码" class="headerlink" title="JSON数据解码"></a>JSON数据解码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment">## 准备数据</span>json_obj <span class="token operator">=</span> <span class="token string">r'&#123;"name": "tony", "age": 30, "sex": true, "a": [1, 3], "b": ["A", "B", "C"]&#125;'</span><span class="token comment">#json_obj = "&#123;'name': 'tony', 'age': 30, 'sex': true, 'a': [1, 3], 'b': ['A', 'B', 'C']&#125;"</span>py_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'dict'></span><span class="token keyword">print</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>py_lista <span class="token operator">=</span> py_dict<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>  <span class="token comment">## 取出列表对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_lista<span class="token punctuation">)</span>py_listb <span class="token operator">=</span> py_dict<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>  <span class="token comment">## 取出列表对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_listb<span class="token punctuation">)</span><span class="token comment">## 读取JSON数据到data2.json文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data2/data2.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'dict'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;dict&#39;&gt;tony30True[1, 3][&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]&#123;&#39;name&#39;: &#39;tony&#39;, &#39;age&#39;: 30, &#39;sex&#39;: True, &#39;a&#39;: [1, 3], &#39;b&#39;: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]&#125;&lt;class &#39;dict&#39;&gt;</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h4><h4 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> configparserconfig <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 创建配置解析器对象</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'data3/Setup.ini'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment">## 读取并解析配置文件</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>sections<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 返回所有的节</span>section1 <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'Startup'</span><span class="token punctuation">]</span>  <span class="token comment">## 返回Startup节</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">'Startup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>section1<span class="token punctuation">[</span><span class="token string">'RequireOS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>section1<span class="token punctuation">[</span><span class="token string">'RequireIE'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'Product'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'msi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'Windows 2000'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'MajorVersion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">## 返回MajorVersion数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'Windows 2000'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ServicePackMajor'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>value <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Windows 2000'</span><span class="token punctuation">,</span> <span class="token string">'MajorVersion'</span><span class="token punctuation">)</span>  <span class="token comment">## 返回MajorVersion数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'str'></span>value <span class="token operator">=</span> config<span class="token punctuation">.</span>getint<span class="token punctuation">(</span><span class="token string">'Windows 2000'</span><span class="token punctuation">,</span> <span class="token string">'MajorVersion'</span><span class="token punctuation">)</span>  <span class="token comment">## 返回MajorVersion数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'int'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Startup&#39;, &#39;Product&#39;, &#39;Windows 2000&#39;][&#39;requireos&#39;, &#39;requiremsi&#39;, &#39;requireie&#39;]Windows 20006.0.2600.0AcroRead.msi54&lt;class &#39;str&#39;&gt;&lt;class &#39;int&#39;&gt;</code></pre><h4 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> configparserconfig <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 创建配置解析器对象</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'data3/Setup.ini'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment">## 读取并解析配置文件</span><span class="token comment">## 写入配置文件</span>config<span class="token punctuation">[</span><span class="token string">'Startup'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'RequireMSI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'8.0'</span>config<span class="token punctuation">[</span><span class="token string">'Product'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'RequireMSI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'4.0'</span>config<span class="token punctuation">.</span>add_section<span class="token punctuation">(</span><span class="token string">'Section2'</span><span class="token punctuation">)</span>   <span class="token comment">#添加节</span>config<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'Section2'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Mac'</span><span class="token punctuation">)</span>   <span class="token comment">#添加配置项</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data3/Setup.ini'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fw<span class="token punctuation">:</span>    config<span class="token punctuation">.</span>write<span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2><h3 id="数据持久化技术概述"><a href="#数据持久化技术概述" class="headerlink" title="数据持久化技术概述"></a>数据持久化技术概述</h3><ol><li>文本文件</li><li>数据库</li></ol><h3 id="MySQL数据库管理系统"><a href="#MySQL数据库管理系统" class="headerlink" title="MySQL数据库管理系统"></a>MySQL数据库管理系统</h3><h3 id="Python-DB-API"><a href="#Python-DB-API" class="headerlink" title="Python DB-API"></a>Python DB-API</h3><h4 id="建立数据连接"><a href="#建立数据连接" class="headerlink" title="建立数据连接"></a>建立数据连接</h4><h4 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h4><h3 id="案例：MySQL数据库CURD操作"><a href="#案例：MySQL数据库CURD操作" class="headerlink" title="案例：MySQL数据库CURD操作"></a>案例：MySQL数据库CURD操作</h3><h4 id="安装PyMySQL模块"><a href="#安装PyMySQL模块" class="headerlink" title="安装PyMySQL模块"></a>安装PyMySQL模块</h4><h4 id="数据查询操作"><a href="#数据查询操作" class="headerlink" title="数据查询操作"></a>数据查询操作</h4><h5 id="有条件查询实现代码"><a href="#有条件查询实现代码" class="headerlink" title="有条件查询实现代码"></a>有条件查询实现代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        <span class="token comment">## sql = 'select name, userid from user where userid >%s'</span>        <span class="token comment">## cursor.execute(sql, [0])</span>        sql <span class="token operator">=</span> <span class="token string">'select name, userid from user where userid >%(id)s'</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">## 4. 提取结果集</span>        result_set <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> result_set<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'id：&#123;0&#125; - name：&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>id：1 - name：Tomid：2 - name：Ben</code></pre><h5 id="无条件查询实现代码"><a href="#无条件查询实现代码" class="headerlink" title="无条件查询实现代码"></a>无条件查询实现代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        sql <span class="token operator">=</span> <span class="token string">'select max(userid) from user'</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token comment">## 4. 提取结果集</span>        row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> row <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最大用户Id ：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>最大用户Id ：2</code></pre><h4 id="数据修改操作"><a href="#数据修改操作" class="headerlink" title="数据修改操作"></a>数据修改操作</h4><ol><li>数据插入</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 查询最大用户Id</span><span class="token keyword">def</span> <span class="token function">read_max_userid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 1. 建立数据库连接</span>    connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                                 user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                                 password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                                 database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                                 charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment">## 2. 创建游标对象</span>        <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            <span class="token comment">## 3. 执行SQL操作</span>            sql <span class="token operator">=</span> <span class="token string">'select max(userid) from user'</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token comment">## 4. 提取结果集</span>            row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> row <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最大用户Id ：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment">## with代码块结束 5. 关闭游标</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token comment">## 6. 关闭数据连接</span>        connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment">## 查询最大值</span>maxid <span class="token operator">=</span> read_max_userid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        sql <span class="token operator">=</span> <span class="token string">'insert into user (userid, name) values (%s,%s)'</span>        nextid <span class="token operator">=</span> maxid <span class="token operator">+</span> <span class="token number">1</span>        name <span class="token operator">=</span> <span class="token string">'Tony'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>nextid<span class="token punctuation">)</span>        affectedcount <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>nextid<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'影响的数据行数：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>affectedcount<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## 4. 提交数据库事物</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>DatabaseError<span class="token punctuation">:</span>    <span class="token comment">## 4. 回滚数据库事物</span>    connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>最大用户Id ：2影响的数据行数：1</code></pre><ol start="2"><li>数据更新</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        sql <span class="token operator">=</span> <span class="token string">'update user set name = %s where userid > %s'</span>        affectedcount <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'影响的数据行数：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>affectedcount<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## 4. 提交数据库事物</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>DatabaseError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token comment">## 4. 回滚数据库事物</span>    connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>影响的数据行数：1</code></pre><ol start="3"><li>数据删除</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 查询最大用户Id</span><span class="token keyword">def</span> <span class="token function">read_max_userid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 1. 建立数据库连接</span>    connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                                 user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                                 password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                                 database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                                 charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment">## 2. 创建游标对象</span>        <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            <span class="token comment">## 3. 执行SQL操作</span>            sql <span class="token operator">=</span> <span class="token string">'select max(userid) from user'</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token comment">## 4. 提取结果集</span>            row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> row <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最大用户Id ：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment">## with代码块结束 5. 关闭游标</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token comment">## 6. 关闭数据连接</span>        connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment">## 查询最大值</span>maxid <span class="token operator">=</span> read_max_userid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        sql <span class="token operator">=</span> <span class="token string">'delete from user where userid = %s'</span>        affectedcount <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>maxid<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'影响的数据行数：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>affectedcount<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## 4. 提交数据库事物</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>DatabaseError<span class="token punctuation">:</span>    <span class="token comment">## 4. 回滚数据库事物</span>    connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>最大用户Id ：3影响的数据行数：1</code></pre><h3 id="NoSQL数据存储"><a href="#NoSQL数据存储" class="headerlink" title="NoSQL数据存储"></a>NoSQL数据存储</h3><h4 id="dbm数据库的打开和关闭"><a href="#dbm数据库的打开和关闭" class="headerlink" title="dbm数据库的打开和关闭"></a>dbm数据库的打开和关闭</h4><p>dbm.open(file,flag&#x3D;’r’)</p><p>‘r’,’w’,’c’,’n’</p><p>with dbm.open(file,’c’) as db:</p><pre><code>pass</code></pre><h4 id="dbm数据存储"><a href="#dbm数据存储" class="headerlink" title="dbm数据存储"></a>dbm数据存储</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dbm<span class="token keyword">with</span> dbm<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydb'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span>    db<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'tony'</span>  <span class="token comment">## 更新数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 取出数据</span>    age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">b'18'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 取出数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'age'</span> <span class="token keyword">in</span> db<span class="token punctuation">:</span>  <span class="token comment">## 判断是否存在age数据</span>        db<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'20'</span>  <span class="token comment">## 或者 b'20'</span>    <span class="token keyword">del</span> db<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>  <span class="token comment">## 删除name数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tony18</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="wxPython图形用户界面编程"><a href="#wxPython图形用户界面编程" class="headerlink" title="wxPython图形用户界面编程"></a>wxPython图形用户界面编程</h2><h3 id="Python图形用户界面开发工具包"><a href="#Python图形用户界面开发工具包" class="headerlink" title="Python图形用户界面开发工具包"></a>Python图形用户界面开发工具包</h3><ul><li>Tkinter</li><li>PyQt</li><li>wxPython</li></ul><h3 id="wxPython安装"><a href="#wxPython安装" class="headerlink" title="wxPython安装"></a>wxPython安装</h3><h3 id="wxPython基础"><a href="#wxPython基础" class="headerlink" title="wxPython基础"></a>wxPython基础</h3><ul><li>窗口</li><li>控件</li><li>事件处理</li><li>布局管理</li></ul><h4 id="wxPython类层次结构"><a href="#wxPython类层次结构" class="headerlink" title="wxPython类层次结构"></a>wxPython类层次结构</h4><h4 id="第一个wxPython程序"><a href="#第一个wxPython程序" class="headerlink" title="第一个wxPython程序"></a>第一个wxPython程序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 创建应用程序对象</span>app <span class="token operator">=</span> wx<span class="token punctuation">.</span>App<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">## 创建窗口对象</span>frm <span class="token operator">=</span> wx<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第一个GUI程序!"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>frm<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 显示窗口</span>app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第一个GUI程序!"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## TODO</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">OnExit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'应用程序退出'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>应用程序退出</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第一个GUI程序!"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Hello World!'</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="wxPython界面构建层次结构"><a href="#wxPython界面构建层次结构" class="headerlink" title="wxPython界面构建层次结构"></a>wxPython界面构建层次结构</h4><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="一对一事件处理"><a href="#一对一事件处理" class="headerlink" title="一对一事件处理"></a>一对一事件处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'一对一事件处理'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'OK'</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'wx._core.CommandEvent'></span>        self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Hello, world.'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;wx._core.CommandEvent&#39;&gt;&lt;class &#39;wx._core.CommandEvent&#39;&gt;&lt;class &#39;wx._core.CommandEvent&#39;&gt;</code></pre><h4 id="一对多事件处理"><a href="#一对多事件处理" class="headerlink" title="一对多事件处理"></a>一对多事件处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'一对多事件处理'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1'</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button2'</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## self.Bind(wx.EVT_BUTTON, self.on_click, b1)</span>        <span class="token comment">## self.Bind(wx.EVT_BUTTON, self.on_click, id=11)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>event_id<span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button2单击'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1011101110111011</code></pre><h4 id="示例：鼠标事件处理"><a href="#示例：鼠标事件处理" class="headerlink" title="示例：鼠标事件处理"></a>示例：鼠标事件处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"鼠标事件处理"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LEFT_DOWN<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_left_down<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LEFT_UP<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_left_up<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_MOTION<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_mouse_move<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_left_down</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'鼠标按下'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_left_up</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'鼠标释放'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_mouse_move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>Dragging<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> event<span class="token punctuation">.</span>LeftIsDown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pos <span class="token operator">=</span> event<span class="token punctuation">.</span>GetPosition<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>鼠标按下鼠标释放鼠标按下鼠标释放鼠标按下鼠标释放鼠标按下(129, 99)鼠标释放鼠标按下鼠标释放鼠标按下鼠标释放鼠标按下(58, 114)(60, 115)(61, 116)(62, 117)(63, 117)(64, 117)(66, 118)(67, 119)(69, 119)(73, 119)(79, 119)鼠标释放鼠标按下鼠标释放鼠标按下(81, 169)(75, 170)(72, 170)(68, 171)(65, 171)(63, 171)(61, 171)(60, 171)鼠标释放鼠标按下鼠标释放鼠标按下鼠标释放鼠标按下(201, 55)(202, 55)(204, 57)(206, 59)(208, 61)(211, 63)(214, 65)(217, 68)(221, 71)(224, 74)(228, 77)(232, 80)(235, 83)(239, 85)(241, 87)(243, 88)(245, 89)(246, 91)(249, 92)(251, 92)(252, 93)(253, 93)(254, 93)(255, 93)(256, 93)(257, 94)(259, 94)(260, 94)(261, 94)(262, 94)(264, 94)(265, 94)(266, 94)(267, 94)(269, 94)(270, 94)(272, 94)(273, 94)(275, 94)(276, 94)(277, 94)(277, 93)(278, 92)(279, 91)(279, 90)(279, 89)(279, 88)(279, 87)(280, 86)(280, 85)(280, 84)(280, 83)(279, 83)(278, 84)(277, 85)(274, 87)(272, 88)(268, 91)(264, 94)(259, 97)(253, 102)(247, 107)(240, 111)(233, 116)(227, 120)(222, 123)(219, 125)(215, 128)(211, 131)(207, 133)(201, 135)(197, 137)(194, 138)(190, 139)(186, 140)(184, 141)(180, 141)(177, 141)(175, 141)(171, 141)(169, 141)(166, 140)(162, 139)(158, 137)(154, 135)(153, 133)(149, 131)(143, 127)(138, 123)(133, 120)(129, 116)(125, 113)(121, 108)(117, 104)(114, 100)(112, 97)(111, 94)(108, 88)(106, 84)(105, 80)(105, 77)(105, 73)(105, 70)(106, 67)(107, 63)(108, 61)(110, 58)(112, 55)(114, 53)(116, 51)(119, 48)(122, 46)(125, 44)(128, 43)(132, 41)(135, 40)(140, 39)(145, 38)(150, 38)(155, 37)(161, 37)(166, 37)(171, 37)(175, 37)(179, 37)(181, 37)(185, 38)(189, 40)(191, 41)(194, 43)(197, 45)(200, 47)(202, 48)(205, 50)(208, 52)(209, 55)(212, 57)(214, 59)(216, 62)(217, 65)(219, 67)(221, 70)(222, 73)(224, 75)(224, 78)(224, 79)(224, 81)(224, 83)(224, 86)(224, 88)(224, 90)(224, 92)(224, 94)(223, 96)(222, 99)(220, 100)(219, 102)(216, 104)(213, 107)(209, 109)(205, 111)(201, 113)(196, 114)(191, 115)(187, 115)(182, 116)(179, 116)(174, 116)(167, 116)(163, 116)(158, 116)(153, 116)(149, 116)(145, 115)(143, 114)(139, 113)(135, 111)(132, 110)(130, 108)(128, 107)(126, 106)(125, 105)(123, 103)(122, 102)(120, 100)(118, 96)(116, 92)(115, 87)(115, 83)(114, 79)(114, 76)(114, 72)(115, 68)(116, 65)(117, 63)(119, 59)(122, 55)(125, 52)(128, 48)(134, 45)(138, 42)(145, 39)(153, 37)(162, 34)(168, 34)(181, 34)(191, 34)(200, 34)(210, 35)(218, 37)(228, 41)(237, 45)(246, 50)(253, 54)(259, 59)(265, 64)(270, 69)(276, 74)(281, 80)(283, 84)(286, 91)(288, 96)(292, 103)(293, 107)(294, 112)(294, 116)(294, 121)(294, 124)(294, 127)(294, 129)(292, 132)(291, 135)(291, 137)(289, 139)(287, 142)(284, 144)(283, 145)(280, 147)(277, 149)(276, 150)(273, 151)(269, 153)(264, 153)(259, 154)(254, 154)(249, 154)(244, 154)(237, 152)(232, 151)(228, 150)(223, 147)(216, 145)(212, 142)(206, 138)(203, 135)(200, 133)(198, 130)(195, 127)(194, 123)(192, 122)(192, 118)(191, 116)(191, 112)(191, 109)(192, 106)(193, 104)(195, 101)(196, 100)(198, 98)(200, 96)(201, 95)(203, 95)(206, 94)(208, 93)(211, 93)(214, 93)(216, 93)(219, 94)(221, 94)(223, 96)(226, 99)(229, 102)(232, 107)(237, 113)(240, 119)(242, 126)(245, 131)(247, 136)(247, 140)(247, 145)(247, 150)(247, 153)(246, 157)(243, 161)(240, 165)(237, 168)(233, 171)(227, 175)(223, 177)(214, 180)(203, 182)(190, 182)(178, 182)(166, 182)(152, 181)(139, 180)(126, 177)(113, 175)(105, 171)(96, 167)(91, 165)(87, 163)(85, 163)(85, 162)(84, 161)(84, 160)(83, 158)鼠标释放</code></pre><h3 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h3><h4 id="Box布局器"><a href="#Box布局器" class="headerlink" title="Box布局器"></a>Box布局器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Box布局'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        <span class="token comment">## 创建垂直方向Box布局管理器对象</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token comment">## 添加静态文本到Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statictext<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>FIXED_MINSIZE <span class="token operator">|</span> wx<span class="token punctuation">.</span>TOP <span class="token operator">|</span> wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1'</span><span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button2'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token comment">## 创建水平方向的Box布局管理器对象</span>        hbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        <span class="token comment">## 添加b1到水平Box布局管理</span>        hbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">## 添加b2到水平Box布局管理</span>        hbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">## 将水平Box布局管理器到垂直Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>event_id<span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button2单击'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1011101110111011</code></pre><h4 id="StaticBox布局"><a href="#StaticBox布局" class="headerlink" title="StaticBox布局"></a>StaticBox布局</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'StaticBox布局'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        <span class="token comment">## 创建垂直方向的Box布局管理器对象</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token comment">## 添加静态文本到Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statictext<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>FIXED_MINSIZE <span class="token operator">|</span> wx<span class="token punctuation">.</span>TOP <span class="token operator">|</span> wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1'</span><span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button2'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token comment">## 创建静态框对象</span>        sb <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"按钮框"</span><span class="token punctuation">)</span>        <span class="token comment">## 创建水平方向的StaticBox布局管理器</span>        hsbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticBoxSizer<span class="token punctuation">(</span>sb<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        <span class="token comment">## 添加b1到水平StaticBox布局管理</span>        hsbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">## 添加b2到水平StaticBox布局管理</span>        hsbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">## 添加hbox到vbox</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hsbox<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>event_id<span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button2单击'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>111011</code></pre><h4 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Grid布局'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        btn1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>        btn2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">)</span>        btn3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">)</span>        btn4 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'4'</span><span class="token punctuation">)</span>        btn5 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'5'</span><span class="token punctuation">)</span>        btn6 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'6'</span><span class="token punctuation">)</span>        btn7 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'7'</span><span class="token punctuation">)</span>        btn8 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'8'</span><span class="token punctuation">)</span>        btn9 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'9'</span><span class="token punctuation">)</span>        grid <span class="token operator">=</span> wx<span class="token punctuation">.</span>GridSizer<span class="token punctuation">(</span>cols<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> rows<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> vgap<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> hgap<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">## grid.AddMany([</span>        <span class="token comment">##     (btn1, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn2, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn3, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn4, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn5, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn6, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn7, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn8, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn9, 0, wx.EXPAND)</span>        <span class="token comment">## ])</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn5<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn6<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn7<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn9<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FlexGrid布局"><a href="#FlexGrid布局" class="headerlink" title="FlexGrid布局"></a>FlexGrid布局</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'FlexGrid布局'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        fgs <span class="token operator">=</span> wx<span class="token punctuation">.</span>FlexGridSizer<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"标题："</span><span class="token punctuation">)</span>        author <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"作者名："</span><span class="token punctuation">)</span>        review <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"内容："</span><span class="token punctuation">)</span>        tc1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">)</span>        tc2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">)</span>        tc3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddMany<span class="token punctuation">(</span><span class="token punctuation">[</span>title<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">,</span>                     author<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">,</span>                     review<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableCol<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableCol<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        hbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        hbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>fgs<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>hbox<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wxPython控件"><a href="#wxPython控件" class="headerlink" title="wxPython控件"></a>wxPython控件</h3><h4 id="静态文本和按钮"><a href="#静态文本和按钮" class="headerlink" title="静态文本和按钮"></a>静态文本和按钮</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'静态文本和按钮'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        <span class="token comment">## 创建垂直方向的Box布局管理器</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'StaticText1'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALIGN_CENTRE_HORIZONTAL<span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'OK'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ToggleButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'ToggleButton'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> b2<span class="token punctuation">)</span>        bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">'icon/1.png'</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>BITMAP_TYPE_PNG<span class="token punctuation">)</span>        b3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BitmapButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> bmp<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> b3<span class="token punctuation">)</span>        <span class="token comment">## 添加静态文本和按钮到Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statictext<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b2<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b3<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Hello, world.'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文本输入控件"><a href="#文本输入控件" class="headerlink" title="文本输入控件"></a>文本输入控件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'文本框'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        hbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        fgs <span class="token operator">=</span> wx<span class="token punctuation">.</span>FlexGridSizer<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        userid <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"用户ID："</span><span class="token punctuation">)</span>        pwd <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"密码："</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"多行文本："</span><span class="token punctuation">)</span>        tc1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">)</span>        tc2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>TE_PASSWORD<span class="token punctuation">)</span>        tc3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        <span class="token comment">## 设置tc1初始值</span>        tc1<span class="token punctuation">.</span>SetValue<span class="token punctuation">(</span><span class="token string">'tony'</span><span class="token punctuation">)</span>        <span class="token comment">## 获取tc1值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取用户ID：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>tc1<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddMany<span class="token punctuation">(</span><span class="token punctuation">[</span>userid<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">,</span>                     pwd<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">,</span>                     content<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableCol<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableCol<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        hbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>fgs<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>hbox<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>读取用户ID：tony</code></pre><h4 id="复选框和单选按钮"><a href="#复选框和单选按钮" class="headerlink" title="复选框和单选按钮"></a>复选框和单选按钮</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'复选框和单选按钮'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        hbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你喜欢的编程语言：'</span><span class="token punctuation">)</span>        cb1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>CheckBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>        cb2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>CheckBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Java'</span><span class="token punctuation">)</span>        cb2<span class="token punctuation">.</span>SetValue<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        cb3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>CheckBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'C++'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_CHECKBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_checkbox_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>cb1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>cb2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>cb3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择性别：'</span><span class="token punctuation">)</span>        radio1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>RB_GROUP<span class="token punctuation">)</span>        radio2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_RADIOBUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_radio1_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你最喜欢吃的水果：'</span><span class="token punctuation">)</span>        radio3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>RB_GROUP<span class="token punctuation">)</span>        radio4 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'橘子'</span><span class="token punctuation">)</span>        radio5 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'香蕉'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_RADIOBUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_radio2_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>        hbox3<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox3<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox3<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio4<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox3<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio5<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_checkbox_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        cb <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;，状态&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span>GetLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>IsChecked<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_radio1_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        rb <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一组 &#123;0&#125; 被选中'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span>GetLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_radio2_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        rb <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二组 &#123;0&#125; 被选中'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span>GetLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>第二组 橘子 被选中第二组 香蕉 被选中第一组 女 被选中选择 C++，状态True选择 Python，状态True</code></pre><h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'下拉列表'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        hbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你喜欢的编程语言：'</span><span class="token punctuation">)</span>        list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'C++'</span><span class="token punctuation">,</span> <span class="token string">'Java'</span><span class="token punctuation">]</span>        ch1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ComboBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'C'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list1<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>CB_SORT<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_COMBOBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_combobox<span class="token punctuation">,</span> ch1<span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>ch1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择性别：'</span><span class="token punctuation">)</span>        list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">]</span>        ch2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Choice<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_CHOICE<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_choice<span class="token punctuation">,</span> ch2<span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>ch2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_combobox</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_choice</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>选择 Java</code></pre><h4 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'下拉列表'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        hbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你喜欢的编程语言：'</span><span class="token punctuation">)</span>        list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'C++'</span><span class="token punctuation">,</span> <span class="token string">'Java'</span><span class="token punctuation">]</span>        lb1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ListBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list1<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>LB_SINGLE<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LISTBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_listbox1<span class="token punctuation">,</span> lb1<span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>lb1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你喜欢吃的水果：'</span><span class="token punctuation">)</span>        list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> <span class="token string">'香蕉'</span><span class="token punctuation">]</span>        lb2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ListBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list2<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>LB_EXTENDED<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LISTBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_listbox2<span class="token punctuation">,</span> lb2<span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>lb2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_listbox1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        listbox <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>listbox<span class="token punctuation">.</span>GetSelection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_listbox2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        listbox <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>listbox<span class="token punctuation">.</span>GetSelections<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>选择 1选择 2</code></pre><h4 id="静态图片控件"><a href="#静态图片控件" class="headerlink" title="静态图片控件"></a>静态图片控件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'静态图片控件'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bmps <span class="token operator">=</span> <span class="token punctuation">[</span>wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">'images/bird5.gif'</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>BITMAP_TYPE_GIF<span class="token punctuation">)</span><span class="token punctuation">,</span>                     wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">'images/bird4.gif'</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>BITMAP_TYPE_GIF<span class="token punctuation">)</span><span class="token punctuation">,</span>                     wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">'images/bird3.gif'</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>BITMAP_TYPE_GIF<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        <span class="token comment">## 创建垂直方向的Box布局管理器</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1'</span><span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button2'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>image <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticBitmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>bmps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">## 添加标控件到Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b2<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>image<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>image<span class="token punctuation">.</span>SetBitmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bmps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>image<span class="token punctuation">.</span>SetBitmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bmps<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>panel<span class="token punctuation">.</span>Layout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高级窗口"><a href="#高级窗口" class="headerlink" title="高级窗口"></a>高级窗口</h3><h4 id="分隔窗口"><a href="#分隔窗口" class="headerlink" title="分隔窗口"></a>分隔窗口</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'分隔窗口'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        splitter <span class="token operator">=</span> wx<span class="token punctuation">.</span>SplitterWindow<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        leftpanel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>splitter<span class="token punctuation">)</span>        rightpanel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>splitter<span class="token punctuation">)</span>        splitter<span class="token punctuation">.</span>SplitVertically<span class="token punctuation">(</span>leftpanel<span class="token punctuation">,</span> rightpanel<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        splitter<span class="token punctuation">.</span>SetMinimumPaneSize<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>        list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> <span class="token string">'香蕉'</span><span class="token punctuation">]</span>        lb2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ListBox<span class="token punctuation">(</span>leftpanel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list2<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>LB_SINGLE<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LISTBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_listbox<span class="token punctuation">,</span> lb2<span class="token punctuation">)</span>        vbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>lb2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        leftpanel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox1<span class="token punctuation">)</span>        vbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>rightpanel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'右侧面板'</span><span class="token punctuation">)</span>        vbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        rightpanel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox2<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_listbox</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用树"><a href="#使用树" class="headerlink" title="使用树"></a>使用树</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'树控件'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        splitter <span class="token operator">=</span> wx<span class="token punctuation">.</span>SplitterWindow<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        leftpanel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>splitter<span class="token punctuation">)</span>        rightpanel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>splitter<span class="token punctuation">)</span>        splitter<span class="token punctuation">.</span>SplitVertically<span class="token punctuation">(</span>leftpanel<span class="token punctuation">,</span> rightpanel<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        splitter<span class="token punctuation">.</span>SetMinimumPaneSize<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tree <span class="token operator">=</span> self<span class="token punctuation">.</span>CreateTreeCtrl<span class="token punctuation">(</span>leftpanel<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_TREE_SEL_CHANGING<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">)</span>        vbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        leftpanel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox1<span class="token punctuation">)</span>        vbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>rightpanel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'右侧面板'</span><span class="token punctuation">)</span>        vbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        rightpanel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox2<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> event<span class="token punctuation">.</span>GetItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>GetItemText<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">CreateTreeCtrl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">:</span>        tree <span class="token operator">=</span> wx<span class="token punctuation">.</span>TreeCtrl<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        imglist <span class="token operator">=</span> wx<span class="token punctuation">.</span>ImageList<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        imglist<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_FOLDER<span class="token punctuation">,</span> size<span class="token operator">=</span>wx<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        imglist<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_NORMAL_FILE<span class="token punctuation">,</span> size<span class="token operator">=</span>wx<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        tree<span class="token punctuation">.</span>AssignImageList<span class="token punctuation">(</span>imglist<span class="token punctuation">)</span>        root <span class="token operator">=</span> tree<span class="token punctuation">.</span>AddRoot<span class="token punctuation">(</span><span class="token string">"TreeRoot"</span><span class="token punctuation">,</span> image<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 1"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 2"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 3"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 4"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 5"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ii <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">id</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>ii<span class="token punctuation">]</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 2"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 3"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 4"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 5"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        tree<span class="token punctuation">.</span>Expand<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">## 展开根下子节点</span>        tree<span class="token punctuation">.</span>Expand<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">## 展开Item 1下子节点</span>        tree<span class="token punctuation">.</span>Expand<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">## 展开Item 4下子节点</span>        tree<span class="token punctuation">.</span>SelectItem<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">## 选中根节点</span>        <span class="token keyword">return</span> tree<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用网络"><a href="#使用网络" class="headerlink" title="使用网络"></a>使用网络</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token keyword">import</span> wx<span class="token punctuation">.</span>griddata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'0036'</span><span class="token punctuation">,</span> <span class="token string">'高等数学'</span><span class="token punctuation">,</span> <span class="token string">'李放'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000812'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0004'</span><span class="token punctuation">,</span> <span class="token string">'FLASH精选'</span><span class="token punctuation">,</span> <span class="token string">'刘扬'</span><span class="token punctuation">,</span> <span class="token string">'中国纺织出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990312'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0026'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'牛田'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0015'</span><span class="token punctuation">,</span> <span class="token string">'人工智能'</span><span class="token punctuation">,</span> <span class="token string">'周未'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991223'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0037'</span><span class="token punctuation">,</span> <span class="token string">'南方周末'</span><span class="token punctuation">,</span> <span class="token string">'邓光明'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000923'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0008'</span><span class="token punctuation">,</span> <span class="token string">'新概念3'</span><span class="token punctuation">,</span> <span class="token string">'余智'</span><span class="token punctuation">,</span> <span class="token string">'外语出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990723'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0019'</span><span class="token punctuation">,</span> <span class="token string">'通讯与网络'</span><span class="token punctuation">,</span> <span class="token string">'欧阳杰'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000517'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0014'</span><span class="token punctuation">,</span> <span class="token string">'期货分析'</span><span class="token punctuation">,</span> <span class="token string">'孙宝'</span><span class="token punctuation">,</span> <span class="token string">'飞鸟出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991122'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0023'</span><span class="token punctuation">,</span> <span class="token string">'经济概论'</span><span class="token punctuation">,</span> <span class="token string">'思佳'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000819'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0017'</span><span class="token punctuation">,</span> <span class="token string">'计算机理论基础'</span><span class="token punctuation">,</span> <span class="token string">'戴家'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000218'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0002'</span><span class="token punctuation">,</span> <span class="token string">'汇编语言'</span><span class="token punctuation">,</span> <span class="token string">'李利光'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980318'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0033'</span><span class="token punctuation">,</span> <span class="token string">'模拟电路'</span><span class="token punctuation">,</span> <span class="token string">'邓英才'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000527'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0011'</span><span class="token punctuation">,</span> <span class="token string">'南方旅游'</span><span class="token punctuation">,</span> <span class="token string">'王爱国'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990930'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0039'</span><span class="token punctuation">,</span> <span class="token string">'黑幕'</span><span class="token punctuation">,</span> <span class="token string">'李仪'</span><span class="token punctuation">,</span> <span class="token string">'华光出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000508'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0001'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'戴国强'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980528'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0034'</span><span class="token punctuation">,</span> <span class="token string">'集邮爱好者'</span><span class="token punctuation">,</span> <span class="token string">'李云'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000630'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0031'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'戴志名'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000324'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0030'</span><span class="token punctuation">,</span> <span class="token string">'数据库及应用'</span><span class="token punctuation">,</span> <span class="token string">'孙家萧'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000619'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0024'</span><span class="token punctuation">,</span> <span class="token string">'经济与科学'</span><span class="token punctuation">,</span> <span class="token string">'毛波'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000923'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0009'</span><span class="token punctuation">,</span> <span class="token string">'军事要闻'</span><span class="token punctuation">,</span> <span class="token string">'张强'</span><span class="token punctuation">,</span> <span class="token string">'解放军出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990722'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0003'</span><span class="token punctuation">,</span> <span class="token string">'计算机基础'</span><span class="token punctuation">,</span> <span class="token string">'王飞'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980218'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0020'</span><span class="token punctuation">,</span> <span class="token string">'现代操作系统'</span><span class="token punctuation">,</span> <span class="token string">'王小国'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20010128'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0025'</span><span class="token punctuation">,</span> <span class="token string">'计算机体系结构'</span><span class="token punctuation">,</span> <span class="token string">'方丹'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0010'</span><span class="token punctuation">,</span> <span class="token string">'大众生活'</span><span class="token punctuation">,</span> <span class="token string">'许阳'</span><span class="token punctuation">,</span> <span class="token string">'电子出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990819'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0021'</span><span class="token punctuation">,</span> <span class="token string">'网络基础'</span><span class="token punctuation">,</span> <span class="token string">'王大尉'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000617'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0006'</span><span class="token punctuation">,</span> <span class="token string">'世界杯'</span><span class="token punctuation">,</span> <span class="token string">'柳飞'</span><span class="token punctuation">,</span> <span class="token string">'世界出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990412'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0028'</span><span class="token punctuation">,</span> <span class="token string">'高级语言程序设计'</span><span class="token punctuation">,</span> <span class="token string">'寇国华'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000117'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0038'</span><span class="token punctuation">,</span> <span class="token string">'十大旅游胜地'</span><span class="token punctuation">,</span> <span class="token string">'潭晓明'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000403'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0018'</span><span class="token punctuation">,</span> <span class="token string">'编译原理'</span><span class="token punctuation">,</span> <span class="token string">'郑键'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000415'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0007'</span><span class="token punctuation">,</span> <span class="token string">'JAVA程序设计'</span><span class="token punctuation">,</span> <span class="token string">'张余'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990613'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0013'</span><span class="token punctuation">,</span> <span class="token string">'幽灵'</span><span class="token punctuation">,</span> <span class="token string">'钱力华'</span><span class="token punctuation">,</span> <span class="token string">'华光出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991008'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0022'</span><span class="token punctuation">,</span> <span class="token string">'万紫千红'</span><span class="token punctuation">,</span> <span class="token string">'丛丽'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000702'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0027'</span><span class="token punctuation">,</span> <span class="token string">'世界语言大观'</span><span class="token punctuation">,</span> <span class="token string">'候丙辉'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000814'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0029'</span><span class="token punctuation">,</span> <span class="token string">'操作系统概论'</span><span class="token punctuation">,</span> <span class="token string">'聂元名'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20001028'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0016'</span><span class="token punctuation">,</span> <span class="token string">'数据库系统概念'</span><span class="token punctuation">,</span> <span class="token string">'吴红'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0005'</span><span class="token punctuation">,</span> <span class="token string">'java基础'</span><span class="token punctuation">,</span> <span class="token string">'王一'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990528'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0032'</span><span class="token punctuation">,</span> <span class="token string">'SQL使用手册'</span><span class="token punctuation">,</span> <span class="token string">'贺民'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990425'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'书籍编号'</span><span class="token punctuation">,</span> <span class="token string">'书籍名称'</span><span class="token punctuation">,</span> <span class="token string">'作者'</span><span class="token punctuation">,</span> <span class="token string">'出版社'</span><span class="token punctuation">,</span> <span class="token string">'出版日期'</span><span class="token punctuation">,</span> <span class="token string">'库存数量'</span><span class="token punctuation">]</span><span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'网格控件'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>grid <span class="token operator">=</span> self<span class="token punctuation">.</span>CreateGrid<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>EVT_GRID_LABEL_LEFT_CLICK<span class="token punctuation">,</span> self<span class="token punctuation">.</span>OnLabelLeftClick<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">OnLabelLeftClick</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RowIdx：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ColIdx：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetCol<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>event<span class="token punctuation">.</span>GetRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>Skip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">CreateGrid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">:</span>        grid <span class="token operator">=</span> wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>Grid<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>CreateGrid<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                grid<span class="token punctuation">.</span>SetColLabelValue<span class="token punctuation">(</span>col<span class="token punctuation">,</span> column_names<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>                grid<span class="token punctuation">.</span>SetCellValue<span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">## 设置行和列自定调整</span>        grid<span class="token punctuation">.</span>AutoSize<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> grid<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token keyword">import</span> wx<span class="token punctuation">.</span>griddata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'0036'</span><span class="token punctuation">,</span> <span class="token string">'高等数学'</span><span class="token punctuation">,</span> <span class="token string">'李放'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000812'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0004'</span><span class="token punctuation">,</span> <span class="token string">'FLASH精选'</span><span class="token punctuation">,</span> <span class="token string">'刘扬'</span><span class="token punctuation">,</span> <span class="token string">'中国纺织出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990312'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0026'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'牛田'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0015'</span><span class="token punctuation">,</span> <span class="token string">'人工智能'</span><span class="token punctuation">,</span> <span class="token string">'周未'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991223'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0037'</span><span class="token punctuation">,</span> <span class="token string">'南方周末'</span><span class="token punctuation">,</span> <span class="token string">'邓光明'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000923'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0008'</span><span class="token punctuation">,</span> <span class="token string">'新概念3'</span><span class="token punctuation">,</span> <span class="token string">'余智'</span><span class="token punctuation">,</span> <span class="token string">'外语出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990723'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0019'</span><span class="token punctuation">,</span> <span class="token string">'通讯与网络'</span><span class="token punctuation">,</span> <span class="token string">'欧阳杰'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000517'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0014'</span><span class="token punctuation">,</span> <span class="token string">'期货分析'</span><span class="token punctuation">,</span> <span class="token string">'孙宝'</span><span class="token punctuation">,</span> <span class="token string">'飞鸟出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991122'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0023'</span><span class="token punctuation">,</span> <span class="token string">'经济概论'</span><span class="token punctuation">,</span> <span class="token string">'思佳'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000819'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0017'</span><span class="token punctuation">,</span> <span class="token string">'计算机理论基础'</span><span class="token punctuation">,</span> <span class="token string">'戴家'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000218'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0002'</span><span class="token punctuation">,</span> <span class="token string">'汇编语言'</span><span class="token punctuation">,</span> <span class="token string">'李利光'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980318'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0033'</span><span class="token punctuation">,</span> <span class="token string">'模拟电路'</span><span class="token punctuation">,</span> <span class="token string">'邓英才'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000527'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0011'</span><span class="token punctuation">,</span> <span class="token string">'南方旅游'</span><span class="token punctuation">,</span> <span class="token string">'王爱国'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990930'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0039'</span><span class="token punctuation">,</span> <span class="token string">'黑幕'</span><span class="token punctuation">,</span> <span class="token string">'李仪'</span><span class="token punctuation">,</span> <span class="token string">'华光出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000508'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0001'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'戴国强'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980528'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0034'</span><span class="token punctuation">,</span> <span class="token string">'集邮爱好者'</span><span class="token punctuation">,</span> <span class="token string">'李云'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000630'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0031'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'戴志名'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000324'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0030'</span><span class="token punctuation">,</span> <span class="token string">'数据库及应用'</span><span class="token punctuation">,</span> <span class="token string">'孙家萧'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000619'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0024'</span><span class="token punctuation">,</span> <span class="token string">'经济与科学'</span><span class="token punctuation">,</span> <span class="token string">'毛波'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000923'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0009'</span><span class="token punctuation">,</span> <span class="token string">'军事要闻'</span><span class="token punctuation">,</span> <span class="token string">'张强'</span><span class="token punctuation">,</span> <span class="token string">'解放军出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990722'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0003'</span><span class="token punctuation">,</span> <span class="token string">'计算机基础'</span><span class="token punctuation">,</span> <span class="token string">'王飞'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980218'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0020'</span><span class="token punctuation">,</span> <span class="token string">'现代操作系统'</span><span class="token punctuation">,</span> <span class="token string">'王小国'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20010128'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0025'</span><span class="token punctuation">,</span> <span class="token string">'计算机体系结构'</span><span class="token punctuation">,</span> <span class="token string">'方丹'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0010'</span><span class="token punctuation">,</span> <span class="token string">'大众生活'</span><span class="token punctuation">,</span> <span class="token string">'许阳'</span><span class="token punctuation">,</span> <span class="token string">'电子出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990819'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0021'</span><span class="token punctuation">,</span> <span class="token string">'网络基础'</span><span class="token punctuation">,</span> <span class="token string">'王大尉'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000617'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0006'</span><span class="token punctuation">,</span> <span class="token string">'世界杯'</span><span class="token punctuation">,</span> <span class="token string">'柳飞'</span><span class="token punctuation">,</span> <span class="token string">'世界出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990412'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0028'</span><span class="token punctuation">,</span> <span class="token string">'高级语言程序设计'</span><span class="token punctuation">,</span> <span class="token string">'寇国华'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000117'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0038'</span><span class="token punctuation">,</span> <span class="token string">'十大旅游胜地'</span><span class="token punctuation">,</span> <span class="token string">'潭晓明'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000403'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0018'</span><span class="token punctuation">,</span> <span class="token string">'编译原理'</span><span class="token punctuation">,</span> <span class="token string">'郑键'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000415'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0007'</span><span class="token punctuation">,</span> <span class="token string">'JAVA程序设计'</span><span class="token punctuation">,</span> <span class="token string">'张余'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990613'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0013'</span><span class="token punctuation">,</span> <span class="token string">'幽灵'</span><span class="token punctuation">,</span> <span class="token string">'钱力华'</span><span class="token punctuation">,</span> <span class="token string">'华光出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991008'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0022'</span><span class="token punctuation">,</span> <span class="token string">'万紫千红'</span><span class="token punctuation">,</span> <span class="token string">'丛丽'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000702'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0027'</span><span class="token punctuation">,</span> <span class="token string">'世界语言大观'</span><span class="token punctuation">,</span> <span class="token string">'候丙辉'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000814'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0029'</span><span class="token punctuation">,</span> <span class="token string">'操作系统概论'</span><span class="token punctuation">,</span> <span class="token string">'聂元名'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20001028'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0016'</span><span class="token punctuation">,</span> <span class="token string">'数据库系统概念'</span><span class="token punctuation">,</span> <span class="token string">'吴红'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0005'</span><span class="token punctuation">,</span> <span class="token string">'java基础'</span><span class="token punctuation">,</span> <span class="token string">'王一'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990528'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0032'</span><span class="token punctuation">,</span> <span class="token string">'SQL使用手册'</span><span class="token punctuation">,</span> <span class="token string">'贺民'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990425'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'书籍编号'</span><span class="token punctuation">,</span> <span class="token string">'书籍名称书籍名称'</span><span class="token punctuation">,</span> <span class="token string">'作者'</span><span class="token punctuation">,</span> <span class="token string">'出版社'</span><span class="token punctuation">,</span> <span class="token string">'出版日期'</span><span class="token punctuation">,</span> <span class="token string">'库存数量'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MyGridTable</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>GridTableBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>colLabels <span class="token operator">=</span> column_names    <span class="token keyword">def</span> <span class="token function">GetNumberRows</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GetNumberCols</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">GetColLabelValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>colLabels<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'网格控件'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>grid <span class="token operator">=</span> self<span class="token punctuation">.</span>CreateGrid<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>EVT_GRID_LABEL_LEFT_CLICK<span class="token punctuation">,</span> self<span class="token punctuation">.</span>OnLabelLeftClick<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">OnLabelLeftClick</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RowIdx：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ColIdx：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetCol<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>event<span class="token punctuation">.</span>GetRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>Skip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">CreateGrid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">:</span>        grid <span class="token operator">=</span> wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>Grid<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        tablebase <span class="token operator">=</span> MyGridTable<span class="token punctuation">(</span><span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>SetTable<span class="token punctuation">(</span>tablebase<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment">## 设置行和列自定调整</span>        grid<span class="token punctuation">.</span>AutoSize<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> grid<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用菜单"><a href="#使用菜单" class="headerlink" title="使用菜单"></a>使用菜单</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token keyword">import</span> wx<span class="token punctuation">.</span>grid<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'使用菜单'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>                self<span class="token punctuation">.</span>text <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>        menubar <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuBar<span class="token punctuation">(</span><span class="token punctuation">)</span>        file_menu <span class="token operator">=</span> wx<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>file_menu<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ID_NEW<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"新建"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_MENU<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_newitem_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span>wx<span class="token punctuation">.</span>ID_NEW<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>new_item<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>AppendSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        edit_menu <span class="token operator">=</span> wx<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        copy_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"复制"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>copy_item<span class="token punctuation">)</span>        cut_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"剪切"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>cut_item<span class="token punctuation">)</span>        paste_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"粘贴"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>paste_item<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_MENU<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_editmenu_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ID_ANY<span class="token punctuation">,</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span> edit_menu<span class="token punctuation">)</span>        menubar<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>file_menu<span class="token punctuation">,</span> <span class="token string">'文件'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>SetMenuBar<span class="token punctuation">(</span>menubar<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_newitem_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【新建】菜单'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_editmenu_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【复制】菜单'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event_id <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【剪切】菜单'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【粘贴】菜单'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_21396\3458874188.py:36: DeprecationWarning: Menu.Append() is deprecated  file_menu.Append(wx.ID_ANY, &quot;编辑&quot;, edit_menu)</code></pre><h3 id="使用工具栏"><a href="#使用工具栏" class="headerlink" title="使用工具栏"></a>使用工具栏</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token keyword">import</span> wx<span class="token punctuation">.</span>grid<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'使用工具栏'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>text <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>        menubar <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuBar<span class="token punctuation">(</span><span class="token punctuation">)</span>        file_menu <span class="token operator">=</span> wx<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>file_menu<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ID_NEW<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"新建"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>new_item<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>AppendSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        edit_menu <span class="token operator">=</span> wx<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        copy_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"复制"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>copy_item<span class="token punctuation">)</span>        cut_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"剪切"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>cut_item<span class="token punctuation">)</span>        paste_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"粘贴"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>paste_item<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ID_ANY<span class="token punctuation">,</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span> edit_menu<span class="token punctuation">)</span>        menubar<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>file_menu<span class="token punctuation">,</span> <span class="token string">'文件'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>SetMenuBar<span class="token punctuation">(</span>menubar<span class="token punctuation">)</span>        tb <span class="token operator">=</span> wx<span class="token punctuation">.</span>ToolBar<span class="token punctuation">(</span>self<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ID_ANY<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ToolBar <span class="token operator">=</span> tb        tsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>        new_bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_NEW<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ART_TOOLBAR<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span>        open_bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_FILE_OPEN<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ART_TOOLBAR<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span>        copy_bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_COPY<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ART_TOOLBAR<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span>        paste_bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_PASTE<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ART_TOOLBAR<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"New"</span><span class="token punctuation">,</span> new_bmp<span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"New"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"Open"</span><span class="token punctuation">,</span> open_bmp<span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Open"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Copy"</span><span class="token punctuation">,</span> copy_bmp<span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Copy"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"Paste"</span><span class="token punctuation">,</span> paste_bmp<span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Paste"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">"back"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">"menu_icon/back.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Back"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">202</span><span class="token punctuation">,</span> <span class="token string">"forward"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">"menu_icon/forward.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Forward"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_MENU<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">202</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>Realize<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【Back】按钮'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【Forward】按钮'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_24844\2637029235.py:34: DeprecationWarning: Menu.Append() is deprecated  file_menu.Append(wx.ID_ANY, &quot;编辑&quot;, edit_menu)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="项目实战1：网络爬虫余爬取股票数据"><a href="#项目实战1：网络爬虫余爬取股票数据" class="headerlink" title="项目实战1：网络爬虫余爬取股票数据"></a>项目实战1：网络爬虫余爬取股票数据</h2><h3 id="网络爬虫基数概述"><a href="#网络爬虫基数概述" class="headerlink" title="网络爬虫基数概述"></a>网络爬虫基数概述</h3><h4 id="网络通信技术"><a href="#网络通信技术" class="headerlink" title="网络通信技术"></a>网络通信技术</h4><h4 id="多线程技术"><a href="#多线程技术" class="headerlink" title="多线程技术"></a>多线程技术</h4><h4 id="数据交换技术"><a href="#数据交换技术" class="headerlink" title="数据交换技术"></a>数据交换技术</h4><h4 id="web前端技术"><a href="#web前端技术" class="headerlink" title="web前端技术"></a>web前端技术</h4><h4 id="数据存储技术"><a href="#数据存储技术" class="headerlink" title="数据存储技术"></a>数据存储技术</h4><h3 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h3><h4 id="网页中静态和动态数据"><a href="#网页中静态和动态数据" class="headerlink" title="网页中静态和动态数据"></a>网页中静态和动态数据</h4><h4 id="使用urllib爬取数据"><a href="#使用urllib爬取数据" class="headerlink" title="使用urllib爬取数据"></a>使用urllib爬取数据</h4><ol><li>获得静态数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">"file:///C:/Users/HP/nasdaq-Apple1.html"</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>!doctype html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Generator"</span> content<span class="token operator">=</span><span class="token string">"EditPlus®"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Author"</span> content<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Keywords"</span> content<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Description"</span> content<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"quotes_content_left_pnlAJAX"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>table <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>thead <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-headings"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row historical-data__row--headings"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Date<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Open<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>High<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Low<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Close<span class="token operator">/</span>Last<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Volume<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>        <span class="token operator">&lt;</span>tbody <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-body"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">10</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">225.64</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">227.49</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.89</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">227.01</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">755</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">10</span><span class="token operator">/</span><span class="token number">03</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.43</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">215.132</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.82</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">352</span><span class="token punctuation">,</span><span class="token number">690</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">10</span><span class="token operator">/</span><span class="token number">02</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.06</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.58</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.93</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">767</span><span class="token punctuation">,</span><span class="token number">260</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">10</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">225.07</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">228.22</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">224.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">224.59</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">187</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">30</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.9</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">224.58</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.79</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.97</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">318</span><span class="token punctuation">,</span><span class="token number">580</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">27</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.54</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.2814</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.82</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">361</span><span class="token punctuation">,</span><span class="token number">290</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">26</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.94</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.83</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.89</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">088</span><span class="token punctuation">,</span><span class="token number">310</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">25</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.55</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.1402</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.03</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">481</span><span class="token punctuation">,</span><span class="token number">010</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">24</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.03</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.49</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.19</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.68</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">434</span><span class="token punctuation">,</span><span class="token number">370</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">23</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.95</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.84</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.65</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.72</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">419</span><span class="token punctuation">,</span><span class="token number">650</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.38</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.56</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.473</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.73</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">977</span><span class="token punctuation">,</span><span class="token number">090</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">19</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.01</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.76</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.37</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">187</span><span class="token punctuation">,</span><span class="token number">880</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">18</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.06</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.85</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.44</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.77</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">643</span><span class="token punctuation">,</span><span class="token number">090</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">17</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.82</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.7</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">386</span><span class="token punctuation">,</span><span class="token number">470</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">16</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.73</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.13</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.56</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.9</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">158</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">13</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.79</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.02</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.75</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">763</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">12</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">224.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">226.42</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.86</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.085</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">226</span><span class="token punctuation">,</span><span class="token number">670</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">11</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.07</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.71</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.73</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.59</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">289</span><span class="token punctuation">,</span><span class="token number">650</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>获得动态数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">'http://q.stock.sohu.com/hisHq?code=cn_600519&amp;stat=1&amp;order=D&amp;period=d&amp;callback=historySearchHandler&amp;rt=jsonp&amp;0.8115656498417958'</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> htmlstr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'historySearchHandler('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> htmlstr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'替换后的：'</span><span class="token punctuation">,</span> htmlstr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">historySearchHandler<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"hq"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"2023-04-18"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"1758.00"</span><span class="token punctuation">,</span><span class="token string">"5.00"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">,</span><span class="token string">"1746.02"</span><span class="token punctuation">,</span><span class="token string">"1769.00"</span><span class="token punctuation">,</span><span class="token string">"18314"</span><span class="token punctuation">,</span><span class="token string">"322010.75"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-17"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"39.58"</span><span class="token punctuation">,</span><span class="token string">"2.31%"</span><span class="token punctuation">,</span><span class="token string">"1728.00"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"30467"</span><span class="token punctuation">,</span><span class="token string">"530340.12"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-14"</span><span class="token punctuation">,</span><span class="token string">"1726.00"</span><span class="token punctuation">,</span><span class="token string">"1713.42"</span><span class="token punctuation">,</span><span class="token string">"-9.58"</span><span class="token punctuation">,</span><span class="token string">"-0.56%"</span><span class="token punctuation">,</span><span class="token string">"1704.80"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"21232"</span><span class="token punctuation">,</span><span class="token string">"364652.69"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-13"</span><span class="token punctuation">,</span><span class="token string">"1690.00"</span><span class="token punctuation">,</span><span class="token string">"1723.00"</span><span class="token punctuation">,</span><span class="token string">"28.90"</span><span class="token punctuation">,</span><span class="token string">"1.71%"</span><span class="token punctuation">,</span><span class="token string">"1684.01"</span><span class="token punctuation">,</span><span class="token string">"1723.59"</span><span class="token punctuation">,</span><span class="token string">"29543"</span><span class="token punctuation">,</span><span class="token string">"504931.03"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-12"</span><span class="token punctuation">,</span><span class="token string">"1747.26"</span><span class="token punctuation">,</span><span class="token string">"1694.10"</span><span class="token punctuation">,</span><span class="token string">"-51.40"</span><span class="token punctuation">,</span><span class="token string">"-2.94%"</span><span class="token punctuation">,</span><span class="token string">"1692.82"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"51105"</span><span class="token punctuation">,</span><span class="token string">"873265.75"</span><span class="token punctuation">,</span><span class="token string">"0.41%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-11"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"1745.50"</span><span class="token punctuation">,</span><span class="token string">"-26.20"</span><span class="token punctuation">,</span><span class="token string">"-1.48%"</span><span class="token punctuation">,</span><span class="token string">"1744.00"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"29209"</span><span class="token punctuation">,</span><span class="token string">"513885.44"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-10"</span><span class="token punctuation">,</span><span class="token string">"1790.88"</span><span class="token punctuation">,</span><span class="token string">"1771.70"</span><span class="token punctuation">,</span><span class="token string">"-19.29"</span><span class="token punctuation">,</span><span class="token string">"-1.08%"</span><span class="token punctuation">,</span><span class="token string">"1744.00"</span><span class="token punctuation">,</span><span class="token string">"1790.88"</span><span class="token punctuation">,</span><span class="token string">"29418"</span><span class="token punctuation">,</span><span class="token string">"517115.03"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-07"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"1790.99"</span><span class="token punctuation">,</span><span class="token string">"-5.97"</span><span class="token punctuation">,</span><span class="token string">"-0.33%"</span><span class="token punctuation">,</span><span class="token string">"1788.34"</span><span class="token punctuation">,</span><span class="token string">"1806.01"</span><span class="token punctuation">,</span><span class="token string">"13525"</span><span class="token punctuation">,</span><span class="token string">"242816.05"</span><span class="token punctuation">,</span><span class="token string">"0.11%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-06"</span><span class="token punctuation">,</span><span class="token string">"1805.00"</span><span class="token punctuation">,</span><span class="token string">"1796.96"</span><span class="token punctuation">,</span><span class="token string">"-17.63"</span><span class="token punctuation">,</span><span class="token string">"-0.97%"</span><span class="token punctuation">,</span><span class="token string">"1788.22"</span><span class="token punctuation">,</span><span class="token string">"1815.90"</span><span class="token punctuation">,</span><span class="token string">"14874"</span><span class="token punctuation">,</span><span class="token string">"267625.19"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-04"</span><span class="token punctuation">,</span><span class="token string">"1812.00"</span><span class="token punctuation">,</span><span class="token string">"1814.59"</span><span class="token punctuation">,</span><span class="token string">"12.52"</span><span class="token punctuation">,</span><span class="token string">"0.69%"</span><span class="token punctuation">,</span><span class="token string">"1787.00"</span><span class="token punctuation">,</span><span class="token string">"1815.17"</span><span class="token punctuation">,</span><span class="token string">"20066"</span><span class="token punctuation">,</span><span class="token string">"361427.53"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-03"</span><span class="token punctuation">,</span><span class="token string">"1825.00"</span><span class="token punctuation">,</span><span class="token string">"1802.07"</span><span class="token punctuation">,</span><span class="token string">"-17.93"</span><span class="token punctuation">,</span><span class="token string">"-0.99%"</span><span class="token punctuation">,</span><span class="token string">"1800.08"</span><span class="token punctuation">,</span><span class="token string">"1827.77"</span><span class="token punctuation">,</span><span class="token string">"21417"</span><span class="token punctuation">,</span><span class="token string">"387581.16"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-31"</span><span class="token punctuation">,</span><span class="token string">"1825.00"</span><span class="token punctuation">,</span><span class="token string">"1820.00"</span><span class="token punctuation">,</span><span class="token string">"20.00"</span><span class="token punctuation">,</span><span class="token string">"1.11%"</span><span class="token punctuation">,</span><span class="token string">"1819.00"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"27446"</span><span class="token punctuation">,</span><span class="token string">"502479.06"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-30"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"1800.00"</span><span class="token punctuation">,</span><span class="token string">"10.00"</span><span class="token punctuation">,</span><span class="token string">"0.56%"</span><span class="token punctuation">,</span><span class="token string">"1779.00"</span><span class="token punctuation">,</span><span class="token string">"1805.00"</span><span class="token punctuation">,</span><span class="token string">"19257"</span><span class="token punctuation">,</span><span class="token string">"345357.31"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-29"</span><span class="token punctuation">,</span><span class="token string">"1799.00"</span><span class="token punctuation">,</span><span class="token string">"1790.00"</span><span class="token punctuation">,</span><span class="token string">"8.20"</span><span class="token punctuation">,</span><span class="token string">"0.46%"</span><span class="token punctuation">,</span><span class="token string">"1785.07"</span><span class="token punctuation">,</span><span class="token string">"1800.00"</span><span class="token punctuation">,</span><span class="token string">"15393"</span><span class="token punctuation">,</span><span class="token string">"276190.94"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-28"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"1781.80"</span><span class="token punctuation">,</span><span class="token string">"14.01"</span><span class="token punctuation">,</span><span class="token string">"0.79%"</span><span class="token punctuation">,</span><span class="token string">"1765.02"</span><span class="token punctuation">,</span><span class="token string">"1790.00"</span><span class="token punctuation">,</span><span class="token string">"17261"</span><span class="token punctuation">,</span><span class="token string">"307311.31"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-27"</span><span class="token punctuation">,</span><span class="token string">"1778.60"</span><span class="token punctuation">,</span><span class="token string">"1767.79"</span><span class="token punctuation">,</span><span class="token string">"-10.83"</span><span class="token punctuation">,</span><span class="token string">"-0.61%"</span><span class="token punctuation">,</span><span class="token string">"1756.00"</span><span class="token punctuation">,</span><span class="token string">"1778.60"</span><span class="token punctuation">,</span><span class="token string">"15296"</span><span class="token punctuation">,</span><span class="token string">"270075.59"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-24"</span><span class="token punctuation">,</span><span class="token string">"1769.08"</span><span class="token punctuation">,</span><span class="token string">"1778.62"</span><span class="token punctuation">,</span><span class="token string">"3.76"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"1783.60"</span><span class="token punctuation">,</span><span class="token string">"12770"</span><span class="token punctuation">,</span><span class="token string">"226964.92"</span><span class="token punctuation">,</span><span class="token string">"0.10%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-23"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"1774.86"</span><span class="token punctuation">,</span><span class="token string">"1.51"</span><span class="token punctuation">,</span><span class="token string">"0.09%"</span><span class="token punctuation">,</span><span class="token string">"1765.01"</span><span class="token punctuation">,</span><span class="token string">"1791.11"</span><span class="token punctuation">,</span><span class="token string">"17356"</span><span class="token punctuation">,</span><span class="token string">"308282.16"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-22"</span><span class="token punctuation">,</span><span class="token string">"1780.00"</span><span class="token punctuation">,</span><span class="token string">"1773.35"</span><span class="token punctuation">,</span><span class="token string">"-1.65"</span><span class="token punctuation">,</span><span class="token string">"-0.09%"</span><span class="token punctuation">,</span><span class="token string">"1765.55"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"15330"</span><span class="token punctuation">,</span><span class="token string">"272764.88"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-21"</span><span class="token punctuation">,</span><span class="token string">"1735.00"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"45.40"</span><span class="token punctuation">,</span><span class="token string">"2.62%"</span><span class="token punctuation">,</span><span class="token string">"1723.97"</span><span class="token punctuation">,</span><span class="token string">"1785.85"</span><span class="token punctuation">,</span><span class="token string">"31142"</span><span class="token punctuation">,</span><span class="token string">"549105.19"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-20"</span><span class="token punctuation">,</span><span class="token string">"1751.00"</span><span class="token punctuation">,</span><span class="token string">"1729.60"</span><span class="token punctuation">,</span><span class="token string">"-12.40"</span><span class="token punctuation">,</span><span class="token string">"-0.71%"</span><span class="token punctuation">,</span><span class="token string">"1728.00"</span><span class="token punctuation">,</span><span class="token string">"1755.00"</span><span class="token punctuation">,</span><span class="token string">"20491"</span><span class="token punctuation">,</span><span class="token string">"355787.22"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-17"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"1742.00"</span><span class="token punctuation">,</span><span class="token string">"-9.99"</span><span class="token punctuation">,</span><span class="token string">"-0.57%"</span><span class="token punctuation">,</span><span class="token string">"1736.00"</span><span class="token punctuation">,</span><span class="token string">"1775.89"</span><span class="token punctuation">,</span><span class="token string">"27023"</span><span class="token punctuation">,</span><span class="token string">"474424.94"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-16"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1751.99"</span><span class="token punctuation">,</span><span class="token string">"1.07"</span><span class="token punctuation">,</span><span class="token string">"0.06%"</span><span class="token punctuation">,</span><span class="token string">"1739.01"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"17646"</span><span class="token punctuation">,</span><span class="token string">"309679.09"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-15"</span><span class="token punctuation">,</span><span class="token string">"1778.37"</span><span class="token punctuation">,</span><span class="token string">"1750.92"</span><span class="token punctuation">,</span><span class="token string">"-15.08"</span><span class="token punctuation">,</span><span class="token string">"-0.85%"</span><span class="token punctuation">,</span><span class="token string">"1750.12"</span><span class="token punctuation">,</span><span class="token string">"1784.88"</span><span class="token punctuation">,</span><span class="token string">"19213"</span><span class="token punctuation">,</span><span class="token string">"339269.84"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-14"</span><span class="token punctuation">,</span><span class="token string">"1763.78"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"4.00"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">,</span><span class="token string">"1738.50"</span><span class="token punctuation">,</span><span class="token string">"1779.88"</span><span class="token punctuation">,</span><span class="token string">"23705"</span><span class="token punctuation">,</span><span class="token string">"417728.91"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-13"</span><span class="token punctuation">,</span><span class="token string">"1751.00"</span><span class="token punctuation">,</span><span class="token string">"1762.00"</span><span class="token punctuation">,</span><span class="token string">"12.00"</span><span class="token punctuation">,</span><span class="token string">"0.69%"</span><span class="token punctuation">,</span><span class="token string">"1749.00"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"20560"</span><span class="token punctuation">,</span><span class="token string">"362647.62"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-10"</span><span class="token punctuation">,</span><span class="token string">"1751.57"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"-20.02"</span><span class="token punctuation">,</span><span class="token string">"-1.13%"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"1781.00"</span><span class="token punctuation">,</span><span class="token string">"21161"</span><span class="token punctuation">,</span><span class="token string">"372513.91"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-09"</span><span class="token punctuation">,</span><span class="token string">"1768.00"</span><span class="token punctuation">,</span><span class="token string">"1770.02"</span><span class="token punctuation">,</span><span class="token string">"-0.40"</span><span class="token punctuation">,</span><span class="token string">"-0.02%"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1785.00"</span><span class="token punctuation">,</span><span class="token string">"27612"</span><span class="token punctuation">,</span><span class="token string">"488144.28"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-08"</span><span class="token punctuation">,</span><span class="token string">"1780.02"</span><span class="token punctuation">,</span><span class="token string">"1770.42"</span><span class="token punctuation">,</span><span class="token string">"-17.88"</span><span class="token punctuation">,</span><span class="token string">"-1.00%"</span><span class="token punctuation">,</span><span class="token string">"1761.12"</span><span class="token punctuation">,</span><span class="token string">"1785.94"</span><span class="token punctuation">,</span><span class="token string">"22764"</span><span class="token punctuation">,</span><span class="token string">"403578.72"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-07"</span><span class="token punctuation">,</span><span class="token string">"1805.98"</span><span class="token punctuation">,</span><span class="token string">"1788.30"</span><span class="token punctuation">,</span><span class="token string">"-18.84"</span><span class="token punctuation">,</span><span class="token string">"-1.04%"</span><span class="token punctuation">,</span><span class="token string">"1788.00"</span><span class="token punctuation">,</span><span class="token string">"1816.60"</span><span class="token punctuation">,</span><span class="token string">"22785"</span><span class="token punctuation">,</span><span class="token string">"410130.25"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-06"</span><span class="token punctuation">,</span><span class="token string">"1818.18"</span><span class="token punctuation">,</span><span class="token string">"1807.14"</span><span class="token punctuation">,</span><span class="token string">"-10.90"</span><span class="token punctuation">,</span><span class="token string">"-0.60%"</span><span class="token punctuation">,</span><span class="token string">"1796.77"</span><span class="token punctuation">,</span><span class="token string">"1818.50"</span><span class="token punctuation">,</span><span class="token string">"20646"</span><span class="token punctuation">,</span><span class="token string">"373007.94"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-03"</span><span class="token punctuation">,</span><span class="token string">"1839.77"</span><span class="token punctuation">,</span><span class="token string">"1818.04"</span><span class="token punctuation">,</span><span class="token string">"-9.96"</span><span class="token punctuation">,</span><span class="token string">"-0.54%"</span><span class="token punctuation">,</span><span class="token string">"1802.48"</span><span class="token punctuation">,</span><span class="token string">"1841.61"</span><span class="token punctuation">,</span><span class="token string">"16198"</span><span class="token punctuation">,</span><span class="token string">"294684.25"</span><span class="token punctuation">,</span><span class="token string">"0.13%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-02"</span><span class="token punctuation">,</span><span class="token string">"1829.00"</span><span class="token punctuation">,</span><span class="token string">"1828.00"</span><span class="token punctuation">,</span><span class="token string">"-10.53"</span><span class="token punctuation">,</span><span class="token string">"-0.57%"</span><span class="token punctuation">,</span><span class="token string">"1821.10"</span><span class="token punctuation">,</span><span class="token string">"1838.99"</span><span class="token punctuation">,</span><span class="token string">"13144"</span><span class="token punctuation">,</span><span class="token string">"240529.23"</span><span class="token punctuation">,</span><span class="token string">"0.10%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-01"</span><span class="token punctuation">,</span><span class="token string">"1813.00"</span><span class="token punctuation">,</span><span class="token string">"1838.53"</span><span class="token punctuation">,</span><span class="token string">"24.79"</span><span class="token punctuation">,</span><span class="token string">"1.37%"</span><span class="token punctuation">,</span><span class="token string">"1803.23"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"24458"</span><span class="token punctuation">,</span><span class="token string">"447559.22"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-28"</span><span class="token punctuation">,</span><span class="token string">"1819.00"</span><span class="token punctuation">,</span><span class="token string">"1813.74"</span><span class="token punctuation">,</span><span class="token string">"3.33"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">,</span><span class="token string">"1783.30"</span><span class="token punctuation">,</span><span class="token string">"1822.01"</span><span class="token punctuation">,</span><span class="token string">"23952"</span><span class="token punctuation">,</span><span class="token string">"431487.69"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-27"</span><span class="token punctuation">,</span><span class="token string">"1778.50"</span><span class="token punctuation">,</span><span class="token string">"1810.41"</span><span class="token punctuation">,</span><span class="token string">"22.41"</span><span class="token punctuation">,</span><span class="token string">"1.25%"</span><span class="token punctuation">,</span><span class="token string">"1775.02"</span><span class="token punctuation">,</span><span class="token string">"1815.00"</span><span class="token punctuation">,</span><span class="token string">"22065"</span><span class="token punctuation">,</span><span class="token string">"397812.88"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-24"</span><span class="token punctuation">,</span><span class="token string">"1810.11"</span><span class="token punctuation">,</span><span class="token string">"1788.00"</span><span class="token punctuation">,</span><span class="token string">"-30.00"</span><span class="token punctuation">,</span><span class="token string">"-1.65%"</span><span class="token punctuation">,</span><span class="token string">"1782.18"</span><span class="token punctuation">,</span><span class="token string">"1810.19"</span><span class="token punctuation">,</span><span class="token string">"24635"</span><span class="token punctuation">,</span><span class="token string">"441562.16"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-23"</span><span class="token punctuation">,</span><span class="token string">"1840.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"-18.00"</span><span class="token punctuation">,</span><span class="token string">"-0.98%"</span><span class="token punctuation">,</span><span class="token string">"1805.25"</span><span class="token punctuation">,</span><span class="token string">"1848.80"</span><span class="token punctuation">,</span><span class="token string">"21881"</span><span class="token punctuation">,</span><span class="token string">"398399.12"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-22"</span><span class="token punctuation">,</span><span class="token string">"1855.01"</span><span class="token punctuation">,</span><span class="token string">"1836.00"</span><span class="token punctuation">,</span><span class="token string">"-31.00"</span><span class="token punctuation">,</span><span class="token string">"-1.66%"</span><span class="token punctuation">,</span><span class="token string">"1831.80"</span><span class="token punctuation">,</span><span class="token string">"1863.90"</span><span class="token punctuation">,</span><span class="token string">"21869"</span><span class="token punctuation">,</span><span class="token string">"403101.59"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-21"</span><span class="token punctuation">,</span><span class="token string">"1874.00"</span><span class="token punctuation">,</span><span class="token string">"1867.00"</span><span class="token punctuation">,</span><span class="token string">"-8.00"</span><span class="token punctuation">,</span><span class="token string">"-0.43%"</span><span class="token punctuation">,</span><span class="token string">"1851.00"</span><span class="token punctuation">,</span><span class="token string">"1874.00"</span><span class="token punctuation">,</span><span class="token string">"18751"</span><span class="token punctuation">,</span><span class="token string">"349163.34"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-20"</span><span class="token punctuation">,</span><span class="token string">"1821.00"</span><span class="token punctuation">,</span><span class="token string">"1875.00"</span><span class="token punctuation">,</span><span class="token string">"54.22"</span><span class="token punctuation">,</span><span class="token string">"2.98%"</span><span class="token punctuation">,</span><span class="token string">"1817.20"</span><span class="token punctuation">,</span><span class="token string">"1878.80"</span><span class="token punctuation">,</span><span class="token string">"29669"</span><span class="token punctuation">,</span><span class="token string">"548880.00"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-17"</span><span class="token punctuation">,</span><span class="token string">"1850.16"</span><span class="token punctuation">,</span><span class="token string">"1820.78"</span><span class="token punctuation">,</span><span class="token string">"-41.04"</span><span class="token punctuation">,</span><span class="token string">"-2.20%"</span><span class="token punctuation">,</span><span class="token string">"1820.05"</span><span class="token punctuation">,</span><span class="token string">"1873.00"</span><span class="token punctuation">,</span><span class="token string">"26443"</span><span class="token punctuation">,</span><span class="token string">"488032.88"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-16"</span><span class="token punctuation">,</span><span class="token string">"1841.34"</span><span class="token punctuation">,</span><span class="token string">"1861.82"</span><span class="token punctuation">,</span><span class="token string">"20.82"</span><span class="token punctuation">,</span><span class="token string">"1.13%"</span><span class="token punctuation">,</span><span class="token string">"1828.00"</span><span class="token punctuation">,</span><span class="token string">"1887.00"</span><span class="token punctuation">,</span><span class="token string">"33246"</span><span class="token punctuation">,</span><span class="token string">"619691.50"</span><span class="token punctuation">,</span><span class="token string">"0.26%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-15"</span><span class="token punctuation">,</span><span class="token string">"1843.78"</span><span class="token punctuation">,</span><span class="token string">"1841.00"</span><span class="token punctuation">,</span><span class="token string">"-2.79"</span><span class="token punctuation">,</span><span class="token string">"-0.15%"</span><span class="token punctuation">,</span><span class="token string">"1835.81"</span><span class="token punctuation">,</span><span class="token string">"1855.30"</span><span class="token punctuation">,</span><span class="token string">"18177"</span><span class="token punctuation">,</span><span class="token string">"335142.22"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-14"</span><span class="token punctuation">,</span><span class="token string">"1856.46"</span><span class="token punctuation">,</span><span class="token string">"1843.79"</span><span class="token punctuation">,</span><span class="token string">"-12.56"</span><span class="token punctuation">,</span><span class="token string">"-0.68%"</span><span class="token punctuation">,</span><span class="token string">"1835.00"</span><span class="token punctuation">,</span><span class="token string">"1857.40"</span><span class="token punctuation">,</span><span class="token string">"19566"</span><span class="token punctuation">,</span><span class="token string">"360176.94"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-13"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"1856.35"</span><span class="token punctuation">,</span><span class="token string">"46.35"</span><span class="token punctuation">,</span><span class="token string">"2.56%"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"1874.50"</span><span class="token punctuation">,</span><span class="token string">"38147"</span><span class="token punctuation">,</span><span class="token string">"705838.25"</span><span class="token punctuation">,</span><span class="token string">"0.30%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-10"</span><span class="token punctuation">,</span><span class="token string">"1810.10"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"-8.00"</span><span class="token punctuation">,</span><span class="token string">"-0.44%"</span><span class="token punctuation">,</span><span class="token string">"1801.05"</span><span class="token punctuation">,</span><span class="token string">"1818.49"</span><span class="token punctuation">,</span><span class="token string">"17985"</span><span class="token punctuation">,</span><span class="token string">"325385.94"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-09"</span><span class="token punctuation">,</span><span class="token string">"1778.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"34.00"</span><span class="token punctuation">,</span><span class="token string">"1.91%"</span><span class="token punctuation">,</span><span class="token string">"1775.01"</span><span class="token punctuation">,</span><span class="token string">"1829.75"</span><span class="token punctuation">,</span><span class="token string">"29754"</span><span class="token punctuation">,</span><span class="token string">"540139.94"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-08"</span><span class="token punctuation">,</span><span class="token string">"1800.01"</span><span class="token punctuation">,</span><span class="token string">"1784.00"</span><span class="token punctuation">,</span><span class="token string">"-13.00"</span><span class="token punctuation">,</span><span class="token string">"-0.72%"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"1805.97"</span><span class="token punctuation">,</span><span class="token string">"16676"</span><span class="token punctuation">,</span><span class="token string">"298057.47"</span><span class="token punctuation">,</span><span class="token string">"0.13%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-07"</span><span class="token punctuation">,</span><span class="token string">"1808.08"</span><span class="token punctuation">,</span><span class="token string">"1797.00"</span><span class="token punctuation">,</span><span class="token string">"2.00"</span><span class="token punctuation">,</span><span class="token string">"0.11%"</span><span class="token punctuation">,</span><span class="token string">"1787.73"</span><span class="token punctuation">,</span><span class="token string">"1808.80"</span><span class="token punctuation">,</span><span class="token string">"24322"</span><span class="token punctuation">,</span><span class="token string">"437367.19"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-06"</span><span class="token punctuation">,</span><span class="token string">"1780.00"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"-23.00"</span><span class="token punctuation">,</span><span class="token string">"-1.27%"</span><span class="token punctuation">,</span><span class="token string">"1760.00"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"42661"</span><span class="token punctuation">,</span><span class="token string">"759573.94"</span><span class="token punctuation">,</span><span class="token string">"0.34%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-03"</span><span class="token punctuation">,</span><span class="token string">"1820.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"-18.11"</span><span class="token punctuation">,</span><span class="token string">"-0.99%"</span><span class="token punctuation">,</span><span class="token string">"1795.68"</span><span class="token punctuation">,</span><span class="token string">"1826.00"</span><span class="token punctuation">,</span><span class="token string">"34945"</span><span class="token punctuation">,</span><span class="token string">"632463.50"</span><span class="token punctuation">,</span><span class="token string">"0.28%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-02"</span><span class="token punctuation">,</span><span class="token string">"1848.38"</span><span class="token punctuation">,</span><span class="token string">"1836.11"</span><span class="token punctuation">,</span><span class="token string">"-8.86"</span><span class="token punctuation">,</span><span class="token string">"-0.48%"</span><span class="token punctuation">,</span><span class="token string">"1826.00"</span><span class="token punctuation">,</span><span class="token string">"1859.00"</span><span class="token punctuation">,</span><span class="token string">"29759"</span><span class="token punctuation">,</span><span class="token string">"546550.94"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-01"</span><span class="token punctuation">,</span><span class="token string">"1854.98"</span><span class="token punctuation">,</span><span class="token string">"1844.97"</span><span class="token punctuation">,</span><span class="token string">"-0.79"</span><span class="token punctuation">,</span><span class="token string">"-0.04%"</span><span class="token punctuation">,</span><span class="token string">"1811.40"</span><span class="token punctuation">,</span><span class="token string">"1859.00"</span><span class="token punctuation">,</span><span class="token string">"33974"</span><span class="token punctuation">,</span><span class="token string">"624467.94"</span><span class="token punctuation">,</span><span class="token string">"0.27%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-31"</span><span class="token punctuation">,</span><span class="token string">"1896.50"</span><span class="token punctuation">,</span><span class="token string">"1845.76"</span><span class="token punctuation">,</span><span class="token string">"-42.24"</span><span class="token punctuation">,</span><span class="token string">"-2.24%"</span><span class="token punctuation">,</span><span class="token string">"1833.07"</span><span class="token punctuation">,</span><span class="token string">"1899.95"</span><span class="token punctuation">,</span><span class="token string">"32991"</span><span class="token punctuation">,</span><span class="token string">"612831.12"</span><span class="token punctuation">,</span><span class="token string">"0.26%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-30"</span><span class="token punctuation">,</span><span class="token string">"1909.00"</span><span class="token punctuation">,</span><span class="token string">"1888.00"</span><span class="token punctuation">,</span><span class="token string">"27.99"</span><span class="token punctuation">,</span><span class="token string">"1.50%"</span><span class="token punctuation">,</span><span class="token string">"1880.00"</span><span class="token punctuation">,</span><span class="token string">"1909.00"</span><span class="token punctuation">,</span><span class="token string">"35923"</span><span class="token punctuation">,</span><span class="token string">"679975.69"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-20"</span><span class="token punctuation">,</span><span class="token string">"1889.19"</span><span class="token punctuation">,</span><span class="token string">"1860.01"</span><span class="token punctuation">,</span><span class="token string">"-20.20"</span><span class="token punctuation">,</span><span class="token string">"-1.07%"</span><span class="token punctuation">,</span><span class="token string">"1858.00"</span><span class="token punctuation">,</span><span class="token string">"1898.25"</span><span class="token punctuation">,</span><span class="token string">"25609"</span><span class="token punctuation">,</span><span class="token string">"480735.59"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-19"</span><span class="token punctuation">,</span><span class="token string">"1892.50"</span><span class="token punctuation">,</span><span class="token string">"1880.21"</span><span class="token punctuation">,</span><span class="token string">"-12.79"</span><span class="token punctuation">,</span><span class="token string">"-0.68%"</span><span class="token punctuation">,</span><span class="token string">"1866.00"</span><span class="token punctuation">,</span><span class="token string">"1892.52"</span><span class="token punctuation">,</span><span class="token string">"23439"</span><span class="token punctuation">,</span><span class="token string">"440199.44"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-18"</span><span class="token punctuation">,</span><span class="token string">"1914.00"</span><span class="token punctuation">,</span><span class="token string">"1893.00"</span><span class="token punctuation">,</span><span class="token string">"-15.00"</span><span class="token punctuation">,</span><span class="token string">"-0.79%"</span><span class="token punctuation">,</span><span class="token string">"1890.00"</span><span class="token punctuation">,</span><span class="token string">"1925.30"</span><span class="token punctuation">,</span><span class="token string">"21063"</span><span class="token punctuation">,</span><span class="token string">"400866.53"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-17"</span><span class="token punctuation">,</span><span class="token string">"1913.16"</span><span class="token punctuation">,</span><span class="token string">"1908.00"</span><span class="token punctuation">,</span><span class="token string">"-4.90"</span><span class="token punctuation">,</span><span class="token string">"-0.26%"</span><span class="token punctuation">,</span><span class="token string">"1895.00"</span><span class="token punctuation">,</span><span class="token string">"1923.00"</span><span class="token punctuation">,</span><span class="token string">"21299"</span><span class="token punctuation">,</span><span class="token string">"406832.16"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-16"</span><span class="token punctuation">,</span><span class="token string">"1886.00"</span><span class="token punctuation">,</span><span class="token string">"1912.90"</span><span class="token punctuation">,</span><span class="token string">"25.90"</span><span class="token punctuation">,</span><span class="token string">"1.37%"</span><span class="token punctuation">,</span><span class="token string">"1881.00"</span><span class="token punctuation">,</span><span class="token string">"1935.00"</span><span class="token punctuation">,</span><span class="token string">"36848"</span><span class="token punctuation">,</span><span class="token string">"705998.31"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-13"</span><span class="token punctuation">,</span><span class="token string">"1844.18"</span><span class="token punctuation">,</span><span class="token string">"1887.00"</span><span class="token punctuation">,</span><span class="token string">"53.00"</span><span class="token punctuation">,</span><span class="token string">"2.89%"</span><span class="token punctuation">,</span><span class="token string">"1840.00"</span><span class="token punctuation">,</span><span class="token string">"1888.00"</span><span class="token punctuation">,</span><span class="token string">"31940"</span><span class="token punctuation">,</span><span class="token string">"596987.62"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-12"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"1834.00"</span><span class="token punctuation">,</span><span class="token string">"-10.95"</span><span class="token punctuation">,</span><span class="token string">"-0.59%"</span><span class="token punctuation">,</span><span class="token string">"1833.00"</span><span class="token punctuation">,</span><span class="token string">"1856.00"</span><span class="token punctuation">,</span><span class="token string">"17193"</span><span class="token punctuation">,</span><span class="token string">"316263.72"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-11"</span><span class="token punctuation">,</span><span class="token string">"1856.00"</span><span class="token punctuation">,</span><span class="token string">"1844.95"</span><span class="token punctuation">,</span><span class="token string">"-9.50"</span><span class="token punctuation">,</span><span class="token string">"-0.51%"</span><span class="token punctuation">,</span><span class="token string">"1836.84"</span><span class="token punctuation">,</span><span class="token string">"1860.00"</span><span class="token punctuation">,</span><span class="token string">"22720"</span><span class="token punctuation">,</span><span class="token string">"420148.78"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-10"</span><span class="token punctuation">,</span><span class="token string">"1839.06"</span><span class="token punctuation">,</span><span class="token string">"1854.45"</span><span class="token punctuation">,</span><span class="token string">"13.25"</span><span class="token punctuation">,</span><span class="token string">"0.72%"</span><span class="token punctuation">,</span><span class="token string">"1830.50"</span><span class="token punctuation">,</span><span class="token string">"1864.50"</span><span class="token punctuation">,</span><span class="token string">"22732"</span><span class="token punctuation">,</span><span class="token string">"420478.38"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-09"</span><span class="token punctuation">,</span><span class="token string">"1835.00"</span><span class="token punctuation">,</span><span class="token string">"1841.20"</span><span class="token punctuation">,</span><span class="token string">"37.43"</span><span class="token punctuation">,</span><span class="token string">"2.08%"</span><span class="token punctuation">,</span><span class="token string">"1807.82"</span><span class="token punctuation">,</span><span class="token string">"1849.98"</span><span class="token punctuation">,</span><span class="token string">"30977"</span><span class="token punctuation">,</span><span class="token string">"568418.12"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-06"</span><span class="token punctuation">,</span><span class="token string">"1806.12"</span><span class="token punctuation">,</span><span class="token string">"1803.77"</span><span class="token punctuation">,</span><span class="token string">"2.77"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">,</span><span class="token string">"1787.00"</span><span class="token punctuation">,</span><span class="token string">"1811.90"</span><span class="token punctuation">,</span><span class="token string">"24904"</span><span class="token punctuation">,</span><span class="token string">"448083.88"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-05"</span><span class="token punctuation">,</span><span class="token string">"1737.00"</span><span class="token punctuation">,</span><span class="token string">"1801.00"</span><span class="token punctuation">,</span><span class="token string">"75.99"</span><span class="token punctuation">,</span><span class="token string">"4.41%"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"1801.00"</span><span class="token punctuation">,</span><span class="token string">"47943"</span><span class="token punctuation">,</span><span class="token string">"854158.69"</span><span class="token punctuation">,</span><span class="token string">"0.38%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-04"</span><span class="token punctuation">,</span><span class="token string">"1730.00"</span><span class="token punctuation">,</span><span class="token string">"1725.01"</span><span class="token punctuation">,</span><span class="token string">"-5.00"</span><span class="token punctuation">,</span><span class="token string">"-0.29%"</span><span class="token punctuation">,</span><span class="token string">"1716.00"</span><span class="token punctuation">,</span><span class="token string">"1738.70"</span><span class="token punctuation">,</span><span class="token string">"20416"</span><span class="token punctuation">,</span><span class="token string">"352358.22"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-03"</span><span class="token punctuation">,</span><span class="token string">"1731.20"</span><span class="token punctuation">,</span><span class="token string">"1730.01"</span><span class="token punctuation">,</span><span class="token string">"3.01"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">,</span><span class="token string">"1706.01"</span><span class="token punctuation">,</span><span class="token string">"1738.43"</span><span class="token punctuation">,</span><span class="token string">"26034"</span><span class="token punctuation">,</span><span class="token string">"448776.03"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-30"</span><span class="token punctuation">,</span><span class="token string">"1736.00"</span><span class="token punctuation">,</span><span class="token string">"1727.00"</span><span class="token punctuation">,</span><span class="token string">"8.00"</span><span class="token punctuation">,</span><span class="token string">"0.47%"</span><span class="token punctuation">,</span><span class="token string">"1727.00"</span><span class="token punctuation">,</span><span class="token string">"1752.99"</span><span class="token punctuation">,</span><span class="token string">"25333"</span><span class="token punctuation">,</span><span class="token string">"440954.41"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-29"</span><span class="token punctuation">,</span><span class="token string">"1717.00"</span><span class="token punctuation">,</span><span class="token string">"1719.00"</span><span class="token punctuation">,</span><span class="token string">"-14.00"</span><span class="token punctuation">,</span><span class="token string">"-0.81%"</span><span class="token punctuation">,</span><span class="token string">"1701.05"</span><span class="token punctuation">,</span><span class="token string">"1726.99"</span><span class="token punctuation">,</span><span class="token string">"22418"</span><span class="token punctuation">,</span><span class="token string">"384449.97"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-28"</span><span class="token punctuation">,</span><span class="token string">"1745.88"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"0.00"</span><span class="token punctuation">,</span><span class="token string">"0.00%"</span><span class="token punctuation">,</span><span class="token string">"1708.01"</span><span class="token punctuation">,</span><span class="token string">"1747.00"</span><span class="token punctuation">,</span><span class="token string">"21438"</span><span class="token punctuation">,</span><span class="token string">"369994.91"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-27"</span><span class="token punctuation">,</span><span class="token string">"1738.00"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"12.85"</span><span class="token punctuation">,</span><span class="token string">"0.75%"</span><span class="token punctuation">,</span><span class="token string">"1725.50"</span><span class="token punctuation">,</span><span class="token string">"1747.15"</span><span class="token punctuation">,</span><span class="token string">"17905"</span><span class="token punctuation">,</span><span class="token string">"310927.03"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-26"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"1742.06"</span><span class="token punctuation">,</span><span class="token string">"-28.94"</span><span class="token punctuation">,</span><span class="token string">"-1.63%"</span><span class="token punctuation">,</span><span class="token string">"1735.02"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"21384"</span><span class="token punctuation">,</span><span class="token string">"374912.09"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-23"</span><span class="token punctuation">,</span><span class="token string">"1752.40"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"3.00"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">,</span><span class="token string">"1745.00"</span><span class="token punctuation">,</span><span class="token string">"1782.00"</span><span class="token punctuation">,</span><span class="token string">"17319"</span><span class="token punctuation">,</span><span class="token string">"306360.84"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-22"</span><span class="token punctuation">,</span><span class="token string">"1756.70"</span><span class="token punctuation">,</span><span class="token string">"1768.00"</span><span class="token punctuation">,</span><span class="token string">"29.00"</span><span class="token punctuation">,</span><span class="token string">"1.67%"</span><span class="token punctuation">,</span><span class="token string">"1745.00"</span><span class="token punctuation">,</span><span class="token string">"1783.00"</span><span class="token punctuation">,</span><span class="token string">"23175"</span><span class="token punctuation">,</span><span class="token string">"409386.16"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-21"</span><span class="token punctuation">,</span><span class="token string">"1724.00"</span><span class="token punctuation">,</span><span class="token string">"1739.00"</span><span class="token punctuation">,</span><span class="token string">"24.00"</span><span class="token punctuation">,</span><span class="token string">"1.40%"</span><span class="token punctuation">,</span><span class="token string">"1717.65"</span><span class="token punctuation">,</span><span class="token string">"1739.00"</span><span class="token punctuation">,</span><span class="token string">"22816"</span><span class="token punctuation">,</span><span class="token string">"394892.62"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-20"</span><span class="token punctuation">,</span><span class="token string">"1765.33"</span><span class="token punctuation">,</span><span class="token string">"1715.00"</span><span class="token punctuation">,</span><span class="token string">"-58.00"</span><span class="token punctuation">,</span><span class="token string">"-3.27%"</span><span class="token punctuation">,</span><span class="token string">"1682.45"</span><span class="token punctuation">,</span><span class="token string">"1765.33"</span><span class="token punctuation">,</span><span class="token string">"46198"</span><span class="token punctuation">,</span><span class="token string">"794412.06"</span><span class="token punctuation">,</span><span class="token string">"0.37%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-19"</span><span class="token punctuation">,</span><span class="token string">"1798.80"</span><span class="token punctuation">,</span><span class="token string">"1773.00"</span><span class="token punctuation">,</span><span class="token string">"-13.87"</span><span class="token punctuation">,</span><span class="token string">"-0.78%"</span><span class="token punctuation">,</span><span class="token string">"1760.17"</span><span class="token punctuation">,</span><span class="token string">"1798.80"</span><span class="token punctuation">,</span><span class="token string">"24987"</span><span class="token punctuation">,</span><span class="token string">"444723.66"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token string">"cn_600519"</span><span class="token punctuation">,</span><span class="token string">"stat"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"累计:"</span><span class="token punctuation">,</span><span class="token string">"2022-12-19至2023-04-18"</span><span class="token punctuation">,</span><span class="token string">"-28.87"</span><span class="token punctuation">,</span><span class="token string">"-1.62%"</span><span class="token punctuation">,</span><span class="token number">1682.45</span><span class="token punctuation">,</span><span class="token number">1935</span><span class="token punctuation">,</span><span class="token number">1961308</span><span class="token punctuation">,</span><span class="token number">35261288.98</span><span class="token punctuation">,</span><span class="token string">"15.59%"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>替换后的： <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"hq"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"2023-04-18"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"1758.00"</span><span class="token punctuation">,</span><span class="token string">"5.00"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">,</span><span class="token string">"1746.02"</span><span class="token punctuation">,</span><span class="token string">"1769.00"</span><span class="token punctuation">,</span><span class="token string">"18314"</span><span class="token punctuation">,</span><span class="token string">"322010.75"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-17"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"39.58"</span><span class="token punctuation">,</span><span class="token string">"2.31%"</span><span class="token punctuation">,</span><span class="token string">"1728.00"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"30467"</span><span class="token punctuation">,</span><span class="token string">"530340.12"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-14"</span><span class="token punctuation">,</span><span class="token string">"1726.00"</span><span class="token punctuation">,</span><span class="token string">"1713.42"</span><span class="token punctuation">,</span><span class="token string">"-9.58"</span><span class="token punctuation">,</span><span class="token string">"-0.56%"</span><span class="token punctuation">,</span><span class="token string">"1704.80"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"21232"</span><span class="token punctuation">,</span><span class="token string">"364652.69"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-13"</span><span class="token punctuation">,</span><span class="token string">"1690.00"</span><span class="token punctuation">,</span><span class="token string">"1723.00"</span><span class="token punctuation">,</span><span class="token string">"28.90"</span><span class="token punctuation">,</span><span class="token string">"1.71%"</span><span class="token punctuation">,</span><span class="token string">"1684.01"</span><span class="token punctuation">,</span><span class="token string">"1723.59"</span><span class="token punctuation">,</span><span class="token string">"29543"</span><span class="token punctuation">,</span><span class="token string">"504931.03"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-12"</span><span class="token punctuation">,</span><span class="token string">"1747.26"</span><span class="token punctuation">,</span><span class="token string">"1694.10"</span><span class="token punctuation">,</span><span class="token string">"-51.40"</span><span class="token punctuation">,</span><span class="token string">"-2.94%"</span><span class="token punctuation">,</span><span class="token string">"1692.82"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"51105"</span><span class="token punctuation">,</span><span class="token string">"873265.75"</span><span class="token punctuation">,</span><span class="token string">"0.41%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-11"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"1745.50"</span><span class="token punctuation">,</span><span class="token string">"-26.20"</span><span class="token punctuation">,</span><span class="token string">"-1.48%"</span><span class="token punctuation">,</span><span class="token string">"1744.00"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"29209"</span><span class="token punctuation">,</span><span class="token string">"513885.44"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-10"</span><span class="token punctuation">,</span><span class="token string">"1790.88"</span><span class="token punctuation">,</span><span class="token string">"1771.70"</span><span class="token punctuation">,</span><span class="token string">"-19.29"</span><span class="token punctuation">,</span><span class="token string">"-1.08%"</span><span class="token punctuation">,</span><span class="token string">"1744.00"</span><span class="token punctuation">,</span><span class="token string">"1790.88"</span><span class="token punctuation">,</span><span class="token string">"29418"</span><span class="token punctuation">,</span><span class="token string">"517115.03"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-07"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"1790.99"</span><span class="token punctuation">,</span><span class="token string">"-5.97"</span><span class="token punctuation">,</span><span class="token string">"-0.33%"</span><span class="token punctuation">,</span><span class="token string">"1788.34"</span><span class="token punctuation">,</span><span class="token string">"1806.01"</span><span class="token punctuation">,</span><span class="token string">"13525"</span><span class="token punctuation">,</span><span class="token string">"242816.05"</span><span class="token punctuation">,</span><span class="token string">"0.11%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-06"</span><span class="token punctuation">,</span><span class="token string">"1805.00"</span><span class="token punctuation">,</span><span class="token string">"1796.96"</span><span class="token punctuation">,</span><span class="token string">"-17.63"</span><span class="token punctuation">,</span><span class="token string">"-0.97%"</span><span class="token punctuation">,</span><span class="token string">"1788.22"</span><span class="token punctuation">,</span><span class="token string">"1815.90"</span><span class="token punctuation">,</span><span class="token string">"14874"</span><span class="token punctuation">,</span><span class="token string">"267625.19"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-04"</span><span class="token punctuation">,</span><span class="token string">"1812.00"</span><span class="token punctuation">,</span><span class="token string">"1814.59"</span><span class="token punctuation">,</span><span class="token string">"12.52"</span><span class="token punctuation">,</span><span class="token string">"0.69%"</span><span class="token punctuation">,</span><span class="token string">"1787.00"</span><span class="token punctuation">,</span><span class="token string">"1815.17"</span><span class="token punctuation">,</span><span class="token string">"20066"</span><span class="token punctuation">,</span><span class="token string">"361427.53"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-03"</span><span class="token punctuation">,</span><span class="token string">"1825.00"</span><span class="token punctuation">,</span><span class="token string">"1802.07"</span><span class="token punctuation">,</span><span class="token string">"-17.93"</span><span class="token punctuation">,</span><span class="token string">"-0.99%"</span><span class="token punctuation">,</span><span class="token string">"1800.08"</span><span class="token punctuation">,</span><span class="token string">"1827.77"</span><span class="token punctuation">,</span><span class="token string">"21417"</span><span class="token punctuation">,</span><span class="token string">"387581.16"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-31"</span><span class="token punctuation">,</span><span class="token string">"1825.00"</span><span class="token punctuation">,</span><span class="token string">"1820.00"</span><span class="token punctuation">,</span><span class="token string">"20.00"</span><span class="token punctuation">,</span><span class="token string">"1.11%"</span><span class="token punctuation">,</span><span class="token string">"1819.00"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"27446"</span><span class="token punctuation">,</span><span class="token string">"502479.06"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-30"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"1800.00"</span><span class="token punctuation">,</span><span class="token string">"10.00"</span><span class="token punctuation">,</span><span class="token string">"0.56%"</span><span class="token punctuation">,</span><span class="token string">"1779.00"</span><span class="token punctuation">,</span><span class="token string">"1805.00"</span><span class="token punctuation">,</span><span class="token string">"19257"</span><span class="token punctuation">,</span><span class="token string">"345357.31"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-29"</span><span class="token punctuation">,</span><span class="token string">"1799.00"</span><span class="token punctuation">,</span><span class="token string">"1790.00"</span><span class="token punctuation">,</span><span class="token string">"8.20"</span><span class="token punctuation">,</span><span class="token string">"0.46%"</span><span class="token punctuation">,</span><span class="token string">"1785.07"</span><span class="token punctuation">,</span><span class="token string">"1800.00"</span><span class="token punctuation">,</span><span class="token string">"15393"</span><span class="token punctuation">,</span><span class="token string">"276190.94"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-28"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"1781.80"</span><span class="token punctuation">,</span><span class="token string">"14.01"</span><span class="token punctuation">,</span><span class="token string">"0.79%"</span><span class="token punctuation">,</span><span class="token string">"1765.02"</span><span class="token punctuation">,</span><span class="token string">"1790.00"</span><span class="token punctuation">,</span><span class="token string">"17261"</span><span class="token punctuation">,</span><span class="token string">"307311.31"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-27"</span><span class="token punctuation">,</span><span class="token string">"1778.60"</span><span class="token punctuation">,</span><span class="token string">"1767.79"</span><span class="token punctuation">,</span><span class="token string">"-10.83"</span><span class="token punctuation">,</span><span class="token string">"-0.61%"</span><span class="token punctuation">,</span><span class="token string">"1756.00"</span><span class="token punctuation">,</span><span class="token string">"1778.60"</span><span class="token punctuation">,</span><span class="token string">"15296"</span><span class="token punctuation">,</span><span class="token string">"270075.59"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-24"</span><span class="token punctuation">,</span><span class="token string">"1769.08"</span><span class="token punctuation">,</span><span class="token string">"1778.62"</span><span class="token punctuation">,</span><span class="token string">"3.76"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"1783.60"</span><span class="token punctuation">,</span><span class="token string">"12770"</span><span class="token punctuation">,</span><span class="token string">"226964.92"</span><span class="token punctuation">,</span><span class="token string">"0.10%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-23"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"1774.86"</span><span class="token punctuation">,</span><span class="token string">"1.51"</span><span class="token punctuation">,</span><span class="token string">"0.09%"</span><span class="token punctuation">,</span><span class="token string">"1765.01"</span><span class="token punctuation">,</span><span class="token string">"1791.11"</span><span class="token punctuation">,</span><span class="token string">"17356"</span><span class="token punctuation">,</span><span class="token string">"308282.16"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-22"</span><span class="token punctuation">,</span><span class="token string">"1780.00"</span><span class="token punctuation">,</span><span class="token string">"1773.35"</span><span class="token punctuation">,</span><span class="token string">"-1.65"</span><span class="token punctuation">,</span><span class="token string">"-0.09%"</span><span class="token punctuation">,</span><span class="token string">"1765.55"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"15330"</span><span class="token punctuation">,</span><span class="token string">"272764.88"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-21"</span><span class="token punctuation">,</span><span class="token string">"1735.00"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"45.40"</span><span class="token punctuation">,</span><span class="token string">"2.62%"</span><span class="token punctuation">,</span><span class="token string">"1723.97"</span><span class="token punctuation">,</span><span class="token string">"1785.85"</span><span class="token punctuation">,</span><span class="token string">"31142"</span><span class="token punctuation">,</span><span class="token string">"549105.19"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-20"</span><span class="token punctuation">,</span><span class="token string">"1751.00"</span><span class="token punctuation">,</span><span class="token string">"1729.60"</span><span class="token punctuation">,</span><span class="token string">"-12.40"</span><span class="token punctuation">,</span><span class="token string">"-0.71%"</span><span class="token punctuation">,</span><span class="token string">"1728.00"</span><span class="token punctuation">,</span><span class="token string">"1755.00"</span><span class="token punctuation">,</span><span class="token string">"20491"</span><span class="token punctuation">,</span><span class="token string">"355787.22"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-17"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"1742.00"</span><span class="token punctuation">,</span><span class="token string">"-9.99"</span><span class="token punctuation">,</span><span class="token string">"-0.57%"</span><span class="token punctuation">,</span><span class="token string">"1736.00"</span><span class="token punctuation">,</span><span class="token string">"1775.89"</span><span class="token punctuation">,</span><span class="token string">"27023"</span><span class="token punctuation">,</span><span class="token string">"474424.94"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-16"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1751.99"</span><span class="token punctuation">,</span><span class="token string">"1.07"</span><span class="token punctuation">,</span><span class="token string">"0.06%"</span><span class="token punctuation">,</span><span class="token string">"1739.01"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"17646"</span><span class="token punctuation">,</span><span class="token string">"309679.09"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-15"</span><span class="token punctuation">,</span><span class="token string">"1778.37"</span><span class="token punctuation">,</span><span class="token string">"1750.92"</span><span class="token punctuation">,</span><span class="token string">"-15.08"</span><span class="token punctuation">,</span><span class="token string">"-0.85%"</span><span class="token punctuation">,</span><span class="token string">"1750.12"</span><span class="token punctuation">,</span><span class="token string">"1784.88"</span><span class="token punctuation">,</span><span class="token string">"19213"</span><span class="token punctuation">,</span><span class="token string">"339269.84"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-14"</span><span class="token punctuation">,</span><span class="token string">"1763.78"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"4.00"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">,</span><span class="token string">"1738.50"</span><span class="token punctuation">,</span><span class="token string">"1779.88"</span><span class="token punctuation">,</span><span class="token string">"23705"</span><span class="token punctuation">,</span><span class="token string">"417728.91"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-13"</span><span class="token punctuation">,</span><span class="token string">"1751.00"</span><span class="token punctuation">,</span><span class="token string">"1762.00"</span><span class="token punctuation">,</span><span class="token string">"12.00"</span><span class="token punctuation">,</span><span class="token string">"0.69%"</span><span class="token punctuation">,</span><span class="token string">"1749.00"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"20560"</span><span class="token punctuation">,</span><span class="token string">"362647.62"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-10"</span><span class="token punctuation">,</span><span class="token string">"1751.57"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"-20.02"</span><span class="token punctuation">,</span><span class="token string">"-1.13%"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"1781.00"</span><span class="token punctuation">,</span><span class="token string">"21161"</span><span class="token punctuation">,</span><span class="token string">"372513.91"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-09"</span><span class="token punctuation">,</span><span class="token string">"1768.00"</span><span class="token punctuation">,</span><span class="token string">"1770.02"</span><span class="token punctuation">,</span><span class="token string">"-0.40"</span><span class="token punctuation">,</span><span class="token string">"-0.02%"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1785.00"</span><span class="token punctuation">,</span><span class="token string">"27612"</span><span class="token punctuation">,</span><span class="token string">"488144.28"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-08"</span><span class="token punctuation">,</span><span class="token string">"1780.02"</span><span class="token punctuation">,</span><span class="token string">"1770.42"</span><span class="token punctuation">,</span><span class="token string">"-17.88"</span><span class="token punctuation">,</span><span class="token string">"-1.00%"</span><span class="token punctuation">,</span><span class="token string">"1761.12"</span><span class="token punctuation">,</span><span class="token string">"1785.94"</span><span class="token punctuation">,</span><span class="token string">"22764"</span><span class="token punctuation">,</span><span class="token string">"403578.72"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-07"</span><span class="token punctuation">,</span><span class="token string">"1805.98"</span><span class="token punctuation">,</span><span class="token string">"1788.30"</span><span class="token punctuation">,</span><span class="token string">"-18.84"</span><span class="token punctuation">,</span><span class="token string">"-1.04%"</span><span class="token punctuation">,</span><span class="token string">"1788.00"</span><span class="token punctuation">,</span><span class="token string">"1816.60"</span><span class="token punctuation">,</span><span class="token string">"22785"</span><span class="token punctuation">,</span><span class="token string">"410130.25"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-06"</span><span class="token punctuation">,</span><span class="token string">"1818.18"</span><span class="token punctuation">,</span><span class="token string">"1807.14"</span><span class="token punctuation">,</span><span class="token string">"-10.90"</span><span class="token punctuation">,</span><span class="token string">"-0.60%"</span><span class="token punctuation">,</span><span class="token string">"1796.77"</span><span class="token punctuation">,</span><span class="token string">"1818.50"</span><span class="token punctuation">,</span><span class="token string">"20646"</span><span class="token punctuation">,</span><span class="token string">"373007.94"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-03"</span><span class="token punctuation">,</span><span class="token string">"1839.77"</span><span class="token punctuation">,</span><span class="token string">"1818.04"</span><span class="token punctuation">,</span><span class="token string">"-9.96"</span><span class="token punctuation">,</span><span class="token string">"-0.54%"</span><span class="token punctuation">,</span><span class="token string">"1802.48"</span><span class="token punctuation">,</span><span class="token string">"1841.61"</span><span class="token punctuation">,</span><span class="token string">"16198"</span><span class="token punctuation">,</span><span class="token string">"294684.25"</span><span class="token punctuation">,</span><span class="token string">"0.13%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-02"</span><span class="token punctuation">,</span><span class="token string">"1829.00"</span><span class="token punctuation">,</span><span class="token string">"1828.00"</span><span class="token punctuation">,</span><span class="token string">"-10.53"</span><span class="token punctuation">,</span><span class="token string">"-0.57%"</span><span class="token punctuation">,</span><span class="token string">"1821.10"</span><span class="token punctuation">,</span><span class="token string">"1838.99"</span><span class="token punctuation">,</span><span class="token string">"13144"</span><span class="token punctuation">,</span><span class="token string">"240529.23"</span><span class="token punctuation">,</span><span class="token string">"0.10%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-01"</span><span class="token punctuation">,</span><span class="token string">"1813.00"</span><span class="token punctuation">,</span><span class="token string">"1838.53"</span><span class="token punctuation">,</span><span class="token string">"24.79"</span><span class="token punctuation">,</span><span class="token string">"1.37%"</span><span class="token punctuation">,</span><span class="token string">"1803.23"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"24458"</span><span class="token punctuation">,</span><span class="token string">"447559.22"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-28"</span><span class="token punctuation">,</span><span class="token string">"1819.00"</span><span class="token punctuation">,</span><span class="token string">"1813.74"</span><span class="token punctuation">,</span><span class="token string">"3.33"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">,</span><span class="token string">"1783.30"</span><span class="token punctuation">,</span><span class="token string">"1822.01"</span><span class="token punctuation">,</span><span class="token string">"23952"</span><span class="token punctuation">,</span><span class="token string">"431487.69"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-27"</span><span class="token punctuation">,</span><span class="token string">"1778.50"</span><span class="token punctuation">,</span><span class="token string">"1810.41"</span><span class="token punctuation">,</span><span class="token string">"22.41"</span><span class="token punctuation">,</span><span class="token string">"1.25%"</span><span class="token punctuation">,</span><span class="token string">"1775.02"</span><span class="token punctuation">,</span><span class="token string">"1815.00"</span><span class="token punctuation">,</span><span class="token string">"22065"</span><span class="token punctuation">,</span><span class="token string">"397812.88"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-24"</span><span class="token punctuation">,</span><span class="token string">"1810.11"</span><span class="token punctuation">,</span><span class="token string">"1788.00"</span><span class="token punctuation">,</span><span class="token string">"-30.00"</span><span class="token punctuation">,</span><span class="token string">"-1.65%"</span><span class="token punctuation">,</span><span class="token string">"1782.18"</span><span class="token punctuation">,</span><span class="token string">"1810.19"</span><span class="token punctuation">,</span><span class="token string">"24635"</span><span class="token punctuation">,</span><span class="token string">"441562.16"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-23"</span><span class="token punctuation">,</span><span class="token string">"1840.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"-18.00"</span><span class="token punctuation">,</span><span class="token string">"-0.98%"</span><span class="token punctuation">,</span><span class="token string">"1805.25"</span><span class="token punctuation">,</span><span class="token string">"1848.80"</span><span class="token punctuation">,</span><span class="token string">"21881"</span><span class="token punctuation">,</span><span class="token string">"398399.12"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-22"</span><span class="token punctuation">,</span><span class="token string">"1855.01"</span><span class="token punctuation">,</span><span class="token string">"1836.00"</span><span class="token punctuation">,</span><span class="token string">"-31.00"</span><span class="token punctuation">,</span><span class="token string">"-1.66%"</span><span class="token punctuation">,</span><span class="token string">"1831.80"</span><span class="token punctuation">,</span><span class="token string">"1863.90"</span><span class="token punctuation">,</span><span class="token string">"21869"</span><span class="token punctuation">,</span><span class="token string">"403101.59"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-21"</span><span class="token punctuation">,</span><span class="token string">"1874.00"</span><span class="token punctuation">,</span><span class="token string">"1867.00"</span><span class="token punctuation">,</span><span class="token string">"-8.00"</span><span class="token punctuation">,</span><span class="token string">"-0.43%"</span><span class="token punctuation">,</span><span class="token string">"1851.00"</span><span class="token punctuation">,</span><span class="token string">"1874.00"</span><span class="token punctuation">,</span><span class="token string">"18751"</span><span class="token punctuation">,</span><span class="token string">"349163.34"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-20"</span><span class="token punctuation">,</span><span class="token string">"1821.00"</span><span class="token punctuation">,</span><span class="token string">"1875.00"</span><span class="token punctuation">,</span><span class="token string">"54.22"</span><span class="token punctuation">,</span><span class="token string">"2.98%"</span><span class="token punctuation">,</span><span class="token string">"1817.20"</span><span class="token punctuation">,</span><span class="token string">"1878.80"</span><span class="token punctuation">,</span><span class="token string">"29669"</span><span class="token punctuation">,</span><span class="token string">"548880.00"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-17"</span><span class="token punctuation">,</span><span class="token string">"1850.16"</span><span class="token punctuation">,</span><span class="token string">"1820.78"</span><span class="token punctuation">,</span><span class="token string">"-41.04"</span><span class="token punctuation">,</span><span class="token string">"-2.20%"</span><span class="token punctuation">,</span><span class="token string">"1820.05"</span><span class="token punctuation">,</span><span class="token string">"1873.00"</span><span class="token punctuation">,</span><span class="token string">"26443"</span><span class="token punctuation">,</span><span class="token string">"488032.88"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-16"</span><span class="token punctuation">,</span><span class="token string">"1841.34"</span><span class="token punctuation">,</span><span class="token string">"1861.82"</span><span class="token punctuation">,</span><span class="token string">"20.82"</span><span class="token punctuation">,</span><span class="token string">"1.13%"</span><span class="token punctuation">,</span><span class="token string">"1828.00"</span><span class="token punctuation">,</span><span class="token string">"1887.00"</span><span class="token punctuation">,</span><span class="token string">"33246"</span><span class="token punctuation">,</span><span class="token string">"619691.50"</span><span class="token punctuation">,</span><span class="token string">"0.26%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-15"</span><span class="token punctuation">,</span><span class="token string">"1843.78"</span><span class="token punctuation">,</span><span class="token string">"1841.00"</span><span class="token punctuation">,</span><span class="token string">"-2.79"</span><span class="token punctuation">,</span><span class="token string">"-0.15%"</span><span class="token punctuation">,</span><span class="token string">"1835.81"</span><span class="token punctuation">,</span><span class="token string">"1855.30"</span><span class="token punctuation">,</span><span class="token string">"18177"</span><span class="token punctuation">,</span><span class="token string">"335142.22"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-14"</span><span class="token punctuation">,</span><span class="token string">"1856.46"</span><span class="token punctuation">,</span><span class="token string">"1843.79"</span><span class="token punctuation">,</span><span class="token string">"-12.56"</span><span class="token punctuation">,</span><span class="token string">"-0.68%"</span><span class="token punctuation">,</span><span class="token string">"1835.00"</span><span class="token punctuation">,</span><span class="token string">"1857.40"</span><span class="token punctuation">,</span><span class="token string">"19566"</span><span class="token punctuation">,</span><span class="token string">"360176.94"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-13"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"1856.35"</span><span class="token punctuation">,</span><span class="token string">"46.35"</span><span class="token punctuation">,</span><span class="token string">"2.56%"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"1874.50"</span><span class="token punctuation">,</span><span class="token string">"38147"</span><span class="token punctuation">,</span><span class="token string">"705838.25"</span><span class="token punctuation">,</span><span class="token string">"0.30%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-10"</span><span class="token punctuation">,</span><span class="token string">"1810.10"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"-8.00"</span><span class="token punctuation">,</span><span class="token string">"-0.44%"</span><span class="token punctuation">,</span><span class="token string">"1801.05"</span><span class="token punctuation">,</span><span class="token string">"1818.49"</span><span class="token punctuation">,</span><span class="token string">"17985"</span><span class="token punctuation">,</span><span class="token string">"325385.94"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-09"</span><span class="token punctuation">,</span><span class="token string">"1778.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"34.00"</span><span class="token punctuation">,</span><span class="token string">"1.91%"</span><span class="token punctuation">,</span><span class="token string">"1775.01"</span><span class="token punctuation">,</span><span class="token string">"1829.75"</span><span class="token punctuation">,</span><span class="token string">"29754"</span><span class="token punctuation">,</span><span class="token string">"540139.94"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-08"</span><span class="token punctuation">,</span><span class="token string">"1800.01"</span><span class="token punctuation">,</span><span class="token string">"1784.00"</span><span class="token punctuation">,</span><span class="token string">"-13.00"</span><span class="token punctuation">,</span><span class="token string">"-0.72%"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"1805.97"</span><span class="token punctuation">,</span><span class="token string">"16676"</span><span class="token punctuation">,</span><span class="token string">"298057.47"</span><span class="token punctuation">,</span><span class="token string">"0.13%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-07"</span><span class="token punctuation">,</span><span class="token string">"1808.08"</span><span class="token punctuation">,</span><span class="token string">"1797.00"</span><span class="token punctuation">,</span><span class="token string">"2.00"</span><span class="token punctuation">,</span><span class="token string">"0.11%"</span><span class="token punctuation">,</span><span class="token string">"1787.73"</span><span class="token punctuation">,</span><span class="token string">"1808.80"</span><span class="token punctuation">,</span><span class="token string">"24322"</span><span class="token punctuation">,</span><span class="token string">"437367.19"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-06"</span><span class="token punctuation">,</span><span class="token string">"1780.00"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"-23.00"</span><span class="token punctuation">,</span><span class="token string">"-1.27%"</span><span class="token punctuation">,</span><span class="token string">"1760.00"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"42661"</span><span class="token punctuation">,</span><span class="token string">"759573.94"</span><span class="token punctuation">,</span><span class="token string">"0.34%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-03"</span><span class="token punctuation">,</span><span class="token string">"1820.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"-18.11"</span><span class="token punctuation">,</span><span class="token string">"-0.99%"</span><span class="token punctuation">,</span><span class="token string">"1795.68"</span><span class="token punctuation">,</span><span class="token string">"1826.00"</span><span class="token punctuation">,</span><span class="token string">"34945"</span><span class="token punctuation">,</span><span class="token string">"632463.50"</span><span class="token punctuation">,</span><span class="token string">"0.28%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-02"</span><span class="token punctuation">,</span><span class="token string">"1848.38"</span><span class="token punctuation">,</span><span class="token string">"1836.11"</span><span class="token punctuation">,</span><span class="token string">"-8.86"</span><span class="token punctuation">,</span><span class="token string">"-0.48%"</span><span class="token punctuation">,</span><span class="token string">"1826.00"</span><span class="token punctuation">,</span><span class="token string">"1859.00"</span><span class="token punctuation">,</span><span class="token string">"29759"</span><span class="token punctuation">,</span><span class="token string">"546550.94"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-01"</span><span class="token punctuation">,</span><span class="token string">"1854.98"</span><span class="token punctuation">,</span><span class="token string">"1844.97"</span><span class="token punctuation">,</span><span class="token string">"-0.79"</span><span class="token punctuation">,</span><span class="token string">"-0.04%"</span><span class="token punctuation">,</span><span class="token string">"1811.40"</span><span class="token punctuation">,</span><span class="token string">"1859.00"</span><span class="token punctuation">,</span><span class="token string">"33974"</span><span class="token punctuation">,</span><span class="token string">"624467.94"</span><span class="token punctuation">,</span><span class="token string">"0.27%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-31"</span><span class="token punctuation">,</span><span class="token string">"1896.50"</span><span class="token punctuation">,</span><span class="token string">"1845.76"</span><span class="token punctuation">,</span><span class="token string">"-42.24"</span><span class="token punctuation">,</span><span class="token string">"-2.24%"</span><span class="token punctuation">,</span><span class="token string">"1833.07"</span><span class="token punctuation">,</span><span class="token string">"1899.95"</span><span class="token punctuation">,</span><span class="token string">"32991"</span><span class="token punctuation">,</span><span class="token string">"612831.12"</span><span class="token punctuation">,</span><span class="token string">"0.26%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-30"</span><span class="token punctuation">,</span><span class="token string">"1909.00"</span><span class="token punctuation">,</span><span class="token string">"1888.00"</span><span class="token punctuation">,</span><span class="token string">"27.99"</span><span class="token punctuation">,</span><span class="token string">"1.50%"</span><span class="token punctuation">,</span><span class="token string">"1880.00"</span><span class="token punctuation">,</span><span class="token string">"1909.00"</span><span class="token punctuation">,</span><span class="token string">"35923"</span><span class="token punctuation">,</span><span class="token string">"679975.69"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-20"</span><span class="token punctuation">,</span><span class="token string">"1889.19"</span><span class="token punctuation">,</span><span class="token string">"1860.01"</span><span class="token punctuation">,</span><span class="token string">"-20.20"</span><span class="token punctuation">,</span><span class="token string">"-1.07%"</span><span class="token punctuation">,</span><span class="token string">"1858.00"</span><span class="token punctuation">,</span><span class="token string">"1898.25"</span><span class="token punctuation">,</span><span class="token string">"25609"</span><span class="token punctuation">,</span><span class="token string">"480735.59"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-19"</span><span class="token punctuation">,</span><span class="token string">"1892.50"</span><span class="token punctuation">,</span><span class="token string">"1880.21"</span><span class="token punctuation">,</span><span class="token string">"-12.79"</span><span class="token punctuation">,</span><span class="token string">"-0.68%"</span><span class="token punctuation">,</span><span class="token string">"1866.00"</span><span class="token punctuation">,</span><span class="token string">"1892.52"</span><span class="token punctuation">,</span><span class="token string">"23439"</span><span class="token punctuation">,</span><span class="token string">"440199.44"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-18"</span><span class="token punctuation">,</span><span class="token string">"1914.00"</span><span class="token punctuation">,</span><span class="token string">"1893.00"</span><span class="token punctuation">,</span><span class="token string">"-15.00"</span><span class="token punctuation">,</span><span class="token string">"-0.79%"</span><span class="token punctuation">,</span><span class="token string">"1890.00"</span><span class="token punctuation">,</span><span class="token string">"1925.30"</span><span class="token punctuation">,</span><span class="token string">"21063"</span><span class="token punctuation">,</span><span class="token string">"400866.53"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-17"</span><span class="token punctuation">,</span><span class="token string">"1913.16"</span><span class="token punctuation">,</span><span class="token string">"1908.00"</span><span class="token punctuation">,</span><span class="token string">"-4.90"</span><span class="token punctuation">,</span><span class="token string">"-0.26%"</span><span class="token punctuation">,</span><span class="token string">"1895.00"</span><span class="token punctuation">,</span><span class="token string">"1923.00"</span><span class="token punctuation">,</span><span class="token string">"21299"</span><span class="token punctuation">,</span><span class="token string">"406832.16"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-16"</span><span class="token punctuation">,</span><span class="token string">"1886.00"</span><span class="token punctuation">,</span><span class="token string">"1912.90"</span><span class="token punctuation">,</span><span class="token string">"25.90"</span><span class="token punctuation">,</span><span class="token string">"1.37%"</span><span class="token punctuation">,</span><span class="token string">"1881.00"</span><span class="token punctuation">,</span><span class="token string">"1935.00"</span><span class="token punctuation">,</span><span class="token string">"36848"</span><span class="token punctuation">,</span><span class="token string">"705998.31"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-13"</span><span class="token punctuation">,</span><span class="token string">"1844.18"</span><span class="token punctuation">,</span><span class="token string">"1887.00"</span><span class="token punctuation">,</span><span class="token string">"53.00"</span><span class="token punctuation">,</span><span class="token string">"2.89%"</span><span class="token punctuation">,</span><span class="token string">"1840.00"</span><span class="token punctuation">,</span><span class="token string">"1888.00"</span><span class="token punctuation">,</span><span class="token string">"31940"</span><span class="token punctuation">,</span><span class="token string">"596987.62"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-12"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"1834.00"</span><span class="token punctuation">,</span><span class="token string">"-10.95"</span><span class="token punctuation">,</span><span class="token string">"-0.59%"</span><span class="token punctuation">,</span><span class="token string">"1833.00"</span><span class="token punctuation">,</span><span class="token string">"1856.00"</span><span class="token punctuation">,</span><span class="token string">"17193"</span><span class="token punctuation">,</span><span class="token string">"316263.72"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-11"</span><span class="token punctuation">,</span><span class="token string">"1856.00"</span><span class="token punctuation">,</span><span class="token string">"1844.95"</span><span class="token punctuation">,</span><span class="token string">"-9.50"</span><span class="token punctuation">,</span><span class="token string">"-0.51%"</span><span class="token punctuation">,</span><span class="token string">"1836.84"</span><span class="token punctuation">,</span><span class="token string">"1860.00"</span><span class="token punctuation">,</span><span class="token string">"22720"</span><span class="token punctuation">,</span><span class="token string">"420148.78"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-10"</span><span class="token punctuation">,</span><span class="token string">"1839.06"</span><span class="token punctuation">,</span><span class="token string">"1854.45"</span><span class="token punctuation">,</span><span class="token string">"13.25"</span><span class="token punctuation">,</span><span class="token string">"0.72%"</span><span class="token punctuation">,</span><span class="token string">"1830.50"</span><span class="token punctuation">,</span><span class="token string">"1864.50"</span><span class="token punctuation">,</span><span class="token string">"22732"</span><span class="token punctuation">,</span><span class="token string">"420478.38"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-09"</span><span class="token punctuation">,</span><span class="token string">"1835.00"</span><span class="token punctuation">,</span><span class="token string">"1841.20"</span><span class="token punctuation">,</span><span class="token string">"37.43"</span><span class="token punctuation">,</span><span class="token string">"2.08%"</span><span class="token punctuation">,</span><span class="token string">"1807.82"</span><span class="token punctuation">,</span><span class="token string">"1849.98"</span><span class="token punctuation">,</span><span class="token string">"30977"</span><span class="token punctuation">,</span><span class="token string">"568418.12"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-06"</span><span class="token punctuation">,</span><span class="token string">"1806.12"</span><span class="token punctuation">,</span><span class="token string">"1803.77"</span><span class="token punctuation">,</span><span class="token string">"2.77"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">,</span><span class="token string">"1787.00"</span><span class="token punctuation">,</span><span class="token string">"1811.90"</span><span class="token punctuation">,</span><span class="token string">"24904"</span><span class="token punctuation">,</span><span class="token string">"448083.88"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-05"</span><span class="token punctuation">,</span><span class="token string">"1737.00"</span><span class="token punctuation">,</span><span class="token string">"1801.00"</span><span class="token punctuation">,</span><span class="token string">"75.99"</span><span class="token punctuation">,</span><span class="token string">"4.41%"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"1801.00"</span><span class="token punctuation">,</span><span class="token string">"47943"</span><span class="token punctuation">,</span><span class="token string">"854158.69"</span><span class="token punctuation">,</span><span class="token string">"0.38%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-04"</span><span class="token punctuation">,</span><span class="token string">"1730.00"</span><span class="token punctuation">,</span><span class="token string">"1725.01"</span><span class="token punctuation">,</span><span class="token string">"-5.00"</span><span class="token punctuation">,</span><span class="token string">"-0.29%"</span><span class="token punctuation">,</span><span class="token string">"1716.00"</span><span class="token punctuation">,</span><span class="token string">"1738.70"</span><span class="token punctuation">,</span><span class="token string">"20416"</span><span class="token punctuation">,</span><span class="token string">"352358.22"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-03"</span><span class="token punctuation">,</span><span class="token string">"1731.20"</span><span class="token punctuation">,</span><span class="token string">"1730.01"</span><span class="token punctuation">,</span><span class="token string">"3.01"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">,</span><span class="token string">"1706.01"</span><span class="token punctuation">,</span><span class="token string">"1738.43"</span><span class="token punctuation">,</span><span class="token string">"26034"</span><span class="token punctuation">,</span><span class="token string">"448776.03"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-30"</span><span class="token punctuation">,</span><span class="token string">"1736.00"</span><span class="token punctuation">,</span><span class="token string">"1727.00"</span><span class="token punctuation">,</span><span class="token string">"8.00"</span><span class="token punctuation">,</span><span class="token string">"0.47%"</span><span class="token punctuation">,</span><span class="token string">"1727.00"</span><span class="token punctuation">,</span><span class="token string">"1752.99"</span><span class="token punctuation">,</span><span class="token string">"25333"</span><span class="token punctuation">,</span><span class="token string">"440954.41"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-29"</span><span class="token punctuation">,</span><span class="token string">"1717.00"</span><span class="token punctuation">,</span><span class="token string">"1719.00"</span><span class="token punctuation">,</span><span class="token string">"-14.00"</span><span class="token punctuation">,</span><span class="token string">"-0.81%"</span><span class="token punctuation">,</span><span class="token string">"1701.05"</span><span class="token punctuation">,</span><span class="token string">"1726.99"</span><span class="token punctuation">,</span><span class="token string">"22418"</span><span class="token punctuation">,</span><span class="token string">"384449.97"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-28"</span><span class="token punctuation">,</span><span class="token string">"1745.88"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"0.00"</span><span class="token punctuation">,</span><span class="token string">"0.00%"</span><span class="token punctuation">,</span><span class="token string">"1708.01"</span><span class="token punctuation">,</span><span class="token string">"1747.00"</span><span class="token punctuation">,</span><span class="token string">"21438"</span><span class="token punctuation">,</span><span class="token string">"369994.91"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-27"</span><span class="token punctuation">,</span><span class="token string">"1738.00"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"12.85"</span><span class="token punctuation">,</span><span class="token string">"0.75%"</span><span class="token punctuation">,</span><span class="token string">"1725.50"</span><span class="token punctuation">,</span><span class="token string">"1747.15"</span><span class="token punctuation">,</span><span class="token string">"17905"</span><span class="token punctuation">,</span><span class="token string">"310927.03"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-26"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"1742.06"</span><span class="token punctuation">,</span><span class="token string">"-28.94"</span><span class="token punctuation">,</span><span class="token string">"-1.63%"</span><span class="token punctuation">,</span><span class="token string">"1735.02"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"21384"</span><span class="token punctuation">,</span><span class="token string">"374912.09"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-23"</span><span class="token punctuation">,</span><span class="token string">"1752.40"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"3.00"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">,</span><span class="token string">"1745.00"</span><span class="token punctuation">,</span><span class="token string">"1782.00"</span><span class="token punctuation">,</span><span class="token string">"17319"</span><span class="token punctuation">,</span><span class="token string">"306360.84"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-22"</span><span class="token punctuation">,</span><span class="token string">"1756.70"</span><span class="token punctuation">,</span><span class="token string">"1768.00"</span><span class="token punctuation">,</span><span class="token string">"29.00"</span><span class="token punctuation">,</span><span class="token string">"1.67%"</span><span class="token punctuation">,</span><span class="token string">"1745.00"</span><span class="token punctuation">,</span><span class="token string">"1783.00"</span><span class="token punctuation">,</span><span class="token string">"23175"</span><span class="token punctuation">,</span><span class="token string">"409386.16"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-21"</span><span class="token punctuation">,</span><span class="token string">"1724.00"</span><span class="token punctuation">,</span><span class="token string">"1739.00"</span><span class="token punctuation">,</span><span class="token string">"24.00"</span><span class="token punctuation">,</span><span class="token string">"1.40%"</span><span class="token punctuation">,</span><span class="token string">"1717.65"</span><span class="token punctuation">,</span><span class="token string">"1739.00"</span><span class="token punctuation">,</span><span class="token string">"22816"</span><span class="token punctuation">,</span><span class="token string">"394892.62"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-20"</span><span class="token punctuation">,</span><span class="token string">"1765.33"</span><span class="token punctuation">,</span><span class="token string">"1715.00"</span><span class="token punctuation">,</span><span class="token string">"-58.00"</span><span class="token punctuation">,</span><span class="token string">"-3.27%"</span><span class="token punctuation">,</span><span class="token string">"1682.45"</span><span class="token punctuation">,</span><span class="token string">"1765.33"</span><span class="token punctuation">,</span><span class="token string">"46198"</span><span class="token punctuation">,</span><span class="token string">"794412.06"</span><span class="token punctuation">,</span><span class="token string">"0.37%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-19"</span><span class="token punctuation">,</span><span class="token string">"1798.80"</span><span class="token punctuation">,</span><span class="token string">"1773.00"</span><span class="token punctuation">,</span><span class="token string">"-13.87"</span><span class="token punctuation">,</span><span class="token string">"-0.78%"</span><span class="token punctuation">,</span><span class="token string">"1760.17"</span><span class="token punctuation">,</span><span class="token string">"1798.80"</span><span class="token punctuation">,</span><span class="token string">"24987"</span><span class="token punctuation">,</span><span class="token string">"444723.66"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token string">"cn_600519"</span><span class="token punctuation">,</span><span class="token string">"stat"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"累计:"</span><span class="token punctuation">,</span><span class="token string">"2022-12-19至2023-04-18"</span><span class="token punctuation">,</span><span class="token string">"-28.87"</span><span class="token punctuation">,</span><span class="token string">"-1.62%"</span><span class="token punctuation">,</span><span class="token number">1682.45</span><span class="token punctuation">,</span><span class="token number">1935</span><span class="token punctuation">,</span><span class="token number">1961308</span><span class="token punctuation">,</span><span class="token number">35261288.98</span><span class="token punctuation">,</span><span class="token string">"15.59%"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>伪装成浏览器</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">'http://www.ctrip.com/'</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'User-Agent'</span><span class="token punctuation">,</span>               <span class="token string">'Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X) AppleWebKit/602.4.6 (KHTML, like Gecko) Version/10.0 Mobile/14D27 Safari/602.1'</span><span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> htmlstr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'mobile'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'移动版'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">移动版<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用Selenium爬取数据"><a href="#使用Selenium爬取数据" class="headerlink" title="使用Selenium爬取数据"></a>使用Selenium爬取数据</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://q.stock.sohu.com/cn/600519/lshq.shtml'</span><span class="token punctuation">)</span>em <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token string">'BIZ_hq_historySearch'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>em<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">## driver.close()</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [2], in &lt;cell line: 6&gt;()      3 driver = webdriver.Chrome()      5 driver.get(&#39;http://q.stock.sohu.com/cn/600519/lshq.shtml&#39;)----&gt; 6 em = driver.find_element_by_id(&#39;BIZ_hq_historySearch&#39;)      7 print(em.text)      8 ## driver.close()AttributeError: &#39;WebDriver&#39; object has no attribute &#39;find_element_by_id&#39;</code></pre><h3 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h3><h4 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> os<span class="token keyword">import</span> reurl <span class="token operator">=</span> <span class="token string">'http://p.weather.com.cn/'</span><span class="token keyword">def</span> <span class="token function">findallimageurl</span><span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""从HTML代码中查找匹配的字符串"""</span>    <span class="token comment">## 定义正则表达式</span>    pattern <span class="token operator">=</span> <span class="token string">r'http://\S+(?:\.png|\.jpg)'</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> htmlstr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getfilename</span><span class="token punctuation">(</span>urlstr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""根据图片连接地址截取图片名"""</span>    pos <span class="token operator">=</span> urlstr<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> urlstr<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">## 分析获得的url列表</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    url_list <span class="token operator">=</span> findallimageurl<span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span class="token keyword">for</span> imagesrc <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>    <span class="token comment">## 根据图片地址下载</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>imagesrc<span class="token punctuation">)</span>    <span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>        data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">## 过滤掉用小于100kb字节的图片</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment">## 创建download文件夹</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">)</span>        <span class="token comment">## 获得图片文件名</span>        filename <span class="token operator">=</span> getfilename<span class="token punctuation">(</span>imagesrc<span class="token punctuation">)</span>        filename <span class="token operator">=</span> <span class="token string">'download/'</span> <span class="token operator">+</span> filename        <span class="token comment">## 保存图片到本地</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载图片'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>下载图片 download/20230412105733E6869CA2C51FC9659543B01BCAD594C0.jpg下载图片 download/2023041210583373DC4BF4E9ABC5CC8C084D45FB133E3A.jpg下载图片 download/20230412105932202830A62B6E006C698504271BA9D52C.jpg下载图片 download/20230406160425985ECFF0D26CB2A423DAECD29141F4EE.jpg下载图片 download/20220401091431D32C5DA957F3441693885B05E271420C.jpg下载图片 download/2023041812043228512B6723F81BA42BC286530A7AD859.jpg下载图片 download/20230416152716215BBBA7CCF443222A245DA84B742444.jpg下载图片 download/202304160947448C2B8A7CF30225471547902BD50AB088.jpg下载图片 download/20230316141537671B47C5E4F520E11EE0E489187E624F.png</code></pre><h4 id="使用BeautifulSoup库"><a href="#使用BeautifulSoup库" class="headerlink" title="使用BeautifulSoup库"></a>使用BeautifulSoup库</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupurl <span class="token operator">=</span> <span class="token string">'http://p.weather.com.cn/'</span><span class="token keyword">def</span> <span class="token function">findallimageurl</span><span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""从HTML代码中查找匹配的字符串"""</span>    sp <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>htmlstr<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span> <span class="token comment">#html.parser html.parser</span>    <span class="token comment">## 返回所有的img标签对象</span>    imgtaglist <span class="token operator">=</span> sp<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>    <span class="token comment">## 从img标签对象列表中返回对应的src列表</span>    srclist <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span> u<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> imgtaglist<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## 过滤掉非.png和.jpg结尾文件src字符串</span>    filtered_srclist <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span> u<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.png'</span><span class="token punctuation">)</span>                                        <span class="token keyword">or</span> u<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> srclist<span class="token punctuation">)</span>    <span class="token keyword">return</span> filtered_srclist<span class="token keyword">def</span> <span class="token function">getfilename</span><span class="token punctuation">(</span>urlstr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""根据图片连接地址截取图片名"""</span>    pos <span class="token operator">=</span> urlstr<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> urlstr<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">## 分析获得的url列表</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    url_list <span class="token operator">=</span> findallimageurl<span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span class="token keyword">for</span> imagesrc <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>    <span class="token comment">## 根据图片地址下载</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>imagesrc<span class="token punctuation">)</span>    <span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>        data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">## 过滤掉用小于100kb字节的图片</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment">## 创建download文件夹</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'download1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'download1'</span><span class="token punctuation">)</span>        <span class="token comment">## 获得图片文件名</span>        filename <span class="token operator">=</span> getfilename<span class="token punctuation">(</span>imagesrc<span class="token punctuation">)</span>        filename <span class="token operator">=</span> <span class="token string">'download1/'</span> <span class="token operator">+</span> filename        <span class="token comment">## 保存图片到本地</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载图片'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>下载图片 download1/20230412105733E6869CA2C51FC9659543B01BCAD594C0.jpg下载图片 download1/2023041210583373DC4BF4E9ABC5CC8C084D45FB133E3A.jpg下载图片 download1/20230412105932202830A62B6E006C698504271BA9D52C.jpg下载图片 download1/20230406160425985ECFF0D26CB2A423DAECD29141F4EE.jpg下载图片 download1/20220401091431D32C5DA957F3441693885B05E271420C.jpg下载图片 download1/2023041812043228512B6723F81BA42BC286530A7AD859.jpg下载图片 download1/20230416152716215BBBA7CCF443222A245DA84B742444.jpg下载图片 download1/202304160947448C2B8A7CF30225471547902BD50AB088.jpg下载图片 download1/20230316141537671B47C5E4F520E11EE0E489187E624F.png</code></pre><h3 id="爬取Nasdaq股票数据"><a href="#爬取Nasdaq股票数据" class="headerlink" title="爬取Nasdaq股票数据"></a>爬取Nasdaq股票数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> logging<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> db<span class="token punctuation">.</span>db_access <span class="token keyword">import</span> insert_hisq_datalogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(threadName)s - '</span>                           <span class="token string">'%(name)s - %(funcName)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment">## url = 'https://www.nasdaq.com/symbol/aapl/historical#.UWdnJBDMhHk'</span><span class="token comment">## 换成自己到路径</span>url <span class="token operator">=</span> <span class="token string">'file:///C:/Users/HP/nasdaq-Apple1.html'</span><span class="token keyword">def</span> <span class="token function">validateUpdate</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""验证数据是否更新，更新返回True，未更新返回False"""</span>    <span class="token comment">## 创建md5对象</span>    md5obj <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    md5obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>html<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    md5code <span class="token operator">=</span> md5obj<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    old_md5code <span class="token operator">=</span> <span class="token string">''</span>    f_name <span class="token operator">=</span> <span class="token string">'md5.txt'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>f_name<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 如果文件存在读取文件内容</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>f_name<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            old_md5code <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> md5code <span class="token operator">==</span> old_md5code<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'数据没有更新'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment">## 把新的md5码写入到文件中</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>f_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>md5code<span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'数据更新'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment">## 线程运行标志</span>isrunning <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment">## 爬虫工作间隔</span>interval <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">controlthread_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""控制线程体函数"""</span>    <span class="token keyword">global</span> interval<span class="token punctuation">,</span> isrunning    <span class="token keyword">while</span> isrunning<span class="token punctuation">:</span>        <span class="token comment">## 控制爬虫工作计划</span>        i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入Bye终止爬虫，输入数字改变爬虫工作间隔，单位秒：'</span><span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'控制输入&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            interval <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'bye'</span><span class="token punctuation">:</span>                isrunning <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">istradtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断交易时间"""</span>    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> <span class="token string">'%H%M%S'</span>    strnow <span class="token operator">=</span> now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    starttime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    endtime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">if</span> now<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span> \            <span class="token keyword">or</span> now<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span> \            <span class="token keyword">or</span> <span class="token punctuation">(</span>endtime <span class="token operator">&lt;</span> strnow <span class="token operator">&lt;</span> starttime<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 非工作时间</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment">## 工作时间</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">workthread_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""工作线程体函数"""</span>    <span class="token keyword">global</span> interval<span class="token punctuation">,</span> isrunning    <span class="token keyword">while</span> isrunning<span class="token punctuation">:</span>        <span class="token keyword">if</span> istradtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">## 交易时间内不工作</span>            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'交易时间，爬虫休眠1小时...'</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'爬虫开始工作...'</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            html <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            sp <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>            <span class="token comment">## 返回指定CSS选择器的div标签列表</span>            div <span class="token operator">=</span> sp<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div#quotes_content_left_pnlAJAX'</span><span class="token punctuation">)</span>            <span class="token comment">## 从列表中返回第一个元素</span>            divstring <span class="token operator">=</span> div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> validateUpdate<span class="token punctuation">(</span>divstring<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 数据更新</span>                <span class="token comment">## 分析数据</span>                trlist <span class="token operator">=</span> sp<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div#quotes_content_left_pnlAJAX table tbody tr'</span><span class="token punctuation">)</span>                data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> tr <span class="token keyword">in</span> trlist<span class="token punctuation">:</span>                    trtext <span class="token operator">=</span> tr<span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n\r '</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> trtext <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    rows <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r'\s+'</span><span class="token punctuation">,</span> trtext<span class="token punctuation">)</span>                    fields <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        df <span class="token operator">=</span> <span class="token string">'%m/%d/%Y'</span>                        fields<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">)</span>                    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                        <span class="token comment">## 实时数据不分析（只有时间，如10:12）</span>                        <span class="token keyword">continue</span>                    fields<span class="token punctuation">[</span><span class="token string">'Open'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    fields<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    fields<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    fields<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    fields<span class="token punctuation">[</span><span class="token string">'Volume'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fields<span class="token punctuation">)</span>                <span class="token comment">## 保存数据到数据库</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">:</span>                    row<span class="token punctuation">[</span><span class="token string">'Symbol'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'AAPL'</span>                    insert_hisq_data<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token comment">## 爬虫休眠</span>            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'爬虫休眠&#123;0&#125;秒...'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主函数"""</span>    <span class="token keyword">global</span> interval<span class="token punctuation">,</span> isrunning    <span class="token comment">## 创建工作线程对象workthread</span>    workthread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>workthread_body<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'WorkThread'</span><span class="token punctuation">)</span>    <span class="token comment">## 启动线程workthread</span>    workthread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## 创建控制线程对象controlthread</span>    controlthread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>controlthread_body<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'ControlThread'</span><span class="token punctuation">)</span>    <span class="token comment">## 启动线程controlthread</span>    controlthread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-04-19 15:46:27,709 - WorkThread - __main__ - workthread_body - INFO - 爬虫开始工作...2023-04-19 15:46:28,157 - WorkThread - __main__ - validateUpdate - INFO - 数据更新2023-04-19 15:46:28,236 - WorkThread - __main__ - workthread_body - INFO - 爬虫休眠5秒...2023-04-19 15:46:33,247 - WorkThread - __main__ - workthread_body - INFO - 爬虫开始工作...2023-04-19 15:46:33,255 - WorkThread - __main__ - validateUpdate - INFO - 数据没有更新2023-04-19 15:46:33,256 - WorkThread - __main__ - workthread_body - INFO - 爬虫休眠5秒...输入Bye终止爬虫，输入数字改变爬虫工作间隔，单位秒：36002023-04-19 15:46:36,048 - ControlThread - __main__ - controlthread_body - INFO - 控制输入3600输入Bye终止爬虫，输入数字改变爬虫工作间隔，单位秒：Exception in thread ControlThread:Traceback (most recent call last):  File &quot;E:\anaconda\lib\threading.py&quot;, line 973, in _bootstrap_inner    self.run()  File &quot;E:\anaconda\lib\threading.py&quot;, line 910, in run    self._target(*self._args, **self._kwargs)  File &quot;C:\Users\HP\AppData\Local\Temp\ipykernel_22288\985097547.py&quot;, line 66, in controlthread_bodyEOFError: EOF when reading a line2023-04-19 15:46:38,259 - WorkThread - __main__ - workthread_body - INFO - 爬虫开始工作...2023-04-19 15:46:38,267 - WorkThread - __main__ - validateUpdate - INFO - 数据没有更新2023-04-19 15:46:38,267 - WorkThread - __main__ - workthread_body - INFO - 爬虫休眠3600秒...</code></pre><h2 id="Pandas进阶"><a href="#Pandas进阶" class="headerlink" title="Pandas进阶"></a>Pandas进阶</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>a  1   -0.018841   2    0.291057   3   -0.869647b  1    0.500437   3   -1.678710c  1   -1.957127   2   -0.563527d  2    0.454833   3   -0.343765dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>MultiIndex([(&#39;a&#39;, 1),            (&#39;a&#39;, 2),            (&#39;a&#39;, 3),            (&#39;b&#39;, 1),            (&#39;b&#39;, 3),            (&#39;c&#39;, 1),            (&#39;c&#39;, 2),            (&#39;d&#39;, 2),            (&#39;d&#39;, 3)],           )</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1    0.5004373   -1.678710dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>b  1    0.500437   3   -1.678710c  1   -1.957127   2   -0.563527dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>b  1    0.500437   3   -1.678710d  2    0.454833   3   -0.343765dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>a    0.291057c   -0.563527d    0.454833dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Green'</span><span class="token punctuation">,</span> <span class="token string">'Red'</span><span class="token punctuation">,</span> <span class="token string">'Green'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th></th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th></th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th>2</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>index<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span>frame<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">]</span>frame<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th>2</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>9</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> <span class="token operator">*</span>MultiIndex<span class="token punctuation">.</span>from_arrays<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Green'</span><span class="token punctuation">,</span> <span class="token string">'Red'</span><span class="token punctuation">,</span> <span class="token string">'Green'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>MultiIndex([(    &#39;Ohio&#39;, &#39;Green&#39;),            (    &#39;Ohio&#39;,   &#39;Red&#39;),            (&#39;Colorado&#39;, &#39;Green&#39;)],           names=[&#39;state&#39;, &#39;color&#39;])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>swaplevel<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key2</th>      <th>key1</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <th>a</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <th>a</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>1</th>      <th>b</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th>2</th>      <th>b</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <th>1</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>b</th>      <th>1</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th>a</th>      <th>2</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>b</th>      <th>2</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>swaplevel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key2</th>      <th>key1</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">1</th>      <th>a</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>b</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th rowspan="2" valign="top">2</th>      <th>a</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>b</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'key2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_21392\2004046222.py:1: FutureWarning: Using the level keyword in DataFrame and Series aggregations is deprecated and will be removed in a future version. Use groupby instead. df.sum(level=1) should use df.groupby(level=1).sum().  frame.sum(level=&#39;key2&#39;)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key2</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>6</td>      <td>8</td>      <td>10</td>    </tr>    <tr>      <th>2</th>      <td>12</td>      <td>14</td>      <td>16</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'color'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_21392\4133796543.py:1: FutureWarning: Using the level keyword in DataFrame and Series aggregations is deprecated and will be removed in a future version. Use groupby instead. df.sum(level=1) should use df.groupby(level=1).sum().  frame.sum(level=&#39;color&#39;, axis=1)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>8</td>      <td>4</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>14</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>20</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>4.000000</td>      <td>4.000000</td>      <td>4.000000</td>    </tr>    <tr>      <th>mean</th>      <td>4.500000</td>      <td>5.500000</td>      <td>6.500000</td>    </tr>    <tr>      <th>std</th>      <td>3.872983</td>      <td>3.872983</td>      <td>3.872983</td>    </tr>    <tr>      <th>min</th>      <td>0.000000</td>      <td>1.000000</td>      <td>2.000000</td>    </tr>    <tr>      <th>25%</th>      <td>2.250000</td>      <td>3.250000</td>      <td>4.250000</td>    </tr>    <tr>      <th>50%</th>      <td>4.500000</td>      <td>5.500000</td>      <td>6.500000</td>    </tr>    <tr>      <th>75%</th>      <td>6.750000</td>      <td>7.750000</td>      <td>8.750000</td>    </tr>    <tr>      <th>max</th>      <td>9.000000</td>      <td>10.000000</td>      <td>11.000000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>7</td>      <td>one</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>6</td>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>5</td>      <td>one</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>4</td>      <td>two</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>3</td>      <td>two</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>2</td>      <td>two</td>      <td>2</td>    </tr>    <tr>      <th>6</th>      <td>6</td>      <td>1</td>      <td>two</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>a</th>      <th>b</th>    </tr>    <tr>      <th>c</th>      <th>d</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">one</th>      <th>0</th>      <td>0</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>5</td>    </tr>    <tr>      <th rowspan="4" valign="top">two</th>      <th>0</th>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>6</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>    <tr>      <th>c</th>      <th>d</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">one</th>      <th>0</th>      <td>0</td>      <td>7</td>      <td>one</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>6</td>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>5</td>      <td>one</td>      <td>2</td>    </tr>    <tr>      <th rowspan="4" valign="top">two</th>      <th>0</th>      <td>3</td>      <td>4</td>      <td>two</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>3</td>      <td>two</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>5</td>      <td>2</td>      <td>two</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>6</td>      <td>1</td>      <td>two</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame2<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>c</th>      <th>d</th>      <th>a</th>      <th>b</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>0</td>      <td>0</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td>one</td>      <td>1</td>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>one</td>      <td>2</td>      <td>2</td>      <td>5</td>    </tr>    <tr>      <th>3</th>      <td>two</td>      <td>0</td>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>two</td>      <td>1</td>      <td>4</td>      <td>3</td>    </tr>    <tr>      <th>5</th>      <td>two</td>      <td>2</td>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>6</th>      <td>two</td>      <td>3</td>      <td>6</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdf1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>    </tr>    <tr>      <th>6</th>      <td>b</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>d</td>      <td>2</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'lkey'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'rkey'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df3<span class="token punctuation">,</span> df4<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'lkey'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'rkey'</span><span class="token punctuation">)</span>  <span class="token comment">#分别指定列名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>lkey</th>      <th>data1</th>      <th>rkey</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>6</td>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>2</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>      <td>a</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>lkey</th>      <th>data1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>    </tr>    <tr>      <th>6</th>      <td>b</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>rkey</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>d</td>      <td>2</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1.0</td>      <td>1.0</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>6.0</td>      <td>1.0</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>2.0</td>      <td>0.0</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4.0</td>      <td>0.0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5.0</td>      <td>0.0</td>    </tr>    <tr>      <th>6</th>      <td>c</td>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>7</th>      <td>d</td>      <td>NaN</td>      <td>2.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>      <td>1.0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>1.0</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>      <td>0.0</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>      <td>0.0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>      <td>0.0</td>    </tr>    <tr>      <th>6</th>      <td>b</td>      <td>6</td>      <td>1.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>2.0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>a</td>      <td>4.0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>5.0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>b</td>      <td>0.0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>b</td>      <td>1.0</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>b</td>      <td>6.0</td>      <td>1</td>    </tr>    <tr>      <th>6</th>      <td>d</td>      <td>NaN</td>      <td>2</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>    </tr>    <tr>      <th>6</th>      <td>b</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>d</td>      <td>2</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'lval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'rval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>lval</th>      <th>rval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>1.0</td>      <td>4.0</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>one</td>      <td>1.0</td>      <td>5.0</td>    </tr>    <tr>      <th>2</th>      <td>foo</td>      <td>two</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>bar</td>      <td>one</td>      <td>3.0</td>      <td>6.0</td>    </tr>    <tr>      <th>4</th>      <td>bar</td>      <td>two</td>      <td>NaN</td>      <td>7.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2_x</th>      <th>lval</th>      <th>key2_y</th>      <th>rval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>1</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>one</td>      <td>1</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>foo</td>      <td>two</td>      <td>2</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>foo</td>      <td>two</td>      <td>2</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>4</th>      <td>bar</td>      <td>one</td>      <td>3</td>      <td>one</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>bar</td>      <td>one</td>      <td>3</td>      <td>two</td>      <td>7</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>lval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>two</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>bar</td>      <td>one</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">right<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>rval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>bar</td>      <td>one</td>      <td>6</td>    </tr>    <tr>      <th>3</th>      <td>bar</td>      <td>two</td>      <td>7</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key1'</span><span class="token punctuation">,</span> suffixes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'_left'</span><span class="token punctuation">,</span> <span class="token string">'_right'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2_left</th>      <th>lval</th>      <th>key2_right</th>      <th>rval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>1</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>one</td>      <td>1</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>foo</td>      <td>two</td>      <td>2</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>foo</td>      <td>two</td>      <td>2</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>4</th>      <td>bar</td>      <td>one</td>      <td>3</td>      <td>one</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>bar</td>      <td>one</td>      <td>3</td>      <td>two</td>      <td>7</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdleft1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>right1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'group_val'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>left1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>value</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>b</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>c</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">right1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>group_val</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>3.5</td>    </tr>    <tr>      <th>b</th>      <td>7.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left1<span class="token punctuation">,</span> right1<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>value</th>      <th>group_val</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>      <td>3.5</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>      <td>3.5</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>3</td>      <td>3.5</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>7.0</td>    </tr>    <tr>      <th>4</th>      <td>b</td>      <td>4</td>      <td>7.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nplefth <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5.</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>righth <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'event1'</span><span class="token punctuation">,</span> <span class="token string">'event2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lefth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>    </tr>    <tr>      <th>1</th>      <td>Ohio</td>      <td>2001</td>      <td>1.0</td>    </tr>    <tr>      <th>2</th>      <td>Ohio</td>      <td>2002</td>      <td>2.0</td>    </tr>    <tr>      <th>3</th>      <td>Nevada</td>      <td>2001</td>      <td>3.0</td>    </tr>    <tr>      <th>4</th>      <td>Nevada</td>      <td>2002</td>      <td>4.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">righth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>event1</th>      <th>event2</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">Nevada</th>      <th>2001</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2000</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th rowspan="4" valign="top">Ohio</th>      <th>2000</th>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>2000</th>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2001</th>      <td>8</td>      <td>9</td>    </tr>    <tr>      <th>2002</th>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>lefth<span class="token punctuation">,</span> righth<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data</th>      <th>event1</th>      <th>event2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td>Ohio</td>      <td>2001</td>      <td>1.0</td>      <td>8</td>      <td>9</td>    </tr>    <tr>      <th>2</th>      <td>Ohio</td>      <td>2002</td>      <td>2.0</td>      <td>10</td>      <td>11</td>    </tr>    <tr>      <th>3</th>      <td>Nevada</td>      <td>2001</td>      <td>3.0</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>lefth<span class="token punctuation">,</span> righth<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data</th>      <th>event1</th>      <th>event2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>      <td>4.0</td>      <td>5.0</td>    </tr>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>      <td>6.0</td>      <td>7.0</td>    </tr>    <tr>      <th>1</th>      <td>Ohio</td>      <td>2001</td>      <td>1.0</td>      <td>8.0</td>      <td>9.0</td>    </tr>    <tr>      <th>2</th>      <td>Ohio</td>      <td>2002</td>      <td>2.0</td>      <td>10.0</td>      <td>11.0</td>    </tr>    <tr>      <th>3</th>      <td>Nevada</td>      <td>2001</td>      <td>3.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>4</th>      <td>Nevada</td>      <td>2002</td>      <td>4.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>Nevada</td>      <td>2000</td>      <td>NaN</td>      <td>2.0</td>      <td>3.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>right2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7.</span><span class="token punctuation">,</span> <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9.</span><span class="token punctuation">,</span> <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11.</span><span class="token punctuation">,</span> <span class="token number">12.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Missouri'</span><span class="token punctuation">,</span> <span class="token string">'Alabama'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>left2         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">right2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Missouri</th>      <th>Alabama</th>    </tr>  </thead>  <tbody>    <tr>      <th>b</th>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>d</th>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>e</th>      <td>13.0</td>      <td>14.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left2<span class="token punctuation">,</span> right2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">,</span> left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>b</th>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>NaN</td>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>b</th>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>NaN</td>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">another <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7.</span><span class="token punctuation">,</span> <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9.</span><span class="token punctuation">,</span> <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11.</span><span class="token punctuation">,</span> <span class="token number">12.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">16.</span><span class="token punctuation">,</span> <span class="token number">17.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>another<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>New York</th>      <th>Oregon</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>e</th>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>f</th>      <td>16.0</td>      <td>17.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>right2<span class="token punctuation">,</span> another<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>      <th>New York</th>      <th>Oregon</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>      <td>11.0</td>      <td>12.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>right2<span class="token punctuation">,</span> another<span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>      <th>New York</th>      <th>Oregon</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>b</th>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>NaN</td>      <td>11.0</td>      <td>12.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>f</th>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>16.0</td>      <td>17.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a    0b    1c    2d    3e    4f    5g    6dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#变为DataFrame</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>b</th>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>e</th>      <td>NaN</td>      <td>4.0</td>      <td>NaN</td>    </tr>    <tr>      <th>f</th>      <td>NaN</td>      <td>NaN</td>      <td>5.0</td>    </tr>    <tr>      <th>g</th>      <td>NaN</td>      <td>NaN</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">s4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">)</span>s4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>a    0b    1f    5g    6dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.0</td>      <td>0</td>    </tr>    <tr>      <th>b</th>      <td>1.0</td>      <td>1</td>    </tr>    <tr>      <th>f</th>      <td>NaN</td>      <td>5</td>    </tr>    <tr>      <th>g</th>      <td>NaN</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> join<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>b</th>      <td>1</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> join_axes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Input In [20], in &lt;cell line: 1&gt;()----&gt; 1 pd.concat([s1, s4], axis=1, join_axes=[[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;e&#39;]])File E:\anaconda\lib\site-packages\pandas\util\_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs)    305 if len(args) &gt; num_allow_args:    306     warnings.warn(    307         msg.format(arguments=arguments),    308         FutureWarning,    309         stacklevel=stacklevel,    310     )--&gt; 311 return func(*args, **kwargs)TypeError: concat() got an unexpected keyword argument &#39;join_axes&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>one    a    0       b    1two    a    0       b    1three  f    5       g    6dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>f</th>      <th>g</th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0.0</td>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>two</th>      <td>0.0</td>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>three</th>      <td>NaN</td>      <td>NaN</td>      <td>5.0</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>b</th>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>e</th>      <td>NaN</td>      <td>4.0</td>      <td>NaN</td>    </tr>    <tr>      <th>f</th>      <td>NaN</td>      <td>NaN</td>      <td>5.0</td>    </tr>    <tr>      <th>g</th>      <td>NaN</td>      <td>NaN</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>b</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>5</td>      <td>6</td>    </tr>    <tr>      <th>c</th>      <td>7</td>      <td>8</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'level1'</span><span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="2" halign="left">level1</th>      <th colspan="2" halign="left">level2</th>    </tr>    <tr>      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>1</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>b</th>      <td>2</td>      <td>3</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>5</td>      <td>7.0</td>      <td>8.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'level1'</span><span class="token punctuation">:</span> df1<span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">:</span> df2<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="2" halign="left">level1</th>      <th colspan="2" halign="left">level2</th>    </tr>    <tr>      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>1</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>b</th>      <td>2</td>      <td>3</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>5</td>      <td>7.0</td>      <td>8.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'level1'</span><span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token string">'lower'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>upper</th>      <th colspan="2" halign="left">level1</th>      <th colspan="2" halign="left">level2</th>    </tr>    <tr>      <th>lower</th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>1</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>b</th>      <td>2</td>      <td>3</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>5</td>      <td>7.0</td>      <td>8.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.527674</td>      <td>2.145525</td>      <td>1.979097</td>      <td>1.702063</td>    </tr>    <tr>      <th>1</th>      <td>-0.350557</td>      <td>-0.511584</td>      <td>-1.061349</td>      <td>-0.702928</td>    </tr>    <tr>      <th>2</th>      <td>-1.239068</td>      <td>-1.240555</td>      <td>-0.295705</td>      <td>0.209181</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>b</th>      <th>d</th>      <th>a</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.718647</td>      <td>-2.931403</td>      <td>0.129779</td>    </tr>    <tr>      <th>1</th>      <td>1.482412</td>      <td>-1.022705</td>      <td>-1.186445</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.527674</td>      <td>2.145525</td>      <td>1.979097</td>      <td>1.702063</td>    </tr>    <tr>      <th>1</th>      <td>-0.350557</td>      <td>-0.511584</td>      <td>-1.061349</td>      <td>-0.702928</td>    </tr>    <tr>      <th>2</th>      <td>-1.239068</td>      <td>-1.240555</td>      <td>-0.295705</td>      <td>0.209181</td>    </tr>    <tr>      <th>3</th>      <td>0.129779</td>      <td>1.718647</td>      <td>NaN</td>      <td>-2.931403</td>    </tr>    <tr>      <th>4</th>      <td>-1.186445</td>      <td>1.482412</td>      <td>NaN</td>      <td>-1.022705</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>f    NaNe    2.5d    NaNc    3.5b    4.5a    NaNdtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>f    0.0e    1.0d    2.0c    3.0b    4.0a    NaNdtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0. , 2.5, 2. , 3.5, 4.5, nan])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>combine_first<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>a    NaNb    4.5c    3.0d    2.0e    1.0f    0.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">7.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">,</span> <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>2.0</td>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>5.0</td>      <td>NaN</td>      <td>10</td>    </tr>    <tr>      <th>3</th>      <td>NaN</td>      <td>6.0</td>      <td>14</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>4.0</td>      <td>3.0</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>4.0</td>    </tr>    <tr>      <th>3</th>      <td>3.0</td>      <td>6.0</td>    </tr>    <tr>      <th>4</th>      <td>7.0</td>      <td>8.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span class="token punctuation">.</span>combine_first<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>    </tr>    <tr>      <th>1</th>      <td>4.0</td>      <td>2.0</td>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>5.0</td>      <td>4.0</td>      <td>10.0</td>    </tr>    <tr>      <th>3</th>      <td>3.0</td>      <td>6.0</td>      <td>14.0</td>    </tr>    <tr>      <th>4</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dataresult <span class="token operator">=</span> data<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span>resultresult<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#默认操作最内层</span>result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">#指定分层编号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>state</th>      <th>Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>number</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>two</th>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>three</th>      <td>2</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>number</th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>    <tr>      <th>state</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Colorado</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> data<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>state     numberOhio      one       0          two       1          three     2Colorado  one       3          two       4          three     5dtype: int32</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#默认操作最内层</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>number</th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>    <tr>      <th>state</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Colorado</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">#指定操作最内层</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>state</th>      <th>Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>number</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>two</th>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>three</th>      <td>2</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认引入缺失数据</span>data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span>data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span>dropna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>one  a    0.0     b    1.0     c    2.0     d    3.0     e    NaNtwo  a    NaN     b    NaN     c    4.0     d    5.0     e    6.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>one  a    0     b    1     c    2     d    3two  c    4     d    5     e    6dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认引入缺失数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0.0</td>      <td>1.0</td>      <td>2.0</td>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>two</th>      <td>NaN</td>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>one  a    0.0     b    1.0     c    2.0     d    3.0two  c    4.0     d    5.0     e    6.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span>dropna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>one  a    0.0     b    1.0     c    2.0     d    3.0     e    NaNtwo  a    NaN     b    NaN     c    4.0     d    5.0     e    6.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">:</span> result <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'side'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>side</th>      <th>left</th>      <th>right</th>    </tr>    <tr>      <th>state</th>      <th>number</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">Ohio</th>      <th>one</th>      <td>0</td>      <td>5</td>    </tr>    <tr>      <th>two</th>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>three</th>      <td>2</td>      <td>7</td>    </tr>    <tr>      <th rowspan="3" valign="top">Colorado</th>      <th>one</th>      <td>3</td>      <td>8</td>    </tr>    <tr>      <th>two</th>      <td>4</td>      <td>9</td>    </tr>    <tr>      <th>three</th>      <td>5</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>side</th>      <th colspan="2" halign="left">left</th>      <th colspan="2" halign="left">right</th>    </tr>    <tr>      <th>state</th>      <th>Ohio</th>      <th>Colorado</th>      <th>Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>number</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0</td>      <td>3</td>      <td>5</td>      <td>8</td>    </tr>    <tr>      <th>two</th>      <td>1</td>      <td>4</td>      <td>6</td>      <td>9</td>    </tr>    <tr>      <th>three</th>      <td>2</td>      <td>5</td>      <td>7</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token string">'side'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>state</th>      <th>Colorado</th>      <th>Ohio</th>    </tr>    <tr>      <th>number</th>      <th>side</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">one</th>      <th>left</th>      <td>3</td>      <td>0</td>    </tr>    <tr>      <th>right</th>      <td>8</td>      <td>5</td>    </tr>    <tr>      <th rowspan="2" valign="top">two</th>      <th>left</th>      <td>4</td>      <td>1</td>    </tr>    <tr>      <th>right</th>      <td>9</td>      <td>6</td>    </tr>    <tr>      <th rowspan="2" valign="top">three</th>      <th>left</th>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>right</th>      <td>10</td>      <td>7</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>number</th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>    <tr>      <th>state</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Colorado</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>number</th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>    <tr>      <th>state</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Colorado</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'k1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'k2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>k1</th>      <th>k2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>two</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>one</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>two</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>one</td>      <td>3</td>    </tr>    <tr>      <th>5</th>      <td>two</td>      <td>4</td>    </tr>    <tr>      <th>6</th>      <td>two</td>      <td>4</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认判断全部列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0    False1    False2    False3    False4    False5    False6     Truedtype: bool</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认保留第一次出现的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>k1</th>      <th>k2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>two</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>one</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>two</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>one</td>      <td>3</td>    </tr>    <tr>      <th>5</th>      <td>two</td>      <td>4</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'k1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>k1</th>      <th>k2</th>      <th>v1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>two</td>      <td>1</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'k1'</span><span class="token punctuation">,</span> <span class="token string">'k2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">'last'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>k1</th>      <th>k2</th>      <th>v1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>two</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>one</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>two</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>one</td>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>6</th>      <td>two</td>      <td>4</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'food'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'bacon'</span><span class="token punctuation">,</span> <span class="token string">'pulled pork'</span><span class="token punctuation">,</span> <span class="token string">'bacon'</span><span class="token punctuation">,</span> <span class="token string">'Pastrami'</span><span class="token punctuation">,</span> <span class="token string">'corned beef'</span><span class="token punctuation">,</span> <span class="token string">'Bacon'</span><span class="token punctuation">,</span>                <span class="token string">'pastrami'</span><span class="token punctuation">,</span> <span class="token string">'honey ham'</span><span class="token punctuation">,</span> <span class="token string">'nova lox'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ounces'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>food</th>      <th>ounces</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>bacon</td>      <td>4.0</td>    </tr>    <tr>      <th>1</th>      <td>pulled pork</td>      <td>3.0</td>    </tr>    <tr>      <th>2</th>      <td>bacon</td>      <td>12.0</td>    </tr>    <tr>      <th>3</th>      <td>Pastrami</td>      <td>6.0</td>    </tr>    <tr>      <th>4</th>      <td>corned beef</td>      <td>7.5</td>    </tr>    <tr>      <th>5</th>      <td>Bacon</td>      <td>8.0</td>    </tr>    <tr>      <th>6</th>      <td>pastrami</td>      <td>3.0</td>    </tr>    <tr>      <th>7</th>      <td>honey ham</td>      <td>5.0</td>    </tr>    <tr>      <th>8</th>      <td>nova lox</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">meat_to_animal <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'bacon'</span><span class="token punctuation">:</span> <span class="token string">'pig'</span><span class="token punctuation">,</span>  <span class="token string">'pulled pork'</span><span class="token punctuation">:</span> <span class="token string">'pig'</span><span class="token punctuation">,</span>  <span class="token string">'pastrami'</span><span class="token punctuation">:</span> <span class="token string">'cow'</span><span class="token punctuation">,</span>  <span class="token string">'corned beef'</span><span class="token punctuation">:</span> <span class="token string">'cow'</span><span class="token punctuation">,</span>  <span class="token string">'honey ham'</span><span class="token punctuation">:</span> <span class="token string">'pig'</span><span class="token punctuation">,</span>  <span class="token string">'nova lox'</span><span class="token punctuation">:</span> <span class="token string">'salmon'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">lowercased <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>lowercased<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0          bacon1    pulled pork2          bacon3       pastrami4    corned beef5          bacon6       pastrami7      honey ham8       nova loxName: food, dtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'animal'</span><span class="token punctuation">]</span> <span class="token operator">=</span> lowercased<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>meat_to_animal<span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>food</th>      <th>ounces</th>      <th>animal</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>bacon</td>      <td>4.0</td>      <td>pig</td>    </tr>    <tr>      <th>1</th>      <td>pulled pork</td>      <td>3.0</td>      <td>pig</td>    </tr>    <tr>      <th>2</th>      <td>bacon</td>      <td>12.0</td>      <td>pig</td>    </tr>    <tr>      <th>3</th>      <td>Pastrami</td>      <td>6.0</td>      <td>cow</td>    </tr>    <tr>      <th>4</th>      <td>corned beef</td>      <td>7.5</td>      <td>cow</td>    </tr>    <tr>      <th>5</th>      <td>Bacon</td>      <td>8.0</td>      <td>pig</td>    </tr>    <tr>      <th>6</th>      <td>pastrami</td>      <td>3.0</td>      <td>cow</td>    </tr>    <tr>      <th>7</th>      <td>honey ham</td>      <td>5.0</td>      <td>pig</td>    </tr>    <tr>      <th>8</th>      <td>nova lox</td>      <td>6.0</td>      <td>salmon</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> meat_to_animal<span class="token punctuation">[</span>x<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0       pig1       pig2       pig3       cow4       cow5       pig6       cow7       pig8    salmonName: food, dtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">999.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">999.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1000.</span><span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0       1.01    -999.02       2.03    -999.04   -1000.05       3.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0       1.01       NaN2       2.03       NaN4   -1000.05       3.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0    1.01    NaN2    2.03    NaN4    0.05    3.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0    1.01    NaN2    2.03    NaN4    0.05    3.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>ONE</th>      <th>TWO</th>      <th>THREE</th>      <th>FOUR</th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>Colorado</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>New York</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">transform <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Index([&#39;OHIO&#39;, &#39;COLO&#39;, &#39;NEW &#39;], dtype=&#39;object&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>index<span class="token operator">=</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>OHIO</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>COLO</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>NEW</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'OHIO'</span><span class="token punctuation">:</span> <span class="token string">'INDIANA'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token string">'peekaboo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>      <th>peekaboo</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>INDIANA</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>COLO</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>NEW</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'OHIO'</span><span class="token punctuation">:</span> <span class="token string">'INDIANA'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>INDIANA</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>COLO</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>NEW</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span>bins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>cats <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> bins<span class="token punctuation">)</span>cats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]]Length: 12Categories (4, interval[int64, right]): [(18, 25] &lt; (25, 35] &lt; (35, 60] &lt; (60, 100]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">cats<span class="token punctuation">.</span>codes       <span class="token comment">#分组的编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0, 0, 0, 1, 0, 0, 2, 1, 3, 2, 2, 1], dtype=int8)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">cats<span class="token punctuation">.</span>categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>IntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], dtype=&#39;interval[int64, right]&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(18, 25]     5(25, 35]     3(35, 60]     3(60, 100]    1dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)]Length: 12Categories (4, interval[int64, left]): [[18, 26) &lt; [26, 36) &lt; [36, 61) &lt; [61, 100)]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">group_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Youth'</span><span class="token punctuation">,</span> <span class="token string">'YoungAdult'</span><span class="token punctuation">,</span> <span class="token string">'MiddleAged'</span><span class="token punctuation">,</span> <span class="token string">'Senior'</span><span class="token punctuation">]</span>pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> labels<span class="token operator">=</span>group_names<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;Youth&#39;, &#39;Youth&#39;, &#39;Youth&#39;, &#39;YoungAdult&#39;, &#39;Youth&#39;, ..., &#39;YoungAdult&#39;, &#39;Senior&#39;, &#39;MiddleAged&#39;, &#39;MiddleAged&#39;, &#39;YoungAdult&#39;]Length: 12Categories (4, object): [&#39;Youth&#39; &lt; &#39;YoungAdult&#39; &lt; &#39;MiddleAged&#39; &lt; &#39;Senior&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0.12967787, 0.87168374, 0.24167497, 0.56688941, 0.22964312,       0.30205167, 0.88297675, 0.22349301, 0.18292263, 0.81072534,       0.25054152, 0.99378214, 0.78439125, 0.3970331 , 0.89049743,       0.51677834, 0.76808437, 0.54701119, 0.79386529, 0.25451132])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">temp<span class="token operator">=</span>pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> precision<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#划分的分组数而不是边界，边界按最大最小平均分</span>temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[(0.13, 0.35], (0.78, 0.99], (0.13, 0.35], (0.56, 0.78], (0.13, 0.35], ..., (0.35, 0.56], (0.56, 0.78], (0.35, 0.56], (0.78, 0.99], (0.13, 0.35]]Length: 20Categories (4, interval[float64, right]): [(0.13, 0.35] &lt; (0.35, 0.56] &lt; (0.56, 0.78] &lt; (0.78, 0.99]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(0.13, 0.35]    8(0.78, 0.99]    7(0.35, 0.56]    3(0.56, 0.78]    2dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment">## Normally distributed</span>cats <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">#将所有数据平均分为4部分</span>cats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[(-0.726, -0.00747], (-0.00747, 0.636], (-3.057, -0.726], (-3.057, -0.726], (-0.00747, 0.636], ..., (-0.726, -0.00747], (-0.726, -0.00747], (-0.726, -0.00747], (0.636, 2.834], (-3.057, -0.726]]Length: 1000Categories (4, interval[float64, right]): [(-3.057, -0.726] &lt; (-0.726, -0.00747] &lt; (-0.00747, 0.636] &lt; (0.636, 2.834]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(-3.057, -0.726]      250(-0.726, -0.00747]    250(-0.00747, 0.636]     250(0.636, 2.834]        250dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[(-1.239, -0.00747], (-0.00747, 1.338], (-3.057, -1.239], (-3.057, -1.239], (-0.00747, 1.338], ..., (-1.239, -0.00747], (-1.239, -0.00747], (-1.239, -0.00747], (1.338, 2.834], (-3.057, -1.239]]Length: 1000Categories (4, interval[float64, right]): [(-3.057, -1.239] &lt; (-1.239, -0.00747] &lt; (-0.00747, 1.338] &lt; (1.338, 2.834]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1000.000000</td>      <td>1000.000000</td>      <td>1000.000000</td>      <td>1000.000000</td>    </tr>    <tr>      <th>mean</th>      <td>-0.068024</td>      <td>0.015781</td>      <td>0.048655</td>      <td>-0.019467</td>    </tr>    <tr>      <th>std</th>      <td>1.050557</td>      <td>0.963683</td>      <td>0.972374</td>      <td>1.031390</td>    </tr>    <tr>      <th>min</th>      <td>-3.617567</td>      <td>-2.550853</td>      <td>-3.372664</td>      <td>-3.196753</td>    </tr>    <tr>      <th>25%</th>      <td>-0.718715</td>      <td>-0.591289</td>      <td>-0.606569</td>      <td>-0.712316</td>    </tr>    <tr>      <th>50%</th>      <td>-0.066156</td>      <td>0.004574</td>      <td>0.068207</td>      <td>0.000122</td>    </tr>    <tr>      <th>75%</th>      <td>0.627520</td>      <td>0.662984</td>      <td>0.747493</td>      <td>0.673216</td>    </tr>    <tr>      <th>max</th>      <td>2.940831</td>      <td>2.865724</td>      <td>3.369795</td>      <td>3.364796</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">col<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>col<span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>340    3.196054445   -3.159953533   -3.156547628    3.369795698   -3.372664Name: 2, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">#选出超过3的行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>55</th>      <td>-3.157032</td>      <td>-0.841691</td>      <td>1.018759</td>      <td>-0.018302</td>    </tr>    <tr>      <th>340</th>      <td>0.456149</td>      <td>0.854559</td>      <td>3.196054</td>      <td>0.353166</td>    </tr>    <tr>      <th>343</th>      <td>-3.283047</td>      <td>-0.316560</td>      <td>-0.121576</td>      <td>0.584322</td>    </tr>    <tr>      <th>407</th>      <td>-0.089158</td>      <td>-0.604724</td>      <td>1.028259</td>      <td>3.364796</td>    </tr>    <tr>      <th>445</th>      <td>0.300672</td>      <td>-0.848071</td>      <td>-3.159953</td>      <td>0.870023</td>    </tr>    <tr>      <th>533</th>      <td>-0.048864</td>      <td>0.152498</td>      <td>-3.156547</td>      <td>-0.968370</td>    </tr>    <tr>      <th>628</th>      <td>1.119083</td>      <td>0.171787</td>      <td>3.369795</td>      <td>-0.550373</td>    </tr>    <tr>      <th>698</th>      <td>-0.517293</td>      <td>-1.208259</td>      <td>-3.372664</td>      <td>-0.418606</td>    </tr>    <tr>      <th>824</th>      <td>-3.459360</td>      <td>-0.702142</td>      <td>0.325501</td>      <td>0.653165</td>    </tr>    <tr>      <th>873</th>      <td>-3.617567</td>      <td>-1.302917</td>      <td>-0.577524</td>      <td>0.859530</td>    </tr>    <tr>      <th>923</th>      <td>-0.920904</td>      <td>-0.103102</td>      <td>-0.581829</td>      <td>-3.196753</td>    </tr>    <tr>      <th>981</th>      <td>0.672200</td>      <td>-0.274157</td>      <td>-0.883970</td>      <td>-3.038320</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1000.000000</td>      <td>1000.000000</td>      <td>1000.000000</td>      <td>1000.000000</td>    </tr>    <tr>      <th>mean</th>      <td>-0.066507</td>      <td>0.015781</td>      <td>0.048779</td>      <td>-0.019597</td>    </tr>    <tr>      <th>std</th>      <td>1.045975</td>      <td>0.963683</td>      <td>0.968296</td>      <td>1.029555</td>    </tr>    <tr>      <th>min</th>      <td>-3.000000</td>      <td>-2.550853</td>      <td>-3.000000</td>      <td>-3.000000</td>    </tr>    <tr>      <th>25%</th>      <td>-0.718715</td>      <td>-0.591289</td>      <td>-0.606569</td>      <td>-0.712316</td>    </tr>    <tr>      <th>50%</th>      <td>-0.066156</td>      <td>0.004574</td>      <td>0.068207</td>      <td>0.000122</td>    </tr>    <tr>      <th>75%</th>      <td>0.627520</td>      <td>0.662984</td>      <td>0.747493</td>      <td>0.673216</td>    </tr>    <tr>      <th>max</th>      <td>2.940831</td>      <td>2.865724</td>      <td>3.000000</td>      <td>3.000000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sampler <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">#表示新顺序的数组</span>sampler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>array([1, 2, 0, 4, 3])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>    <tr>      <th>3</th>      <td>12</td>      <td>13</td>      <td>14</td>      <td>15</td>    </tr>    <tr>      <th>4</th>      <td>16</td>      <td>17</td>      <td>18</td>      <td>19</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>take<span class="token punctuation">(</span>sampler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>    <tr>      <th>0</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>16</td>      <td>17</td>      <td>18</td>      <td>19</td>    </tr>    <tr>      <th>3</th>      <td>12</td>      <td>13</td>      <td>14</td>      <td>15</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>4</th>      <td>16</td>      <td>17</td>      <td>18</td>      <td>19</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">choices <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>draws <span class="token operator">=</span> choices<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> replace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>draws<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>1    70    54    40    53    63    61    74    41    71    7dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'data1'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>b</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">dummies <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">)</span>df_with_dummy <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dummies<span class="token punctuation">)</span>df_with_dummy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>key_a</th>      <th>key_b</th>      <th>key_c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Dave'</span><span class="token punctuation">:</span> <span class="token string">'dave@google.com'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">:</span> <span class="token string">'steve@gmail.com'</span><span class="token punctuation">,</span> <span class="token string">'Rob'</span><span class="token punctuation">:</span> <span class="token string">'rob@gmail.com'</span><span class="token punctuation">,</span> <span class="token string">'Wes'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">&#125;</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Dave     dave@google.comSteve    steve@gmail.comRob        rob@gmail.comWes                  NaNdtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Dave     FalseSteve    FalseRob      FalseWes       Truedtype: bool</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'gmail'</span><span class="token punctuation">)</span> <span class="token comment">#data.map可以将字符串函数作用于各个值，但是遇见NaN会报错，str不会</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Dave     FalseSteve     TrueRob       TrueWes        NaNdtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repattern<span class="token operator">=</span><span class="token string">'([A-Z0-9._%+-]+)@([A-Z0-9._-]+)\\.([A-Z]&#123;2,4&#125;)'</span>data<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Dave     [(dave, google, com)]Steve    [(steve, gmail, com)]Rob        [(rob, gmail, com)]Wes                        NaNdtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token string">'data1'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'data2'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>one</td>      <td>-0.083293</td>      <td>0.456279</td>    </tr>    <tr>      <th>1</th>      <td>a</td>      <td>two</td>      <td>-0.442362</td>      <td>-0.337304</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>one</td>      <td>0.244770</td>      <td>0.943875</td>    </tr>    <tr>      <th>3</th>      <td>b</td>      <td>two</td>      <td>0.862879</td>      <td>0.444040</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>one</td>      <td>0.858584</td>      <td>0.527193</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>grouped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&lt;pandas.core.groupby.generic.SeriesGroupBy object at 0x0000024CEBF7B880&gt;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>key1a    0.110977b    0.553824Name: data1, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">means <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>means<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>key1  key2a     one     0.387646      two    -0.442362b     one     0.244770      two     0.862879Name: data1, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">means<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>key2</th>      <th>one</th>      <th>two</th>    </tr>    <tr>      <th>key1</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.387646</td>      <td>-0.442362</td>    </tr>    <tr>      <th>b</th>      <td>0.244770</td>      <td>0.862879</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">states <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>years <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2006</span><span class="token punctuation">,</span> <span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2006</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>states<span class="token punctuation">,</span> years<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>California  2005   -0.442362            2006    0.244770Ohio        2005    0.389793            2006    0.858584Name: data1, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key1</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.110977</td>      <td>0.215390</td>    </tr>    <tr>      <th>b</th>      <td>0.553824</td>      <td>0.693958</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>one</th>      <td>0.387646</td>      <td>0.491736</td>    </tr>    <tr>      <th>two</th>      <td>-0.442362</td>      <td>-0.337304</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>one</th>      <td>0.244770</td>      <td>0.943875</td>    </tr>    <tr>      <th>two</th>      <td>0.862879</td>      <td>0.444040</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#忽略缺失值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>key1  key2a     one     2      two     1b     one     1      two     1dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span> group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>a  key1 key2     data1     data20    a  one -0.083293  0.4562791    a  two -0.442362 -0.3373044    a  one  0.858584  0.527193b  key1 key2     data1     data22    b  one  0.244770  0.9438753    b  two  0.862879  0.444040</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">,</span> group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(&#39;a&#39;, &#39;one&#39;)  key1 key2     data1     data20    a  one -0.083293  0.4562794    a  one  0.858584  0.527193(&#39;a&#39;, &#39;two&#39;)  key1 key2     data1     data21    a  two -0.442362 -0.337304(&#39;b&#39;, &#39;one&#39;)  key1 key2    data1     data22    b  one  0.24477  0.943875(&#39;b&#39;, &#39;two&#39;)  key1 key2     data1    data23    b  two  0.862879  0.44404</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pieces <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pieces<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>b</td>      <td>one</td>      <td>0.244770</td>      <td>0.943875</td>    </tr>    <tr>      <th>3</th>      <td>b</td>      <td>two</td>      <td>0.862879</td>      <td>0.444040</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>dtypes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>key1      objectkey2      objectdata1    float64data2    float64dtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>df<span class="token punctuation">.</span>dtypes<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> dtype<span class="token punctuation">,</span> group <span class="token keyword">in</span> grouped<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dtype<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>float64      data1     data20 -0.083293  0.4562791 -0.442362 -0.3373042  0.244770  0.9438753  0.862879  0.4440404  0.858584  0.527193object  key1 key20    a  one1    a  two2    b  one3    b  two4    a  one</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">people <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token string">'Wes'</span><span class="token punctuation">,</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span> <span class="token string">'Travis'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>people<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan <span class="token comment">## Add a few NA values</span>people<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <th>Joe</th>      <td>0.231080</td>      <td>-0.440371</td>      <td>0.409642</td>      <td>-0.114867</td>      <td>0.328406</td>    </tr>    <tr>      <th>Steve</th>      <td>-0.775944</td>      <td>-1.258328</td>      <td>-2.723042</td>      <td>0.615950</td>      <td>-1.263696</td>    </tr>    <tr>      <th>Wes</th>      <td>1.965413</td>      <td>NaN</td>      <td>NaN</td>      <td>-1.284734</td>      <td>0.204553</td>    </tr>    <tr>      <th>Jim</th>      <td>-0.097869</td>      <td>0.182042</td>      <td>0.061867</td>      <td>-0.648661</td>      <td>-0.217448</td>    </tr>    <tr>      <th>Travis</th>      <td>-0.006042</td>      <td>-0.612533</td>      <td>0.537186</td>      <td>0.646037</td>      <td>1.339316</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">mapping <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'f'</span> <span class="token punctuation">:</span> <span class="token string">'orange'</span><span class="token punctuation">&#125;</span>by_column <span class="token operator">=</span> people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>by_column<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>blue</th>      <th>red</th>    </tr>  </thead>  <tbody>    <tr>      <th>Joe</th>      <td>0.294776</td>      <td>0.119115</td>    </tr>    <tr>      <th>Steve</th>      <td>-2.107092</td>      <td>-3.297967</td>    </tr>    <tr>      <th>Wes</th>      <td>-1.284734</td>      <td>2.169965</td>    </tr>    <tr>      <th>Jim</th>      <td>-0.586794</td>      <td>-0.133276</td>    </tr>    <tr>      <th>Travis</th>      <td>1.183222</td>      <td>0.720741</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">map_series <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>mapping<span class="token punctuation">)</span>map_series<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>a       redb       redc      blued      bluee       redf    orangedtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>map_series<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>blue</th>      <th>red</th>    </tr>  </thead>  <tbody>    <tr>      <th>Joe</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>Steve</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>Wes</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Jim</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>Travis</th>      <td>2</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>2.098624</td>      <td>-0.258329</td>      <td>0.471509</td>      <td>-2.048262</td>      <td>0.315510</td>    </tr>    <tr>      <th>5</th>      <td>-0.775944</td>      <td>-1.258328</td>      <td>-2.723042</td>      <td>0.615950</td>      <td>-1.263696</td>    </tr>    <tr>      <th>6</th>      <td>-0.006042</td>      <td>-0.612533</td>      <td>0.537186</td>      <td>0.646037</td>      <td>1.339316</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">key_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span>people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">,</span> key_list<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">3</th>      <th>one</th>      <td>0.231080</td>      <td>-0.440371</td>      <td>0.409642</td>      <td>-1.284734</td>      <td>0.204553</td>    </tr>    <tr>      <th>two</th>      <td>-0.097869</td>      <td>0.182042</td>      <td>0.061867</td>      <td>-0.648661</td>      <td>-0.217448</td>    </tr>    <tr>      <th>5</th>      <th>one</th>      <td>-0.775944</td>      <td>-1.258328</td>      <td>-2.723042</td>      <td>0.615950</td>      <td>-1.263696</td>    </tr>    <tr>      <th>6</th>      <th>two</th>      <td>-0.006042</td>      <td>-0.612533</td>      <td>0.537186</td>      <td>0.646037</td>      <td>1.339316</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">columns <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_arrays<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'JP'</span><span class="token punctuation">,</span> <span class="token string">'JP'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cty'</span><span class="token punctuation">,</span> <span class="token string">'tenor'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hier_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">)</span>hier_df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>cty</th>      <th colspan="3" halign="left">US</th>      <th colspan="2" halign="left">JP</th>    </tr>    <tr>      <th>tenor</th>      <th>1</th>      <th>3</th>      <th>5</th>      <th>1</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.860698</td>      <td>-0.379994</td>      <td>0.644758</td>      <td>-0.231480</td>      <td>0.346634</td>    </tr>    <tr>      <th>1</th>      <td>1.237142</td>      <td>0.038387</td>      <td>0.600247</td>      <td>0.431467</td>      <td>0.137392</td>    </tr>    <tr>      <th>2</th>      <td>-2.211133</td>      <td>1.528952</td>      <td>0.056726</td>      <td>-0.629724</td>      <td>-0.125510</td>    </tr>    <tr>      <th>3</th>      <td>-1.272170</td>      <td>-1.088555</td>      <td>-1.950819</td>      <td>-0.253229</td>      <td>0.910727</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">hier_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'cty'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>cty</th>      <th>JP</th>      <th>US</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>2</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>one</td>      <td>-0.083293</td>      <td>0.456279</td>    </tr>    <tr>      <th>1</th>      <td>a</td>      <td>two</td>      <td>-0.442362</td>      <td>-0.337304</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>one</td>      <td>0.244770</td>      <td>0.943875</td>    </tr>    <tr>      <th>3</th>      <td>b</td>      <td>two</td>      <td>0.862879</td>      <td>0.444040</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>one</td>      <td>0.858584</td>      <td>0.527193</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>grouped<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">)</span>  <span class="token comment">#计算该百分位的值，如果没有则插值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>key1a    0.670209b    0.801068Name: data1, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">peak_to_peak</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> arr<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>agg<span class="token punctuation">(</span>peak_to_peak<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_20412\238647417.py:2: FutureWarning: [&#39;key2&#39;] did not aggregate successfully. If any error is raised this will raise in a future version of pandas. Drop these columns/ops to avoid this warning.  grouped.agg(peak_to_peak)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key1</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.300946</td>      <td>0.864497</td>    </tr>    <tr>      <th>b</th>      <td>0.618109</td>      <td>0.499836</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="8" halign="left">data1</th>      <th colspan="8" halign="left">data2</th>    </tr>    <tr>      <th></th>      <th>count</th>      <th>mean</th>      <th>std</th>      <th>min</th>      <th>25%</th>      <th>50%</th>      <th>75%</th>      <th>max</th>      <th>count</th>      <th>mean</th>      <th>std</th>      <th>min</th>      <th>25%</th>      <th>50%</th>      <th>75%</th>      <th>max</th>    </tr>    <tr>      <th>key1</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>3.0</td>      <td>0.110977</td>      <td>0.671878</td>      <td>-0.442362</td>      <td>-0.262827</td>      <td>-0.083293</td>      <td>0.387646</td>      <td>0.858584</td>      <td>3.0</td>      <td>0.215390</td>      <td>0.479958</td>      <td>-0.337304</td>      <td>0.059488</td>      <td>0.456279</td>      <td>0.491736</td>      <td>0.527193</td>    </tr>    <tr>      <th>b</th>      <td>2.0</td>      <td>0.553824</td>      <td>0.437069</td>      <td>0.244770</td>      <td>0.399297</td>      <td>0.553824</td>      <td>0.708352</td>      <td>0.862879</td>      <td>2.0</td>      <td>0.693958</td>      <td>0.353437</td>      <td>0.444040</td>      <td>0.568999</td>      <td>0.693958</td>      <td>0.818916</td>      <td>0.943875</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">tips <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/tips.csv'</span><span class="token punctuation">)</span>tips<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tips<span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span> <span class="token operator">/</span> tips<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span>tips<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------FileNotFoundError                         Traceback (most recent call last)Input In [135], in &lt;cell line: 1&gt;()----&gt; 1 tips = pd.read_csv(&#39;examples/tips.csv&#39;)      2 tips[&#39;tip_pct&#39;] = tips[&#39;tip&#39;] / tips[&#39;total_bill&#39;]      3 tips[:4]File E:\anaconda\lib\site-packages\pandas\util\_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs)    305 if len(args) &gt; num_allow_args:    306     warnings.warn(    307         msg.format(arguments=arguments),    308         FutureWarning,    309         stacklevel=stacklevel,    310     )--&gt; 311 return func(*args, **kwargs)File E:\anaconda\lib\site-packages\pandas\io\parsers\readers.py:680, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)    665 kwds_defaults = _refine_defaults_read(    666     dialect,    667     delimiter,   (...)    676     defaults=&#123;&quot;delimiter&quot;: &quot;,&quot;&#125;,    677 )    678 kwds.update(kwds_defaults)--&gt; 680 return _read(filepath_or_buffer, kwds)File E:\anaconda\lib\site-packages\pandas\io\parsers\readers.py:575, in _read(filepath_or_buffer, kwds)    572 _validate_names(kwds.get(&quot;names&quot;, None))    574 ## Create the parser.--&gt; 575 parser = TextFileReader(filepath_or_buffer, **kwds)    577 if chunksize or iterator:    578     return parserFile E:\anaconda\lib\site-packages\pandas\io\parsers\readers.py:933, in TextFileReader.__init__(self, f, engine, **kwds)    930     self.options[&quot;has_index_names&quot;] = kwds[&quot;has_index_names&quot;]    932 self.handles: IOHandles | None = None--&gt; 933 self._engine = self._make_engine(f, self.engine)File E:\anaconda\lib\site-packages\pandas\io\parsers\readers.py:1217, in TextFileReader._make_engine(self, f, engine)   1213     mode = &quot;rb&quot;   1214 ## error: No overload variant of &quot;get_handle&quot; matches argument types   1215 ## &quot;Union[str, PathLike[str], ReadCsvBuffer[bytes], ReadCsvBuffer[str]]&quot;   1216 ## , &quot;str&quot;, &quot;bool&quot;, &quot;Any&quot;, &quot;Any&quot;, &quot;Any&quot;, &quot;Any&quot;, &quot;Any&quot;-&gt; 1217 self.handles = get_handle(  ## type: ignore[call-overload]   1218     f,   1219     mode,   1220     encoding=self.options.get(&quot;encoding&quot;, None),   1221     compression=self.options.get(&quot;compression&quot;, None),   1222     memory_map=self.options.get(&quot;memory_map&quot;, False),   1223     is_text=is_text,   1224     errors=self.options.get(&quot;encoding_errors&quot;, &quot;strict&quot;),   1225     storage_options=self.options.get(&quot;storage_options&quot;, None),   1226 )   1227 assert self.handles is not None   1228 f = self.handles.handleFile E:\anaconda\lib\site-packages\pandas\io\common.py:789, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)    784 elif isinstance(handle, str):    785     ## Check whether the filename is to be opened in binary mode.    786     ## Binary mode does not support &#39;encoding&#39; and &#39;newline&#39;.    787     if ioargs.encoding and &quot;b&quot; not in ioargs.mode:    788         ## Encoding--&gt; 789         handle = open(    790             handle,    791             ioargs.mode,    792             encoding=ioargs.encoding,    793             errors=errors,    794             newline=&quot;&quot;,    795         )    796     else:    797         ## Binary mode    798         handle = open(handle, ioargs.mode)FileNotFoundError: [Errno 2] No such file or directory: &#39;examples/tips.csv&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data1'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>quartiles <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>frame<span class="token punctuation">.</span>data1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>quartiles<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>0     (-0.436, 1.211]1     (-0.436, 1.211]2      (1.211, 2.858]3     (-0.436, 1.211]4      (1.211, 2.858]5    (-2.083, -0.436]6    (-2.083, -0.436]7      (1.211, 2.858]8     (-0.436, 1.211]9    (-2.083, -0.436]Name: data1, dtype: categoryCategories (4, interval[float64, right]): [(-3.737, -2.083] &lt; (-2.083, -0.436] &lt; (-0.436, 1.211] &lt; (1.211, 2.858]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_stats</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'min'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>grouped <span class="token operator">=</span> frame<span class="token punctuation">.</span>data2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>quartiles<span class="token punctuation">)</span>grouped<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>get_stats<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>min</th>      <th>max</th>      <th>count</th>      <th>mean</th>    </tr>    <tr>      <th>data1</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>(-3.737, -2.083]</th>      <td>-1.417666</td>      <td>1.053207</td>      <td>15.0</td>      <td>-0.021193</td>    </tr>    <tr>      <th>(-2.083, -0.436]</th>      <td>-2.815877</td>      <td>2.712397</td>      <td>296.0</td>      <td>-0.097675</td>    </tr>    <tr>      <th>(-0.436, 1.211]</th>      <td>-2.950480</td>      <td>3.093977</td>      <td>568.0</td>      <td>0.006707</td>    </tr>    <tr>      <th>(1.211, 2.858]</th>      <td>-2.621023</td>      <td>2.433423</td>      <td>121.0</td>      <td>-0.102975</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouping <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>frame<span class="token punctuation">.</span>data1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment">#平均分</span>grouped <span class="token operator">=</span> frame<span class="token punctuation">.</span>data2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>grouping<span class="token punctuation">)</span>grouped<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>get_stats<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>min</th>      <th>max</th>      <th>count</th>      <th>mean</th>    </tr>    <tr>      <th>data1</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-1.979885</td>      <td>2.546603</td>      <td>100.0</td>      <td>0.015369</td>    </tr>    <tr>      <th>1</th>      <td>-2.815877</td>      <td>2.560098</td>      <td>100.0</td>      <td>-0.189069</td>    </tr>    <tr>      <th>2</th>      <td>-2.367227</td>      <td>2.290479</td>      <td>100.0</td>      <td>-0.097540</td>    </tr>    <tr>      <th>3</th>      <td>-2.057884</td>      <td>3.093977</td>      <td>100.0</td>      <td>0.000976</td>    </tr>    <tr>      <th>4</th>      <td>-2.314728</td>      <td>2.157829</td>      <td>100.0</td>      <td>0.125600</td>    </tr>    <tr>      <th>5</th>      <td>-2.944465</td>      <td>1.991280</td>      <td>100.0</td>      <td>-0.092507</td>    </tr>    <tr>      <th>6</th>      <td>-2.503720</td>      <td>2.415097</td>      <td>100.0</td>      <td>-0.045530</td>    </tr>    <tr>      <th>7</th>      <td>-2.950480</td>      <td>2.553021</td>      <td>100.0</td>      <td>0.057286</td>    </tr>    <tr>      <th>8</th>      <td>-2.688502</td>      <td>2.356049</td>      <td>100.0</td>      <td>-0.059030</td>    </tr>    <tr>      <th>9</th>      <td>-2.339079</td>      <td>2.433423</td>      <td>100.0</td>      <td>-0.094356</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">tips<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'smoker'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#默认计算分组平均数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [139], in &lt;cell line: 1&gt;()----&gt; 1 tips.pivot_table(index=[&#39;day&#39;, &#39;smoker&#39;])NameError: name &#39;tips&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIOdata <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\Sample  Nationality  Handedness1   USA  Right-handed2   Japan    Left-handed3   USA  Right-handed4   Japan    Right-handed5   Japan    Left-handed6   Japan    Right-handed7   USA  Right-handed8   USA  Left-handed9   Japan    Right-handed10  USA  Right-handed"""</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span>StringIO<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\s+'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span>data<span class="token punctuation">.</span>Nationality<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Handedness<span class="token punctuation">,</span> margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Handedness</th>      <th>Left-handed</th>      <th>Right-handed</th>      <th>All</th>    </tr>    <tr>      <th>Nationality</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Japan</th>      <td>2</td>      <td>3</td>      <td>5</td>    </tr>    <tr>      <th>USA</th>      <td>1</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>All</th>      <td>3</td>      <td>7</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span><span class="token punctuation">[</span>tips<span class="token punctuation">.</span>time<span class="token punctuation">,</span> tips<span class="token punctuation">.</span>day<span class="token punctuation">]</span><span class="token punctuation">,</span> tips<span class="token punctuation">.</span>smoker<span class="token punctuation">,</span> margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [142], in &lt;cell line: 1&gt;()----&gt; 1 pd.crosstab([tips.time, tips.day], tips.smoker, margins=True)NameError: name &#39;tips&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题四</title>
      <link href="/2023/07/06/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%9B%9B/"/>
      <url>/2023/07/06/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>对于一个序列可以采用二分查找或顺序查找，请结合实施查找的次数，确定在什么情况下使用二分查找效率更高？</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>顺序查找是按照序列原有顺序对数组进行遍历比较查询的基本查找算法，时间复杂度是$O(n)$，在最坏的情况下，查询值在数组末尾或没有该查询值，需要遍历完整个数组；</p><p>二分查找是在顺序存储结构、元素有序排列中，从表中间开始查找，若不相等，则将表分成前后两个字表，根据中间元素的查询结果在对应表中进行第二次查找，时间复杂度是$O(log_2n)$，在最坏的情况下，没有该查询值，则至少需要查询$\lfloor log_2n \rfloor$次；查询成功时，最多查询$\lceil log_2n \rceil$次。</p><p>本题通过记录查找次数来进行比较</p><h3 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;&#x2F;&#x2F;顺序查找int SequentialSearch(vector&lt;int&gt;&amp; arr, int target) &#123;int n &#x3D; arr.size();int num &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;num++;if (arr[i] &#x3D;&#x3D; target) &#123;cout &lt;&lt; &quot;Search for &quot; &lt;&lt; num &lt;&lt; &quot; times&quot; &lt;&lt; endl;return i;&#125;&#125;cout &lt;&lt; &quot;Search for &quot; &lt;&lt; num &lt;&lt; &quot; times&quot; &lt;&lt; endl;return -1;&#125;&#x2F;&#x2F;二分查找int BinarySearch(vector&lt;int&gt;&amp; arr, int target) &#123;int n &#x3D; arr.size();int left &#x3D; 0, right &#x3D; n - 1, middle;int num &#x3D; 0;while (left &lt;&#x3D; right) &#123;num++;middle &#x3D; left + ((right - left) &gt;&gt; 2);if (arr[middle] &#x3D;&#x3D; target) &#123;cout &lt;&lt; &quot;Search for &quot; &lt;&lt; num &lt;&lt; &quot; times&quot; &lt;&lt; endl;return middle;&#125;else if (arr[middle] &lt; target) &#123;left &#x3D; middle + 1;&#125;else &#123;right &#x3D; middle - 1;&#125;&#125;cout &lt;&lt; &quot;Search for &quot; &lt;&lt; num &lt;&lt; &quot; times&quot; &lt;&lt; endl;return -1;&#125;int main() &#123;vector&lt;int&gt; arr &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;int target &#x3D; 7;int a &#x3D; SequentialSearch(arr, target);cout &lt;&lt; a &lt;&lt; endl;int b &#x3D; BinarySearch(arr, target);cout &lt;&lt; b &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验结果：</p><p><img src="/imgs/sikao4/1.png" alt="image-20230316143509778"></p><p>从上述实验中，查询元素7的值，顺序查找的次数为7次，而二分查找的次数为4次，最终查询结果都正确，但是在本序列中，元素数量并不是很多，因此查询次数在数量级上并没有显著差距。</p><p>下面对两查找效率进行比较：</p><ol><li>以升序序列为例，在最小值片进行查询的时候，顺序查找的次数会小于二分查找，因此使用顺序查找查询较小的值即查询值下标$&lt; \lfloor log_2n \rfloor$时，效率更高、次数更小；</li><li>对于升序序列，在查询相对较大的值的时候，二分查找的次数就会小于顺序查找，因此使用二分查找查询较大的值即查询值下标$&gt; \lfloor log_2n \rfloor$，效率更高、次数更少；</li><li>对于查询值个数不止一个的操作来说，使用二分查找的效率比顺序查找要高得多，二分查找只需要在初始状态进行一次排序，之后的每次查找都可以利用有序性，而顺序查找则需要每次查询都进行一次数组遍历。</li></ol><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>现有一个序列，它是由一个有序系列绕着某个元素旋转得到的。请给出一个在此序列实施查找的有效算法，并对你的算法进行分析</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>有序序列绕着某个元素旋转得到旋转数组可以使用改进后的二分查找进行查询，在循环中进行有序性判断</p><p>如果左端元素小于中间元素，则左半部分为有序数组，如果目标值在左半部分，则继续在左半部分进行查找，否则在右半部分查找；若左端元素大于中间元素，那么右半部分为有序数组，若目标值在右半部分，则继续在右半部分进行查找，否则在左半部分进行查找。</p><p>另一种办法就是将旋转序列恢复后在进行二分查找，但是恢复旋转序列存在很多问题，一是<strong>旋转序列恢复的时间复杂度是$O(n)$，恢复后排序增加操作时间</strong>；二是<strong>查找得到的值并不是旋转序列的下标</strong>，在实际应用中不会使用。</p><p>使用顺序查找的办法，时间复杂度是$O(n)$，简单易懂，但是需要遍历整个序列，大规模数据呈现劣势</p><h3 id="算法实现与分析-1"><a href="#算法实现与分析-1" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int BinarySearch(vector&lt;int&gt;&amp; arr, int target) &#123;int left &#x3D; 0, right &#x3D; arr.size() - 1;while (left &lt;&#x3D; right) &#123;int middle &#x3D; left + ((right - left) &gt;&gt; 1);if (arr[middle] &#x3D;&#x3D; target) &#123;return middle;&#125;if (arr[left] &lt;&#x3D; arr[middle]) &#123;if (target &gt;&#x3D; arr[left] &amp;&amp; target &lt; arr[middle]) &#123;right &#x3D; middle - 1;&#125;else &#123;left &#x3D; middle + 1;&#125;&#125;else &#123;if (target &gt; arr[middle] &amp;&amp; target &lt;&#x3D; arr[right]) &#123;left &#x3D; middle + 1;&#125;else &#123;right &#x3D; middle - 1;&#125;&#125;&#125;return -1;&#125;int main() &#123;vector&lt;int&gt; arr &#x3D; &#123; 4,5,6,7,1,2,3 &#125;;int target &#x3D; 1;cout &lt;&lt; BinarySearch(arr, target) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验结果：</p><p><img src="/imgs/sikao4/2.png" alt="image-20230316144631569"></p><p>改进二分法的时间复杂度是$O(log_2n)$，是一种高效的查找方法，在大规模数据下呈现优势</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 查找效率 </tag>
            
            <tag> 旋转数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题三</title>
      <link href="/2023/07/06/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%89/"/>
      <url>/2023/07/06/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出策略列举出包含n元素的集合的所有子集，并进行分析</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>通过数学知识，得到子集的个数是$2^n$，而$n$位的二进制码正好可以表示$2^n$个整数，因此可以对每一子集进行二进制编码（其中，第$i$位编码为1则有该元素，为0则没有），使用二进制数所表示的整数来代表每一个子集。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>使用一字符数组存储包含n个元素的集合$0,1,\cdots,2^n-1$逐一遍历</p><p>对数$i$移位操作按位与判断是否存在某一元素</p><p>打印输出每一个子集</p><h3 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;void PrintSet(int array[],int n) &#123;int m &#x3D; 1 &lt;&lt; n;for (int i &#x3D; 0; i &lt; m; i++) &#123;cout &lt;&lt; &quot;&#123; &quot;;for (int j &#x3D; 0; j &lt; n; j++) &#123;if ((i &gt;&gt; j) &amp; 1) &#123;cout &lt;&lt; array[j] &lt;&lt; &quot; &quot;;&#125;&#125;cout &lt;&lt; &quot;&#125;&quot; &lt;&lt; endl;&#125;&#125;int main() &#123;int array1[] &#x3D; &#123; 1,2,3,4 &#125;;int n1 &#x3D; sizeof(array1) &#x2F; sizeof(array1[0]);PrintSet(array1,n1);cout &lt;&lt; endl;int array2[] &#x3D; &#123; 1,2,3 &#125;;int n2 &#x3D; sizeof(array2) &#x2F; sizeof(array2[0]);PrintSet(array2, n2);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><p><img src="/imgs/sikao3/1.png" alt="image-20230308232014309"></p><p>本算法的时间复杂度是$\Omicron(n*2^n)$，对于元素个数大的集合来说，耗费时间相当大</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>在机器学习、文本处理、推荐系统等应用领域，经常使用相似度指标，调研学习当前业界经常使用的相似度指标</p><h3 id="问题关键字"><a href="#问题关键字" class="headerlink" title="问题关键字"></a>问题关键字</h3><p>相似度指标</p><h3 id="调研学习报告"><a href="#调研学习报告" class="headerlink" title="调研学习报告"></a>调研学习报告</h3><p>相似度指标的定义是衡量对象之间的相似程度的数值，相似度指标可以氛围两大类：基于距离和基于角度。</p><h4 id="基于距离的相似度指标："><a href="#基于距离的相似度指标：" class="headerlink" title="基于距离的相似度指标："></a>基于距离的相似度指标：</h4><p>根据两个对象之间的距离来计算相似度，<strong>距离越近，相似度越高</strong></p><p>常见的指标有欧氏距离、曼哈顿距离、闵可夫斯基距离等</p><h4 id="基于角度的相似度指标："><a href="#基于角度的相似度指标：" class="headerlink" title="基于角度的相似度指标："></a>基于角度的相似度指标：</h4><p>根据两个对象之间的夹角来计算相似度，<strong>夹角越小，相似度越高</strong></p><p>常见的指标有余弦相似度、皮尔逊相关系数等</p><h4 id="常见的相似度指标："><a href="#常见的相似度指标：" class="headerlink" title="常见的相似度指标："></a>常见的相似度指标：</h4><h5 id="欧几里得距离"><a href="#欧几里得距离" class="headerlink" title="欧几里得距离"></a>欧几里得距离</h5><p>根据勾股定理计算两个点之间的直线距离</p><p>欧氏距离越小，表示两个对象越相似</p><h6 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h6><p>$$<br>\sqrt{\sum_{i&#x3D;1}^n\left(x_i-y_i\right)^2}<br>$$</p><h6 id="标准化公式"><a href="#标准化公式" class="headerlink" title="标准化公式"></a>标准化公式</h6><p>$$<br>\sqrt{\sum_{k&#x3D;1}^n\left(\frac{x_{1 k}-x_{2 k}}{s_k}\right)^2}<br>$$</p><h6 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h6><p>欧氏距离适用于<strong>连续变量</strong>，比如坐标、长度、速度等</p><h5 id="余弦相似度"><a href="#余弦相似度" class="headerlink" title="余弦相似度"></a>余弦相似度</h5><p>余弦相似度通过计算两个向量之间的夹角余弦值来衡量它们的方向是否一致</p><p>余弦相似度越大，两个对象越相似；值为负，两向量负相关</p><h6 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h6><p>$$<br>\cos (\theta)&#x3D;\frac{\sum_{k&#x3D;1}^n x_{1 k} x_{2 k}}{\sqrt{\sum_{k&#x3D;1}^n x_{1 k}^2} \sqrt{\sum_{k&#x3D;1}^n x_{2 k}^2}}<br>$$</p><p>余弦相似度无法衡量每个维数值的差异，因此引入<strong>调整余弦相似度</strong>（虽然没有看懂）：</p><h6 id="调整余弦相似度公式"><a href="#调整余弦相似度公式" class="headerlink" title="调整余弦相似度公式"></a>调整余弦相似度公式</h6><p>$$<br>\operatorname{sim}(i, j)&#x3D;\frac{\sum_{u \in U}\left(R_{u, i}-\bar{R}<em>u\right)\left(R</em>{u, j}-\bar{R_u}\right)}{\sqrt{\sum_{u \in U}\left(R_{u, i}-\bar{R}<em>u\right)^2} \sqrt{\sum</em>{u \in U}\left(R_{u,j}-\bar{R}_u\right)^2}}<br>$$</p><h6 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h6><p>余弦相似度适用于<strong>稀疏向量</strong>，比如文本、图像、音频等</p><h5 id="皮尔逊相关系数"><a href="#皮尔逊相关系数" class="headerlink" title="皮尔逊相关系数"></a>皮尔逊相关系数</h5><p>在概率论与数理统计中学习到的衡量两变量之间线性相关程度的统计指标</p><p>皮尔逊相关系数越接近1或者-1，表示两者越相关</p><h6 id="公式-2"><a href="#公式-2" class="headerlink" title="公式"></a>公式</h6><p>$$<br>\rho_{X, Y}&#x3D;\frac{\operatorname{cov}(X, Y)}{\sigma_X \sigma_Y}&#x3D;\frac{E\left(\left(X-\mu_X\right)\left(Y-\mu_Y\right)\right)}{\sigma_X \sigma_Y}&#x3D;\frac{E(X Y)-E(X) E(Y)}{\sqrt{E\left(X^2\right)-E^2(X)} \sqrt{E\left(Y^2\right)-E^2(Y)}}<br>$$</p><h6 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h6><p>皮尔逊相关系数适用于<strong>评分数据</strong>，比如用户对商品、电影的评分</p><h5 id="杰卡德相似系数"><a href="#杰卡德相似系数" class="headerlink" title="杰卡德相似系数"></a>杰卡德相似系数</h5><p>一种衡量集合之间重合程度的指标，通过两个集合交集和并集的比值得到</p><p>杰卡德相似系数越接近1，表示两个对象越相似</p><h6 id="公式-3"><a href="#公式-3" class="headerlink" title="公式"></a>公式</h6><p>$$<br>\operatorname{Jaccard}(X, Y)&#x3D;\frac{X \cap Y}{X \cup Y}<br>$$</p><h6 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h6><p>杰卡德相似系数适用于二元变量或者名义变量，比如词汇、元素、特征</p><h4 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h4><ul><li>在文本处理中，比较两文本之间的语义相似性，可以使用深度学习模型来学习文本向量，适用余弦相似度或其他自定义损失函数来计算文本间的语义匹配程度</li><li>在推荐系统中，比较用户或者物品之间的偏好或者兴趣，可以使用用户-物品偏好矩阵作为输入数据，并使用欧氏距离或者皮尔逊相关系数等方法来计算用户或者物品之间的协同过滤得分。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 集合 </tag>
            
            <tag> 相似度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题二</title>
      <link href="/2023/07/05/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%BA%8C/"/>
      <url>/2023/07/05/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出不同策略求两个整数的最大公约数GCD(m,n)；并进行分析</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>本问题求两数的最大公约数，第一个想法是<strong>暴力枚举法</strong>；</p><p>在数学上，能够证明：$m、n\neq0,GCD(m,n)&#x3D;GCD(n,m<del>mod</del>n)$，递归出最大公约数，也就是<strong>欧几里得算法</strong>，上述等式是欧几里得算法的数学基础；</p><p>对于两数的最大公约数$GCD(m,n)$，有：</p><p>$m&lt;n,GCD(m,n)&#x3D;GCD(n,m)$</p><p>$ m<del>is ~even、n</del>is~even,GCD(m,n)&#x3D;2*GCD(m&#x2F;2,n&#x2F;2)$</p><p>$ m<del>is ~even、n</del>is~odd,GCD(m,n)&#x3D;GCD(m&#x2F;2,n)$</p><p>$ m<del>is ~odd、n</del>is~even,GCD(m,n)&#x3D;GCD(m,n&#x2F;2)$</p><p>$ m<del>is ~odd、n</del>is~odd,GCD(m,n)&#x3D;GCD(n,m-n)$</p><p>基于上述理论进行递归，也就是<strong>二进制算法</strong>。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>对于<strong>暴力枚举法</strong>，确定两数中最小值，从1~最小值进行循环，使用一个变量更新能被共同整除的数，循环结束时，返回变量的最新值；</p><p>对于<strong>欧几里得算法</strong>，编写GCD函数，两数都不为零时，按照规则递归调用GCD函数；</p><p>对于<strong>二进制算法</strong>，编写GCD函数，对m、n进行上述规则判断，然后进行递归调用GCD函数。</p><h3 id="算法代码与分析"><a href="#算法代码与分析" class="headerlink" title="算法代码与分析"></a>算法代码与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;暴力枚举法int Min(int m, int n);int GCD1(int m, int n) &#123;int num &#x3D; 0;for (int i &#x3D; 1; i &lt;&#x3D; Min(m, n); i++) &#123;if (m % i &#x3D;&#x3D; 0 &amp;&amp; n % i &#x3D;&#x3D; 0) &#123;num &#x3D; i;&#125;&#125;return num;&#125;int Min(int m, int n) &#123;return m &gt; n ? n : m;&#125;&#x2F;&#x2F;欧几里得算法int GCD2(int m, int n) &#123;if (n &#x3D;&#x3D; 0) &#123;return m;&#125;return GCD2(n, m % n);&#125;&#x2F;&#x2F;二进制算法int GCD3(int m, int n) &#123;if (m &#x3D;&#x3D; 0) &#123;return n;&#125;if (n &#x3D;&#x3D; 0) &#123;return m;&#125;if (m % 2 &#x3D;&#x3D; 0 &amp;&amp; n % 2 &#x3D;&#x3D; 0) &#123;return 2 * GCD3(m &#x2F; 2, n &#x2F; 2);&#125;else if (m % 2 &#x3D;&#x3D; 0 &amp;&amp; n % 2 &#x3D;&#x3D; 1) &#123;return GCD3(m &#x2F; 2, n);&#125;else if (m % 2 &#x3D;&#x3D; 1 &amp;&amp; n % 2 &#x3D;&#x3D; 0) &#123;return GCD3(m, n &#x2F; 2);&#125;else &#123;return GCD3(Min(m, n), abs(m - n));&#125;&#125;int main() &#123;int m &#x3D; 197456;int n &#x3D; 400000;cout &lt;&lt; GCD1(m, n) &lt;&lt; endl;cout &lt;&lt; GCD2(m, n) &lt;&lt; endl;cout &lt;&lt; GCD3(m, n) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/sikao2/1.png" alt="image-20230305174550409"></p><p>后续查资料得知，GCD3函数并没有体现真正的二进制算法，没有避免大量取模运算，改进如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int GCD3(int m,int n)&#123;    if(m&#x3D;&#x3D;0)&#123;        return n;    &#125;    if(n&#x3D;&#x3D;0)&#123;        return m;    &#125;        if((m&amp;1)&#x3D;&#x3D;0&amp;&amp;(n&amp;1)&#x3D;&#x3D;0)&#123;        return GCD3(m&gt;&gt;1,n&gt;&gt;1)&lt;&lt;1;    &#125;    else if((m&amp;1)&#x3D;&#x3D;0&amp;&amp;(n&amp;1)!&#x3D;0)&#123;        return GCD3(m&gt;&gt;1,n);    &#125;    else if((m&amp;1)!&#x3D;0&amp;&amp;(n&amp;1)&#x3D;&#x3D;0)&#123;        return GCD3(m,n&gt;&gt;1);    &#125;    else&#123;        return GCD3(Min(m,n),abs(m-n));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于数值较小的两数来说，三种方法的速度相差不大，默认$m&gt;n$</p><p>则对于枚举法，其时间复杂度是$O(n)$；</p><p>对于欧几里得算法，其时间复杂度是$O(log_2n)$；</p><p>对于二进制算法，其时间复杂度是$O(log_2(m+n))$；</p><p>所以，对于大数来说，后两种算法的处理速度更快；针对后两种算法，改进的二进制算法避免了大量的取余运算。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出方案返回一可以动态变化的序列（可增可减）中的最大值，并对你的方案进行分析</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>本序列是动态变化的，可以采用顺序栈的数据结构，对于求取序列最大值，采用辅助栈的方式处理；</p><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>建立两个栈，一个栈存取元素，另一个栈存最大元素；</p><h3 id="算法代码与分析-1"><a href="#算法代码与分析-1" class="headerlink" title="算法代码与分析"></a>算法代码与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#define STACK_INIT_SIZE 100#define LIST_SIZE 100using namespace std;typedef int SElemType;&#x2F;&#x2F;栈结构typedef struct &#123;SElemType* base;SElemType* top;int stacksize;&#125;SqStack;typedef struct &#123;SqStack Data;SqStack MaxData;&#125;Maxstack;void InitStack(SqStack* s) &#123;s-&gt;base &#x3D; (SElemType*)malloc(STACK_INIT_SIZE * sizeof(SElemType));s-&gt;top &#x3D; s-&gt;base;s-&gt;stacksize &#x3D; STACK_INIT_SIZE;&#125;void Push(SqStack* s, SElemType e) &#123;if (s-&gt;top - s-&gt;base &gt;&#x3D; s-&gt;stacksize) &#123;s-&gt;base &#x3D; (SElemType*)realloc(s-&gt;base, (s-&gt;stacksize + 10) * sizeof(SElemType));s-&gt;top &#x3D; s-&gt;base + s-&gt;stacksize;s-&gt;stacksize +&#x3D; 10;&#125;*s-&gt;top++ &#x3D; e;&#125;void Pop(SqStack* s, SElemType* e) &#123;*e &#x3D; *--s-&gt;top;&#125;SElemType GetTop(SqStack s) &#123;return *(--s.top);&#125;void DestroyStack(SqStack* s) &#123;free(s-&gt;base);s-&gt;base &#x3D; NULL;s-&gt;top &#x3D; NULL;s-&gt;stacksize &#x3D; 0;&#125;void MaxInit(Maxstack* maxstack) &#123;InitStack(&amp;(maxstack-&gt;Data));InitStack(&amp;(maxstack-&gt;MaxData));&#125;void MaxDestroy(Maxstack* maxstack) &#123;DestroyStack(&amp;maxstack-&gt;Data);DestroyStack(&amp;maxstack-&gt;MaxData);&#125;void MaxPush(Maxstack* maxstack, SElemType e) &#123;Push(&amp;maxstack-&gt;Data, e);if (maxstack-&gt;MaxData.base &#x3D;&#x3D; maxstack-&gt;MaxData.top) &#123;Push(&amp;maxstack-&gt;MaxData, e);&#125;else &#123;if (e &gt;&#x3D; GetTop(maxstack-&gt;MaxData)) &#123;Push(&amp;maxstack-&gt;MaxData, e);&#125;&#125;&#125;void MaxPop(Maxstack* maxstack, SElemType* e) &#123;if (GetTop(maxstack-&gt;Data) &#x3D;&#x3D; GetTop(maxstack-&gt;MaxData)) &#123;Pop(&amp;maxstack-&gt;Data, e);Pop(&amp;maxstack-&gt;MaxData, e);return;&#125;Pop(&amp;maxstack-&gt;Data, e);&#125;SElemType GetMax(Maxstack* maxstack) &#123;return GetTop(maxstack-&gt;MaxData);&#125;int main() &#123;Maxstack maxstack;SElemType e;MaxInit(&amp;maxstack);MaxPush(&amp;maxstack, 1);MaxPush(&amp;maxstack, 2);MaxPush(&amp;maxstack, 3);MaxPush(&amp;maxstack, 1);cout &lt;&lt; GetMax(&amp;maxstack) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/sikao2/2.png" alt="image-20230305233550207"></p><p>对于栈方式存储动态序列以及求取最大值比较容易实现，对于最大值引入最大栈用空间换时间，时间复杂度达到$O(1)$，但是不够对于序列的操作不够灵活，只能在栈顶进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库笔记</title>
      <link href="/2023/07/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h2><h3 id="数据库三大部分"><a href="#数据库三大部分" class="headerlink" title="数据库三大部分"></a>数据库三大部分</h3><ul><li><strong>数据库</strong></li><li><strong>数据库管理系统</strong><ul><li>描述数据库</li><li>管理数据库</li><li>维护数据库</li><li>数据通信</li></ul></li><li><strong>数据库应用程序</strong></li></ul><h3 id="数据库系统的三级结构、两级独立性"><a href="#数据库系统的三级结构、两级独立性" class="headerlink" title="数据库系统的三级结构、两级独立性"></a>数据库系统的三级结构、两级独立性</h3><ul><li>三级结构<ul><li>用户级-对应外模式<ul><li><strong>最接近于用户的一级数据库，是用户看到和使用的数据库，又称用户视图</strong></li><li><strong>不同用户视图可以互相重叠，用户的所有操作都是针对用户视图进行</strong></li></ul></li><li>概念级-对应概念模式<ul><li><strong>介于用户级和物理级之间，是所有用户视图的最小并集</strong></li><li><strong>是数据库管理员看到和使用的数据库，又称DBA视图</strong></li></ul></li><li>物理级-对应内模式<ul><li><strong>数据库的低层表示，它描述数据的实际存贮组织</strong></li><li><strong>是最接近于物理存贮的级，又称内部视图。</strong></li><li><strong>构成：内部记录组成，物理级数据库并不是真正的物理存贮，而是是最接近于物理存贮的级</strong></li></ul></li></ul></li><li>外模式-概念模式映射、概念模式-内模式映射</li><li><strong>三个抽象级间通过两级映射（根据一定的对应规则）进行相互转换，使得数据库的三级形成一个统一整体</strong></li><li><strong>映射隔离了各层之间的相互影响，实现数据独立性</strong></li><li><strong>各层间的映射能力决定数据独立性程度</strong></li><li>两级独立性<ul><li>物理独立性<ul><li><strong>存在于概念模式和内模式之间的映射转换实现物理独立性</strong></li></ul></li><li>逻辑独立性<ul><li><strong>存在于外模式和概念模式之间的映射转换实现逻辑独立性</strong></li></ul></li></ul></li></ul><h3 id="数据库应用程序的体系结构类型"><a href="#数据库应用程序的体系结构类型" class="headerlink" title="数据库应用程序的体系结构类型"></a>数据库应用程序的体系结构类型</h3><ul><li>单层<ul><li><strong>早期DBMS和数据库应用程序结合在同一个程序中.应用程序直接操作数据库文件</strong></li></ul></li><li>两层<ul><li><strong>将DBMS和数据库应用程序分开，在客户端上运行服务，如访问规则、业务规则、合法性校验等。每个客户端与数据库服务器建立独立连接</strong></li></ul></li><li>三层（多层）<ul><li><strong>把客户机和数据库服务分开，利用中间层的应用服务器来处理服务</strong></li></ul></li></ul><h2 id="关系理论1"><a href="#关系理论1" class="headerlink" title="关系理论1"></a>关系理论1</h2><h3 id="数据三种描述形式"><a href="#数据三种描述形式" class="headerlink" title="数据三种描述形式"></a>数据三种描述形式</h3><ul><li>现实世界</li><li>信息世界-ER表示</li><li>机器世界-DBMS支持的数据模型</li></ul><h3 id="数据描述术语"><a href="#数据描述术语" class="headerlink" title="数据描述术语"></a>数据描述术语</h3><ul><li>信息世界<ul><li>实体</li><li>实体集</li><li>属性</li><li>实体键</li></ul></li><li>机器世界<ul><li>记录</li><li>文件</li><li>字段</li><li>记录键</li></ul></li></ul><p>上下相应位置一一对应</p><h3 id="实体-联系模型"><a href="#实体-联系模型" class="headerlink" title="实体-联系模型"></a>实体-联系模型</h3><p>E-R模型表示信息世界</p><p><img src="/imgs/databasenote/1.png" alt="image-20230628105006536"></p><p><strong>E-R图中带下划线的属性为实体键或实体键的一部分。 组合属性用一个树型表示。多值属性用虚线椭圆表示或标出</strong></p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据模型&#x3D;数据组织方法+数据操作集合+数据完整性集合</p><h4 id="数据组织方法"><a href="#数据组织方法" class="headerlink" title="数据组织方法"></a>数据组织方法</h4><p><img src="/imgs/databasenote/2.png" alt="image-20230628111040653"></p><p><img src="/imgs/databasenote/3.png" alt="image-20230628111109838"></p><ul><li><p>层次模型</p><p><strong>层次型数据库模型采用树状结构，依据数据的不同类型，将数据分门别类，存储在不同的层次之下</strong></p></li><li><p>网状模型</p><p><strong>网状数据库模型将每个记录当成一个节点，节点和节点之间可以建立关联，形成一个复杂的网状结构</strong></p></li><li><p>关系模型</p><p><strong>二维矩阵来存储数据，行和列形成一个关联的数据表</strong></p><p>记录和记录之间通过属性之间的关系来进行连接并形成数据集之间的关系</p></li></ul><p>DBMS：</p><blockquote><p>层次数据库系统</p><p>网状数据库系统</p><p>关系数据库系统</p></blockquote><ul><li>关系数据库的原理：关系模型和关系代数</li></ul><h3 id="关系数据模型"><a href="#关系数据模型" class="headerlink" title="关系数据模型"></a>关系数据模型</h3><h4 id="理论基础及数据结构"><a href="#理论基础及数据结构" class="headerlink" title="理论基础及数据结构"></a>理论基础及数据结构</h4><ul><li>理论基础：关系理论（关系代数）</li><li>数据结构：二维表</li></ul><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><strong>实体和联系均用二维表来表示的数据模型称之为关系数据模型。</strong></p><h4 id="概念术语"><a href="#概念术语" class="headerlink" title="概念术语"></a>概念术语</h4><p><img src="/imgs/databasenote/4.png" alt="image-20230628112933184"></p><ul><li><p>关系模式</p><p><strong>二维表的表头那一行称为关系模式，又称表的框架或记录类型</strong></p><p><strong>关系数据模型是若干关系模式的集合</strong></p></li><li><p>关系</p><p><strong>对应于关系模式的一个具体的表称为关系，又称表（Table）</strong></p></li><li><p>元组</p><p><strong>关系中的每一行称为关系的一个元组，又称行（Row）或记录</strong></p></li><li><p>属性</p><p><strong>关系中的每一列称为关系的一个属性，又称列（Column）</strong></p></li><li><p>变域</p><p><strong>关系中的每一属性所对应的取值范围叫属性的变域，简称域</strong></p><p><strong>域是值的集合，关系中所有属性的实际值均来自它所对应的域</strong></p></li><li><p>关键字</p><p><strong>如果关系模式中的某个或某几个属性组成的属性{Ai1,Ai2,…Ain}(n&gt;&#x3D;1)能唯一地标识对应于该关系模式的关系中的任何一个元组，我们就称这样的属性组为该关系模式及其对应关系的关键字(Key)</strong></p></li><li><p>候选关键字</p><p><strong>如果在一个关系中，存在多个属性或属性组合都能用来唯一表示该关系的元组，这些属性或属性 组合都称为该关系的候选关键字或候选码</strong></p></li><li><p>主关键字</p><p><strong>若干个侯选关键字中指定作为关键字的属性或属性组合</strong></p></li><li><p>外部关键字</p><p><strong>当关系中的某个属性或属性组合随不是该关系的关键字或只是关键字的一部分,但却是另一个关系的关键字时,称该属性或属性组合为这个关系的外部关键字或外键</strong></p><p><strong>主表与从表：主表和从表是指以外键相关连的两个表,以外键作为主键的表称为主表;外键所在的表称为从表</strong></p></li></ul><h4 id="关系数据模型完整性约束"><a href="#关系数据模型完整性约束" class="headerlink" title="关系数据模型完整性约束"></a>关系数据模型完整性约束</h4><ul><li>域完整性</li><li>实体完整性</li><li>引用&#x2F;参考完整性</li><li>用户自定义完整性</li></ul><h4 id="关系数据模型的数据操作"><a href="#关系数据模型的数据操作" class="headerlink" title="关系数据模型的数据操作"></a>关系数据模型的数据操作</h4><p>增删查改</p><h4 id="E-R模型转化成关系数据模型"><a href="#E-R模型转化成关系数据模型" class="headerlink" title="E-R模型转化成关系数据模型"></a>E-R模型转化成关系数据模型</h4><ul><li><p><strong>每个实体类型转化为一个关系模式实体类型中实体的属性转化为该关系模式的属性；实体标识符（实体键）转化为该关系模式的关键字；每一个实体转化为该关系模式对应关系的一个元组</strong></p></li><li><p><strong>实体类型间的每一个自身有属性的联系转化为一个关系模式。该联系的属性直接转化为该关系模式的属性，与该联系所关联的所有实体类型的实体键都转化为该关系模式的属性，共同组成该关系模式的主关键字</strong></p></li><li><p><strong>若联系自身无属性</strong></p><p><strong>对1:N型联系，则1侧实体类型的实体键转化为属性加入到N侧实体类型</strong></p><p><strong>对M:N型联系，则两侧实体类型的实体键都转化为属性，互相加入到对侧实体类型所转化后的关系模式中，和该关系模式的原主关键字一起，共同构成该关系模式新的主关键字；<em>或者建立一个新关系模式,关键字是关系的双方的主键共同组成</em></strong></p><p><strong>对1:1型联系，则按1:N型联系或M:N型联系处理</strong></p></li></ul><h2 id="关系理论2"><a href="#关系理论2" class="headerlink" title="关系理论2"></a>关系理论2</h2><p>规范化、函数依赖与范式</p><p>好的关系模式：</p><ol><li>尽可能少的数据冗余</li><li>没有插入异常</li><li>没有删除异常</li><li>没有更新异常</li></ol><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>设R(U)是属性集U上的关系模式，X与Y是U的子集，若对于R(U)的任意一个当前值r，如果对r中的任意两个元组t和s，都有t[X]≡s[X]，就必须有t[Y] ≡s[Y](即若它们在X上的属性值相等，则在Y上的属性值也一定相等），则称“X”函数决定Y或“Y”函数依赖于X，记作X→Y，并称X为决定因素</p><ol><li>若$X \to Y$则称X为决定因素</li><li>若$X \to Y，Y \to X$，则记作$X&lt;-&gt;Y$</li><li>若Y不函数依赖于X</li></ol><h4 id="分类和键"><a href="#分类和键" class="headerlink" title="分类和键"></a>分类和键</h4><ul><li><p>平凡函数依赖、非平凡函数依赖</p><p><strong>设X,Y均为某关系上的属性集，且X→Y，则Y函数依赖于X，X函数决定Y</strong></p><p><strong>若Y包含于X，则称X→Y为：平凡函数依赖</strong></p><p><strong>若Y不包含于X，则称X→Y为：非平凡函数依赖</strong></p></li><li><p>完全函数依赖</p><p><strong>在R（U）中，如果X→Y，并且对于X的任何一个真子集X’，其X’→ Y都不成立，则称Y对X完全函数依赖</strong></p></li><li><p>部分函数依赖</p><p><strong>在R（U）中，如果X→Y，X’→Y，则称Y对X部分函数依赖</strong></p></li><li><p>传递函数依赖</p><p><strong>设有关系模式R(U)，X，Y，Z∈U，如果X→Y，Y→Z，且Y不∈X，Y不函数决定X，则有X→Z，称Z传递函数依赖于X</strong></p></li></ul><p><strong>键</strong></p><p>设K为R（U）中的属性或属性组合，若U函数依赖于K，则K为R的候选键（Candidate Key）。若候选键多于一个，则选定其中的一个为主键（Primary Key），也称为键（Key）；当只有一个候选键时这个候选键即是主键</p><ul><li><p>包含在任何一个候选键中的属性，叫主属性（Prime Attribute）。</p></li><li><p>不包含在任何主键中的属性称为非主属性（Nonprime Attribute），或非键属性（Non-key Attribute）。</p></li></ul><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>关系模式R的每一个属性都是不可分解的，则称R为第一范式的模式，记为R∈1FN模式</p><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>如果R∈1NF，且每一个<strong>非主属性</strong>完全函数依赖于主键则R∈2NF</p><ul><li>从1NF关系中<strong>消除非主属性对关系键的部分函数依赖</strong>，则可得到2NF关系</li><li>如果<strong>R的关系键为单属性，或R的全体属性均为主属性，则R∈2NF</strong></li></ul><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>如果R∈2NF，且每一个非主属性不传递函数依赖于主键，则R∈3NF</p><h4 id="BC范式"><a href="#BC范式" class="headerlink" title="BC范式"></a>BC范式</h4><p>R是一个关系模式，F是其函数依赖集合，当且仅当F中每个函数依赖的决定因素必定包含R的某个候选关键字，则R∈BCNF</p><h4 id="范式转化"><a href="#范式转化" class="headerlink" title="范式转化"></a>范式转化</h4><blockquote><p>1NF（存在非主属性对主键的部分函数依赖）</p><p>I</p><p>I消除非主属性对主键的部分函数依赖</p><p>I</p><p>v</p><p>2NF（存在非主属性对主键的传递函数依赖）</p><p>I</p><p>I消除非主属性对主键的传递函数依赖</p><p>I</p><p>v</p><p>3NF</p><p>I</p><p>I消除主属性对主键的部分函数依赖和传递函数依赖</p><p>I</p><p>v</p><p>BCNF</p></blockquote><h4 id="判断范式类型"><a href="#判断范式类型" class="headerlink" title="判断范式类型"></a>判断范式类型</h4><ul><li><p>第一范式：存在部分函数依赖</p></li><li><p>第二范式：</p><ol><li>主键是单属性</li><li>不存在部分函数依赖</li><li>存在传递依赖</li></ol></li><li><p>第三范式：</p><p>不是第一范式、第二范式</p></li></ul><h4 id="判断候选码"><a href="#判断候选码" class="headerlink" title="判断候选码"></a>判断候选码</h4><ul><li>如果有属性不在函数依赖集中出现，那么它必须包含在候选码中</li><li>如果有属性只在函数依赖集的右边出现，那么它必须不在候选码中</li><li>如果有属性只在函数依赖集的左边出现，则该属性一定包含在候选码中</li><li>如果有属性或属性组能唯一标识元组，则它就是候选码；（也就是说，<strong>通过函数依赖推导出，某属性或属性组，能决定所有属性</strong>）（也就是说，<strong>通过函数依赖推导出，某属性或属性组的闭包中有所有属性</strong>）</li></ul><h4 id="2NF分解"><a href="#2NF分解" class="headerlink" title="2NF分解"></a>2NF分解</h4><p><img src="/imgs/databasenote/5.png" alt="image-20230628151227821"></p><h4 id="3NF分解"><a href="#3NF分解" class="headerlink" title="3NF分解"></a>3NF分解</h4><p><img src="/imgs/databasenote/6.png" alt="image-20230628151853779"></p><p>（2）中改成3NF</p><h4 id="求最小函数依赖集合"><a href="#求最小函数依赖集合" class="headerlink" title="求最小函数依赖集合"></a>求最小函数依赖集合</h4><p><img src="/imgs/databasenote/7.png" alt="image-20230628153356995"></p><p><img src="/imgs/databasenote/8.png" alt="image-20230628153428834"></p><p><img src="/imgs/databasenote/9.png" alt="image-20230628153454936"></p><p><a href="https://blog.csdn.net/mgsky1/article/details/89061365">关系数据库理论之最小函数依赖集</a></p><h2 id="使用SQL-server管理数据库"><a href="#使用SQL-server管理数据库" class="headerlink" title="使用SQL server管理数据库"></a>使用SQL server管理数据库</h2><h3 id="数据库存储结构"><a href="#数据库存储结构" class="headerlink" title="数据库存储结构"></a>数据库存储结构</h3><h4 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h4><p><strong>一个数据库创建在物理介质（如硬盘）的一个或多个文件上，这些文件包括数据库中的对象和数据，或者事务日志的信息</strong></p><ul><li>存储数据的文件叫数据文件</li><li>存储日志的文件叫日志文件</li></ul><p><strong>数据和日志信息不存储在同一个文件中；不同数据库的数据也不存储在同一个文件中</strong></p><p><strong>数据库文件满时，它们可以自动增长</strong></p><p>SQL server中三种类型数据库文件</p><ul><li>主数据库文件（.mdf）<strong>不仅包含数据库用户收集的信息，还包含了数据库中所有其他文件的有关信息</strong></li><li>辅数据库文件（.ndf）</li><li>日志文件（.ldf）</li></ul><h4 id="数据库文件组"><a href="#数据库文件组" class="headerlink" title="数据库文件组"></a>数据库文件组</h4><p><strong>文件组就是文件的集合，把一些分别放在多个磁盘中的文件组合在一起，方便管理和数据分配，可以提高数据库性能</strong></p><p>三种类型的文件组</p><ul><li>主文件组</li><li>用户定义型文件组</li><li>缺省的文件组</li></ul><p>建立文件组的规则</p><ul><li><strong>数据库文件不能与一个以上的文件组关联</strong></li><li><strong>文件和文件组也不能由多个数据库使用</strong></li><li><strong>日志文件不能加到文件组里。日志数据与数据库数据的管理方式不同</strong></li><li><strong>只有文件组中任何一个文件都没有空间了，文件组的文件才会自动增长</strong></li></ul><h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><p><strong>SQL Server中的所有信息都存储在页面（page）上，页面是数据库中使用的最小数据单元</strong></p><p>每一个页面存储8KB（8192字节）的信息，所有的页面都包括一个132字节的页面头，这样就留下了8060 字节存储数据</p><p>页面类型：</p><ul><li>分配页面</li><li>数据和日志页面</li><li>索引页面</li><li>分发页面</li><li>文本&#x2F;图像页面</li></ul><h4 id="盘区"><a href="#盘区" class="headerlink" title="盘区"></a>盘区</h4><p><strong>盘区是表和索引等数据库对象分配空间的单位</strong></p><p>一个盘区（extent）是由8个连续的页面（8×8KB &#x3D; 64KB）组成的数据结构</p><p>当创建一个数据库对象（如一个表）时， SQL Server会自动地以盘区为单位给它分配空间</p><h4 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h4><p><strong>当一个事务开始后，在任何实际数据修改前，都会在事务日志中写入一行，表明事务开始。任何改动都会被记入事务日志</strong></p><p><img src="/imgs/databasenote/10.png" alt="image-20230628161258336"></p><h3 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h3><p><strong>SQL Server安装4个系统数据库。它们分别是master数据库、model数据库、tempdb数据库和msdb数据库</strong></p><h4 id="master数据库"><a href="#master数据库" class="headerlink" title="master数据库"></a>master数据库</h4><p>控制SQL Server的所有方面。这个数据库中包括所有的配置信息、用户登录信息、当前正在服务器中运行的过程的信息</p><p><strong>SQL Server运行时所做的第一件事就是寻找master数据库并打开它</strong></p><h4 id="model数据库"><a href="#model数据库" class="headerlink" title="model数据库"></a>model数据库</h4><p>model数据库是建立所有用户数据库时的模板。当你建立一个新数据库时， SQL Server会把model数据库中的<strong>所有对象建立一份拷贝并移到新数据库</strong>中</p><p><strong>对model所作的每一个动作都在新数据库中产生影响</strong></p><h4 id="tempdb数据库"><a href="#tempdb数据库" class="headerlink" title="tempdb数据库"></a>tempdb数据库</h4><p>tempdb数据库是一个非常特殊的数据库，供所有来访问你的SQL Server的用户使用。这个库用来<strong>保存所有的临时表、存储过程和其他SQL Server建立的临时用的东西</strong></p><p>每次SQL Server重新启动，它都会清空tempdb数据库并重建。永远不要在tempdb数据库建立需要永久保存的表</p><h4 id="msdb数据库"><a href="#msdb数据库" class="headerlink" title="msdb数据库"></a>msdb数据库</h4><p>msdb数据库是SQL Server中的一个特例。如果你查看这个数据库的实际定义，会发现它其实是一个用户数据库。不同之处是SQL Server拿这个数据库来做什么。</p><p>所有的任务调度、报警、操作员都存储在msdb数据库中。</p><p>该库的另一个功能是用来存储所有备份历史。</p><p>SQL Server Agent将会使用这个库</p><h3 id="用户数据库"><a href="#用户数据库" class="headerlink" title="用户数据库"></a>用户数据库</h3><p><strong>自己建立的新数据库都是用户数据库</strong></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><h3 id="数据库的空间需求"><a href="#数据库的空间需求" class="headerlink" title="数据库的空间需求"></a>数据库的空间需求</h3><h3 id="压缩数据库"><a href="#压缩数据库" class="headerlink" title="压缩数据库"></a>压缩数据库</h3><h2 id="使用SQL-server管理表"><a href="#使用SQL-server管理表" class="headerlink" title="使用SQL server管理表"></a>使用SQL server管理表</h2><h3 id="表的定义"><a href="#表的定义" class="headerlink" title="表的定义"></a>表的定义</h3><p><strong>表是一种二维数据对象，是列的相似数据的集合。表由行和列组成，用于存储关系数据库中的数据，是数据库中的主要对象</strong></p><p><strong>表中的行又叫记录，代表单个实体的有关数据的集合</strong></p><p><strong>表中的每行可以分成许多列。列代表记录中的一个信息片段</strong></p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符的命名规则：</p><p>标识符的长度必须少于等于128字符。</p><p>标识符的第一个字符必须是字母(A<del>Z、a</del>z)、_ (下划线)、@或#</p><p>当一个对象以@符号开头，意味着它是一个局部变量。</p><p>以#符号开头的对象表示它是一个局部临时表或是存储过程。</p><p>以# #开头的对象是全局临时对象</p><p>SQL Server有许多以@@开头的函数。不要用@@作为任何对象名的开头</p><p>虽然中文或其他国家语言的字符也可以作为标示符，但是不推荐这么用</p><p>跟在首字符后面的字符可以是字母(A<del>Z、a</del>z以及其他语言的任何字母符号)、_ (下划线)、@或#，数字( 0~9以及其他语言的任何其他数字符号)、$ (美元符)、# 。</p><p>SQL Server保留字(诸如命令字)不允许用。</p><p>空格或其他特殊字符不能在标识符中使用。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><h3 id="主键和UNIQUE约束"><a href="#主键和UNIQUE约束" class="headerlink" title="主键和UNIQUE约束"></a>主键和UNIQUE约束</h3><p><strong>强制唯一性时应用UNIQUE约束而不是主键</strong></p><h3 id="递增值"><a href="#递增值" class="headerlink" title="递增值"></a>递增值</h3><p>标识列，<strong>可以通过向列定义添加Identity属性来将某一列指定为递增值的列</strong></p><p><strong>一个表中只能有一个标识列，标识列可以作主键，标识列不能自己修改，标识列是非空的。可以看做一个特殊的递增的每行都不同的默认值</strong></p><h3 id="创建表、修改表、删除表"><a href="#创建表、修改表、删除表" class="headerlink" title="创建表、修改表、删除表"></a>创建表、修改表、删除表</h3><h3 id="CHECK约束、规则"><a href="#CHECK约束、规则" class="headerlink" title="CHECK约束、规则"></a>CHECK约束、规则</h3><p><strong>语法：名字＋逻辑表达式＋列名</strong></p><p><strong>一个列只能应用一个规则，但是却可以应用多个</strong> <strong>CHECK</strong> <strong>约束</strong></p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键 (FK) 是用于建立和加强两个表数据之间的链接的一列或多列。通过将表中主键值和Unique约束的一列或多列添加到另一个表中，可创建两个表之间的链接。这个列就成为第二个表的外键</p><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><ul><li><p>域完整性</p><p>默认值、空值、CHECK约束、规则</p></li><li><p>实体完整性</p><p>主键，UNIQUE键</p></li><li><p>参考完整性</p><p>外键</p></li><li><p>用户定义完整性</p><p>触发器、存储过程</p></li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><strong>SQL的组成</strong></p><ul><li><p>DDL</p><p>Create（Alter、Drop）数据库、表、视图、规则、存储过程、触发器等</p></li><li><p>DML</p><p>Insert，Delete，Update，Select 数据库中的信息</p></li><li><p>DCL</p><p>对各种数据库对象设置权限</p></li><li><p>ALE</p></li></ul><h2 id="SQL-SELECT"><a href="#SQL-SELECT" class="headerlink" title="SQL-SELECT"></a>SQL-SELECT</h2><h3 id="SELECT-and-FROM-and-INTO"><a href="#SELECT-and-FROM-and-INTO" class="headerlink" title="SELECT and FROM and INTO"></a>SELECT and FROM and INTO</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">SELECT</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span>注意要用哪个数据库，要在界面上选中，这样才方便查询库中表<span class="token comment">----------------1.SELECT and FROM 子句------------------</span><span class="token keyword">SELECT</span> 子句，用来控制列，说明那些列在查询结果里面<span class="token keyword">FROM</span>   子句，用来控制表，说明在哪个<span class="token operator">/</span>哪些表里面查询<span class="token comment">--*代表所有列</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>     <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> publishers<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titleauthor<span class="token comment">--控制显示的列</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> au_lname<span class="token punctuation">,</span> au_fname<span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> title<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> titles<span class="token comment">--列的别名</span><span class="token keyword">SELECT</span> title <span class="token keyword">as</span> <span class="token string">'title-1'</span><span class="token punctuation">,</span> title <span class="token keyword">as</span> <span class="token string">'title-2'</span><span class="token punctuation">,</span> price<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title <span class="token keyword">as</span> <span class="token string">'书名1'</span><span class="token punctuation">,</span> title <span class="token keyword">as</span> <span class="token string">'书名2'</span><span class="token punctuation">,</span> price <span class="token keyword">as</span> <span class="token string">'单价'</span><span class="token keyword">FROM</span> titles<span class="token comment">--常数列</span><span class="token keyword">SELECT</span> <span class="token string">'我'</span> <span class="token keyword">as</span> <span class="token string">'常数列'</span><span class="token keyword">SELECT</span> <span class="token string">'我'</span> <span class="token keyword">as</span> <span class="token string">'常数列'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> <span class="token string">'单价是：'</span><span class="token punctuation">,</span> price<span class="token keyword">FROM</span> titles<span class="token comment">--运算列</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token keyword">as</span> <span class="token string">'单价九折'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token keyword">as</span> <span class="token string">'原价'</span><span class="token punctuation">,</span> price <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token keyword">as</span> <span class="token string">'九折价'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token keyword">as</span> <span class="token string">'原价'</span><span class="token punctuation">,</span> <span class="token string">'九折'</span> <span class="token keyword">as</span> <span class="token string">'折扣力度'</span><span class="token punctuation">,</span> price <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token keyword">as</span> <span class="token string">'折后价'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token operator">*</span> ytd_sales <span class="token keyword">as</span> <span class="token string">'总销售额'</span><span class="token keyword">FROM</span> titles<span class="token comment">--列的拼接</span><span class="token keyword">SELECT</span> au_lname<span class="token punctuation">,</span> au_fname<span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> au_lname <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> au_fname <span class="token keyword">as</span> <span class="token string">'作者姓名'</span><span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> au_lname <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> au_fname <span class="token operator">+</span> <span class="token string">' 住在: '</span> <span class="token operator">+</span> city <span class="token keyword">as</span> <span class="token string">'一句话'</span><span class="token keyword">FROM</span> authors<span class="token comment">--重要语法：DISTINCT</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span> <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">type</span> <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> pub_id<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> pub_id<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token keyword">FROM</span> titles<span class="token comment">--重要语法：TOP n</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span> price<span class="token keyword">FROM</span> titles<span class="token comment">-------------------------2. INTO 子句---------------</span><span class="token keyword">INTO</span> 子句，把一个查询结果，直接创建一个新表，存起来<span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span> price<span class="token keyword">INTO</span> titles3rows<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles3rows<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">SELECT</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token comment">----------------3.WHERE 子句------------------</span><span class="token keyword">WHERE</span> 子句用来控制行，做条件判断，符合条件的就显示出来<span class="token number">1.</span> <span class="token operator">=</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1389</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1111</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">=</span> <span class="token number">19.99</span><span class="token number">2.</span><span class="token operator">&lt;></span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">&lt;></span> <span class="token number">19.99</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">&lt;></span> <span class="token string">'business'</span><span class="token number">3.</span> <span class="token operator">></span> <span class="token operator">&lt;</span>  <span class="token operator">>=</span>  <span class="token operator">&lt;=</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">19</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">></span> <span class="token string">'zusiness'</span><span class="token number">4.</span> <span class="token operator">and</span> <span class="token operator">or</span> <span class="token operator">not</span> 与或非<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token operator">not</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">and</span> price <span class="token operator">></span> <span class="token number">9</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span> <span class="token operator">and</span> price <span class="token operator">></span> <span class="token number">19</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span> <span class="token operator">and</span> price <span class="token operator">></span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span><span class="token punctuation">)</span> <span class="token operator">and</span> price <span class="token operator">></span> <span class="token number">19</span><span class="token number">5.</span> <span class="token operator">between</span> <span class="token operator">and</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">between</span> <span class="token number">10</span> <span class="token operator">and</span> <span class="token number">19</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">>=</span> <span class="token number">9</span> <span class="token operator">and</span> price <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token number">6.</span> <span class="token operator">is</span> <span class="token boolean">null</span>  <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token number">7.</span>多值条件 <span class="token operator">in</span>  <span class="token operator">not</span> <span class="token operator">in</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'business'</span><span class="token punctuation">,</span> <span class="token string">'mod_cook'</span><span class="token punctuation">,</span> <span class="token string">'popular_comp'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'popular_comp'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'business'</span><span class="token punctuation">,</span> <span class="token string">'mod_cook'</span><span class="token punctuation">,</span> <span class="token string">'popular_comp'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">9.9</span><span class="token punctuation">,</span> <span class="token number">19.99</span><span class="token punctuation">,</span> <span class="token number">29.99</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2.99</span><span class="token punctuation">)</span><span class="token number">8.</span>模糊查询<span class="token number">8.1</span> <span class="token operator">like</span> <span class="token string">'%xxxxxxx%'</span>   其中<span class="token operator">%</span>叫做通配符，而且是无关长度的通配<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%comp%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'comp%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%Y'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token number">8.2</span>  _  单字符统配<span class="token keyword">SELECT</span> au_lname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> phone <span class="token operator">like</span> <span class="token string">'_15%2'</span><span class="token keyword">SELECT</span> au_fname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_fname <span class="token operator">like</span> <span class="token string">'_her__'</span><span class="token number">8.3</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 区间单字符统配<span class="token keyword">SELECT</span> au_fname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_fname <span class="token operator">like</span> <span class="token string">'[a-c]heryl'</span><span class="token keyword">SELECT</span> au_fname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_fname <span class="token operator">like</span> <span class="token string">'[a-s]heryl'</span><span class="token keyword">SELECT</span> au_fname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_fname <span class="token operator">like</span> <span class="token string">'[^a-c]heryl'</span><span class="token comment">------------------练习--------------</span>查询产品类别CategoryID是<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>的所有产品用多种方法来实现：<span class="token operator">OR</span>，<span class="token operator">BETWEEN</span>，<span class="token operator">IN</span>，<span class="token operator">&lt;></span><span class="token keyword">USE</span> Northwind<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> CategoryID <span class="token operator">between</span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">4</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> CategoryID <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>查询产品类别是<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>，并且供应商SupplierID不是<span class="token number">11</span>的所有产品<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> CategoryID <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">and</span> SupplierID <span class="token operator">&lt;></span> <span class="token number">11</span>查产品名ProduceName中以“C”或“D”或“E”开头的所有产品也可以用多种方法实现，练习使用<span class="token operator">LIKE</span>的模糊匹配<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> ProductName <span class="token operator">like</span> <span class="token string">'[c-e]%'</span>查询库存UnitsInStock<span class="token operator">&lt;</span>订货量UnitsOnOrder的产品，并且在第一列添加常数“需要进货”<span class="token keyword">SELECT</span> <span class="token string">'需要进货'</span> <span class="token keyword">as</span> <span class="token string">'提醒'</span><span class="token punctuation">,</span> productname<span class="token punctuation">,</span> unitsinstock<span class="token punctuation">,</span> unitsonorder<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> unitsinstock <span class="token operator">&lt;</span> unitsonorder在上面的基础上，计算出每个产品进货的预算总额利用表达式，计算出订货和库存的差距，并利用产品单价UnitPrice得出预算。需要添加一个新的计算结果的列，叫做“进货预算”<span class="token keyword">SELECT</span> <span class="token string">'需要进货'</span> <span class="token keyword">as</span> <span class="token string">'提醒'</span><span class="token punctuation">,</span> productname<span class="token punctuation">,</span>        unitsinstock<span class="token punctuation">,</span> unitsonorder<span class="token punctuation">,</span> UnitPrice<span class="token punctuation">,</span>   <span class="token punctuation">(</span>unitsonorder <span class="token operator">-</span> unitsinstock<span class="token punctuation">)</span><span class="token operator">*</span>unitprice <span class="token keyword">as</span> <span class="token string">'进货预算'</span><span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> unitsinstock <span class="token operator">&lt;</span> unitsonorder练习查找雇员表中<span class="token number">60</span>年代出生在UK的员工日期列用法例子: Birthday <span class="token operator">></span> ‘<span class="token number">2000</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>’<span class="token keyword">SELECT</span> lastname<span class="token punctuation">,</span> firstname<span class="token punctuation">,</span> BirthDate<span class="token punctuation">,</span> Country<span class="token keyword">FROM</span> Employees<span class="token keyword">WHERE</span> birthdate <span class="token operator">between</span> <span class="token string">'1960-1-1'</span> <span class="token operator">and</span> <span class="token string">'1969-12-31'</span>       <span class="token operator">and</span> Country <span class="token operator">=</span> <span class="token string">'UK'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">SELECT</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token comment">----------------聚合函数------------------</span>MAX 最大值MIN 最小值AVG 平均值SUM 求和值COUNT 计数<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">100</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token comment">----------------GROUP BY 子句------------------</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 子句，进行分组聚合<span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'popular_comp'</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token comment">--消息 8120，级别 16，状态 1，第 1 行</span>选择列表中的列 <span class="token string">'titles.type'</span> 无效，因为该列没有包含在聚合函数或 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 子句中。！！！！！<span class="token keyword">group</span> <span class="token keyword">by</span>出现的情况下，<span class="token keyword">select</span>里面的列，要不就是出现在<span class="token keyword">group</span> <span class="token keyword">by</span>中，要不就必须在聚合函数中<span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> pub_id<span class="token keyword">SELECT</span> pub_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> pub_id<span class="token comment">-------Group by 的多列，嵌套使用</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> pub_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token punctuation">,</span> pub_id<span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> pub_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">20</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token punctuation">,</span> pub_id<span class="token comment">------------------------HAVING 子句----------------</span><span class="token keyword">HAVING</span> 子句，负责对聚合函数的结果进行条件判断，符合条件的显示<span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token comment">--消息 147，级别 15，状态 1，第 3 行</span>聚合不应出现在 <span class="token keyword">WHERE</span> 子句中，除非该聚合位于 <span class="token keyword">HAVING</span> 子句或选择列表所包含的子查询中，并且要对其进行聚合的列是外部引用。<span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span> <span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span> <span class="token operator">and</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1389</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token comment">-----------------------------------ORDER BY-------------------------------</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 子句，根据某列的值，对查询结果进行排序<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span>   默认升序<span class="token keyword">ASC</span>关键词可以不写<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">DESC</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> pub_id<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price<span class="token punctuation">,</span> ytd_sales <span class="token keyword">DESC</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1389</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price<span class="token punctuation">,</span> ytd_sales <span class="token keyword">DESC</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1389</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token comment">---------------</span>显示单价最高的<span class="token number">10</span>个商品需要先按降序排列，然后取<span class="token keyword">TOP</span> <span class="token number">10</span>计算所有商品的总单价统计类型为<span class="token number">1</span>的商品的个数，和总库存在作聚合函数的时候要选择<span class="token number">2</span>个聚合函数，而且要添加<span class="token keyword">WHERE</span>条件<span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">10</span> productname<span class="token punctuation">,</span> CategoryID<span class="token punctuation">,</span>  unitprice<span class="token keyword">FROM</span> products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> unitprice <span class="token keyword">DESC</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>unitprice<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">SELECT</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>unitsinstock<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> Categoryid <span class="token operator">=</span> <span class="token number">1</span>统计当前有多少个供应商给我们供货要求只显示出供应商的SupplierID就可以了<span class="token number">2</span>方法，<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>，<span class="token keyword">DISTINCT</span>统计每个供应商ID提供的商品个数按供应商ID分组，并添加聚合函数按商品个数的升序排列刚才的结果添加对聚合函数的结果的排序只显示提供商品个数<span class="token operator">></span><span class="token number">3</span>的供应商使用<span class="token keyword">Having</span>子句<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> SupplierID<span class="token keyword">FROM</span> products<span class="token keyword">SELECT</span>  SupplierID<span class="token keyword">FROM</span> products<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> SupplierID<span class="token keyword">SELECT</span>  SupplierID<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> SupplierID<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><pre class="line-numbers language-cql" data-language="cql"><code class="language-cql">---------------------------多表查询--------------------------------方法一：用where中&#x3D;来连接两个表--------------SELECT * FROM titlesSELECT * FROM publishers查询这个出版社 New Moon Books 出版的所有书SELECT * FROM publishersWHERE pub_name &#x3D; &#39;New Moon Books&#39;SELECT * FROM titlesWHERE pub_id &#x3D; 0736SELECT *FROM titles, publishersORDER BY title_id返回了144行 &#x3D; 18*8titles表里面的pub_id是外键，他来自publishers表里面的主键pub_idSELECT title_id, title, price, titles.pub_id, publishers.pub_id, pub_nameFROM titles, publishersORDER BY title_idSELECT title_id, title, price, titles.pub_id, publishers.pub_id, pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_idORDER BY title_idSELECT title, price, pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_idORDER BY priceSELECT title, price, pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_id       and pub_name &#x3D;&#39;New Moon Books&#39;ORDER BY priceSELECT * FROM Employee （job——id）SELECT * FROM jobs （job_desc）显示每个雇员的名字和职位描述SELECT e.lname, j.job_descFROM employee as e, jobs as jWHERE e.job_id &#x3D; j.job_idSELECT * FROM titlesSELECT * FROM authorsSELECT * FROM titleauthorSELECT title, au_fname, au_lname, au_ordFROM titleauthor as ta, titles as t, authors as aWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_idORDER BY title, au_ordSELECT title, au_fname, au_lname, au_ordFROM titleauthor as ta, titles as t, authors as aWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_id and a.state &#x3D; &#39;CA&#39;ORDER BY title, au_ord思考：再加一列，出版社的名字，咋办？SELECT title, au_fname, au_lname, au_ord, pub_nameFROM titleauthor as ta, titles as t, authors as a, publishers as pWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_id and p.pub_id &#x3D; t.pub_idORDER BY title, au_ord思考: 查询，作者，和，出版社，都在同一个省的，书SELECT title, au_fname, au_lname, au_ord, pub_nameFROM titleauthor as ta, titles as t, authors as a, publishers as pWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_id and p.pub_id &#x3D; t.pub_id      and p.state &#x3D; a.stateORDER BY title, au_ord----------方法二：用where中的子查询--------------我们要查找出版过商业书籍的，出版社编号和名字SELECT DISTINCT publishers.pub_id, publishers.pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_id     and titles.type &#x3D; &#39;business&#39;SELECT publishers.pub_id, publishers.pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_id     and titles.type &#x3D; &#39;business&#39;SELECT publishers.pub_id, publishers.pub_nameFROM publishersWHERE publishers.pub_id in(   SELECT pub_id FROM titles   WHERE type &#x3D; &#39;business&#39;)SELECT publishers.pub_id, publishers.pub_nameFROM publishersWHERE publishers.pub_id in (1389,0736)地点是加州CA的出版社，出版的书，的名字和价格SELECT title, priceFROM titles WHERE pub_id in (    SELECT pub_id FROM publishersWHERE state &#x3D; &#39;CA&#39;)有两个及以上作者的，书的，名字，单价，出版社名字SELECT t.title, t.price, p.pub_nameFROM titles as t, publishers as pWHERE t.pub_id &#x3D; p.pub_id       and title_id in   (SELECT title_idFROM titleauthorGROUP BY title_idHAVING count(*) &gt;&#x3D; 2      )SELECT DISTINCT title_id FROM titleauthorWHERE au_ord &gt;&#x3D; 2SELECT title_idFROM titleauthorGROUP BY title_idHAVING count(*) &gt;&#x3D; 2找出在1996-7-1到1996-7-10期间有过销售记录的美国员工的名字SELECT lastname, firstname FROM EmployeesWHERE country &#x3D; &#39;USA&#39;      and EmployeeID in (SELECT employeeID FROM ordersWHERE orderdate between &#39;1996-7-1&#39; and &#39;1996-7-10&#39;)SELECT DISTINCT lastname, firstname FROM Employees as e, orders as oWHERE e.EmployeeID &#x3D; o.employeeID and e.country &#x3D; &#39;USA&#39; and      o.orderdate between &#39;1996-7-1&#39; and &#39;1996-7-10&#39;----------方法三：联接查询--------------SELECT * FROM titles  -18行SELECT * FROM publishers -8行SELECT * FROM titles, publishers  order by title_id    -144&#x3D;18*8交叉联接SELECT * FROM titles, publishers SELECT * FROM titles cross join publishers 内联接SELECT * FROM titles as t, publishers as pWHERE t.pub_id  &#x3D; p.pub_idSELECT * FROM titles as t inner join publishers as pon (t.pub_id &#x3D; p.pub_id)SELECT t.title, a.au_fname, a.au_fnameFROM titleauthor as ta, titles as t, authors as aWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_idSELECT t.title, a.au_fname, a.au_fnameFROM titleauthor as ta inner join titles as t      on (ta.title_id &#x3D; t.title_id)     inner join authors as a on (ta.au_id &#x3D; a.au_id)外联接SELECT * FROM stores -6个书店SELECT * FROM discounts  -3种折扣，其中1种有1个商店在执行显示打折的书店和折扣信息SELECT * FROM stores inner join discounts       on (stores.stor_id &#x3D; discounts.stor_id)左向外联接显示所有书店的编号和名字，如果商店有折扣在执行，则显示折扣类型SELECT stores.stor_id, stores.stor_name, discounts.discounttypeFROM stores left outer join discounts      on (stores.stor_id &#x3D; discounts.stor_id)右向外联接显示所有折扣类型，如果有书店在执行某个折扣类型，则显示书店名字SELECT stores.stor_id, stores.stor_name, discounts.discounttypeFROM stores right outer join discounts      on (stores.stor_id &#x3D; discounts.stor_id)全向外联接折扣类型和书店信息都要出来，如果某个书店正在执行某个折扣类型，则融合显示SELECT stores.stor_id, stores.stor_name, discounts.discounttypeFROM stores full outer join discounts      on (stores.stor_id &#x3D; discounts.stor_id)内联接检索与某个出版商居住在相同州和城市的作者：SELECT * FROM publishersSELECT * FROM authorsSELECT a.au_fname, a.au_lname, p.pub_nameFROM authors as a inner join publishers as pon (a.city &#x3D; p.city and a.state &#x3D; p.state)与某个出版商居住在相同州和城市的作者，若要在结果中包括所有的作者，而不管出版商是否住在同一个城市，左向外联接SELECT a.au_fname, a.au_lname, p.pub_nameFROM authors as a left outer join publishers as pon (a.city &#x3D; p.city and a.state &#x3D; p.state)若要在结果中包括所有作者和出版商，而不管城市中是否有出版商或者出版商是否住在同一个城市，请使用完整外部联接SELECT a.au_fname, a.au_lname, p.pub_nameFROM authors as a full outer join publishers as pon (a.city &#x3D; p.city and a.state &#x3D; p.state)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL-DML"><a href="#SQL-DML" class="headerlink" title="SQL-DML"></a>SQL-DML</h2><ul><li>增：INSERT</li><li>删：DELETE</li><li>改：UPDATE</li></ul><p>上述都是选择了某个表进行操作，实质上是对表中数据进行操作，如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">update</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">set</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-------------------------删除数据 DELETE--------------------</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">INTO</span> mytitle<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytitle5<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">INTO</span> mytitle5<span class="token keyword">FROM</span> titles<span class="token keyword">DELETE</span> mytitle<span class="token keyword">DELETE</span> mytitle3<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">DELETE</span> mytitle3<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">10</span><span class="token keyword">DELETE</span> mytitle3<span class="token keyword">WHERE</span> price <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> mytitle4<span class="token keyword">WHERE</span> price <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> mytitle4<span class="token punctuation">)</span><span class="token keyword">DELETE</span> mytitle4<span class="token keyword">WHERE</span> price <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> mytitle4<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> publishersNew Moon Books<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytitle4 <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p<span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytitle4 <span class="token keyword">WHERE</span> pub_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> pub_id <span class="token keyword">FROM</span> publishers         <span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token punctuation">)</span><span class="token keyword">DELETE</span> mytitle4<span class="token keyword">FROM</span> mytitle4 <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p<span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token keyword">DELETE</span> mytitle4 <span class="token keyword">WHERE</span> pub_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> pub_id <span class="token keyword">FROM</span> publishers         <span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token punctuation">)</span><span class="token keyword">DELETE</span> titles消息 <span class="token number">547</span>，级别 <span class="token number">16</span>，状态 <span class="token number">0</span>，第 <span class="token number">1</span> 行<span class="token keyword">DELETE</span> 语句与 REFERENCE 约束<span class="token string">"FK__titleauth__title__1ED998B2"</span>冲突。该冲突发生于数据库<span class="token string">"pubs"</span>，表<span class="token string">"dbo.titleauthor"</span><span class="token punctuation">,</span> <span class="token keyword">column</span> <span class="token string">'title_id'</span>。语句已终止。<span class="token keyword">DELETE</span> titleauthor<span class="token keyword">DELETE</span> titles消息 <span class="token number">547</span>，级别 <span class="token number">16</span>，状态 <span class="token number">0</span>，第 <span class="token number">1</span> 行<span class="token keyword">DELETE</span> 语句与 REFERENCE 约束<span class="token string">"FK__sales__title_id__24927208"</span>冲突。该冲突发生于数据库<span class="token string">"pubs"</span>，表<span class="token string">"dbo.sales"</span><span class="token punctuation">,</span> <span class="token keyword">column</span> <span class="token string">'title_id'</span>。语句已终止。<span class="token keyword">DELETE</span> sales<span class="token keyword">DELETE</span> titles消息 <span class="token number">547</span>，级别 <span class="token number">16</span>，状态 <span class="token number">0</span>，第 <span class="token number">1</span> 行<span class="token keyword">DELETE</span> 语句与 REFERENCE 约束<span class="token string">"FK__roysched__title___267ABA7A"</span>冲突。该冲突发生于数据库<span class="token string">"pubs"</span>，表<span class="token string">"dbo.roysched"</span><span class="token punctuation">,</span> <span class="token keyword">column</span> <span class="token string">'title_id'</span>。语句已终止。<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> title_id <span class="token keyword">FROM</span> roysched<span class="token punctuation">)</span><span class="token keyword">DELETE</span> titles<span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token string">'PC9999'</span><span class="token comment">--------------------------------INSERT 新增数据------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> old<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10000'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'13810008888'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> old<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10001'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'13770008888'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> old<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10002'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'13313003338'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10003'</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'13111003331'</span><span class="token punctuation">)</span><span class="token comment">-----</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10003'</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'13111003331'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10004'</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'13111003331'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10005'</span><span class="token punctuation">,</span> <span class="token string">'钱七'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10005'</span><span class="token punctuation">,</span> <span class="token string">'钱七'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10006'</span><span class="token punctuation">,</span> <span class="token string">'八'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10006'</span><span class="token punctuation">,</span> <span class="token string">'八'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10007'</span><span class="token punctuation">,</span> <span class="token string">'九'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token comment">------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> old<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  <span class="token keyword">LEFT</span><span class="token punctuation">(</span>au_id<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         au_lname <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> au_fname<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span>phone<span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token comment">--------------------------UPDATE 更新数据-----------------</span><span class="token keyword">UPDATE</span> student<span class="token keyword">SET</span> gender <span class="token operator">=</span> <span class="token string">'女'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token keyword">UPDATE</span> student<span class="token keyword">SET</span> gender <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">,</span> old <span class="token operator">=</span> old <span class="token operator">+</span> <span class="token number">10</span><span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> old <span class="token operator">=</span> <span class="token number">33</span><span class="token keyword">WHERE</span> sname <span class="token operator">=</span> <span class="token string">'李四'</span>销量排名前十的书，全部涨价<span class="token number">50</span><span class="token operator">%</span><span class="token keyword">UPDATE</span> titles<span class="token keyword">SET</span> price <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token number">1.5</span><span class="token keyword">WHERE</span> title_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">10</span> title_id <span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ytd_sales <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> publishers <span class="token keyword">as</span> p <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">as</span> t<span class="token keyword">on</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> t<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">in</span> <span class="token punctuation">(</span>  <span class="token keyword">SELECT</span> pub_id <span class="token keyword">FROM</span> publishers  <span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token punctuation">)</span><span class="token keyword">UPDATE</span> titles<span class="token keyword">SET</span> price <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token number">0.8</span><span class="token keyword">FROM</span> publishers <span class="token keyword">as</span> p <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">as</span> t<span class="token keyword">on</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> t<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token keyword">UPDATE</span> titles<span class="token keyword">SET</span> price <span class="token operator">=</span> price <span class="token operator">+</span> <span class="token number">10</span><span class="token keyword">WHERE</span> pub_id <span class="token operator">in</span> <span class="token punctuation">(</span>  <span class="token keyword">SELECT</span> pub_id <span class="token keyword">FROM</span> publishers  <span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token punctuation">)</span><span class="token keyword">UPDATE</span> titles<span class="token keyword">SET</span> title_id <span class="token operator">=</span> <span class="token string">'BU2080'</span><span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token string">'BU2075'</span><span class="token keyword">UPDATE</span> publishers<span class="token keyword">SET</span> pub_id <span class="token operator">=</span> <span class="token string">'9998'</span><span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token string">'9999'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL-DDL"><a href="#SQL-DDL" class="headerlink" title="SQL-DDL"></a>SQL-DDL</h2><p>DDL<strong>负责各类数据库对象的创建、修改、删除</strong></p><p>如<strong>数据库、表、视图、索引、存储过程、规则</strong>等</p><ul><li>创建：CREATE</li><li>修改：ALTER</li><li>删除：DROP</li></ul><h2 id="VIEW"><a href="#VIEW" class="headerlink" title="VIEW"></a>VIEW</h2><p>一个VIEW相当于一张虚拟表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">场景：<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> publishers<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> price <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">and</span> ytd_sales <span class="token operator">></span> <span class="token number">1000</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span> <span class="token operator">and</span> price <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token comment">--------------------------视图------------------------</span><span class="token number">1.</span> 用户眼中的数据（数据库、数据表），是用户视角下的数据组织形式   它和实际<span class="token keyword">SQL</span> SERVER里面的表的组织方式（ER图）不一样   这是数据库的三级结构（用户级、外模式、逻辑独立性）决定的<span class="token number">2.</span> 程序员会把用户常用的一些视角，事先把<span class="token keyword">select</span> <span class="token keyword">sql</span>语句写好，存起来。   注意，存的不是数据，存的是视角（<span class="token keyword">sql</span>语句），这样方便程序员以后在这个视角下继续加条件。综合<span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token comment">---》新概念，视图，VIEW</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v_buybook<span class="token keyword">AS</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v_buybook<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v_buybook<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> View_1<span class="token keyword">SELECT</span>  dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>price<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>ytd_sales<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span>      dbo<span class="token punctuation">.</span>publishers <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>titles <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>pub_id<span class="token keyword">WHERE</span>   <span class="token punctuation">(</span>dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title <span class="token operator">LIKE</span> <span class="token string">'%computer%'</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span class="token keyword">SELECT</span>  <span class="token keyword">TOP</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">PERCENT</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>price<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>ytd_sales<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_name<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>au_lname<span class="token punctuation">,</span>                    dbo<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>au_fname<span class="token keyword">FROM</span>      dbo<span class="token punctuation">.</span>publishers <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>titles <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>pub_id <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>titleauthor <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>titleauthor<span class="token punctuation">.</span>title_id <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>authors <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titleauthor<span class="token punctuation">.</span>au_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>au_id<span class="token keyword">WHERE</span>   <span class="token punctuation">(</span>dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title <span class="token operator">LIKE</span> <span class="token string">'%computer%'</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>采用B树结构</p><p>簇索引和非簇索引</p><h3 id="簇索引"><a href="#簇索引" class="headerlink" title="簇索引"></a>簇索引</h3><p><strong>在叶节点中存储了表的实际行数据，所以一旦到达叶节点，数据就立刻可以使用</strong></p><p>主键是聚簇索引的良好候选者</p><p>缺省设置创建的索引是非聚簇索引</p><h3 id="非簇索引"><a href="#非簇索引" class="headerlink" title="非簇索引"></a>非簇索引</h3><p><strong>非簇索引的结构类似于簇索引，但是表的数据不存储在索引的叶节点上，表的数据也不按照索引列排序</strong></p><h3 id="索引的唯一性"><a href="#索引的唯一性" class="headerlink" title="索引的唯一性"></a>索引的唯一性</h3><p><strong>非唯一性索引效率不如唯一性效率高</strong></p><ul><li><p>唯一索引</p><p><strong>必须在数据库表中具有唯一值特性的列上创建</strong></p><p><strong>唯一索引在各索引键中仅包含一行数据表中的数据</strong></p><p><strong>在创建主键约束和唯一约束时自动创建</strong></p></li><li><p>非唯一索引</p><p><strong>在叶节点中可以包含重复值，如果它们符合SELECT语句中指定的标准，那么所有重复值都可以被检索</strong></p></li></ul><h3 id="有效使用索引"><a href="#有效使用索引" class="headerlink" title="有效使用索引"></a>有效使用索引</h3><p><strong>在对索引列进行查询时，不在查询where子句中显式地加入NOT词，否则无法使用索引</strong></p><h3 id="维护索引"><a href="#维护索引" class="headerlink" title="维护索引"></a>维护索引</h3><blockquote><blockquote><p>查看索引状态</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DBCC</span> SHOWCONTIG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>重建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">drop</span> existing<span class="token keyword">DBCC</span> DBREINDEX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>整理索引碎片</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DBCC</span> INDEXDEFRAG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>索引统计信息</p><blockquote><p>查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DBCC</span> SHOW_STATISTICS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></blockquote></blockquote><h3 id="索引优缺点"><a href="#索引优缺点" class="headerlink" title="索引优缺点"></a>索引优缺点</h3><h4 id="索引优点"><a href="#索引优点" class="headerlink" title="索引优点"></a>索引优点</h4><ul><li>加速数据检索</li><li>加速连接、order by和Group by</li><li>查询优化器</li><li>强制实施行的唯一性</li></ul><h4 id="索引缺点"><a href="#索引缺点" class="headerlink" title="索引缺点"></a>索引缺点</h4><ul><li>基于代价</li><li>索引创建花费时间、空间</li><li>减慢了数据修改速度</li></ul><h3 id="适合使用索引的情况"><a href="#适合使用索引的情况" class="headerlink" title="适合使用索引的情况"></a>适合使用索引的情况</h3><ul><li>主键适合簇索引</li><li>连接中频繁使用的列</li><li>列常需要排序、分组</li><li>查询访问较少的数据</li></ul><h3 id="不适合使用"><a href="#不适合使用" class="headerlink" title="不适合使用"></a>不适合使用</h3><ul><li>不常在查询中引用的列</li><li>值少的列</li><li>小表</li><li>经常增删查改的表</li><li>null</li></ul><h2 id="SQL-syntax"><a href="#SQL-syntax" class="headerlink" title="SQL-syntax"></a>SQL-syntax</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> CEILING<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> FLOOR<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> SIN<span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>UPPER<span class="token punctuation">(</span>au_lname<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>UPPER<span class="token punctuation">(</span>au_fname<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> DATEADD<span class="token punctuation">(</span>dd<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> DATEDIFF<span class="token punctuation">(</span>dd<span class="token punctuation">,</span> <span class="token string">'2023-5-11'</span><span class="token punctuation">,</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> cast<span class="token punctuation">(</span>ytd_sales <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'15%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> ytd_sales <span class="token operator">like</span> <span class="token string">'15%'</span><span class="token keyword">SELECT</span> title <span class="token operator">+</span> <span class="token string">' 这本书的销量是： '</span> <span class="token operator">+</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title <span class="token operator">+</span> <span class="token string">' 这本书的销量是： '</span> <span class="token operator">+</span> cast<span class="token punctuation">(</span>ytd_sales <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">DECLARE</span>    <span class="token variable">@myfirstvar</span> <span class="token keyword">int</span><span class="token keyword">SET</span>   <span class="token variable">@myfirstvar</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token variable">@myfirstvar</span><span class="token keyword">DECLARE</span>    <span class="token variable">@mysecondvar</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token variable">@mythird</span> <span class="token keyword">int</span><span class="token keyword">SET</span> <span class="token variable">@mysecondvar</span> <span class="token operator">=</span> <span class="token string">'computer'</span><span class="token keyword">SET</span> <span class="token variable">@mythird</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@mysecondvar</span> <span class="token operator">+</span> <span class="token string">'%'</span>      <span class="token operator">and</span> price <span class="token operator">&lt;</span> <span class="token variable">@mythird</span><span class="token keyword">DECLARE</span>  <span class="token variable">@mycontrol</span> <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token variable">@myinputprice</span> <span class="token keyword">int</span><span class="token keyword">SET</span> <span class="token variable">@myinputprice</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token keyword">SET</span> <span class="token variable">@mycontrol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> titles <span class="token keyword">WHERE</span> price <span class="token operator">&lt;</span> <span class="token variable">@myinputprice</span><span class="token punctuation">)</span><span class="token keyword">IF</span> <span class="token variable">@mycontrol</span> <span class="token operator">></span> <span class="token number">0</span><span class="token keyword">BEGIN</span>  <span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> titles   <span class="token keyword">WHERE</span> price <span class="token operator">&lt;</span> <span class="token variable">@myinputprice</span><span class="token keyword">END</span><span class="token keyword">ELSE</span><span class="token keyword">BEGIN</span>  <span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> titles  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ytd_sales <span class="token keyword">DESC</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL-cursor"><a href="#SQL-cursor" class="headerlink" title="SQL-cursor"></a>SQL-cursor</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*-----------------------------------------------------游标---关系数据库中的操作会对整个行集产生影响。由 SELECT 语句返回的行集包括所有满足该语句 WHERE 子句中条件的行。由语句所返回的这一完整的行集被称为结果集。应用程序，特别是交互式联机应用程序，并不总能将整个结果集作为一个单元来有效地处理。这些应用程序需要一种机制以便每次处理一行或一部分行。游标就是提供这种机制的结果集扩展。 -------------------------------------------------------*/</span><span class="token comment">---------------------------------------------------------------------------------</span><span class="token comment">--游标基本语法</span><span class="token comment">---------------------------------------------------------------------------------</span><span class="token keyword">DECLARE</span> Employee_Cursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span><span class="token keyword">SELECT</span> LastName<span class="token punctuation">,</span> FirstName <span class="token keyword">FROM</span> Northwind<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>Employees<span class="token keyword">OPEN</span> Employee_Cursor<span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> Employee_Cursor<span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">BEGIN</span>   <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> Employee_Cursor<span class="token keyword">END</span><span class="token keyword">CLOSE</span> Employee_Cursor<span class="token keyword">DEALLOCATE</span> Employee_Cursor<span class="token comment">---------------------------------------------------------------------------------</span><span class="token comment">--游标读取行的值 </span><span class="token comment">---------------------------------------------------------------------------------</span><span class="token comment">-- Declare the variables to store the values returned by FETCH.</span><span class="token keyword">DECLARE</span> <span class="token variable">@au_lname</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">@au_fname</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">DECLARE</span> authors_cursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span><span class="token keyword">SELECT</span> au_lname<span class="token punctuation">,</span> au_fname <span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_lname <span class="token operator">LIKE</span> <span class="token string">'B%'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> au_lname<span class="token punctuation">,</span> au_fname<span class="token keyword">OPEN</span> authors_cursor<span class="token comment">-- Perform the first fetch and store the values in variables.</span><span class="token comment">-- Note: The variables are in the same order as the columns</span><span class="token comment">-- in the SELECT statement. </span><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> authors_cursor<span class="token keyword">INTO</span> <span class="token variable">@au_lname</span><span class="token punctuation">,</span> <span class="token variable">@au_fname</span><span class="token comment">-- Check @@FETCH_STATUS to see if there are any more rows to fetch.</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">BEGIN</span>   <span class="token comment">-- Concatenate and display the current values in the variables.</span>   <span class="token keyword">PRINT</span> <span class="token string">'Author: '</span> <span class="token operator">+</span> <span class="token variable">@au_fname</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  <span class="token variable">@au_lname</span>   <span class="token comment">-- This is executed as long as the previous fetch succeeds.</span>   <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> authors_cursor   <span class="token keyword">INTO</span> <span class="token variable">@au_lname</span><span class="token punctuation">,</span> <span class="token variable">@au_fname</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> authors_cursor<span class="token keyword">DEALLOCATE</span> authors_cursorGO<span class="token comment">/*-----------------------------------------------------------------------------------查询所有商业书籍在1993年的销售量 输出2列  书名和1993年销售量商业书                                                                  1993年销售量    ------------------------------------------------------------------       ----------- Cooking with Computers: Surreptitious Balance Sheets                             25Straight Talk About Computers                                                    15The Busy Executive's Database Guide                                              15You Can Combat Computer Stress!                                                  35---------------------------------------------------------------------------------*/</span><span class="token keyword">DECLARE</span>    authorcursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span>  <span class="token comment">--在所有商业书的查询结果上建立游标</span><span class="token keyword">SELECT</span> title_id<span class="token punctuation">,</span>title <span class="token keyword">FROM</span> titles <span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> title<span class="token keyword">OPEN</span> authorcursor<span class="token comment">--打开游标</span><span class="token keyword">DECLARE</span>    <span class="token variable">@Mytitle_id</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--声明一些变量存储临时结果</span>   <span class="token variable">@Mytitle</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@SumQty</span> <span class="token keyword">int</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token comment">#Tempcursor (--创建临时表存储临时结果</span><span class="token punctuation">[</span>title<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">varchar</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>        <span class="token punctuation">[</span>sumqty<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">PRIMARY</span><span class="token punctuation">]</span><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> authorcursor <span class="token comment">--启动游标读第一条纪录，把纪录的值放入变量</span>      <span class="token keyword">INTO</span> <span class="token variable">@Mytitle_id</span><span class="token punctuation">,</span><span class="token variable">@mytitle</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">--循环读取纪录</span><span class="token keyword">BEGIN</span>          <span class="token comment">--对每次读取的书的编号，到另外的表中求汇总值</span>  <span class="token keyword">SET</span> <span class="token variable">@SumQty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token variable">@MyTitle_id</span> <span class="token operator">AND</span> ord_date <span class="token operator">between</span> <span class="token string">'1991-1-1'</span> <span class="token operator">AND</span> <span class="token string">'1999-12-31'</span><span class="token punctuation">)</span> <span class="token comment">--把每次算出的一个书的结果插入临时表</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#tempcursor VAlues(@Mytitle,@SumQty)       --再向下读取另外一本书</span>  <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> authorcursor <span class="token keyword">INTO</span> <span class="token variable">@Mytitle_id</span><span class="token punctuation">,</span><span class="token variable">@mytitle</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> authorcursor<span class="token comment">--关闭游标</span><span class="token keyword">DEALLOCATE</span> authorcursor<span class="token comment">--释放游标</span><span class="token comment">--把最后所有中间算出的每本书的结果从临时表中读取出来，返回结果</span><span class="token keyword">Select</span> title <span class="token keyword">as</span> <span class="token string">'商业书'</span><span class="token punctuation">,</span> sumqty <span class="token keyword">as</span> <span class="token string">'1993年销售量'</span> <span class="token keyword">from</span> <span class="token comment">#tempCursor</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token comment">#tempcursor--删除临时表</span>GO<span class="token comment">/*-----------------------------------------------------------------------------------查询所有在美国的客户的最近一次销售纪录的总额和日期 northwind数据库   美国顾客编号 最近一次购物时间                                               总金额                   ------ ------------------------------------------------------ --------------------- GREAL  1998-04-30 00:00:00.000                                510.0000HUNGC  1997-09-08 00:00:00.000                                1701.0000LAZYK  1997-05-22 00:00:00.000                                210.0000LETSS  1998-02-12 00:00:00.000                                1450.6000LONEP  1998-04-13 00:00:00.000                                1575.0000OLDWO  1998-04-20 00:00:00.000                                554.4000RATTC  1998-05-06 00:00:00.000                                1374.6000SAVEA  1998-05-01 00:00:00.000                                4722.3000SPLIR  1998-03-25 00:00:00.000                                439.0000THEBI  1998-04-01 00:00:00.000                                69.6000THECR  1998-04-06 00:00:00.000                                326.0000TRAIH  1998-01-08 00:00:00.000                                237.9000WHITC  1998-05-01 00:00:00.000                                928.7500----------------------------------------------------------------------------- */</span><span class="token keyword">Declare</span>   <span class="token variable">@LastOrderDate</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>   <span class="token variable">@LastOrderID</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@LastOrderMoney</span> money<span class="token punctuation">,</span>   <span class="token variable">@TempCustomerID</span> <span class="token keyword">nchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token comment">#Tempcursor (--创建临时表存储临时结果</span><span class="token punctuation">[</span>CustomerID<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">nchar</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>        <span class="token punctuation">[</span>OrderDate<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">datetime</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>SumMoney<span class="token punctuation">]</span> <span class="token punctuation">[</span>money<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">PRIMARY</span><span class="token punctuation">]</span><span class="token keyword">DECLARE</span> Employee_Cursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span><span class="token keyword">SELECT</span> CustomerID <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> Country <span class="token operator">=</span> <span class="token string">'USA'</span><span class="token keyword">OPEN</span> Employee_Cursor<span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> Employee_Cursor      <span class="token keyword">INTO</span> <span class="token variable">@TempCustomerID</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">BEGIN</span>   <span class="token keyword">SET</span> <span class="token variable">@LastOrderdate</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>OrderDate<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> CustomerID <span class="token operator">=</span> <span class="token variable">@TempCustomerID</span><span class="token punctuation">)</span>    <span class="token keyword">SET</span> <span class="token variable">@LastOrderID</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> OrderID <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> OrderDate <span class="token operator">=</span> <span class="token variable">@LastOrderDate</span> <span class="token operator">AND</span>   CustomerID <span class="token operator">=</span> <span class="token variable">@TempCustomerID</span><span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@LastOrderMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>UnitPrice<span class="token operator">*</span>Quantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span><span class="token keyword">Order</span> Details<span class="token punctuation">]</span> <span class="token keyword">WHERE</span> OrderID <span class="token operator">=</span> <span class="token variable">@LastOrderID</span><span class="token punctuation">)</span>   <span class="token keyword">Insert</span> <span class="token keyword">INTO</span> <span class="token comment">#TempCursor  </span>   <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token variable">@TempCustomerID</span><span class="token punctuation">,</span><span class="token variable">@LastOrderDate</span><span class="token punctuation">,</span><span class="token variable">@LastOrderMoney</span><span class="token punctuation">)</span>      <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> Employee_Cursor <span class="token keyword">INTO</span> <span class="token variable">@TempCustomerID</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> Employee_Cursor<span class="token keyword">DEALLOCATE</span> Employee_Cursor<span class="token keyword">SELECT</span> CustomerID <span class="token keyword">as</span> <span class="token string">'美国顾客编号'</span><span class="token punctuation">,</span> OrderDate <span class="token keyword">as</span> <span class="token string">'最近一次购物时间'</span><span class="token punctuation">,</span>SumMoney <span class="token keyword">as</span> <span class="token string">'总金额'</span> <span class="token keyword">FROM</span> <span class="token comment">#TempCursor</span> <span class="token keyword">Drop</span> <span class="token keyword">table</span> <span class="token comment">#Tempcursor</span><span class="token comment">/*-----------思考题-northwind数据库---------------------------------国家名称                 该国最受欢迎产品奖                                                                        -------------------- -------------------------------------------------------------------------------- Argentina            Queso CabralesAustria              Guaraná FantásticaBelgium              Raclette CourdavaultBrazil               Camembert PierrotCanada               Camembert PierrotDenmark              Original Frankfurter grüne So?eFinland              FlotemysostFrance               Tarte au sucreGermany              Camembert PierrotIreland              Thüringer RostbratwurstItaly                Mozzarella di GiovanniMexico               Queso CabralesNorway               Guaraná FantásticaPoland               Rh?nbr?u Klosterbier 并列第一Poland               Gorgonzola Telino    并列第一Portugal             Gnocchi di nonna AliceSpain                Alice MuttonSweden               Zaanse koekenSwitzerland          GudbrandsdalsostUK                   Gorgonzola TelinoUSA                  Gnocchi di nonna AliceVenezuela            Outback Lager在顾客表中统计每个国家的顾客最喜欢哪个产品----------------------------------------------------------------*/</span><span class="token keyword">Create</span> <span class="token keyword">procedure</span> p_LovestOfContry<span class="token keyword">as</span><span class="token keyword">DECLARE</span>    mycursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span>  <span class="token comment">--建立对顾客表上国家的分组的查询的游标</span>   <span class="token keyword">SELECT</span> Country <span class="token keyword">FROM</span> Customers    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Country<span class="token keyword">OPEN</span> mycursor<span class="token comment">--打开游标</span><span class="token keyword">DECLARE</span>    <span class="token variable">@CountryIN</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--声明一些变量存储临时结果</span>   <span class="token variable">@ProductIDIN</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@ProductNameIN</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token variable">@MaxNumIN</span> <span class="token keyword">int</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token comment">#Tempcursor (--创建临时表存储临时结果</span><span class="token punctuation">[</span>CountryName<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">varchar</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>        <span class="token punctuation">[</span>ProductName<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">varchar</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">PRIMARY</span><span class="token punctuation">]</span><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> mycursor <span class="token keyword">INTO</span> <span class="token variable">@CountryIN</span>  <span class="token comment">--启动游标读第一条纪录，把纪录的值放入变量</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">--循环读取纪录</span><span class="token keyword">BEGIN</span>            <span class="token keyword">SELECT</span> ProductID<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span> <span class="token keyword">as</span> SumQuantity   <span class="token comment">--统计某个国家的客户的所有定单中按产品编号分组统计总销售量</span>  <span class="token keyword">INTO</span> <span class="token comment">#mytemp   --把统计结果送入另一个临时表#mytemp，便以后继续操作</span>  <span class="token keyword">FROM</span> <span class="token punctuation">[</span><span class="token keyword">Order</span> Details<span class="token punctuation">]</span>   <span class="token keyword">WHERE</span> OrderID <span class="token operator">IN</span>  <span class="token punctuation">(</span>      <span class="token keyword">SELECT</span> OrderID   <span class="token comment">--统计出某个国家的客户的所有定单编号</span>      <span class="token keyword">FROM</span> Orders <span class="token keyword">Join</span> Customers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>CustomerID <span class="token operator">=</span> Customers<span class="token punctuation">.</span>CustomerID      <span class="token keyword">WHERE</span> Country <span class="token operator">=</span> <span class="token variable">@CountryIN</span>   <span class="token punctuation">)</span>  <span class="token keyword">Group</span> <span class="token keyword">by</span> ProductID  <span class="token keyword">ORDER</span> <span class="token keyword">by</span> <span class="token function">Sum</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@MaxNumIn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>SumQuantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token comment">#mytemp)--从临时表#mytemp中获得某个国家客户中最大销量的产品的销量数目</span>  <span class="token comment">--下面需要分情况讨论</span>  <span class="token comment">--如果对应于这个最大值的@MaxNumIn只有一个产品编号，那么就找出这个产品id的名称，并且插入临时表#tempcursor一行统计结果  </span>  <span class="token keyword">IF</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> ProductID <span class="token keyword">FROM</span> <span class="token comment">#mytemp WHERE SumQuantity = @MaxNumIn) = 1</span>  <span class="token keyword">BEGIN</span>    <span class="token keyword">SET</span> <span class="token variable">@ProductIDIN</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">Top</span> <span class="token number">1</span> ProductID <span class="token keyword">FROM</span> <span class="token comment">#mytemp WHERE SumQuantity = @MaxNumIn)</span>    <span class="token keyword">SET</span> <span class="token variable">@ProductNameIN</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductName <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> ProductID <span class="token operator">=</span> <span class="token variable">@ProductIDIN</span><span class="token punctuation">)</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#tempcursor VAlues(@CountryIN,@ProductNameIN)  </span>  <span class="token keyword">END</span>   <span class="token comment">--如果对应于这个最大值的@MaxNumIn有多个产品编号，那么就是销量最大的产品出现了并列第一</span>  <span class="token comment">--那么在这多个并列第一的产品集合中，再建立另外游标，来逐个读取并列第一的产品名称，并且插入临时表#tempcursor </span>  <span class="token keyword">IF</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> ProductID <span class="token keyword">FROM</span> <span class="token comment">#mytemp WHERE SumQuantity = @MaxNumIn) > 1</span>  <span class="token keyword">BEGIN</span>     <span class="token keyword">DECLARE</span> innercursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> ProductID <span class="token keyword">FROM</span> <span class="token comment">#mytemp WHERE SumQuantity = @MaxNumIn </span>     <span class="token keyword">OPEN</span> innercursor     <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> innercursor <span class="token keyword">INTO</span> <span class="token variable">@ProductIDIN</span>     <span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">BEGIN</span>        <span class="token keyword">SET</span> <span class="token variable">@ProductNameIN</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductName <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> ProductID <span class="token operator">=</span> <span class="token variable">@ProductIDIN</span><span class="token punctuation">)</span>        <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#tempcursor VAlues(@CountryIN,@ProductNameIN + ' 并列第一')  </span>        <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> innercursor <span class="token keyword">INTO</span> <span class="token variable">@ProductIDIN</span>    <span class="token keyword">END</span>    <span class="token keyword">CLOSE</span> innercursor    <span class="token keyword">DEALLOCATE</span> innercursor  <span class="token keyword">END</span>       <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token comment">#mytemp--删除这个mytemp临时表</span>       <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> mycursor <span class="token keyword">INTO</span> <span class="token variable">@CountryIN</span><span class="token comment">--进入下一个循环</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> mycursor        <span class="token comment">--关闭游标</span><span class="token keyword">DEALLOCATE</span> mycursor<span class="token comment">--释放游标</span><span class="token keyword">SELECT</span> CountryName <span class="token keyword">as</span> <span class="token string">'国家名称'</span><span class="token punctuation">,</span> ProductName <span class="token keyword">as</span> <span class="token string">'该国最受欢迎产品奖'</span> <span class="token keyword">from</span> <span class="token comment">#tempCursor</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token comment">#tempcursor--删除结果集合的临时表</span><span class="token comment">--运行实例</span><span class="token keyword">EXEC</span> p_LovestOfContry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Stored-Procedures"><a href="#Stored-Procedures" class="headerlink" title="Stored Procedures"></a>Stored Procedures</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---------------------------存储过程------------------------</span><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span> t<span class="token punctuation">.</span>price<span class="token punctuation">,</span> p<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> vtttt<span class="token keyword">AS</span><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span> t<span class="token punctuation">.</span>price<span class="token punctuation">,</span> p<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> vtttt<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token keyword">DECLARE</span>   <span class="token variable">@myinputtitlename</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">SET</span> <span class="token variable">@myinputtitlename</span> <span class="token operator">=</span> <span class="token string">'computer'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> vtttt<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@myinputtitlename</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> p_first   <span class="token variable">@myinputtitlename</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span> t<span class="token punctuation">.</span>price<span class="token punctuation">,</span> p<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@myinputtitlename</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_first <span class="token string">'t'</span><span class="token comment">--输入一个作者名字，得到这个作者的写的书，单价，出版社</span><span class="token keyword">ALTER</span> <span class="token keyword">PROCEDURE</span> p_second   <span class="token variable">@myinputauthorname</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span>  dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>price<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span>      dbo<span class="token punctuation">.</span>titleauthor <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>titles <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titleauthor<span class="token punctuation">.</span>title_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title_id <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>publishers <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_id <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>authors <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titleauthor<span class="token punctuation">.</span>au_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>au_id<span class="token keyword">WHERE</span> authors<span class="token punctuation">.</span>au_fname <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@myinputauthorname</span> <span class="token operator">+</span> <span class="token string">'%'</span>       <span class="token operator">or</span> authors<span class="token punctuation">.</span>au_fname <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@myinputauthorname</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_second <span class="token string">'Sher'</span>多个参数输出参数（返回值）流程控制变量定义输入一个开始时间，一个结束时间返回这个阶段的书的销售记录<span class="token punctuation">,</span>包括；书名字，日期，卖出去数量<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token string">'1994-9-1'</span> <span class="token operator">and</span> <span class="token string">'1994-10-1'</span><span class="token operator">-</span><span class="token number">2</span>个变量<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> p_third   <span class="token variable">@inputbegin</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>   <span class="token variable">@inputend</span> <span class="token keyword">datetime</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_third <span class="token string">'1994-9-1'</span><span class="token punctuation">,</span> <span class="token string">'1994-10-1'</span><span class="token operator">-</span>默认值<span class="token keyword">Alter</span> <span class="token keyword">PROCEDURE</span> p_third   <span class="token variable">@inputbegin</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-9-1'</span><span class="token punctuation">,</span>   <span class="token variable">@inputend</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-10-1'</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_third <span class="token string">'1994-9-14'</span><span class="token punctuation">,</span> <span class="token string">'1994-11-1'</span><span class="token operator">-</span>流程控制，变量控制  如果没有，就返回最近<span class="token number">3</span>条<span class="token keyword">Alter</span> <span class="token keyword">PROCEDURE</span> p_third   <span class="token variable">@inputbegin</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-9-1'</span><span class="token punctuation">,</span>   <span class="token variable">@inputend</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-10-1'</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span>   <span class="token keyword">DECLARE</span> <span class="token variable">@mycontrol</span> <span class="token keyword">int</span>  <span class="token keyword">SET</span> <span class="token variable">@mycontrol</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token punctuation">)</span>  <span class="token keyword">IF</span> <span class="token variable">@mycontrol</span> <span class="token operator">></span> <span class="token number">0</span>  <span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span>  <span class="token keyword">END</span>   <span class="token keyword">ELSE</span>  <span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ord_date <span class="token keyword">DESC</span>  <span class="token keyword">END</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_third <span class="token string">'1994-10-14'</span><span class="token punctuation">,</span> <span class="token string">'1994-11-1'</span><span class="token comment">--上面查询继续，增加内容：请同时返回本次查询的结果的记录条数+总销售本书</span><span class="token keyword">Alter</span> <span class="token keyword">PROCEDURE</span> p_third   <span class="token variable">@inputbegin</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-9-1'</span><span class="token punctuation">,</span>   <span class="token variable">@inputend</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-10-1'</span><span class="token punctuation">,</span>   <span class="token variable">@outputcount</span> <span class="token keyword">int</span> OUTPUT<span class="token punctuation">,</span>   <span class="token variable">@outputsum</span>   <span class="token keyword">int</span> OUTPUT<span class="token keyword">AS</span><span class="token keyword">BEGIN</span>   <span class="token keyword">DECLARE</span> <span class="token variable">@mycontrol</span> <span class="token keyword">int</span>  <span class="token keyword">SET</span> <span class="token variable">@mycontrol</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@outputcount</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@outputsum</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">sum</span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token punctuation">)</span>  <span class="token keyword">IF</span> <span class="token variable">@mycontrol</span> <span class="token operator">></span> <span class="token number">0</span>  <span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span>  <span class="token keyword">END</span>   <span class="token keyword">ELSE</span>  <span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ord_date <span class="token keyword">DESC</span><span class="token keyword">SET</span> <span class="token variable">@outputcount</span> <span class="token operator">=</span>  <span class="token number">3</span>    <span class="token keyword">SET</span> <span class="token variable">@outputsum</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token keyword">END</span><span class="token keyword">END</span><span class="token comment">---</span><span class="token keyword">DECLARE</span>  <span class="token variable">@getoutputcount</span> <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token variable">@getoutputsum</span> <span class="token keyword">int</span><span class="token keyword">EXEC</span> p_third <span class="token string">'1994-9-20'</span><span class="token punctuation">,</span> <span class="token string">'1994-10-1'</span><span class="token punctuation">,</span> <span class="token variable">@getoutputcount</span> OUTPUT<span class="token punctuation">,</span> <span class="token variable">@getoutputsum</span> OUTPUT<span class="token keyword">SELECT</span> <span class="token variable">@getoutputcount</span><span class="token punctuation">,</span> <span class="token variable">@getoutputsum</span><span class="token operator">-</span>输入作者姓名，返回这个作者写的书的书名字，出版社，单价，销量同时要能知道，这个作者写了几本书，总销量是多少如果没有找到作者，返回销量最高的<span class="token number">3</span>本书<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---------------------------------------------------------------------------</span><span class="token comment">--触发器的基本语法</span><span class="token comment">---------------------------------------------------------------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> <span class="token operator">&lt;</span>trigger_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> trig_test<span class="token operator">></span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>table_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> pubs<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sales<span class="token operator">></span><span class="token keyword">FOR</span> <span class="token keyword">DELETE</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span> <span class="token keyword">AS</span> <span class="token keyword">BEGIN</span><span class="token keyword">RAISERROR</span> <span class="token punctuation">(</span><span class="token number">50009</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">END</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--简单的删除触发器</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--建立一个简单的和其他表没有任何关系的表，避免删除时和其他表的联系</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">INTO</span> AAA<span class="token keyword">FROM</span> Title<span class="token keyword">create</span> <span class="token keyword">trigger</span> t_DelAAADoSomething<span class="token keyword">ON</span> AAA<span class="token keyword">FOR</span> <span class="token keyword">Delete</span><span class="token keyword">AS</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Just Now You Del a Recorder of AAA table'</span><span class="token punctuation">)</span><span class="token comment">--运行删除语句就会激发上面这个触发器(输出一次print，影响1行)</span><span class="token keyword">delete</span> aaa<span class="token keyword">where</span> title_id <span class="token operator">=</span> <span class="token string">'bu1032'</span><span class="token comment">--运行删除语句就会激发上面这个触发器(输出一次print，影响17行)</span><span class="token keyword">delete</span> aaa<span class="token comment">--还原aaa表数据 </span><span class="token keyword">insert</span> <span class="token keyword">into</span> aaa<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> titles<span class="token keyword">create</span> <span class="token keyword">trigger</span> t_DelAAADoSomethingAndDoAgain<span class="token keyword">ON</span> aaa<span class="token keyword">FOR</span> <span class="token keyword">Delete</span><span class="token keyword">AS</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Just now you run del and run  t_DelaaaDoSomethingAndDoAgain'</span><span class="token punctuation">)</span><span class="token comment">--运行删除语句就会激发上面这二个触发器</span><span class="token keyword">delete</span> aaa<span class="token keyword">where</span> title_id <span class="token operator">=</span> <span class="token string">'bu1032'</span><span class="token comment">/*Just Now You Del a Recorder of AAA tableJust now you run del and run  t_DelaaaDoSomethingAndDoAgain（所影响的行数为 1 行）*/</span><span class="token keyword">delete</span> aaa<span class="token comment">/*Just Now You Del a Recorder of AAA tableJust now you run del and run  t_DelaaaDoSomethingAndDoAgain（所影响的行数为 17 行）*/</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--简单的更新和插入触发器</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> t_UpdateAAADosomthing<span class="token keyword">ON</span> aaa<span class="token keyword">FOR</span> <span class="token keyword">Update</span><span class="token punctuation">,</span><span class="token keyword">Insert</span><span class="token keyword">AS</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Just now you Update or insert aaa table'</span><span class="token punctuation">)</span><span class="token comment">--还原aaa表数据 </span><span class="token keyword">insert</span> <span class="token keyword">into</span> aaa<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> titles<span class="token comment">--执行一行更新语句</span><span class="token keyword">update</span> aaa<span class="token keyword">set</span> price <span class="token operator">=</span> price <span class="token operator">+</span> <span class="token number">0.1</span><span class="token comment">/*Just now you Update or insert aaa table（所影响的行数为 18 行）*/</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--从临时删除表中读取刚才删除的纪录信息 SELECT title FROM deleted</span><span class="token comment">--每当对某个表执行delete时都会生成和某个表结构一样的一个临时表deleted</span><span class="token comment">--每当对某个表执行update，insert时都会生成和某个表结构一样的一个临时表inserted</span><span class="token comment">--可以利用这二个临时表来活动最近一次delete，insert，update的数据</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> t_DelAAADoDetail<span class="token keyword">ON</span> AAA<span class="token keyword">FOR</span> <span class="token keyword">Delete</span><span class="token keyword">AS</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Just Now You Del a Recorder of AAA table'</span><span class="token punctuation">)</span><span class="token keyword">Declare</span>   <span class="token variable">@title</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token keyword">SET</span> <span class="token variable">@title</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> title <span class="token keyword">FROM</span> deleted<span class="token punctuation">)</span><span class="token keyword">PRINT</span> <span class="token string">'" '</span> <span class="token operator">+</span> <span class="token variable">@title</span> <span class="token operator">+</span> <span class="token string">' " : is your just del book name '</span><span class="token comment">--删除一行纪录</span><span class="token keyword">delete</span> aaa<span class="token keyword">where</span> title_id <span class="token operator">=</span> <span class="token string">'PC1035'</span> <span class="token comment">/*Just Now You Del a Recorder of AAA tableJust now you run del and run  t_DelaaaDoSomethingAndDoAgainJust Now You Del a Recorder of AAA table（所影响的行数为 1 行）" But Is It User Friendly? " : is your just del book name */</span><span class="token comment">--删除多行纪录，有问题，游标</span><span class="token keyword">delete</span> aaa<span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token comment">/*Just Now You Del a Recorder of AAA tableJust now you run del and run  t_DelaaaDoSomethingAndDoAgainJust Now You Del a Recorder of AAA table服务器: 消息 512，级别 16，状态 1，过程 t_DelAAADoDetail，行 10子查询返回的值多于一个。当子查询跟随在 =、!=、&lt;、&lt;=、>、>= 之后，或子查询用作表达式时，这种情况是不允许的。语句已终止。*/</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--每次添加一本书的销售纪录就要修改这本书的总销量</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">trigger</span> t_AddSalesANDAddYtd_Sales<span class="token keyword">ON</span> Sales<span class="token keyword">FOR</span> <span class="token keyword">Insert</span><span class="token keyword">AS</span> <span class="token keyword">declare</span>   <span class="token variable">@NewYtdSales</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@NewSalesTitleID</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@NewYtdSales</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> qty <span class="token keyword">FROM</span> Inserted<span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@NewSalesTitleID</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> title_id <span class="token keyword">From</span> INSERTED<span class="token punctuation">)</span>   <span class="token keyword">UPDATE</span> Titles   <span class="token keyword">SET</span> Ytd_Sales <span class="token operator">=</span> Ytd_Sales <span class="token operator">+</span> <span class="token variable">@NewYtdSales</span>   <span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token variable">@NewSalesTitleID</span><span class="token keyword">INSERT</span> sales<span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token number">6380</span><span class="token punctuation">,</span><span class="token number">23456</span><span class="token punctuation">,</span><span class="token string">'1999-1-1'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'Net 60'</span><span class="token punctuation">,</span><span class="token string">'BU1032'</span><span class="token punctuation">)</span><span class="token comment">/*----------------------------------------------------------------------------察看触发器的方法：触发器总是和表相关联的在企业管理器中选中一个表，从右键菜单的所有任务中选择“管理触发器”--通过修改表的性质 允许和禁止触发器--------------------------------------------------------------------------*/</span><span class="token keyword">use</span> pubs<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee      <span class="token keyword">DISABLE</span> <span class="token keyword">Trigger</span> employee_insupd<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee      <span class="token keyword">ENABLE</span> <span class="token keyword">Trigger</span> employee_insupd<span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--练习</span><span class="token comment">--每次添加一本书的销售纪录就要给写书的作者1元钱的版权费</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">trigger</span> t_AddSalesANDAddRoyaltyper<span class="token keyword">ON</span> Sales<span class="token keyword">FOR</span> <span class="token keyword">Insert</span><span class="token keyword">AS</span> <span class="token keyword">declare</span>   <span class="token variable">@NewYtdSales</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@NewSalesTitleID</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@NewYtdSales</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> qty <span class="token keyword">FROM</span> Inserted<span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@NewSalesTitleID</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> title_id <span class="token keyword">From</span> INSERTED<span class="token punctuation">)</span>   <span class="token keyword">UPDATE</span> TitleAuthor   <span class="token keyword">SET</span> royaltyper <span class="token operator">=</span> royaltyper <span class="token operator">+</span> <span class="token variable">@NewYtdSales</span>   <span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token variable">@NewSalesTitleID</span><span class="token keyword">INSERT</span> sales<span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token number">6380</span><span class="token punctuation">,</span><span class="token number">2349</span><span class="token punctuation">,</span><span class="token string">'1999-1-1'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'Net 60'</span><span class="token punctuation">,</span><span class="token string">'TC7777'</span><span class="token punctuation">)</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--附加练习（SQL Server的pubs数据库自带例子）（带逻辑、带错误检验、带事务控制）</span><span class="token comment">--添加一个雇员的时候使用触发器控制用户录入的雇员的job_lvl必须在max_lvl与min_lvl中间</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">drop</span> <span class="token keyword">trigger</span> employee_insupd<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> employee_insupd<span class="token keyword">ON</span> employee<span class="token keyword">FOR</span> <span class="token keyword">insert</span><span class="token keyword">AS</span><span class="token comment">--声明变量.</span>  <span class="token keyword">declare</span><span class="token variable">@min_lvl</span> <span class="token keyword">tinyint</span><span class="token punctuation">,</span>   <span class="token variable">@max_lvl</span> <span class="token keyword">tinyint</span><span class="token punctuation">,</span>   <span class="token variable">@emp_lvl</span> <span class="token keyword">tinyint</span><span class="token punctuation">,</span>   <span class="token variable">@job_id</span> <span class="token keyword">smallint</span>  <span class="token comment">--为变量赋值，就是刚才获取insert的这个雇员，用户输入的信息</span><span class="token keyword">select</span> <span class="token variable">@min_lvl</span> <span class="token operator">=</span> min_lvl<span class="token punctuation">,</span>   <span class="token variable">@max_lvl</span> <span class="token operator">=</span> max_lvl<span class="token punctuation">,</span>    <span class="token variable">@emp_lvl</span> <span class="token operator">=</span> i<span class="token punctuation">.</span>job_lvl<span class="token punctuation">,</span>    <span class="token variable">@job_id</span> <span class="token operator">=</span> i<span class="token punctuation">.</span>job_id<span class="token keyword">from</span> employee e<span class="token punctuation">,</span> jobs j<span class="token punctuation">,</span> inserted i<span class="token keyword">where</span> e<span class="token punctuation">.</span>emp_id <span class="token operator">=</span> i<span class="token punctuation">.</span>emp_id <span class="token operator">AND</span> i<span class="token punctuation">.</span>job_id <span class="token operator">=</span> j<span class="token punctuation">.</span>job_id<span class="token comment">--使用Raiserror，发出错误信息，放弃本次添加，就是回滚事物，本次添加无效</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token punctuation">(</span><span class="token variable">@emp_lvl</span> <span class="token operator">BETWEEN</span> <span class="token variable">@min_lvl</span> <span class="token operator">AND</span> <span class="token variable">@max_lvl</span><span class="token punctuation">)</span><span class="token keyword">begin</span>   <span class="token keyword">raiserror</span> <span class="token punctuation">(</span><span class="token string">'The level for job_id:%d should be between %d and %d.'</span><span class="token punctuation">,</span>      <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">@job_id</span><span class="token punctuation">,</span> <span class="token variable">@min_lvl</span><span class="token punctuation">,</span> <span class="token variable">@max_lvl</span><span class="token punctuation">)</span>   <span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span><span class="token keyword">end</span><span class="token comment">--不发出错误信息，直接把用户错误的输入纠正为最大值或最小值</span><span class="token keyword">CREATE</span> <span class="token keyword">trigger</span> t_AddSalesCheckJob_lvl<span class="token keyword">ON</span> employee<span class="token keyword">FOR</span> <span class="token keyword">Insert</span><span class="token keyword">AS</span><span class="token keyword">declare</span>   <span class="token variable">@job_id</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@job_lvl</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@emp_id</span> empid<span class="token punctuation">,</span>   <span class="token variable">@min_lvl</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@max_lvl</span> <span class="token keyword">int</span>    <span class="token keyword">SET</span> <span class="token variable">@job_id</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> job_id <span class="token keyword">FROM</span> INSERTED<span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@job_lvl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> job_lvl <span class="token keyword">FROM</span> INSERTED<span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@emp_id</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> emp_id <span class="token keyword">FROM</span> INSERTED<span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@Min_lvl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> min_lvl <span class="token keyword">FROM</span> jobs <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token variable">@job_id</span><span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@Max_lvl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> max_lvl <span class="token keyword">FROM</span> jobs <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token variable">@job_id</span><span class="token punctuation">)</span>  <span class="token keyword">If</span> <span class="token variable">@job_lvl</span> <span class="token operator">&lt;</span><span class="token variable">@Min_lvl</span>  <span class="token keyword">BEGIN</span>    <span class="token keyword">UPDATE</span> employee     <span class="token keyword">SET</span> job_lvl <span class="token operator">=</span> <span class="token variable">@Min_lvl</span>    <span class="token keyword">WHERE</span> emp_id <span class="token operator">=</span> <span class="token variable">@emp_id</span>   <span class="token keyword">END</span>  <span class="token keyword">If</span> <span class="token variable">@job_lvl</span> <span class="token operator">></span><span class="token variable">@Max_lvl</span>  <span class="token keyword">BEGIN</span>    <span class="token keyword">UPDATE</span> employee     <span class="token keyword">SET</span> job_lvl <span class="token operator">=</span> <span class="token variable">@Man_lvl</span>    <span class="token keyword">WHERE</span> emp_id <span class="token operator">=</span> <span class="token variable">@emp_id</span>   <span class="token keyword">END</span><span class="token keyword">INSERT</span> employee<span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'PPP42628F'</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'0877'</span><span class="token punctuation">,</span><span class="token string">'1992-1-1'</span><span class="token punctuation">)</span><span class="token comment">-- =============================================</span><span class="token comment">-- 使用存在检测功能</span><span class="token comment">-- =============================================</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name    <span class="token keyword">FROM</span>   sysobjects    <span class="token keyword">WHERE</span>  name <span class="token operator">=</span> <span class="token string">'aaabbb'</span>   <span class="token operator">AND</span>   <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'P'</span><span class="token punctuation">)</span>    <span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>aaabbb<span class="token punctuation">]</span>GO<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name    <span class="token keyword">FROM</span>   sysobjects    <span class="token keyword">WHERE</span>  name <span class="token operator">=</span> N<span class="token string">'&lt;trigger_name, sysname, trig_test>'</span>    <span class="token operator">AND</span>   <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'TR'</span><span class="token punctuation">)</span>    <span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> <span class="token operator">&lt;</span>trigger_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> trig_test<span class="token operator">></span>GO<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name    <span class="token keyword">FROM</span>   sysobjects    <span class="token keyword">WHERE</span>  name <span class="token operator">=</span> N<span class="token string">'&lt;procedure_name, sysname, proc_test>'</span>    <span class="token operator">AND</span>   <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'P'</span><span class="token punctuation">)</span>    <span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token operator">&lt;</span>procedure_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> proc_test<span class="token operator">></span>GO<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> name   <span class="token keyword">FROM</span>  sysobjects   <span class="token keyword">WHERE</span>  name <span class="token operator">=</span> N<span class="token string">'&lt;table_name, sysname, test_table>'</span>   <span class="token operator">AND</span>  <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'U'</span><span class="token punctuation">)</span>    <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>table_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> test_table<span class="token operator">></span>GO<span class="token keyword">USE</span> pubs<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sysobjects       <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'au_info2'</span> <span class="token operator">AND</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'P'</span><span class="token punctuation">)</span>   <span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> au_info2GO<span class="token keyword">USE</span> pubs<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sysobjects      <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'reminder'</span> <span class="token operator">AND</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'TR'</span><span class="token punctuation">)</span>   <span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> reminderGO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><h3 id="关系代数运算符"><a href="#关系代数运算符" class="headerlink" title="关系代数运算符"></a>关系代数运算符</h3><h4 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h4><p>并、差、交、广义笛卡尔积</p><h4 id="专门的关系运算符"><a href="#专门的关系运算符" class="headerlink" title="专门的关系运算符"></a>专门的关系运算符</h4><p>选择、投影、连接、除</p><h4 id="算术比较符"><a href="#算术比较符" class="headerlink" title="算术比较符"></a>算术比较符</h4><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h3 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h3><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>类似于SELECT*-WHERE</p><p>$\sigma_F(R),其中F是选择运算符，是一个逻辑表达式$</p><p>如：$\sigma_{Sdept&#x3D;’IS’}(Student)$</p><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>类似于SELECT…FROM</p><p>$\Pi_A(R),其中A是R中的属性列$</p><p>投影之后取消了原关系中的某些列，还取消某些元组（去重）</p><p>如：$\Pi_{Sname,Sdept}(Student)$</p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>$R \infty_{A \theta B} S$</p><p>其中A和B分别为R和S上度数相等且可比的属性组，θ为比较运算符 。连接运算从R和S的广义笛卡尔积R×S中选取R关系在A属性组上的值与S关系在B属性组上值满足比较关系的元组</p><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>$R \infty_{A &#x3D; B} S$</p><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><p>$R \infty S$</p><p>是一种特殊的等值连接，要求两个关系中进行比较的分量必须是相同的属性组，在结果中把重复的属性列去掉</p><h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>给定关系R(X,Y) 和S(Y,Z)，其中X,Y,Z为属性组。R中的Y与S中的Y可以有不同的属性名，但必须出自相同的域集。R与S的除运算得到一个新的关系P(X)，P是R中满足下列条件的元组在X属性列上的投影：元组在X上分量值x的象集Yx包含S在Y上投影的集合。</p><h2 id="数据库可靠性"><a href="#数据库可靠性" class="headerlink" title="数据库可靠性"></a>数据库可靠性</h2><h3 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h3><ul><li><p>完整数据库备份</p></li><li><p>差异备份</p><p>备份自上一次完整数据库备份后修改过的数据库页</p></li><li><p>事务日志备份</p><p>备份事务日志</p></li><li><p>文件或文件组备份</p></li></ul><p>还原数据库的一般顺序为：</p><p><strong>1、还原最新的数据库备份。</strong></p><p><strong>2、还原最后一次的差异数据库备份。</strong></p><p><strong>3、还原最后一次差异数据库备份后创建的所有事务日志备份。</strong></p><h3 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h3><p>事务ACID特性：</p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持续性</li></ul><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><p>基于锁的事务并发控制</p><p>并发操作带来的数据不一致性：</p><ul><li><p>丢失修改</p><p>两事务都修改了数据</p></li><li><p>不可重复读</p><p>一事务的写撤销造成另一事务的读前后不一样</p></li><li><p>读脏数据</p><p>一事务的写撤销造成两事务的读数据不一致</p></li></ul><p>锁特点：多粒度</p><p>锁定：行锁定、列锁定、表锁定、数据库锁定</p><ul><li><strong>细粒度的锁定（比如只锁定一行）可以增加系统的并发度，但对多行的锁定却增加了开销</strong></li><li><strong>粗粒度的锁定（比如锁定整个表）降低了总开销，但也大大降低了系统的并发度</strong></li></ul><h2 id="数据库的安全性"><a href="#数据库的安全性" class="headerlink" title="数据库的安全性"></a>数据库的安全性</h2><h3 id="数据库安全性控制的常用方法"><a href="#数据库安全性控制的常用方法" class="headerlink" title="数据库安全性控制的常用方法"></a>数据库安全性控制的常用方法</h3><ul><li>用户标识和鉴定</li><li>存取控制、审计、视图</li><li>操作系统安全保护</li><li>密码存储</li></ul><h2 id="数据库的完整性"><a href="#数据库的完整性" class="headerlink" title="数据库的完整性"></a>数据库的完整性</h2><p><img src="/imgs/databasenote/11.png" alt="image-20230628201142892"></p><table><thead><tr><th><strong>粒   度</strong>    <strong>状态</strong></th><th><strong>列   级</strong></th><th><strong>元 组 级</strong></th><th><strong>关 系 级</strong></th></tr></thead><tbody><tr><td><strong>静 态</strong></td><td><strong>列定义</strong>  <strong>·****类型</strong>  <strong>·****格式</strong>  <strong>·****值域</strong>      <strong>·****空值</strong></td><td><strong>元组值应满足的条件</strong></td><td><strong>实体完整性约束</strong>    <strong>参照完整性约束</strong>    <strong>函数依赖约束</strong>     <strong>统计约束</strong></td></tr><tr><td><strong>动 态</strong></td><td><strong>改变列定义或列值</strong></td><td><strong>元组新旧值之间应满足的约束条件</strong></td><td><strong>关系新旧状态间应满足的约束条件</strong></td></tr></tbody></table><ul><li>域完整性</li><li>实体完整性</li><li>参考完整性</li><li>用户定义完整性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题一</title>
      <link href="/2023/07/05/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%80/"/>
      <url>/2023/07/05/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>设计一栈结构，使得出栈、入栈以及求栈的最小值均能在$O (1)$时间内完成</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><strong>针对出入栈</strong>，由数据结构的顺序栈知识可以得知，出入栈的时间复杂度都是$O (1)$，因此对于出入栈只需要普通栈就可以实现问题要求；</p><p><strong>针对求栈的最小值</strong>，使用遍历法求栈最小值的时间复杂度为$O (n)$，因此需要设计一种特殊栈，通过记录栈中的最小值，在求栈的最小值时只需要将最小值输出即可，其时间复杂度为$O (1)$。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>先构建顺序栈的数据结构</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;&#x2F;&#x2F;顺序栈    SElemType* base;    SElemtyoe* top;    int stacksize;&#125;SqStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后构建一个特殊的辅助栈，包括存储所有数据的原栈和存储最小值序列的新栈</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;&#x2F;&#x2F;记录最小值的辅助栈    SqStack Data;    Sqstack MinData;&#125;MinStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>入栈操作</p><p>对于第一个元素，一定会进入两个栈；</p><p>对于后面的每一元素一定会进入Data栈，如果该元素&lt;&#x3D;Mindata栈的栈顶元素，则该元素进入Mindata栈，否则不进入</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void MinPush(Minstack* minstack, SElemType e) &#123;Push(&amp;minstack-&gt;Data, e);if (minstack-&gt;MinData.base&#x3D;&#x3D;minstack-&gt;MinData.top) &#123;Push(&amp;minstack-&gt;MinData, e);&#125;else &#123;if (e &lt;&#x3D; GetTop(minstack-&gt;MinData)) &#123;Push(&amp;minstack-&gt;MinData, e);&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>出栈操作</p><p>对于某一元素的出栈，Data栈一定会执行出栈操作，如果Data栈的栈顶元素和MinData栈的栈顶元素相同，则MinData栈也执行出栈操作</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void MinPop(Minstack* minstack, SElemType* e) &#123;if (GetTop(minstack-&gt;Data) &#x3D;&#x3D; GetTop(minstack-&gt;MinData)) &#123;Pop(&amp;minstack-&gt;Data, e);Pop(&amp;minstack-&gt;MinData, e);return;&#125;Pop(&amp;minstack-&gt;Data, e);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>求栈最小值</p><p>最小值已经存储在MinData栈中，因此只需要获取MinData栈的栈顶元素就可以得到栈的最小值</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SElemType GetMin(Minstack* minstack) &#123;return GetTop(minstack-&gt;MinData);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="算法代码与分析"><a href="#算法代码与分析" class="headerlink" title="算法代码与分析"></a>算法代码与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#define STACK_INIT_SIZE 100using namespace std;typedef int SElemType;typedef struct &#123;SElemType* base;SElemType* top;int stacksize;&#125;SqStack;typedef struct &#123;SqStack Data;SqStack MinData;&#125;Minstack;void InitStack(SqStack* s) &#123;s-&gt;base &#x3D; (SElemType*)malloc(STACK_INIT_SIZE * sizeof(SElemType));s-&gt;top &#x3D; s-&gt;base;s-&gt;stacksize &#x3D; STACK_INIT_SIZE;&#125;void Push(SqStack* s, SElemType e) &#123;if (s-&gt;top - s-&gt;base &gt;&#x3D; s-&gt;stacksize) &#123;s-&gt;base &#x3D; (SElemType*)realloc(s-&gt;base, (s-&gt;stacksize + 10) * sizeof(SElemType));s-&gt;top &#x3D; s-&gt;base + s-&gt;stacksize;s-&gt;stacksize +&#x3D; 10;&#125;*s-&gt;top++ &#x3D; e;&#125;void Pop(SqStack* s, SElemType* e) &#123;*e &#x3D; *--s-&gt;top;&#125;SElemType GetTop(SqStack s) &#123;return *(--s.top);&#125;void DestroyStack(SqStack* s) &#123;free(s-&gt;base);s-&gt;base &#x3D; NULL;s-&gt;top &#x3D; NULL;s-&gt;stacksize &#x3D; 0;&#125;void MinInit(Minstack* minstack) &#123;InitStack(&amp;(minstack-&gt;Data));InitStack(&amp;(minstack-&gt;MinData));&#125;void MinDestroy(Minstack* minstack) &#123;DestroyStack(&amp;minstack-&gt;Data);DestroyStack(&amp;minstack-&gt;MinData);&#125;void MinPush(Minstack* minstack, SElemType e) &#123;Push(&amp;minstack-&gt;Data, e);if (minstack-&gt;MinData.base&#x3D;&#x3D;minstack-&gt;MinData.top) &#123;Push(&amp;minstack-&gt;MinData, e);&#125;else &#123;if (e &lt;&#x3D; GetTop(minstack-&gt;MinData)) &#123;Push(&amp;minstack-&gt;MinData, e);&#125;&#125;&#125;void MinPop(Minstack* minstack, SElemType* e) &#123;if (GetTop(minstack-&gt;Data) &#x3D;&#x3D; GetTop(minstack-&gt;MinData)) &#123;Pop(&amp;minstack-&gt;Data, e);Pop(&amp;minstack-&gt;MinData, e);return;&#125;Pop(&amp;minstack-&gt;Data, e);&#125;SElemType GetMin(Minstack* minstack) &#123;return GetTop(minstack-&gt;MinData);&#125;int main() &#123;Minstack minstack;SElemType e;MinInit(&amp;minstack);MinPush(&amp;minstack, 1);MinPush(&amp;minstack, 2);MinPush(&amp;minstack, 3);MinPush(&amp;minstack, 1);MinPop(&amp;minstack, &amp;e);cout &lt;&lt; GetMin(&amp;minstack) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实验结果</strong>：</p><p><img src="/imgs/sikao1/1.png" alt="image-20230302194755588"></p><p><strong>分析</strong>：</p><p>本算法能够实现出入栈、求栈最小值时间复杂度$O (1)$，但是在数据类型的定义上，关于栈和特殊栈存在重复，经查阅资料，可以采用结构体继承解决。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>改进冒泡排序使得在最好情况下可以在线性时间内完成</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>对于普通的冒泡排序算法，在最坏的情况下其时间复杂度为$O (n^2)$。第一趟排序进行了$(n-1)$次比较，第i趟排序进行了$(n-i)$次比较；但是对于$(n-1)$趟排序，如果序列在某一次排序时恰好有序，则在该次之后的每一次排序都是无用的，为了优化冒泡排序，只需要在该次以后终止冒泡排序。</p><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>设置一个标志变量确定某一序列中的数据是否发生了交换，如果某一次冒泡过程中发现没有交换操作时，则说明序列已经排好序了，终止冒泡排序。</p><h3 id="算法代码及分析"><a href="#算法代码及分析" class="headerlink" title="算法代码及分析"></a>算法代码及分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;void BubbleSort(int array[], int n,int* num) &#123;for (int i &#x3D; 0; i &lt; n - 1; i++) &#123;bool flag &#x3D; true;for (int j &#x3D; 0; j &lt; n - i - 1; j++) &#123;if (array[j] &gt; array[j + 1]) &#123;int temp &#x3D; array[j];array[j] &#x3D; array[j + 1];array[j + 1] &#x3D; temp;flag &#x3D; false;&#125;&#125;if (flag) &#123;break;&#125;(*num)++;&#125;&#125;int main() &#123;int num &#x3D; 0;int array[] &#x3D; &#123; 5,4,3,6,7,8 &#125;;int n1 &#x3D; sizeof(array) &#x2F; sizeof(int);cout &lt;&lt; &quot;排序前：&quot;;for (int i &#x3D; 0; i &lt; n1; i++) &#123;cout &lt;&lt; array[i] &lt;&lt; &quot;,&quot;;&#125;cout &lt;&lt; endl;BubbleSort(array, n1, &amp;num);cout &lt;&lt; &quot;排序后：&quot;;for (int i &#x3D; 0; i &lt; n1; i++) &#123;cout &lt;&lt; array[i] &lt;&lt; &quot;,&quot;;&#125;cout &lt;&lt; endl;int array1[] &#x3D; &#123; 1,2,3,4,5,6 &#125;;int n2 &#x3D; sizeof(array1) &#x2F; sizeof(int);cout &lt;&lt; &quot;排序前：&quot;;for (int i &#x3D; 0; i &lt; n2; i++) &#123;cout &lt;&lt; array1[i] &lt;&lt; &quot;,&quot;;&#125;cout &lt;&lt; endl;cout &lt;&lt; num &lt;&lt; endl;num &#x3D; 0;BubbleSort(array1, n2, &amp;num);cout &lt;&lt; &quot;排序后：&quot;;for (int i &#x3D; 0; i &lt; n2; i++) &#123;cout &lt;&lt; array1[i] &lt;&lt; &quot;,&quot;;&#125;cout &lt;&lt; endl;cout &lt;&lt; num &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实验结果</strong>：</p><p><img src="/imgs/sikao1/2.png" alt="image-20230302210218006"></p><p><strong>分析</strong>：</p><p>通过实验分析，在数据极端良好的情况下，能够实现时间复杂度为$O (1)$；在数据较为不良的情况下，仍能减少数据排序次数，使其在线性时间内完成。</p>]]></content>
      
      
      <categories>
          
          <category> 算法思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 冒泡 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
