<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习HW4-神经网络</title>
      <link href="/2023/12/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0HW4-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/12/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0HW4-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎同学们观看哔哩哔哩<a href="https://www.bilibili.com/video/BV12b4y1X7Wv/?spm_id_from=333.788&vd_source=2dbf3ce169def83a8e8b53329f7d2135">《数之道》相关视频</a>,提升自己对神经网络的理解。</p></blockquote><p>在这个作业中，我们的任务是构建一个神经网络来识别手写数字图片，本质上是一个类别数为10的图像分类问题。首先我们会搭建一个简单的<strong>神经网络</strong>，然后分别实现<strong>AdaGrad、RMSprop、Momentum、Nesterov Momentum和Adam</strong>优化器来加速模型收敛。<br>需要修改代码主要在第三部分：</p><ul><li>搭建三层MLP网络模型</li><li><strong>实现各种优化器</strong></li><li>训练模型</li></ul><h2 id="1-导入所需的Python库"><a href="#1-导入所需的Python库" class="headerlink" title="1 导入所需的Python库"></a>1 导入所需的Python库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding: utf-8</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> utils <span class="token keyword">import</span> load_mnist<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-加载数据并可视化"><a href="#2-加载数据并可视化" class="headerlink" title="2 加载数据并可视化"></a>2 加载数据并可视化</h2><p>在这个实验中用到的数据集是MNIST。MNIST数据集是一个手写体数据集，包含训练集<strong>60000</strong>张图片和测试集<strong>10000</strong>张图片，其中每张图片是一张<strong>28×28</strong>的灰度图片，图片内容为一个<strong>0-9</strong>表示的手写数字。<br>一张灰度图片读取后是二维张量的，但是我们使用的神经网络中的全连接层的输入是一维张量。所以我们需要将一张二维灰度图片转换成一个一维张量（即向量），如图1：</p><p><img src="/imgs/mlhw4/2d_to_1d.jpg" alt="展开二维图片成向量"></p><p>在此之后每一个样本都是一个长度为<strong>784</strong>（28*28）的向量。 </p><p>手写数字识别任务是一个多分类任务，共包含有10类，分别用0-9表示，为了用一个向量表示一个类别，通常使用<strong>one-hot</strong>编码，比如在手写数字识别中，类别0和1对应的one-hot向量分别为：<br>$$\mathrm{one-hot}(0)&#x3D;\begin{bmatrix}1 \ 0\ 0\ 0\ 0\ 0\ 0\ 0\ 0\ 0\ \end{bmatrix},\mathrm{one-hot}(1)&#x3D;\begin{bmatrix}0 \ 1\ 0\ 0\ 0\ 0\ 0\ 0\ 0\ 0\ \end{bmatrix}$$ </p><div align=center></div><h3 id="2-1-加载数据"><a href="#2-1-加载数据" class="headerlink" title="2.1 加载数据"></a>2.1 加载数据</h3><p>在训练集中，我们需要把样本的标记$Y$转化为one-hot向量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#加载训练集或测试集</span>path <span class="token operator">=</span> <span class="token string">'./MNIST Data'</span> <span class="token comment">#数据集文件所在目录</span><span class="token comment"># 加载训练集合测试集</span><span class="token comment"># 设置normalization为True，将数据缩放到[0,1]之间</span><span class="token comment"># 设置one_hot_label为True，将标签转化为one_hot向量</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span>path<span class="token punctuation">,</span> normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> one_hot_label<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The shape of X_train is:'</span><span class="token punctuation">,</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The shape of Y_train is:'</span><span class="token punctuation">,</span>y_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The shape of X_test is:'</span><span class="token punctuation">,</span>x_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The shape of Y_test is:'</span><span class="token punctuation">,</span>y_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>The shape of X_train is: (60000, 784)The shape of Y_train is: (60000, 10)The shape of X_test is: (10000, 784)The shape of Y_test is: (10000, 10)</code></pre><h3 id="2-2-可视化数据集"><a href="#2-2-可视化数据集" class="headerlink" title="2.2 可视化数据集"></a>2.2 可视化数据集</h3><p>下面在训练集中选取几个图片看一下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax1 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">141</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>x_train<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'Greys'</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">142</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>x_train<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'Greys'</span><span class="token punctuation">)</span>ax3 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">143</span><span class="token punctuation">)</span>ax3<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>x_train<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'Greys'</span><span class="token punctuation">)</span>ax4 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">144</span><span class="token punctuation">)</span>ax4<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>x_train<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'Greys'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'one hot 标签：'</span><span class="token punctuation">,</span>y_train<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y_train<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y_train<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y_train<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对应的实际标签：'</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_train<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_train<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_train<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_train<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br><img src="/imgs/mlhw4/output_8_0.png" alt="png"><br>​    </p><pre><code>one hot 标签： [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.] [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]对应的实际标签： 0 4 1 9</code></pre><h2 id="3-全连接神经网络"><a href="#3-全连接神经网络" class="headerlink" title="3 全连接神经网络"></a>3 全连接神经网络</h2><p>接下来，搭建一个<strong>三层全连接神经网络</strong>。网络结构见图二：</p><p><img src="/imgs/mlhw4/network_architecture.jpg" alt="三层全连接神经网络结构"></p><p>对公式所用符号的说明：<br>一般计算神经网络层数不算输入层，所以图2中为3层神经网络。用右上角的方括号表示相应的层，所有第1层的权重$W$为$W^{[1]}$，第1层的偏置项$b$为$b^{[1]}$(图中未标出)，第1层的激活值$A$为$A^{[1]}$。  </p><p>前两层的激活函数使用LeakyRelu，最后一层使用Softmax进行分类。</p><h3 id="3-1-初始化网络参数"><a href="#3-1-初始化网络参数" class="headerlink" title="3.1 初始化网络参数"></a>3.1 初始化网络参数</h3><p>我们规定第1层的神经元个数为300，第二层个数为300，最后一层为10。输入向量$X$的维度为784，那么整个网络对应的参数也就可以确定了。<br>$W^{[1]}$的shape为$(784,300)$，$b^{[1]}$的shape为$(300,)$<br>$W^{[2]}$的shape为$(300,300)$，$b^{[2]}$的shape为$(300,)$<br>$W^{[3]}$的shape为$(300,10)$，$b^{[3]}$的shape为$(10,)$<br>这里<strong>使用随机正态分布乘上比例因子0.01来初始化$W$， 把$b$都初始化为0</strong>.<br><strong>Hint</strong>: 使用<code>np.random.randn()</code>,<code>np.zeros()</code>  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">initialize_parameters</span><span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">,</span> weight_init_std<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    @param input_size:输入向量维度    @param hidden_size:中间神经元个数    @param output_size:输出层神经元个数    @param weight_init_sta:比例因子    """</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span> <span class="token operator">*</span> weight_init_std    params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#请参考样例完成代码</span>    <span class="token comment">### START CODE HERE ### </span>    params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span>hidden_size<span class="token punctuation">)</span> <span class="token operator">*</span> weight_init_std    params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    params<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span>output_size<span class="token punctuation">)</span> <span class="token operator">*</span> weight_init_std    params<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>output_size<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">### END CODE HERE ### </span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"W1's shape:"</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b1's shape:"</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"W2's shape:"</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b2's shape:"</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"W3's shape:"</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b3's shape:"</span><span class="token punctuation">,</span>params<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment">#请在调用该函数的地方观察该神经网络各个参数的shape，是否符合预期</span>        <span class="token keyword">return</span> params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-定义神经网络的每一层"><a href="#3-2-定义神经网络的每一层" class="headerlink" title="3.2 定义神经网络的每一层"></a>3.2 定义神经网络的每一层</h3><p>我们将用单独的类来实现各种神经网络层：</p><ul><li>LeakyRelu</li><li>Affine</li><li>Softmax-with-loss</li></ul><h4 id="3-2-1-LeakyRelu层"><a href="#3-2-1-LeakyRelu层" class="headerlink" title="3.2.1 LeakyRelu层"></a>3.2.1 LeakyRelu层</h4><p>激活函数LeakyRelu的表达式为：<br>$$<br>\left{\begin{matrix}<br>x &amp; (x&gt;0)\<br>\alpha x &amp; (x \leq 0)<br>\end{matrix}\right.<br>$$<br>可以通过上式求出$y$关于$x$的导数：<br>$$<br>\frac{\partial y}{\partial x} &#x3D; \left{\begin{matrix}<br>1 &amp; (x&gt;0)\<br>\alpha &amp; (x \leq 0)<br>\end{matrix}\right.<br>$$</p><p>如果正向传播时的输入$x$大于0，则反向传播会将下游的值原封不动地传给上游。反过来，如果正向传播时的$x$小于等于0，则反向传播中传给上游的信号将乘上一个很小的常数，保证neuron依然起作用。</p><p><img src="/imgs/mlhw4/LeakyReLu.png" alt="LeakyRelu"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LeakyRelu</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mask <span class="token operator">=</span> <span class="token boolean">None</span>         self<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0.1</span>            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mask <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#mask表示选择出x的值中小于等于0的部分内容</span>        out <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">### START CODE HERE ###  #请参考LeakyRelu表达式实现前向传播过程</span>        out<span class="token punctuation">[</span>self<span class="token punctuation">.</span>mask<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>alpha<span class="token operator">*</span>out<span class="token punctuation">[</span>self<span class="token punctuation">.</span>mask<span class="token punctuation">]</span>        <span class="token comment">### END CODE HERE ### </span>        <span class="token keyword">return</span> out    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### START CODE HERE ###  #请参考LeakyRelu表达式y关于x的导数公式实现反向传播过程</span>        dout<span class="token punctuation">[</span>self<span class="token punctuation">.</span>mask<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>alpha<span class="token operator">*</span>dout<span class="token punctuation">[</span>self<span class="token punctuation">.</span>mask<span class="token punctuation">]</span>        <span class="token comment">### END CODE HERE ### </span>        dx <span class="token operator">=</span> dout        <span class="token keyword">return</span> dx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试效果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">leakyRelu <span class="token operator">=</span> LeakyRelu<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>leakyRelu<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> leakyRelu<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(array([[ 1.  , -0.05],        [-0.2 ,  3.  ]]), array([[ 1.  , -0.05],        [-0.2 ,  3.  ]]))</code></pre><h4 id="3-2-2-Affine层"><a href="#3-2-2-Affine层" class="headerlink" title="3.2.2 Affine层"></a>3.2.2 Affine层</h4><p>神经网络的正向传播中，为了计算加权信号的总和，使用了矩阵的乘积运算，回顾一下公式：<br>$$<br>Y &#x3D; XW + B<br>$$<br>即<code>Y = np.dot(X, W) + B</code>。假设X，W，B的shape分别为(2,)、(2,3)、(3,)如图4，现在将这里进行的求矩阵的乘积与偏置的和的运算用计算图表示出来。将乘积运算用“dot”节点表示的话，则np.dot(X, W) + B的运算如图5：</p><p><img src="/imgs/mlhw4/Affine1.png" alt="单向量正向传播"></p><p><img src="/imgs/mlhw4/Affine2.png" alt="Affine"></p><p>以矩阵为对象的反向传播，按矩阵的各个元素进行计算时，步骤和以标量为对象的计算图相同。用公式表示：<br>$$<br>\frac{\partial L}{\partial X} &#x3D; \frac{\partial L}{\partial Y} \cdot W^T<br>$$</p><p>$$<br>\frac{\partial L}{\partial W} &#x3D; X^T \cdot \frac{\partial L}{\partial Y}<br>$$</p><p>根据这个式子我们可以得到一个向量反向传播的计算图（见图6）。</p><p><img src="/imgs/mlhw4/Affine3.png" alt="单向量反向传播"></p><p>现在我们考虑N个数据一起进行正向传播（见图7），与刚刚不同的是，现在输入X的shape是(N, 2)。之后就和前面一样，在计算图上进行矩阵计算。反向传播时，需要注意矩阵的shape，推导出$\frac{\partial L}{\partial X}$ 和 $\frac{\partial L}{\partial W}$的过程与单个向量类似。</p><p><img src="/imgs/mlhw4/Affine4.png" alt="N个向量反向传播"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Affine</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>W <span class="token operator">=</span> W        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b                self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>original_x_shape <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token comment"># 权重和偏置参数的导数</span>        self<span class="token punctuation">.</span>dW <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>original_x_shape <span class="token operator">=</span> x<span class="token punctuation">.</span>shape        x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        <span class="token comment">### START CODE HERE ### </span>        out <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>self<span class="token punctuation">.</span>W<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>b        <span class="token comment">### END CODE HERE ### </span>        <span class="token keyword">return</span> out    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dout<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W<span class="token punctuation">.</span>T<span class="token punctuation">)</span>        <span class="token comment">### START CODE HERE ### </span>        self<span class="token punctuation">.</span>dW <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">.</span>T<span class="token punctuation">,</span>dout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">### END CODE HERE ### </span>                dx <span class="token operator">=</span> dx<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>original_x_shape<span class="token punctuation">)</span>  <span class="token comment"># 还原输入数据的形状（对应张量）</span>        <span class="token keyword">return</span> dx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试效果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>affine <span class="token operator">=</span> Affine<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 假设 l = sum(y)</span>l <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>affine<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>dout <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>l<span class="token punctuation">,</span> affine<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dout<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(9.0, array([[3., 3.]]))</code></pre><h4 id="3-2-3-Softmax-with-Loss层"><a href="#3-2-3-Softmax-with-Loss层" class="headerlink" title="3.2.3 Softmax-with-Loss层"></a>3.2.3 Softmax-with-Loss层</h4><p>softmax函数会将输入值正规化后输出，如图所示：</p><p><img src="/imgs/mlhw4/softmax.png" alt="Softmax层"></p><p>用$x_i$表示向量$x$的第$i$个分量。具体公式为<br>$$softmax(x_i)&#x3D;\frac{e^{x_i}}{\sum_{j&#x3D;1}^{C}{e^{x_j}}}$$ </p><p>当最后一层为softmax时，使用的损失函数一般为交叉熵函数（$C$是类别的数量，在本次实验中即为10）：<br>$$L(\hat{y},y)&#x3D;-\sum_{j&#x3D;1}^{C}{y_jlog\hat{y_j}}$$<br>成本函数为（$m$是mini-batch的大小）：<br>$$J(W^{[1]},b^{[1]},…)&#x3D;\frac{1}{m}\sum_{i&#x3D;1}^{m}{L(\hat{y}^{(i)},y^{(i)})}$$<br><strong>mini-batch</strong>：训练集共有60000个图片，我们不能把$(60000,784)$的张量直接放入神经网络计算。因此，每次正向传播从中选取m个图像来进行前向传播，所以输入的张量大小为$(m,784)$.</p><p><strong>Hint</strong>：最后的Loss是个标量 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> x<span class="token punctuation">.</span>T    x <span class="token operator">=</span> x <span class="token operator">-</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> y<span class="token punctuation">.</span>T <span class="token keyword">def</span> <span class="token function">cross_entropy_error</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pred<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pred<span class="token punctuation">.</span>size<span class="token punctuation">)</span>            <span class="token comment"># 监督数据是one-hot-vector的情况下，转换为正确解标签的索引</span>    <span class="token keyword">if</span> y<span class="token punctuation">.</span>size <span class="token operator">==</span> pred<span class="token punctuation">.</span>size<span class="token punctuation">:</span>        y <span class="token operator">=</span> y<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                 batch_size <span class="token operator">=</span> pred<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token boolean">None</span>    res <span class="token operator">=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>pred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1e-7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> batch_size        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现Softmax 层（已完成）</p><p>考虑到这里也包含作为损失函数的交叉熵误差（cross entropy error），所以称为“Softmax-with-Loss 层”。Softmax-with-Loss 层（Softmax函数和交叉熵误差）的计算图如图9所示。</p><p><img src="/imgs/mlhw4/softmax-cross.png" alt="Softmax-with-Loss 层"></p><p>可以看到，Softmax-with-Loss 层有些复杂。这里只给出了最终结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SoftmaxWithLoss</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>loss <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>pred <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token comment"># softmax的输出</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token boolean">None</span> <span class="token comment"># 监督数据</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>pred <span class="token operator">=</span> softmax<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loss <span class="token operator">=</span> cross_entropy_error<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pred<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>loss    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        batch_size <span class="token operator">=</span> self<span class="token punctuation">.</span>y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>y<span class="token punctuation">.</span>size <span class="token operator">==</span> self<span class="token punctuation">.</span>pred<span class="token punctuation">.</span>size<span class="token punctuation">:</span> <span class="token comment"># 监督数据是one-hot-vector的情况</span>            dx <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pred <span class="token operator">-</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> batch_size        <span class="token keyword">else</span><span class="token punctuation">:</span>            dx <span class="token operator">=</span> self<span class="token punctuation">.</span>pred<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>            dx<span class="token punctuation">[</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            dx <span class="token operator">=</span> dx <span class="token operator">/</span> batch_size                <span class="token keyword">return</span> dx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-搭积木"><a href="#3-3-搭积木" class="headerlink" title="3.3 搭积木"></a>3.3 搭积木</h3><p>现在我们把之前的每一层组合在一起就能搭成我们自己的三层神经网络了。<br>神经网络学习的步骤大致有5步：</p><ol><li>初始化权重</li><li>随机选择一部分数据</li><li>计算梯度</li><li>更新参数</li><li>重复步骤2,3,4</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TwoLayerNet</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">,</span> weight_init_std <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 初始化权重</span>        self<span class="token punctuation">.</span>params <span class="token operator">=</span> initialize_parameters<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">,</span> weight_init_std<span class="token punctuation">)</span>        <span class="token comment"># 记录训练次数 adam里要用</span>        self<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 生成层</span>        self<span class="token punctuation">.</span>layers <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Affine<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'LeakyRelu1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> LeakyRelu<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Affine<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'LeakyRelu2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> LeakyRelu<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Affine<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>lastLayer <span class="token operator">=</span> SoftmaxWithLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 前向传播</span>        pred <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 通过forward函数完成前向传播</span>            <span class="token comment">### START CODE HERE ###</span>            pred <span class="token operator">=</span> layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>pred<span class="token punctuation">)</span>            <span class="token comment">### END CODE HERE ###</span>                    <span class="token keyword">return</span> pred            <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 计算交叉熵损失</span>        <span class="token comment">### START CODE HERE ### </span>        pred <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">#计算关于x的预测结果</span>        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>lastLayer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>pred<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment">#使用SoftmaxWithLoss层计算预测结果和y之间的交叉熵损失</span>        <span class="token comment">### END CODE HERE ### </span>        <span class="token keyword">return</span> loss        <span class="token keyword">def</span> <span class="token function">accuracy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 输入数据x和标签y，输出当前神经网络的预测准确率</span>        accuracy <span class="token operator">=</span> <span class="token boolean">None</span>        pred <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        pred <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> y<span class="token punctuation">.</span>ndim <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            y <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                accuracy <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>pred <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> accuracy            <span class="token keyword">def</span> <span class="token function">gradient</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 前向传播</span>        self<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token comment"># 反向传播</span>        dout <span class="token operator">=</span> <span class="token number">1</span>        dout <span class="token operator">=</span> self<span class="token punctuation">.</span>lastLayer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dout<span class="token punctuation">)</span>                layers <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layers<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> layer <span class="token keyword">in</span> layers<span class="token punctuation">:</span>            dout <span class="token operator">=</span> layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dout<span class="token punctuation">)</span>        <span class="token comment"># 设定</span>        grads <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dW<span class="token punctuation">,</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>db        grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dW<span class="token punctuation">,</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>db        grads<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dW<span class="token punctuation">,</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>db                <span class="token keyword">return</span> grads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-进行训练"><a href="#3-4-进行训练" class="headerlink" title="3.4 进行训练"></a>3.4 进行训练</h3><h4 id="3-4-1-定义参数更新函数"><a href="#3-4-1-定义参数更新函数" class="headerlink" title="3.4.1 定义参数更新函数"></a>3.4.1 定义参数更新函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    使用梯度下降法更新network的参数    """</span>    <span class="token comment">#在这里我们给出了最基础的梯度下降法更新网络参数的实现代码，请同学们参考并完成其他优化算法的代码</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment">#在network现在的参数基础上减去学习率*梯度</span>        <span class="token keyword">return</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-2-定义训练函数"><a href="#3-4-2-定义训练函数" class="headerlink" title="3.4.2 定义训练函数"></a>3.4.2 定义训练函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_network</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> update_params_method<span class="token punctuation">,</span> iters_num<span class="token punctuation">,</span> train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>    train_loss_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    train_acc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    test_acc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    iter_per_epoch <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>train_size <span class="token operator">/</span> batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iters_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        batch_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>        x_batch <span class="token operator">=</span> x_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>        t_batch <span class="token operator">=</span> y_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>        network<span class="token punctuation">.</span>t <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 计算梯度</span>        grad <span class="token operator">=</span> network<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>        <span class="token comment"># 更新梯度</span>        update_params_method<span class="token punctuation">(</span>network<span class="token punctuation">,</span> grad<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span>        loss <span class="token operator">=</span> network<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>        train_loss_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> iter_per_epoch <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            train_acc <span class="token operator">=</span> network<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>            test_acc <span class="token operator">=</span> network<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>            train_acc_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span>            test_acc_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_acc<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Train acc:&#123;:&lt;.6f&#125;\tTest acc:&#123;:&lt;.6f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_acc<span class="token punctuation">,</span> test_acc<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读入数据</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span>path<span class="token punctuation">,</span> normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> one_hot_label<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义神经网络</span>network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>W1&#39;s shape: (784, 300)b1&#39;s shape: (300,)W2&#39;s shape: (300, 300)b2&#39;s shape: (300,)W3&#39;s shape: (300, 10)b3&#39;s shape: (10,)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">iters_num <span class="token operator">=</span> <span class="token number">10000</span> <span class="token comment">#迭代次数</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#训练集的样本数量</span>batch_size <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">#batch大小</span>learning_rate <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token comment">#学习率</span>train_network<span class="token punctuation">(</span>network<span class="token punctuation">,</span> update_parameters<span class="token punctuation">,</span> iters_num<span class="token punctuation">,</span> train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span> <span class="token comment">#开始训练网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Train acc:0.085400Test acc:0.084700Train acc:0.882817Test acc:0.887600Train acc:0.921217Test acc:0.918800Train acc:0.941400Test acc:0.940300Train acc:0.954433Test acc:0.953100Train acc:0.966600Test acc:0.961500Train acc:0.972000Test acc:0.965700Train acc:0.975467Test acc:0.967000Train acc:0.978200Test acc:0.970800Train acc:0.982183Test acc:0.972900Train acc:0.985733Test acc:0.977900Train acc:0.986983Test acc:0.976200Train acc:0.986350Test acc:0.974700Train acc:0.989633Test acc:0.977500Train acc:0.991583Test acc:0.978200Train acc:0.992133Test acc:0.978600Train acc:0.990667Test acc:0.977800</code></pre><h3 id="3-5-梯度下降优化算法"><a href="#3-5-梯度下降优化算法" class="headerlink" title="3.5 梯度下降优化算法"></a>3.5 梯度下降优化算法</h3><p>下面回顾几种上课讲过的优化算法，注意它们之间的差异与联系。</p><h4 id="3-5-1AdaGrad"><a href="#3-5-1AdaGrad" class="headerlink" title="3.5.1AdaGrad"></a>3.5.1AdaGrad</h4><p>当$J(\theta)$收敛到最低值附近时，因为步长$\alpha$大小固定的原因，$J(\theta)$会在最低值附近徘徊，而不能到达最低值。因此，AdaGrad的想法是随着迭代次数的增加降低学习率$\alpha$，学习率$\alpha$衰减的方式是<br>$$<br>\alpha^t &#x3D; \frac{\alpha}{\sqrt{t+1}}<br>$$<br>其中t表示第t次迭代。</p><p>如果梯度数值小，$J(\theta)$的移动步长小，$J(\theta)$在坡度平缓的区域内下降速度会变慢。AdaGrad使用均方根来加快$J(\theta)$在平缓区域的下降速度。均方根的表示为<br>$$<br>\sigma^t &#x3D; \sqrt{\frac{1}{t+1} \sum_{i&#x3D;0}^{t}(g^i)2}<br>$$<br>其中$g^i$表示历史的梯度值。AdaGrad 的更新参数公式是<br>$$<br>\begin{aligned}<br>\theta^{t+1} &amp; :&#x3D; \theta^t - \frac{\alpha^t}{\sigma^t} g^t \<br>&amp; :&#x3D; \theta^t - \frac{\alpha}{\sqrt{\sum_{i&#x3D;0}^t (g^i)^2}} g^t<br>\end{aligned}<br>$$<br>在坡度平缓的区域，均方根的数值小，梯度除以一个数值小的数会变大，从而加大了$J(\theta)$移动步长，也因此加快梯度下降速度。但是，AdaGrad的缺点是，随着迭代次数的增大，均方根会越来越大，梯度趋近于0，导致训练提前停止。为了防止分母为0，我们给分母加上一个小数值$\epsilon &#x3D;10^{-7}$。<br>$$<br>\theta^{t+1} :&#x3D; \theta^t - \frac{\alpha}{\sqrt{\sum_{i&#x3D;0}^t (g^i)^2} + \epsilon} g^t<br>$$</p><p>我们可以看到分母里会计算所有历史梯度值的平方和，所以在实现的时候不用保存所有的历史梯度值，只需要保存一个纪录所有历史梯度平方和的值即可。每个参数的历史梯度和初始值为0。<br>在代码实现中，我们使用<code>epsilon</code>代表ε  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">initialize_grads_squared</span><span class="token punctuation">(</span>network<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    初始化历史梯度和    """</span>    grads_squared <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                grads_squared<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>            <span class="token keyword">return</span> grads_squared<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>grads_squared <span class="token operator">=</span> initialize_grads_squared<span class="token punctuation">(</span>network<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>W1&#39;s shape: (784, 300)b1&#39;s shape: (300,)W2&#39;s shape: (300, 300)b2&#39;s shape: (300,)W3&#39;s shape: (300, 10)b3&#39;s shape: (10,)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters_with_adagrad</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> epsilon <span class="token operator">=</span> <span class="token number">1e-7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### START CODE HERE ### </span>                <span class="token comment">#计算历史梯度平方和</span>        grads_squared<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> learning_rate<span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>grads_squared<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>epsilon<span class="token punctuation">)</span>        <span class="token comment">### END CODE HERE ###</span>            <span class="token keyword">return</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">iters_num <span class="token operator">=</span> <span class="token number">10000</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>train_network<span class="token punctuation">(</span>network<span class="token punctuation">,</span> update_parameters_with_adagrad<span class="token punctuation">,</span> iters_num<span class="token punctuation">,</span> train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Train acc:0.224533Test acc:0.221600Train acc:0.868767Test acc:0.870600Train acc:0.886033Test acc:0.887800Train acc:0.894200Test acc:0.895500Train acc:0.899167Test acc:0.899200Train acc:0.902833Test acc:0.902300Train acc:0.905533Test acc:0.905000Train acc:0.908300Test acc:0.907900Train acc:0.909200Test acc:0.910200Train acc:0.912150Test acc:0.911400Train acc:0.914283Test acc:0.913000Train acc:0.916233Test acc:0.915000Train acc:0.916717Test acc:0.916500Train acc:0.918017Test acc:0.915700Train acc:0.919483Test acc:0.918000Train acc:0.920233Test acc:0.919800Train acc:0.921217Test acc:0.920200</code></pre><h4 id="3-5-2-RMSprop"><a href="#3-5-2-RMSprop" class="headerlink" title="3.5.2 RMSprop"></a>3.5.2 RMSprop</h4><p>从AdaGrad算法的公式可看出，所有时刻的梯度都对当前的参数更新有影响。如果早先的梯度并不是一个正确的方向，那么这些糟糕的梯度还是会影响到当前的参数更新。因此，RMSprop相当于就是只记录当前时刻前的某一段历史梯度和而不是所有历史梯度和。<br>RMSprop算法的公式如下：<br>$$<br> u^0 &#x3D; 0 \<br> u^{t+1} &#x3D; \rho u^t + (1-\rho) [\nabla J(\theta ^t)]^2 \<br> \theta^{t+1} &#x3D; \theta^t - \frac{\alpha}{\sqrt{u^{t+1}}+\epsilon}\nabla J(\theta ^t)<br>$$<br>这里$\rho$是超参数，一般设为0.999，也不会调它。$\epsilon$是防止分母为0。另外值得注意的是，因为要整合这几个算法在一起，而Adam算法又融合了各种算法，所以，关于优化算法的超参数的命名与Adam里保持一致，公式里的$\rho$用下面参数<code>beta</code>代替。这些算法几乎都要保存一些变量，它们的初始化基本与AdaGrad初始化的方法一致，所以这部分初始化的代码就不重复了。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters_with_rmsprop</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> epsilon <span class="token operator">=</span> <span class="token number">1e-7</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### START CODE HERE ### </span>                <span class="token comment">#公式里的u就是这里的 grads_squared         </span>        grads_squared<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> beta<span class="token operator">*</span>grads_squared<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta<span class="token punctuation">)</span><span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> learning_rate<span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>grads_squared<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>epsilon<span class="token punctuation">)</span><span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>                <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>grads_squared <span class="token operator">=</span> initialize_grads_squared<span class="token punctuation">(</span>network<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>W1&#39;s shape: (784, 300)b1&#39;s shape: (300,)W2&#39;s shape: (300, 300)b2&#39;s shape: (300,)W3&#39;s shape: (300, 10)b3&#39;s shape: (10,)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">iters_num <span class="token operator">=</span> <span class="token number">10000</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>train_network<span class="token punctuation">(</span>network<span class="token punctuation">,</span> update_parameters_with_rmsprop<span class="token punctuation">,</span> iters_num<span class="token punctuation">,</span> train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Train acc:0.154500Test acc:0.145600Train acc:0.964933Test acc:0.959300Train acc:0.975267Test acc:0.968700Train acc:0.984133Test acc:0.973400Train acc:0.987083Test acc:0.975700Train acc:0.988967Test acc:0.975400Train acc:0.992717Test acc:0.977400Train acc:0.994050Test acc:0.977900Train acc:0.993700Test acc:0.978300Train acc:0.993617Test acc:0.976400Train acc:0.993650Test acc:0.976300Train acc:0.993333Test acc:0.976200Train acc:0.995350Test acc:0.980400Train acc:0.996850Test acc:0.979400Train acc:0.995117Test acc:0.977200Train acc:0.994083Test acc:0.975900Train acc:0.998200Test acc:0.980000</code></pre><h4 id="3-5-3-Momentum"><a href="#3-5-3-Momentum" class="headerlink" title="3.5.3 Momentum"></a>3.5.3 Momentum</h4><p>动量梯度下降（Gradient Descent with Momentum）基本思想就是计算梯度的指数加权平均数，并利用该指数加权平均数更新权重。具体过程为：<br>$$<br>v^0 &#x3D; 0 \<br>v^{t+1}  &#x3D; \rho v^t +\alpha \nabla J(\theta ^t) \<br>\theta^{t+1} &#x3D; \theta ^t - v^{t+1}<br>$$</p><p>这里的$\rho$一般取0.9。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">initialize_velocity</span><span class="token punctuation">(</span>network<span class="token punctuation">)</span><span class="token punctuation">:</span>    v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>     <span class="token keyword">return</span> v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>v <span class="token operator">=</span> initialize_velocity<span class="token punctuation">(</span>network<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>W1&#39;s shape: (784, 300)b1&#39;s shape: (300,)W2&#39;s shape: (300, 300)b2&#39;s shape: (300,)W3&#39;s shape: (300, 10)b3&#39;s shape: (10,)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters_with_momentum</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### START CODE HERE ### </span>                <span class="token comment">#公式里的u就是这里的 grads_squared         </span>        v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> beta<span class="token operator">*</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span>learning_rate<span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> v<span class="token punctuation">[</span>key<span class="token punctuation">]</span>                <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">iters_num <span class="token operator">=</span> <span class="token number">10000</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>train_network<span class="token punctuation">(</span>network<span class="token punctuation">,</span> update_parameters_with_momentum<span class="token punctuation">,</span> iters_num<span class="token punctuation">,</span> train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Train acc:0.085050Test acc:0.084000Train acc:0.112367Test acc:0.113500Train acc:0.282417Test acc:0.284400Train acc:0.437133Test acc:0.447100Train acc:0.702383Test acc:0.715900Train acc:0.789133Test acc:0.797000Train acc:0.828717Test acc:0.835100Train acc:0.852583Test acc:0.856400Train acc:0.869817Test acc:0.873100Train acc:0.882033Test acc:0.884900Train acc:0.890717Test acc:0.890700Train acc:0.896317Test acc:0.894500Train acc:0.899783Test acc:0.899300Train acc:0.904583Test acc:0.902500Train acc:0.908617Test acc:0.906200Train acc:0.911867Test acc:0.909400Train acc:0.914083Test acc:0.912900</code></pre><h4 id="3-5-4-Nesterov-Momentum"><a href="#3-5-4-Nesterov-Momentum" class="headerlink" title="3.5.4 Nesterov Momentum"></a>3.5.4 Nesterov Momentum</h4><p>Nesterov Momentum算法与Momentum不同的是在于，它会提前计算一个在速度作用后的梯度。具体算法如下：<br>$$<br>v^{t+1} &#x3D; \rho v^t + \alpha \nabla J(\theta ^t - \rho v^t) \<br>\theta^{t+1} &#x3D; \theta ^t - v^{t+1}<br>$$<br>但是在实现的时候，我们是不会算一次$J(\theta ^t)$再算一次$\nabla J(\theta ^t - \rho v^t)$的。具体编程实现时上式等价于下式：<br>$$<br> v^{t+1} &#x3D; \rho v^t + \alpha \nabla J(\theta ^t) \<br> \theta^{t+1} &#x3D; \theta ^t - \rho v^{t+1} - \alpha \nabla J(\theta ^t)<br>$$<br>这里的$\rho$一般取0.9。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters_with_nesterov_momentum</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### START CODE HERE ### </span>                        v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> beta<span class="token operator">*</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span>learning_rate<span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> beta<span class="token operator">*</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span>learning_rate<span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>                <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>v <span class="token operator">=</span> initialize_velocity<span class="token punctuation">(</span>network<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>W1&#39;s shape: (784, 300)b1&#39;s shape: (300,)W2&#39;s shape: (300, 300)b2&#39;s shape: (300,)W3&#39;s shape: (300, 10)b3&#39;s shape: (10,)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">iters_num <span class="token operator">=</span> <span class="token number">10000</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>train_network<span class="token punctuation">(</span>network<span class="token punctuation">,</span> update_parameters_with_nesterov_momentum<span class="token punctuation">,</span> iters_num<span class="token punctuation">,</span> train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Train acc:0.084783Test acc:0.084100Train acc:0.112367Test acc:0.113500Train acc:0.283333Test acc:0.285600Train acc:0.440450Test acc:0.450000Train acc:0.703683Test acc:0.717300Train acc:0.789483Test acc:0.796600Train acc:0.829000Test acc:0.835400Train acc:0.853417Test acc:0.856900Train acc:0.869817Test acc:0.873300Train acc:0.882167Test acc:0.884300Train acc:0.890650Test acc:0.890700Train acc:0.896400Test acc:0.894400Train acc:0.899950Test acc:0.899100Train acc:0.904733Test acc:0.902300Train acc:0.908700Test acc:0.906000Train acc:0.911867Test acc:0.909300Train acc:0.914117Test acc:0.912800</code></pre><h4 id="3-5-5-Adam"><a href="#3-5-5-Adam" class="headerlink" title="3.5.5 Adam"></a>3.5.5 Adam</h4><p>Adam优化算法（Adaptive Moment Estimation）是将Momentum和RMSprop结合在一起的算法，具体过程如下<br>$$<br>u^0 &#x3D; 0 \<br>v^0 &#x3D; 0 \<br>u^{t+1}  &#x3D; \rho_2 u^t +(1-\rho_2) [\nabla J(\theta ^t)]^2 \<br>v^{t+1}  &#x3D; \rho_1 v^t + (1-\rho_1)\nabla J(\theta ^t) \<br>\theta^{t+1} &#x3D; \theta ^t - \frac{\alpha}{\sqrt{u^{t+1}}+\epsilon}v^{t+1}<br>$$<br>从上式可以看到，在最开始更新时，$u^{t},v^{t}$都是很小的。所以需要对早期的更新进行一个bias correction。完整公式如下<br>$$<br>u^0 &#x3D; 0 \<br>v^0 &#x3D; 0 \<br>u^{t+1}  &#x3D; \rho_2 u^t +(1-\rho_2) [\nabla J(\theta ^t)]^2 \<br>u^{t+1}<em>{corrected} &#x3D; \frac{u^{t+1}}{1-\rho_2^t} \<br>v^{t+1}  &#x3D; \rho_1 v^t + (1-\rho_1)\nabla J(\theta ^t) \<br>v^{t+1}</em>{corrected} &#x3D; \frac{v^{t+1}}{1-\rho_1^t} \<br>\theta^{t+1} &#x3D; \theta ^t - \frac{\alpha}{\sqrt{u^{t+1}<em>{corrected}}+\epsilon}v^{t+1}</em>{corrected}<br>$$</p><p>其中，一般设$\rho_1&#x3D;0.9,\rho_2&#x3D;0.999$.$\epsilon$也是防止分母过小或等于0.  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">initialize_adam</span><span class="token punctuation">(</span>network<span class="token punctuation">)</span> <span class="token punctuation">:</span>    v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    u <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        u<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> v<span class="token punctuation">,</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>v<span class="token punctuation">,</span> u <span class="token operator">=</span> initialize_adam<span class="token punctuation">(</span>network<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>W1&#39;s shape: (784, 300)b1&#39;s shape: (300,)W2&#39;s shape: (300, 300)b2&#39;s shape: (300,)W3&#39;s shape: (300, 10)b3&#39;s shape: (10,)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters_with_adam</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> epsilon<span class="token operator">=</span><span class="token number">1e-7</span><span class="token punctuation">,</span> beta1<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> beta2<span class="token operator">=</span><span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v_corrected <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    u_corrected <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>     t <span class="token operator">=</span> network<span class="token punctuation">.</span>t <span class="token comment">#当前迭代次数</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### START CODE HERE ### </span>                        v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> beta1<span class="token operator">*</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta1<span class="token punctuation">)</span><span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        v_corrected<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta1<span class="token operator">**</span>t<span class="token punctuation">)</span>                u<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> beta2<span class="token operator">*</span>u<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta2<span class="token punctuation">)</span><span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        u_corrected<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta2<span class="token operator">**</span>t<span class="token punctuation">)</span>                network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> learning_rate<span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>u_corrected<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>epsilon<span class="token punctuation">)</span><span class="token operator">*</span>v_corrected<span class="token punctuation">[</span>key<span class="token punctuation">]</span>                <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">iters_num <span class="token operator">=</span> <span class="token number">10000</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>train_network<span class="token punctuation">(</span>network<span class="token punctuation">,</span> update_parameters_with_adam<span class="token punctuation">,</span> iters_num<span class="token punctuation">,</span> train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Train acc:0.143983Test acc:0.144800Train acc:0.958583Test acc:0.954000Train acc:0.971600Test acc:0.966900Train acc:0.978850Test acc:0.967800Train acc:0.983017Test acc:0.972800Train acc:0.985367Test acc:0.972400Train acc:0.986133Test acc:0.974500Train acc:0.991683Test acc:0.978100Train acc:0.986633Test acc:0.971500Train acc:0.995467Test acc:0.981400Train acc:0.993783Test acc:0.980900Train acc:0.994167Test acc:0.980400Train acc:0.994417Test acc:0.978400Train acc:0.995717Test acc:0.979500Train acc:0.997383Test acc:0.980900Train acc:0.996250Test acc:0.978900Train acc:0.996833Test acc:0.980800</code></pre><h4 id="3-5-6-AdaBelief"><a href="#3-5-6-AdaBelief" class="headerlink" title="3.5.6 AdaBelief"></a>3.5.6 AdaBelief</h4><p>Adam优化算法中，梯度更新的方向是 $\frac{v_{t+1}}{\sqrt{u_{t+1}}}$, 其中 $u_{t+1}$ 是 $[\nabla J(\theta ^t)]^2$ 的指数移动平均(exponential moving average,EMA)。</p><p>AdaBelief优化算法将梯度方向改为了 $\frac{v_{t+1}}{\sqrt{s_{t+1}}}$, 其中 $s_{t+1}$ 是 $[\nabla J(\theta ^t)-v_{t}]^2$ 的指数移动平均，AdaBelief的算法过程具体如下：<br>$$<br>s^0 &#x3D; 0 \<br>v^0 &#x3D; 0 \<br>v^{t+1}  &#x3D; \rho_1 v^t + (1-\rho_1)\nabla J(\theta ^t) \<br>s^{t+1}  &#x3D; \rho_2 s^t +(1-\rho_2) [\nabla J(\theta ^t)-v_{t+1}]^2 \<br>\theta^{t+1} &#x3D; \theta ^t - \frac{\alpha}{\sqrt{s^{t+1}}+\epsilon}v^{t+1}<br>$$</p><p>与Adam优化算法同理，从上式可以看到，AdaBelief优化算法在最开始更新时，$s^{t},v^{t}$都是很小的。所以需要对早期的更新进行一个bias correction。完整公式如下<br>$$<br>s^0 &#x3D; 0 \<br>v^0 &#x3D; 0 \<br>v^{t+1}  &#x3D; \rho_1 v^t + (1-\rho_1)\nabla J(\theta ^t) \<br>v^{t+1}<em>{corrected} &#x3D; \frac{v^{t+1}}{1-\rho_1^t} \<br>s^{t+1}  &#x3D; \rho_2 s^t +(1-\rho_2) [\nabla J(\theta ^t)-v</em>{t+1}]^2 \<br>s^{t+1}<em>{corrected} &#x3D; \frac{s^{t+1}}{1-\rho_2^t} \<br>\theta^{t+1} &#x3D; \theta ^t - \frac{\alpha}{\sqrt{s^{t+1}</em>{corrected}}+\epsilon}v^{t+1}_{corrected}<br>$$</p><p>其中，一般设$\rho_1&#x3D;0.9,\rho_2&#x3D;0.999$.$\epsilon$也是防止分母过小或等于0. </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">initialize_adambelief</span><span class="token punctuation">(</span>network<span class="token punctuation">)</span> <span class="token punctuation">:</span>    v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### START CODE HERE ###  #请初始化v和s</span>        v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">### END CODE HERE ###</span>                <span class="token keyword">return</span> v<span class="token punctuation">,</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>v<span class="token punctuation">,</span> s <span class="token operator">=</span> initialize_adambelief<span class="token punctuation">(</span>network<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>W1&#39;s shape: (784, 300)b1&#39;s shape: (300,)W2&#39;s shape: (300, 300)b2&#39;s shape: (300,)W3&#39;s shape: (300, 10)b3&#39;s shape: (10,)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters_with_adambelief</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> epsilon<span class="token operator">=</span><span class="token number">1e-7</span><span class="token punctuation">,</span> beta1<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> beta2<span class="token operator">=</span><span class="token number">0.999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v_corrected <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    s_corrected <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>     t <span class="token operator">=</span> network<span class="token punctuation">.</span>t <span class="token comment">#当前迭代次数</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">,</span> <span class="token string">'W3'</span><span class="token punctuation">,</span> <span class="token string">'b3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### START CODE HERE ### </span>                        v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> beta1<span class="token operator">*</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta1<span class="token punctuation">)</span><span class="token operator">*</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        v_corrected<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta1<span class="token operator">**</span>t<span class="token punctuation">)</span>                s<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> beta2<span class="token operator">*</span>s<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">-</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">-</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        s_corrected<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta2<span class="token operator">**</span>t<span class="token punctuation">)</span>                network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> learning_rate<span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>s_corrected<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>epsilon<span class="token punctuation">)</span><span class="token operator">*</span>v_corrected<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">iters_num <span class="token operator">=</span> <span class="token number">10000</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>train_network<span class="token punctuation">(</span>network<span class="token punctuation">,</span> update_parameters_with_adambelief<span class="token punctuation">,</span> iters_num<span class="token punctuation">,</span> train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Train acc:0.229883Test acc:0.226300Train acc:0.960717Test acc:0.955500Train acc:0.970600Test acc:0.965000Train acc:0.979550Test acc:0.968900Train acc:0.985500Test acc:0.974000Train acc:0.987800Test acc:0.976200Train acc:0.989600Test acc:0.974900Train acc:0.991533Test acc:0.977100Train acc:0.990117Test acc:0.976700Train acc:0.993717Test acc:0.979300Train acc:0.993467Test acc:0.979100Train acc:0.994500Test acc:0.979400Train acc:0.992783Test acc:0.974000Train acc:0.996283Test acc:0.979000Train acc:0.995833Test acc:0.978000Train acc:0.995383Test acc:0.978100Train acc:0.996683Test acc:0.977900</code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>本次实验完整搭建了一个三层的全连接网络，使用了各种梯度更新优化算法训练MNIST数据集。<br>或许你可以试试通过调整网络参数和超参数再把准确度提高一点？（记得记录每次训练时的数据结果）</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广而告之</title>
      <link href="/2023/12/10/%E5%B9%BF%E8%80%8C%E5%91%8A%E4%B9%8B/"/>
      <url>/2023/12/10/%E5%B9%BF%E8%80%8C%E5%91%8A%E4%B9%8B/</url>
      
        <content type="html"><![CDATA[<p>嘻嘻嘻，CCF-CSP认证200分了</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习HW3-正则化</title>
      <link href="/2023/12/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0HW3-%E6%AD%A3%E5%88%99%E5%8C%96/"/>
      <url>/2023/12/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0HW3-%E6%AD%A3%E5%88%99%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在这个实验中，是以Logistic回归作为基础，将再次复习Logistic回归，对Logistic回归将有更深的理解。通过对比未进行正则化的Logistic回归与正则化的Logistic回归在相同数据集上的表现来理解正则化缓解过拟合现象的作用。<br>注：本次实验不再给出理论结果，在你们的训练结果中需要看出加入正则项以后的结果变化。</p><h2 id="1-导入Python库"><a href="#1-导入Python库" class="headerlink" title="1. 导入Python库"></a>1. 导入Python库</h2><p>首先，我们导入这次实验所需要使用的Python库，以及辅助函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> utils <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-知识回顾–过拟合问题分析"><a href="#2-知识回顾–过拟合问题分析" class="headerlink" title="2. 知识回顾–过拟合问题分析"></a>2. 知识回顾–过拟合问题分析</h1><p>实际应用中容易出现过拟合，其原因则在于模型已经足够复杂，但是我们往往根本就不知道设计的模型的复杂程度是否刚好满足要求。</p><p>这就需要我们去判断模型是否刚刚好，如何判断是否出现了过拟合或欠拟合呢？我们一般通过将数据分为3个部分，训练集(train set)，验证集(validation set)和测试集(test set)。所谓过拟合就是指模型的泛化能力不强，那么，我们就在验证集上测试模型的泛化能力。如下图所示，我们可以看到，过拟合的时候在验证集上表现不好(即泛化能力不强)。而对于欠拟合，往往在训练集上的表现就可以看出表现不好。<br><img src="/imgs/mlhw3/goodfit_overfit.jpg" alt="goodfit_overfit"></p><p>如何解决欠拟合和过拟合问题？<br>欠拟合(Large Bias)： 增加模型的复杂度</p><ul><li>收集新的特征</li><li>增加多项式组合特征</li></ul><p>过拟合(Large Variance)</p><ul><li><p>增加数据(very effective, but not always practical)</p></li><li><p>降低模型复杂度：</p><ul><li><p>减少特征</p></li><li><h4 id="正则化-Regularization-：非常有效的方法，可大幅度降低方差（增加偏差）"><a href="#正则化-Regularization-：非常有效的方法，可大幅度降低方差（增加偏差）" class="headerlink" title="正则化(Regularization)：非常有效的方法，可大幅度降低方差（增加偏差）"></a>正则化(Regularization)：非常有效的方法，可大幅度降低方差（增加偏差）</h4></li></ul></li></ul><h1 id="3-可视化数据"><a href="#3-可视化数据" class="headerlink" title="3. 可视化数据"></a>3. 可视化数据</h1><p>为了方便可视化，我们选用二维的数据方便观察。接下来，我们导入这次实验需要用到的数据，并且对其进行可视化。<br>设$X$为我们的特征矩阵，$x^{(i)}$为训练集里面的第$i$个样本，$x_j$为样本中的第$j$个特征，则：<br>$$X&#x3D;\begin{bmatrix}x_1^{(1)} &amp; x_2^{(1)} \ x_1^{(2)} &amp; x_2^{(2)} \ \vdots &amp; \vdots \ x_1^{(m)} &amp; x_2^{(m)} \end{bmatrix}$$<br>$Y$为一个列向量，$y^{(i)}$代表第$i$个样本对应的标签，则：<br>$$Y&#x3D;\begin{bmatrix}y^{(1)} \ y^{(2)} \ \vdots \ y^{(m)} \end{bmatrix}$$  </p><p>这里我们已经将数据分成训练集(对应train.txt)和验证集(对应val.txt)。下面直观地观察一下训练集的数据分布。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_data <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'train.txt'</span><span class="token punctuation">)</span>val_data <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'val.txt'</span><span class="token punctuation">)</span>X_train <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>Y_train <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>X_val <span class="token operator">=</span> val_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>Y_val <span class="token operator">=</span> val_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The shape of X_train is:"</span><span class="token punctuation">,</span> X_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The shape of Y_train is:"</span><span class="token punctuation">,</span> Y_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>plotData<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>The shape of X_train is: (153, 2)The shape of Y_train is: (153,)&lt;module &#39;matplotlib.pyplot&#39; from &#39;E:\\anaconda\\Lib\\site-packages\\matplotlib\\pyplot.py&#39;&gt;</code></pre><p><img src="/imgs/mlhw3/output_4_2.png" alt="png"></p><h1 id="4-Logistic与Regularized-Logistic"><a href="#4-Logistic与Regularized-Logistic" class="headerlink" title="4. Logistic与Regularized Logistic"></a>4. Logistic与Regularized Logistic</h1><p>现在的任务是使用Logistic对上面的数据集进行分类。根据2中分析，我们可以知道特征较少往往就不能很好拟合数据，而这里只有两个特征，所以这里我们先使用多项式来组合特征。</p><h2 id="4-1-特征映射"><a href="#4-1-特征映射" class="headerlink" title="4.1 特征映射"></a>4.1 特征映射</h2><p>上面的数据只有两个特征，$x_1$和$x_2$，我们按照作业1里多项式回归的相同步骤，将$x_1$和$x_2$映射为最高为6次的多项式。即：<br>$$mapFeature(x_1,x_2)&#x3D;\begin{bmatrix}1 \ x_1 \ x_2 \ x_1^2 \ x_1x_2 \ x_2^2 \ \vdots \ x_1x_2^5 \ x_2^6 \end{bmatrix}$$<br>这里第一维的<em>1</em>同作业1线性回归里一样为了方便处理偏置项，将两个特征映射成了$2+3+ \dots +7&#x3D;27$个特征。算上<em>1</em>则多项式回归的参数个数为$28$个。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">map_X_train <span class="token operator">=</span> mapFeature<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After mapping the features, the shape of map_X_train is:"</span><span class="token punctuation">,</span> map_X_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"X_train[3]"</span><span class="token punctuation">,</span>X_train<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"map_X_train[3]"</span><span class="token punctuation">,</span>map_X_train<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>After mapping the features, the shape of map_X_train is: (153, 28)X_train[3] [ 0.13 -0.16]map_X_train[3] [ 1.0000000e+00  1.3000000e-01 -1.6000000e-01  1.6900000e-02 -2.0800000e-02  2.5600000e-02  2.1970000e-03 -2.7040000e-03  3.3280000e-03 -4.0960000e-03  2.8561000e-04 -3.5152000e-04  4.3264000e-04 -5.3248000e-04  6.5536000e-04  3.7129300e-05 -4.5697600e-05  5.6243200e-05 -6.9222400e-05  8.5196800e-05 -1.0485760e-04  4.8268090e-06 -5.9406880e-06  7.3116160e-06 -8.9989120e-06  1.1075584e-05 -1.3631488e-05  1.6777216e-05]</code></pre><h2 id="4-2-sigmoid函数"><a href="#4-2-sigmoid函数" class="headerlink" title="4.2 sigmoid函数"></a>4.2 sigmoid函数</h2><p>我们打算使用Logistic回归训练一个模型，来区分我们的正类与负类，因此我们需要一个Sigmoid函数：<br>$$sigmoid(z) &#x3D; \frac{1}{1+e^{-z}}$$<br><strong>注意</strong>：我们写的Sigmoid函数是需要能够对矩阵直接进行操作的。<br><strong>Hint</strong>：计算$e^{-z}$可以使用np.exp(-z)来进行计算<br><strong>任务1</strong>：实现sigmoid函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对矩阵z中每个元素计算其Sigmoid函数值    """</span>    <span class="token comment">### START CODE HERE ###</span>        g <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>sigmoid<span class="token punctuation">(</span>map_X_train<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[0.73105858 0.53245431 0.50749944 0.5042249  0.500975   0.500225 0.50054925 0.50012675 0.50002925 0.50000675 0.5000714  0.50001648 0.5000038  0.50000088 0.5000002  0.50000928 0.50000214 0.50000049 0.50000011 0.50000003 0.50000001 0.50000121 0.50000028 0.50000006 0.50000001 0.5        0.5        0.5       ]</code></pre><h2 id="4-3-初始化参数"><a href="#4-3-初始化参数" class="headerlink" title="4.3 初始化参数"></a>4.3 初始化参数</h2><p>我们简单地权重$\theta$初始化为零向量。<br>$$\theta &#x3D; \begin{bmatrix}\theta_1 \ \theta_2 \ \vdots \ \theta_n \end{bmatrix} $$<br>其中$n$为特征的数量。<br><strong>Hint</strong>：使用np.zeros()<br><strong>任务2</strong>：初始化权重$\theta$为零向量。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init_parameter</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    初始化参数    :param n : map_X_train的列数    :return :权重向量    """</span>    <span class="token comment">### START CODE HERE ###</span>    initial_theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> initial_theta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The initialized theta's shape is:"</span><span class="token punctuation">,</span>init_parameter<span class="token punctuation">(</span>map_X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>The initialized theta&#39;s shape is: (28,)</code></pre><h2 id="4-4-预测与计算loss"><a href="#4-4-预测与计算loss" class="headerlink" title="4.4 预测与计算loss"></a>4.4 预测与计算loss</h2><p>没有正则项的loss:<br>$$J(\theta) &#x3D; -\frac{1}{m} \sum_{i&#x3D;1}^{m}{[y^{(i)}log(h_{\theta}(x^{(i)}))+(1-y^{(i)})log(1-h_{\theta}(x^{(i)}))]}$$<br>其中，$$h_\theta(X)&#x3D;g(X\theta)\ g(z) &#x3D; sigmoid(z)$$<br>加入正则项的loss:<br>$$J(\theta) &#x3D; -\frac{1}{m} \sum_{i&#x3D;1}^{m}{[y^{(i)}log(h_{\theta}(x^{(i)}))+(1-y^{(i)})log(1-h_{\theta}(x^{(i)}))]}+\frac{\lambda}{2m}\sum_{j&#x3D;1}^{n}{\theta_{j}^2}$$<br>其中，$\frac{\lambda}{2m}\sum_{j&#x3D;1}^{n}{\theta_{j}^2}$是正则化项。<br>我们从上式中看到，将$\lambda$设置为$0$就可以将有正则项的loss转化为无正则项的loss。因此我们可以来设置$\lambda$观察有正则和无正则的效果。  </p><p>预测的时候对于有无正则项都是一样的。<br>$$<br>h_{\theta}(x^{(i)}) \ge 0.5 \Rightarrow 为1类 \<br>h_{\theta}(x^{(i)}) \lt 0.5 \Rightarrow 为0类 \<br>$$</p><p><strong>Hint</strong>:<br><code>a = np.array([1,2,3,4])</code><br><code>a</code>的平均值为<code>a.mean()</code>或者用<code>a.sum()</code>除以<code>a</code>的个数。<br><code>a = np.array([0.3,0.5,0.8])</code> <code>a.round()</code>$\rightarrow$ <code>[0., 0., 1.]</code><br>其他一些函数可能会有用:<code>np.dot()</code>,<code>np.log()</code>,<code>np.power()</code><br><strong>任务3</strong>：完成计算loss的函数<br>注意：1.不要<code>for</code>循环求和。2.正则项loss不计算第一个权重</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> lambd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    计算loss    :param X:特征矩阵X    :param y:特征矩阵X对应的标签    :param theta:权重矩阵theta    :param lambd:正则化参数lambda    :return: loss    """</span>                <span class="token comment">### START CODE HERE ###</span>        m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token comment">#数据的数量</span>    h <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">#h函数</span>    z <span class="token operator">=</span> lambd<span class="token operator">*</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>theta<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">)</span>       <span class="token comment">#正则化项</span>    J <span class="token operator">=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y<span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>m<span class="token operator">+</span>z       <span class="token comment">#J函数</span>        <span class="token comment">### END CODE HERE ###</span>        <span class="token keyword">return</span> J<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>test_y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_theta <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_lambd <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test loss:'</span><span class="token punctuation">,</span>loss<span class="token punctuation">(</span>test_X<span class="token punctuation">,</span> test_y<span class="token punctuation">,</span> test_theta<span class="token punctuation">,</span> test_lambd<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>test loss: 0.8018978677830249</code></pre><p><strong>任务4</strong>：预测分类的函数<br><strong>Hint</strong>: 可能有用的函数：round()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对数据矩阵预测类别    :param X:特征矩阵X    :param theta:权重矩阵theta    ：return 由 0.,1.组成的向量，维度应该与X.shape[0]一致    """</span>    <span class="token comment">### START CODE HERE ###</span>        h <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span>    classes <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>        <span class="token comment">### END CODE HERE ###</span>        <span class="token keyword">return</span> classes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>test_theta <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test predict:'</span><span class="token punctuation">,</span>predict<span class="token punctuation">(</span>test_X<span class="token punctuation">,</span> test_theta<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>test predict: [0. 1.]</code></pre><h2 id="4-5-计算梯度"><a href="#4-5-计算梯度" class="headerlink" title="4.5 计算梯度"></a>4.5 计算梯度</h2><p>梯度计算公式如下(可以自己推导一下)：<br>$$<br>\frac{\partial J(\theta)}{\partial \theta_0}&#x3D; \frac{1}{m}\sum_{i&#x3D;1}^{m}{(h_{\theta}(x^{(i)})-y^{(i)})x_{0}^{(i)}}\qquad j&#x3D;0<br>$$</p><p>$$<br>\frac{\partial J(\theta)}{\partial\theta_{j}}&#x3D;\left[\frac{1}{m}\sum_{i&#x3D;1}^{m}(h_{\theta}(x^{(i)})-y^{(i)})x_{j}^{(i)}\right]+\frac{\lambda}{m}\theta_{j}\quad j\in{1,2,\ldots n }<br>$$</p><p> 为了方便，我们可以先对所有$\theta$(包括$\theta_0$)用下面的式子求梯度，然后再给$\theta_0$的梯度减去$\frac{\lambda}{m}\theta_0$<br><strong>任务5</strong>：完成计算梯度的函数<br><strong>Hint</strong>: 1. 矩阵<code>A</code>的转置为<code>A.T</code> 2. $\theta$的维度与$\frac{\partial J(\theta)}{\partial \theta}$的维度是一样的 3.矩阵的长宽，或者说向量中的元素个数，可以通过 $X.shape[0]$ 和 $X.shape[1]$ 获得</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compute_grad</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> lambd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    计算梯度    :param X:特征矩阵X    :param y:特征矩阵X对应的标签    :param theta:权重矩阵theta    :param lambd:正则化参数lambda    :return : 对theta的梯度，维度应该与theta一致    """</span>        <span class="token comment">### START CODE HERE ###</span>    m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token comment">#数据的数量</span>    h <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">#h函数</span>    grad <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">.</span>T<span class="token punctuation">,</span>h<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">/</span>m<span class="token operator">+</span>lambd<span class="token operator">/</span>m<span class="token operator">*</span>theta    grad<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> grad<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>lambd<span class="token operator">*</span>theta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>m        <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>test_y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_theta <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_lambd <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test compute_grad:'</span><span class="token punctuation">,</span>compute_grad<span class="token punctuation">(</span>test_X<span class="token punctuation">,</span> test_y<span class="token punctuation">,</span> test_theta<span class="token punctuation">,</span> test_lambd<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>test compute_grad: [-0.0334377   0.27349633]</code></pre><h2 id="4-6-更新参数"><a href="#4-6-更新参数" class="headerlink" title="4.6 更新参数"></a>4.6 更新参数</h2><p>更新参数还是使用梯度下降法。公式如下：<br>$$<br> \theta :&#x3D; \theta - \alpha \frac{\partial J(\theta)}{\partial \theta}<br>$$</p><p><strong>任务6</strong>：完成更新参数的函数 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_pameter</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> gradients<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    更新参数theta    :param theta:权重theta    :param gradients:梯度值    :param learning_rate:学习速率    :return:更新后的theta    """</span>    <span class="token comment">### START CODE HERE ###</span>        theta <span class="token operator">=</span> theta<span class="token operator">-</span>learning_rate<span class="token operator">*</span>gradients        <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> theta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>test_y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_theta <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_lambd <span class="token operator">=</span> <span class="token number">1</span>test_grad <span class="token operator">=</span> compute_grad<span class="token punctuation">(</span>test_X<span class="token punctuation">,</span> test_y<span class="token punctuation">,</span> test_theta<span class="token punctuation">,</span> test_lambd<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test update_pameter:'</span><span class="token punctuation">,</span>update_pameter<span class="token punctuation">(</span>test_theta<span class="token punctuation">,</span> test_grad<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>test update_pameter: [0.5334377  0.32650367]</code></pre><h2 id="4-7-搭积木"><a href="#4-7-搭积木" class="headerlink" title="4.7 搭积木"></a>4.7 搭积木</h2><p>接下来，我们将上面的代码整合到我们的模型Model中，并且我们将记录下成本$J$的变化过程。<br><strong>任务7</strong>：完成训练模型函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Model</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> iteration<span class="token operator">=</span><span class="token number">300000</span><span class="token punctuation">,</span> learning_rate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> lambd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Regulared Logistic Regression Model    :param X:输入X    :param y:标签Y    :param theta:参数theta    :param iteration:迭代次数    :param learning_rate:学习率    :param lambd:正则化参数lambda    :return:最终theta的值、theta的历史记录、loss的历史记录和精确度的历史记录    """</span>    theta_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    J_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    acc_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iteration<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment">### START CODE HERE ###</span>                gradients <span class="token operator">=</span> compute_grad<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>theta<span class="token punctuation">,</span>lambd<span class="token punctuation">)</span>        theta <span class="token operator">=</span> update_pameter<span class="token punctuation">(</span>theta<span class="token punctuation">,</span>gradients<span class="token punctuation">,</span>learning_rate<span class="token punctuation">)</span>                <span class="token comment">### END CODE HERE ###</span>                <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">10000</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            J <span class="token operator">=</span> loss<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> lambd<span class="token punctuation">)</span>            J_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>J<span class="token punctuation">)</span>            pred <span class="token operator">=</span> predict<span class="token punctuation">(</span>X<span class="token punctuation">,</span> theta<span class="token punctuation">)</span>            acc_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            theta_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>        <span class="token keyword">return</span> theta<span class="token punctuation">,</span>theta_history<span class="token punctuation">,</span> J_history<span class="token punctuation">,</span> acc_history<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-训练模型与分析"><a href="#5-训练模型与分析" class="headerlink" title="5.训练模型与分析"></a>5.训练模型与分析</h1><h2 id="5-1-无正则项"><a href="#5-1-无正则项" class="headerlink" title="5.1 无正则项"></a>5.1 无正则项</h2><p>无正则项只需设置$\lambda&#x3D;0$即可，下面是无正则项时在训练集和验证集上的表现以及在训练集上的分类边界。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 特征映射</span>map_X_train <span class="token operator">=</span> mapFeature<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>map_X_val <span class="token operator">=</span> mapFeature<span class="token punctuation">(</span>X_val<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X_val<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment"># 2. 初始化参数</span>theta <span class="token operator">=</span> init_parameter<span class="token punctuation">(</span>map_X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 3. 训练</span>theta<span class="token punctuation">,</span>theta_history<span class="token punctuation">,</span> J_history<span class="token punctuation">,</span> acc_history <span class="token operator">=</span> Model<span class="token punctuation">(</span>map_X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> iteration<span class="token operator">=</span><span class="token number">300000</span><span class="token punctuation">,</span> learning_rate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> lambd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 4. 验证集上验证</span>acc_val_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>J_val_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>theta_history<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    acc_val <span class="token operator">=</span> <span class="token punctuation">(</span>predict<span class="token punctuation">(</span>map_X_val<span class="token punctuation">,</span> theta_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>Y_val<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    acc_val_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>acc_val<span class="token punctuation">)</span>    J_val <span class="token operator">=</span> loss<span class="token punctuation">(</span>map_X_val<span class="token punctuation">,</span> Y_val<span class="token punctuation">,</span> theta_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    J_val_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>J_val<span class="token punctuation">)</span><span class="token comment"># 5. 分析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 5.1 绘制分类边界</span>plotDecisionBoundary<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​<br><img src="/imgs/mlhw3/output_32_0.png" alt="png"><br>​    </p><pre><code>&lt;module &#39;matplotlib.pyplot&#39; from &#39;E:\\anaconda\\Lib\\site-packages\\matplotlib\\pyplot.py&#39;&gt;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 5.2 比较预测精确度</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>acc_history<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>acc_val_history<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'validation'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x2b070076b50&gt;</code></pre><p>​<br><img src="/imgs/mlhw3/output_33_1.png" alt="png"><br>​    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 5.3 比较loss</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>J_history<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>J_val_history<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'val'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x2b06c295390&gt;</code></pre><p>​<br><img src="/imgs/mlhw3/output_34_1.png" alt="png"><br>​    </p><p>从训练过程中的分类精确度分析可知，随着训练次数增加，在训练集上的精确度会进一步提升，但是在验证集上的精确度有轻微的下降。<br>从训练过程中的loss分析可知，随着训练次数增加，在训练集上的loss会进一步降低，但是在验证集上的loss会有些发散。<br>这些都说明了训练的模型已经过拟合，需要降低模型复杂度来提高泛化能力。</p><h2 id="5-2-有正则项"><a href="#5-2-有正则项" class="headerlink" title="5.2 有正则项"></a>5.2 有正则项</h2><p>这里设置$\lambda&#x3D;0.005$，可以再提交作业后尝试设置不同的值观察结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 特征映射</span>map_X_train <span class="token operator">=</span> mapFeature<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>map_X_val <span class="token operator">=</span> mapFeature<span class="token punctuation">(</span>X_val<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X_val<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> degree<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment"># 2. 初始化参数</span>theta <span class="token operator">=</span> init_parameter<span class="token punctuation">(</span>map_X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 3. 训练</span>theta<span class="token punctuation">,</span>theta_history<span class="token punctuation">,</span> J_history<span class="token punctuation">,</span> acc_history <span class="token operator">=</span> Model<span class="token punctuation">(</span>map_X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> iteration<span class="token operator">=</span><span class="token number">300000</span><span class="token punctuation">,</span> learning_rate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> lambd <span class="token operator">=</span> <span class="token number">0.005</span><span class="token punctuation">)</span><span class="token comment"># 4. 验证集上验证</span>acc_val_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>J_val_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>theta_history<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    acc_val <span class="token operator">=</span> <span class="token punctuation">(</span>predict<span class="token punctuation">(</span>map_X_val<span class="token punctuation">,</span> theta_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>Y_val<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    acc_val_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>acc_val<span class="token punctuation">)</span>    J_val <span class="token operator">=</span> loss<span class="token punctuation">(</span>map_X_val<span class="token punctuation">,</span> Y_val<span class="token punctuation">,</span> theta_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    J_val_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>J_val<span class="token punctuation">)</span><span class="token comment"># 5. 分析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 5.1 绘制分类边界</span>plotDecisionBoundary<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​<br><img src="/imgs/mlhw3/output_38_0.png" alt="png"><br>​    </p><pre><code>&lt;module &#39;matplotlib.pyplot&#39; from &#39;E:\\anaconda\\Lib\\site-packages\\matplotlib\\pyplot.py&#39;&gt;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 5.2 比较预测精确度</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>acc_history<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>acc_val_history<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'validation'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x2b0700f23d0&gt;</code></pre><p>​<br><img src="/imgs/mlhw3/output_39_1.png" alt="png"><br>​    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 5.3 比较loss</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>J_history<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>J_val_history<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'val'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.legend.Legend at 0x2b06cb223d0&gt;</code></pre><p>​<br><img src="/imgs/mlhw3/output_40_1.png" alt="png"><br>​    </p><p>对比无正则项的实验结果，我们可以发现有正则项的模型明显提升了泛化能力，过拟合的现象大大减小。</p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h1><p>通过这次实验，我们能够直观的理解正则化对于缓解过拟合现象所起到的作用。在提交完作业后，你还可以试试不同的$\lambda$值，观察决策边界的变化。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex报告模板</title>
      <link href="/2023/11/28/LaTex%E6%8A%A5%E5%91%8A%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/11/28/LaTex%E6%8A%A5%E5%91%8A%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8,12pt<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">article</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">ctex</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">indentfirst</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">color</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">hyperref</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">graphicx</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">subfigure</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">pdfpages</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">listings</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">afterpage</span><span class="token punctuation">&#125;</span><span class="token function selector">\newcommand</span><span class="token function selector">\myemptypage</span><span class="token punctuation">&#123;</span>    <span class="token function selector">\null</span>    <span class="token function selector">\thispagestyle</span><span class="token punctuation">&#123;</span>empty<span class="token punctuation">&#125;</span>    <span class="token function selector">\addtocounter</span><span class="token punctuation">&#123;</span>page<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>-1<span class="token punctuation">&#125;</span>    <span class="token function selector">\newpage</span><span class="token punctuation">&#125;</span><span class="token function selector">\hypersetup</span><span class="token punctuation">&#123;</span>    hidelinks,colorlinks=true,allcolors=black,pdfstartview=Fit,breaklinks=true<span class="token punctuation">&#125;</span><span class="token function selector">\definecolor</span><span class="token punctuation">&#123;</span>dkgreen<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>rgb<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>0,0.6,0<span class="token punctuation">&#125;</span><span class="token function selector">\definecolor</span><span class="token punctuation">&#123;</span>gray<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>rgb<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>0.5,0.5,0.5<span class="token punctuation">&#125;</span><span class="token function selector">\definecolor</span><span class="token punctuation">&#123;</span>mauve<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>rgb<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>0.58,0,0.82<span class="token punctuation">&#125;</span><span class="token function selector">\lstset</span><span class="token punctuation">&#123;</span> <span class="token comment">%</span>  language=Octave,                <span class="token comment">% the language of the code</span>  basicstyle=<span class="token function selector">\footnotesize</span>,           <span class="token comment">% the size of the fonts that are used for the code</span>  numbers=left,                   <span class="token comment">% where to put the line-numbers</span>  numberstyle=<span class="token function selector">\tiny</span><span class="token function selector">\color</span><span class="token punctuation">&#123;</span>gray<span class="token punctuation">&#125;</span>,  <span class="token comment">% the style that is used for the line-numbers</span>  stepnumber=2,                   <span class="token comment">% the step between two line-numbers. If it's 1, each line </span>                                  <span class="token comment">% will be numbered</span>  numbersep=5pt,                  <span class="token comment">% how far the line-numbers are from the code</span>  backgroundcolor=<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>white<span class="token punctuation">&#125;</span>,      <span class="token comment">% choose the background color. You must add \usepackage&#123;color&#125;</span>  showspaces=false,               <span class="token comment">% show spaces adding particular underscores</span>  showstringspaces=false,         <span class="token comment">% underline spaces within strings</span>  showtabs=false,                 <span class="token comment">% show tabs within strings adding particular underscores</span>  frame=single,                   <span class="token comment">% adds a frame around the code</span>  rulecolor=<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>black<span class="token punctuation">&#125;</span>,        <span class="token comment">% if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))</span>  tabsize=2,                      <span class="token comment">% sets default tabsize to 2 spaces</span>  captionpos=b,                   <span class="token comment">% sets the caption-position to bottom</span>  breaklines=true,                <span class="token comment">% sets automatic line breaking</span>  breakatwhitespace=false,        <span class="token comment">% sets if automatic breaks should only happen at whitespace</span>  title=<span class="token function selector">\lstname</span>,                   <span class="token comment">% show the filename of files included with \lstinputlisting;</span>                                  <span class="token comment">% also try caption instead of title</span>  keywordstyle=<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>blue<span class="token punctuation">&#125;</span>,          <span class="token comment">% keyword style</span>  commentstyle=<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>dkgreen<span class="token punctuation">&#125;</span>,       <span class="token comment">% comment style</span>  stringstyle=<span class="token function selector">\color</span><span class="token punctuation">&#123;</span>mauve<span class="token punctuation">&#125;</span>,         <span class="token comment">% string literal style</span>  escapeinside=<span class="token punctuation">&#123;</span>\<span class="token comment">%*&#125;&#123;*)&#125;,            % if you want to add LaTeX within your code</span>  morekeywords=<span class="token punctuation">&#123;</span>*,...<span class="token punctuation">&#125;</span>               <span class="token comment">% if you want to add more keywords to the set</span><span class="token punctuation">&#125;</span><span class="token function selector">\setlength</span><span class="token punctuation">&#123;</span><span class="token function selector">\parindent</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>2em<span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">titlepage</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\includepdf</span><span class="token punctuation">[</span>pages=<span class="token punctuation">&#123;</span>1<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>cover.pdf<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">titlepage</span><span class="token punctuation">&#125;</span><span class="token function selector">\myemptypage</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\tableofcontents</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span><span class="token function selector">\newpage</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> Tex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat安装</title>
      <link href="/2023/11/26/Tomcat%E5%AE%89%E8%A3%85/"/>
      <url>/2023/11/26/Tomcat%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>课设需要用到JSP技术，所以主机安装一下Tomcat，并把Tomcat调试正确。</p><blockquote><p>Tomcat服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p><p>实际上Tomcat是Apache服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat时，它实际上作为一个与Apache独立的进程单独运行的。</p></blockquote><ul><li><code>Tomcat</code>版本：<code>v9.0.55</code></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Tomcat是开源的，直接在官网上下载就可以了</p><p>这里需要的是<code>v9.0.55</code>，因此在<a href="https://archive.apache.org/dist/tomcat/">archives</a>里面寻找，直接给出<a href="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.55/src/apache-tomcat-9.0.55-src.zip">v9.0.55</a>的下载地址，然后解压在目标地址就可以了，<code>.zip</code>免安装，解压并配置环境变量即可使用</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置Tomcat环境变量的前置条件是配置好java的环境变量，即<code>JAVA_HOME</code></p><p>以下环境变量均在系统环境变量中设置</p><ol><li>新建<code>CATALINA_HOME</code>，值为Tomcat的文件夹地址</li><li>建立Path，添加<code>%CATALINA_HOME%\lib</code>，<code>%CATALINA_HOME%\bin</code>，<code>%CATALINA_HOME%\lib\servlet-api.jar</code></li></ol><h2 id="测试Tomcat"><a href="#测试Tomcat" class="headerlink" title="测试Tomcat"></a>测试Tomcat</h2><h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在<code>.\apache-tomcat-9.0.55\bin</code>目录下，双击<code>startup.bat</code>打开窗口，双击<code>shutdown.bat</code>关闭窗口</p><p>在启动界面，会出现这种界面</p><p><img src="/imgs/tomcat/1.png" alt="image-20231130090736810"></p><p>解决方案是：</p><p>在<code>.\apache-tomcat-9.0.55\conf\logging.properties</code>将</p><pre class="line-numbers language-none"><code class="language-none">java.util.logging.ConsoleHandler.encoding &#x3D; UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换成</p><pre class="line-numbers language-none"><code class="language-none">java.util.logging.ConsoleHandler.encoding &#x3D; GBK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/imgs/tomcat/2.png" alt="image-20231130091214307"></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>通过命令行打开，在<code>.\apache-tomcat-9.0.55\bin</code>打开cmd，输入startup</p><p>出现</p><pre class="line-numbers language-none"><code class="language-none">Using CATALINA_BASE:   &quot;E:\apache-tomcat-9.0.55&quot;Using CATALINA_HOME:   &quot;E:\apache-tomcat-9.0.55&quot;Using CATALINA_TMPDIR: &quot;E:\apache-tomcat-9.0.55\temp&quot;Using JRE_HOME:        &quot;E:\java&quot;Using CLASSPATH:       &quot;E:\apache-tomcat-9.0.55\bin\bootstrap.jar;E:\apache-tomcat-9.0.55\bin\tomcat-juli.jar&quot;Using CATALINA_OPTS:   &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并弹出Tomcat启动界面（如上），表明启动成功</p><h3 id="访问Tomcat"><a href="#访问Tomcat" class="headerlink" title="访问Tomcat"></a>访问Tomcat</h3><p>在启动Tomcat后，打开浏览器，输入地址<code>http://localhost:8080</code>，弹出Tomcat自带的JSP界面，说明JDK和Tomcat搭建成功</p><p><img src="/imgs/tomcat/3.png" alt="image-20231130091747516"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LOOCV</title>
      <link href="/2023/11/16/LOOCV/"/>
      <url>/2023/11/16/LOOCV/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/dpengwang/article/details/84934197">LOOCV - Leave-One-Out-Cross-Validation 留一交叉验证_留一法交叉验证均方差计算公式-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/156657195">模型比较中的留一法交叉验证（Leave-One-Out Cross-Validation） - 知乎 (zhihu.com)</a></p><h2 id="Leave-One-Out-Cross-Validation"><a href="#Leave-One-Out-Cross-Validation" class="headerlink" title="Leave One Out Cross Validation"></a>Leave One Out Cross Validation</h2><p>正常训练都会划分训练集和验证集，训练集用来训练模型，而验证集用来评估模型的泛化能力。留一交叉验证是一个极端的例子，如果数据集D的大小为N,那么用N-1条数据进行训练，用剩下的一条数据作为验证，用一条数据作为验证的坏处就是可能$E_{val}$和$E_{out}$相差很大，所以在留一交叉验证里，每次从D中取一组作为验证集，直到所有样本都作过验证集，共计算N次，最后对验证误差求平均，得到$E_{loocv}(H,A)$，这种方法称之为留一法交叉验证。<br>$$<br>CV_{(n)}&#x3D;\frac1n\sum_{i&#x3D;1}^n MSE_i<br>$$</p><p>$$<br>\frac1N\sum_{n&#x3D;1}^Ne_n&#x3D;\frac1N\sum_{n&#x3D;1}^N err(g_n^-(x_n),y_n)<br>$$</p><p>LOOCV改进<br>$$<br>CV_{(n)}&#x3D;\frac{1}{n}\sum_{i&#x3D;1}^{n}(\frac{y_i-\hat{y}_i}{1-h_i})^2<br>$$</p><h2 id="为什么使用LOOCV"><a href="#为什么使用LOOCV" class="headerlink" title="为什么使用LOOCV"></a>为什么使用LOOCV</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/24825503">【机器学习】Cross-Validation（交叉验证）详解 - 知乎 (zhihu.com)</a></p></blockquote><p>参考交叉验证，减少了模型的bias，用于评估模型的泛化能力，防止模型过拟合</p><h2 id="使用LOOCV的场景"><a href="#使用LOOCV的场景" class="headerlink" title="使用LOOCV的场景"></a>使用LOOCV的场景</h2><p>当数据集D的数量较少时使用留一交叉验证</p><ul><li>数据集少，如果像正常一样划分训练集和验证集进行训练，那么可以用于训练的数据本来就少，还被划分出去一部分，这样可以用来训练的数据就更少了。loocv可以充分的利用数据。</li><li>因为loocv需要划分N次，产生N批数据，所以在一轮训练中，要训练出N个模型，这样训练时间就大大增加。所以loocv比较适合训练集较少的场景</li></ul><h2 id="LOOCV理论证明"><a href="#LOOCV理论证明" class="headerlink" title="LOOCV理论证明"></a>LOOCV理论证明</h2><p>LOOCV可以用来近似泛化误差，即$E_{loocv}\approx E_{out}$</p><p><img src="/imgs/loocv/1.png" alt="image-20231116200559559"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>充分利用数据</li><li>因为采样是确定的，所以最终误差也是确定的，不需要重复LOOCV</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>训练起来耗时</li><li>由于每次只采一个样本作为验证，导致无法分层抽样，影响验证集上的误差。举个例子，数据集中有数量相等的两个类，对于一条随机数据，他的预测结果是被预测为多数的结果，如果每次划出一条数据作为验证，则其对应的训练集中则会少一条，导致训练集中该条数据占少数从而被预测为相反的类，这样原来的误差率为50%，在LOOCV中为100%</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
            <tag> LOOCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>evaluation-metrics</title>
      <link href="/2023/11/12/evaluation-metrics/"/>
      <url>/2023/11/12/evaluation-metrics/</url>
      
        <content type="html"><![CDATA[<h2 id="平均绝对误差-MAE"><a href="#平均绝对误差-MAE" class="headerlink" title="平均绝对误差 MAE"></a>平均绝对误差 MAE</h2><p>平均绝对误差指的就是模型预测值$\hat y$与样本真实值$y$之间距离的平均值<br>$$<br>MAE&#x3D;\frac{1}{n}\sum_{i&#x3D;1}^{n}|\hat y_i-y_i|<br>$$</p><h2 id="均方误差-MSE"><a href="#均方误差-MSE" class="headerlink" title="均方误差 MSE"></a>均方误差 MSE</h2><p>$$<br>\mathrm{MSE}&#x3D;\frac1{\mathrm{n}}\mathrm{~\sum_{i&#x3D;1}^n(\hat{y}_i-y_i)^2}<br>$$</p><p>范围$[0,+\infin)$，当预测值与真实值完全吻合时等于0，即完美模型；误差越大，该值越大。</p><h2 id="均方根误差-RMSE"><a href="#均方根误差-RMSE" class="headerlink" title="均方根误差 RMSE"></a>均方根误差 RMSE</h2><p>MSE加了个根号，这样数量级上比较直观，比如RMSE&#x3D;10，可以认为回归效果相比真实值平均相差10<br>$$<br>\mathrm{RMSE}&#x3D;\sqrt{\frac1{\mathrm{n}}\mathrm{~\sum_{i&#x3D;1}^n(\hat{y}_i-y_i)^2}}<br>$$<br>范围$[0,+\infin)$，当预测值与真实值完全吻合时等于0，即完美模型；误差越大，该值越大。</p><h2 id="平均绝对百分比误差-MAPE"><a href="#平均绝对百分比误差-MAPE" class="headerlink" title="平均绝对百分比误差 MAPE"></a>平均绝对百分比误差 MAPE</h2><p>$$<br>\mathrm{MAPE&#x3D;\frac{100%}{n}\sum_{i&#x3D;1}^n\left|\frac{\hat{y}_i-y_i}{y_i}\right|}<br>$$</p><p>范围$[0,+\infin)$，MAPE为0%表示完美模型，MAPE大于 100 %则表示劣质模型</p><p>当真实值有数据等于0时，存在分母0除问题，该公式不可用</p><h2 id="对称平均绝对百分比误差-SMAPE"><a href="#对称平均绝对百分比误差-SMAPE" class="headerlink" title="对称平均绝对百分比误差 SMAPE"></a>对称平均绝对百分比误差 SMAPE</h2><p>$$<br>\mathrm{SMAPE&#x3D;\frac{100%}{n}\sum_{i&#x3D;1}^\mathrm{n}\frac{|\hat{y}_\mathrm{i}-y_\mathrm{i}|}{(|\hat{y}_\mathrm{i}|+|y_\mathrm{i}|)&#x2F;2}}<br>$$</p><p>注意点：当真实值有数据等于0，而预测值也等于0时，存在分母0除问题，该公式不可用</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
            <tag> evaluation metrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经验分享</title>
      <link href="/2023/11/07/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2023/11/07/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>数学建模包括两个阶段，备赛和打比赛，笔者会分别介绍两个阶段的经验</p><p>大型比赛笔者只打过校赛和国赛，本文基于国赛展开</p><p>Copyright © 2023 J&amp;Ocean All rights reserved</p><h2 id="备赛"><a href="#备赛" class="headerlink" title="备赛"></a>备赛</h2><p>准备数学建模的比赛是痛苦的，因为数学建模是一个抽象的行为，需要将一个具体的事务抽象成一个模型，这一行为对于我们来说并不容易。</p><p>入门的时候，笔者也不知道该从何学起，那就先看姜启源的《数学模型》吧，一翻，<del>额看不懂</del>，那就先不看。</p><p>然后在网上找课程看，大概了解了数学建模的流程以及比赛的一些注意事项，这一点其实在备赛过程中至关重要，毕竟知己知彼、百战不殆，不了解这个比赛，那就不用谈成功参赛。</p><p>然后很幸运的组到了队友，队友都很强，一位擅用LaTex同时对模型的认识很深刻，另一位擅长编写代码，剩下我学习了一些模型。</p><p>当然每个人只擅长一项技能是不够的：在国赛的时候，我们队伍另外两位队友的SPSS崩溃了，只剩下我来数据分析，那么我就开始负责这一项工作，角色转换，剩下两位队友开始写论文；我们三个人都是会LaTex的，使用overleaf线上写作，所以在最后一天的下午，我们开了三线程，在论文的三个地方同时写作，成功在DDL之前完成了论文。</p><p>讲完了横向的准备，接下来就是纵向的准备。想要优雅地答题需要较深的知识储备，我们队伍是专精数据分析和运筹优化，对于机理分析由于我们没有相关的专业背景不占优势，所以我们选择不做这一块。</p><p>最快的学习方法是读往年的题目和优秀论文，这一点非常重要，学习别人对于某一问题如何建立模型、解决问题，我们先学会他的方法，然后再对他的方法进行改进；当然优秀论文也不总是好的，也要批判那些文章存在什么缺陷，有哪些问题还没解决。</p><p>然后就是学习一些基本的模型，这就涉及到数值分析、机器学习等方面的知识，理清已有方法的适用范围、优缺点；就拿国赛2022C为例，题目给出的样本很少，因此对于神经网络等深度学习算法并不适用，而在小样本领域获得很好效果的SVM大放异彩。提到模型就不得不提到代码，python提供了很多封装好的模型，有代码模板也是很有用的。</p><p>对于完赛来说上述就够了，但是要拿奖就得真正明白数学建模的方法，这时候再回归姜启源的《数学模型》，笔者想肯定能收获很多</p><p>”纸上得来终觉浅，绝知此事要躬行“只学当然是不够的，还要在正式比赛前打打模拟赛练练手，赛后再复盘，会收获很多。</p><p>最后说一点，正式比赛前要注意休息好，开题之后可就没那么多时间休息了</p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><p>国赛赛题理论上来说是周四的20：00放出，那么在当天晚上就要确认好选题，然后进行一些数据预处理工作，当天能早睡就还是尽量早睡</p><p>周五是工作日，因此可能还是有课的，笔者不鼓励翘课<del>（23国赛笔者没有落下一节课）</del>，但是如果想多一点解题时间，该请假就请假，说明详情导员、任课老师会理解的。这一天需要尽可能解决第一题、开始第二题，论文的写作也要同步进展。</p><p>接下来是周六、周日上午，这一时间段是完整的时间，尽可能把整个题目完成；周日下午就是查漏补缺最后周日晚上提交。<del>以上的时间规划仅供参考，具体以实际为准</del></p><p><strong>需要注意的是论文提交分两步，首先提交MD5，提交MD5后不要再对论文PDF进行任何操作，随后提交论文</strong></p><p>在比赛期间肯定会遇到卡壳的情况，第一次打比赛的时候，笔者遇到卡壳枯坐了一晚上没解决；第二次打比赛的时候，团队遇到卡壳那就从容多了，该睡觉睡觉，该放松放松，时间到就再次投入解题，效率指数上升</p><p><em>最后就是报了名就尽量成功参赛，提交一篇<strong>自己写出来的论文</strong>，如果实在无法完成，也<strong>不要</strong>铤而走险网上购买论文提交，组委会是要查重的，包括<strong>全网和自建库</strong>，也就是说比赛提交的论文组成一个库进行查重，<del>曾有两篇论文查重99%</del>被查到学术不端是很严重的，计入个人档案，这种事情千万别做</em></p><p>以上仅为个人拙见，不当之处，尽请谅解！</p><p>最后祝大家学习顺利！</p><p>2023年11月7日</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>功不唐捐玉汝于成</title>
      <link href="/2023/11/06/%E5%8A%9F%E4%B8%8D%E5%94%90%E6%8D%90%E7%8E%89%E6%B1%9D%E4%BA%8E%E6%88%90/"/>
      <url>/2023/11/06/%E5%8A%9F%E4%B8%8D%E5%94%90%E6%8D%90%E7%8E%89%E6%B1%9D%E4%BA%8E%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="功不唐捐-玉汝于成"><a href="#功不唐捐-玉汝于成" class="headerlink" title="功不唐捐 玉汝于成"></a>功不唐捐 玉汝于成</h1><p>2022.06.30-2023.11.04 492天 完美退役</p><p>时间拨回2022年6月底，在同学的推荐下，我结识了现在的两位队友——幻光和♔♕♚♛✪<del>现在想来也是非常感谢那位同学</del>，然后我们开始了练级打怪历程。</p><p>回想这492天，学到最深刻的道理就是学会做梦，借用沈涵予老师的话就是</p><blockquote><p>“你要摘得是一个需要自己跳一跳才能够得到的金苹果”</p></blockquote><p>我想，我们三人小队，就是不断地在蹦蹦跳跳，终于摘到了属于我们的金苹果。</p><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><p>2022.06.30 在组完团队之后，我们首先参加了校赛，当时校赛我们属于是一穷二白、什么也不会，当时虽然我担着“建模手”的头衔，却只能干着查资料的活，东拼西凑，总算在ddl之前交了一篇胶水论文<del>（当然不是抄袭的）</del>，最终获得了校三，也许正是这次获奖让我们有了继续冲下去的信心。</p><p>2022.07.19 生日都是在培训中度过的。</p><p>2022.07.23 经过了短暂的校赛培训之后，我们打了第二场比赛——深圳杯，算是一次模拟赛，深圳杯的时间很长，足够我们慢慢磨。虽然很多细节我们当时还是没办法处理出来，但是对于问题的分析有了一定的长进，最后勉勉强强凑出了一篇论文，没想到被指导老师们看中了，但是由于当时忙于其他事情，还是鸽掉了这次比赛，也算有所收获。</p><p><strong>在暑假我们做的梦是国赛拿到国一</strong></p><h2 id="初出茅庐"><a href="#初出茅庐" class="headerlink" title="初出茅庐"></a>初出茅庐</h2><p>2022.09.15 迎来了我们第一场国赛，这次我们运气比较好，发现有题目我们会做，但是到后面越做越难。当时礼拜五晚上我们就差不多解决了两问，但是从第三问开始，我们彻底卡住了，我记得非常清楚，9.17晚上我在电脑前枯坐了一个晚上，问题几乎没有推进，不断地查找新方法，没有用，陷入了死循环。最后幻光拍板把那一问水过去开始下一问，保证完整参赛，所幸我们成功在DDL之前赶完了论文。打完之后，我们去鲜羊里<del>（没吃几次倒闭了）</del>搓了一顿，当时说实话人已经是跟着本能走了，吃不下东西，就是在呕吐的边缘徘徊。这是我第一次为了打比赛通宵，整个队伍的睡眠时间在最后两天不超过十个小时。</p><p><img src="/imgs/win/220918.jpg" alt="220918"></p><p>2022.10.10 省赛出结果了，喜提省一，中南在22年拿到省一的队伍中有四位同学是21级的，而我们队伍中就占了三位，也就是说，我们是唯一一支全员大二获得省一的队伍。</p><blockquote><p>出结果的时候都不敢相信，反反复复看了很久才确信我们就是省一，也更坚定了要继续在数模这条路上打下去。</p></blockquote><p>2022.11.06 当时我们小队在海底捞聚餐，当晚凑巧出了国赛结果，不出意外，我们的名字没有出现在名单上，免不了有点失落，也坚定了我们继续下去的决心。</p><p><img src="/imgs/win/221106.jpg" alt="221106"></p><h2 id="凤凰涅槃"><a href="#凤凰涅槃" class="headerlink" title="凤凰涅槃"></a>凤凰涅槃</h2><p>在22年国赛之后，我们队伍没有再打过其他的比赛。23年暑假，我们重新捡起数学建模，开始新一年国赛的备赛，虽然我们已经很久没有接触数学建模，但是我和幻光的数理学习、♔♕♚♛✪的信科辅修让我们的水平并没有下降，相反扎实了我们的基础。</p><p><strong>23年暑假我们做的梦是高教社杯</strong></p><p>2023.9.7 23国赛开题，当时刚好迎新，很感谢2314的班导师和另一位班助，让我能够专心于打比赛。这一次，我们花了很短的时间就确定了选题。然后开始做做做做，晚上也没有很迟睡觉。8号我基本没怎么做题目，因为我白天在上课<del>（这次比赛我们没有翘一节课）</del>，当天晚上我们才线下见面，结果我们<del>又去海底捞解决了一顿</del>。这次国赛，我们处理得游刃有余，该吃吃该喝喝，做不下去了睡个觉先，遇到瓶颈开把瓦、看会小说，这次比赛周末我们睡觉时间得有20+小时了。虽然解题也不算顺利，但我们真正享受了这次国赛。</p><p>2023.9.10 20点，正式退役！</p><p><img src="/imgs/win/230910.jpg" alt="230910"></p><h2 id="静候佳音"><a href="#静候佳音" class="headerlink" title="静候佳音"></a>静候佳音</h2><p>在国赛之后的日子里，我们能做的就是静候佳音。</p><p>一些发疯实录</p><p><img src="/imgs/win/230921.jpg" alt="230921"></p><p><img src="/imgs/win/231006.jpg" alt="231006"></p><p>2023.10.12 软件工程课上得知出省赛结果，<del>其实在出结果之前我们根本没想过能不能拿奖</del>不出意外拿了省一，但是看到校内排第二，感觉对于获得更高的荣誉希望渺茫，心里小小的失落了一下，但是还是安慰自己好歹有了推国的机会。</p><blockquote><p>“然后是艰难的等待国赛结果，三个人都做过推荐国一或者拿国一的梦，然后都乐醒了。”</p></blockquote><p>2023.10.31 当时是体系结构的课，上课前，幻光喊我过去，给我看了通知要出结果了，给当时吓了一跳，属于激动又害怕，当时其实没太奢望国一。</p><p>2023.11.04 在外面浪了一天（电玩城玩了一下午，只赢回两包湿巾）回宿舍，突然看到群里晚上八点开奖，三个人都给紧张的半死，然后共同相约海底捞开奖。当时还在排队，根据墨菲定律，我们会在叫号的时候得到结果，事实确实如此。当时我拿着电脑，叫号收起来了，走在海底捞的过道上就听到幻光喊了一声<strong>“国一”</strong>，我和幻光直接激动地喊出来了，♔♕♚♛✪走在后面，急急忙忙问“什么什么”，我们一起喊国一，我们激动地大喊<del>（感觉海底捞周围的食客都在看傻子一样看着我们）</del>。</p><blockquote><p>“然后那晚上海底捞吃了啥都忘了，只记得四处报喜了，指导老师啊辅导员啊等等”</p></blockquote><p><img src="/imgs/win/231104.jpg" alt="231104"></p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>梦想国一，收获省一；梦想高教社杯，收获国一</p><p>始于海底捞，终于海底捞<del>（不是广告）</del></p><p>满打满算，我们小队总共打了四场比赛，少而精</p><p>在收到结果的同时，还看到了一些熟悉的名字，曹佬、林佬、阎佬，他们分别拿到了高教社杯、知网研学奖、国一，向他们学习</p><p><strong>感谢队友幻光和♔♕♚♛✪</strong></p><p><strong>感谢那位推荐队友的同学</strong></p><p><strong>感谢指导老师张老师</strong></p><p><strong>感谢2314的班导师和另一位班助</strong></p><p>功不唐捐 玉汝于成，学会做梦，然后去摘跳一跳才够得到的金苹果</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadamard积</title>
      <link href="/2023/11/01/hadamard%E7%A7%AF/"/>
      <url>/2023/11/01/hadamard%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<p>事实上，hadamard积是一种高大上的说法，类比于向量的点积</p><p>现有矩阵$A&#x3D;[a_{ij}]$和$B&#x3D;[b_{ij}]$，定义运算$\bigodot$为：<br>$$<br>A \bigodot B&#x3D;[a_{ij}*b_{ij}]<br>$$<br>也就是说，需要两个矩阵的size完全一样，才能够进行hadamard积</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
            <tag> Hadamard积 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习HW2-Logistic回归</title>
      <link href="/2023/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0HW2-Logistic%E5%9B%9E%E5%BD%92/"/>
      <url>/2023/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0HW2-Logistic%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>回归，是指假设一个模型，设定一些参数，计算合适的参数以拟合逼近现有数据。</p><h4 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h4><p>$$h_\theta(x) &#x3D; θ^Tx+θ_0$$</p><h4 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h4><p>$$h_\theta(x) &#x3D; g(θ^Tx+θ_0) &#x3D; P(y&#x3D;1|x,θ)$$</p><p>线性回归用一条直线模型去拟合数据，用来确定两种或两种以上变量间相互依赖的定量关系</p><p>逻辑回归计算样本属于某个标签的概率，构建一个分类边界，用来对数据进行二分类或者多分类。</p><p>上次实验我们用梯度下降训练了一个线性回归模型，这次我们实现一个逻辑回归模型来进行二分类的收入判断任务。</p><h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><p>本实验可能用到的函数：<code>np.mean</code>, <code>np.std</code>, <code>np.add</code>, <code>np.sum</code>, <code>np.mutual</code>, <code>np.dot</code></p><p>本实验大部分变量为numpy array的数据类型，在计算时尽量化为numpy array类型进行计算</p><h3 id="任务一：读取和预处理数据"><a href="#任务一：读取和预处理数据" class="headerlink" title="任务一：读取和预处理数据"></a>任务一：读取和预处理数据</h3><p>第一步导入数据。压缩包中的train.csv中存储了原始数据，每人拥有年龄，工作类型等14个维度，共32561个样本。最后一个维度为本次实验的label，即收入是否大于50k。</p><p>做机器学习应用的时候很多时间是花费在特征处理上，我们注意到原始数据存在许多维度为非数字的数据，是不能直接用于构建模型的。我们可以通过离散化，把一个维度扩展到多个维度。如教育程度：（小学，初中，高中+）可以被扩展到如下三个维度：小学学历（是，否），初中学历（是，否），高中学历以上（是，否）。</p><p>经上述处理后的数据存储在X_train文件中，每个样本的维度被扩展到了106维，本实验直接使用X_train的数据构建模型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">def</span> <span class="token function">getdata</span><span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>Y_train<span class="token punctuation">)</span><span class="token punctuation">:</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>genfromtxt<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span>skip_header<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#32561个样本*106个特征</span>    Y <span class="token operator">=</span> np<span class="token punctuation">.</span>genfromtxt<span class="token punctuation">(</span>Y_train<span class="token punctuation">,</span>delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span>skip_header<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#32561个label</span>    <span class="token keyword">return</span> X<span class="token punctuation">,</span>Y<span class="token keyword">def</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#打乱X,Y,避免数据存在初始的排序，影响训练效果</span>    randomize <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#不同的库用的不太一样，返回的对象也不太一样。python自带的range()不支持numpy的shuffle</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>randomize<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>X<span class="token punctuation">[</span>randomize<span class="token punctuation">]</span><span class="token punctuation">,</span> Y<span class="token punctuation">[</span>randomize<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#ndarray的参数是数组时，返回一个依参数排序后的数组    </span><span class="token keyword">def</span> <span class="token function">train_test_split</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.1314</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#按一个比例分出一部分验证集</span>    train_len <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>test_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>train_len<span class="token punctuation">]</span><span class="token punctuation">,</span> Y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>train_len<span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span>train_len<span class="token punctuation">:</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Y<span class="token punctuation">[</span>train_len<span class="token punctuation">:</span><span class="token boolean">None</span><span class="token punctuation">]</span>X<span class="token punctuation">,</span>Y <span class="token operator">=</span> getdata<span class="token punctuation">(</span><span class="token string">'X_train'</span><span class="token punctuation">,</span><span class="token string">'Y_train'</span><span class="token punctuation">)</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> Y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>X<span class="token punctuation">.</span>shape <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(28282, 106)</code></pre><h3 id="任务二：数据归一化"><a href="#任务二：数据归一化" class="headerlink" title="任务二：数据归一化"></a>任务二：数据归一化</h3><p>归一化把每个特征的数据映射到0到1之间，消除指标之间的量纲影响，同时可以避免某些特征对模型预测结果的影响过大。</p><p>常用的归一化方法有两种：</p><p>一是利用最大最小值(min-max 归一化)；</p><p>二是利用平均值方差(z-score 0均值标准化)。</p><p>一般来说0均值标准化调整了数据的分布，使之更易于训练。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normalization</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将X中的数据映射到0-1之间    参数：        X:数据    返回：        归一化之后的X    注意：        测试在只归一化0,1,3,4,5,7,10,12,25,26,27,28列特征时，效果会比较好        具体原因可探讨    """</span>        <span class="token comment">### START THE CODE ###</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        X_mean<span class="token operator">=</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        X_std<span class="token operator">=</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">-</span>X_mean<span class="token punctuation">)</span><span class="token operator">/</span>X_std        <span class="token comment">### END THE CODE ###</span>        <span class="token keyword">return</span> XX <span class="token operator">=</span> normalization<span class="token punctuation">(</span>X<span class="token punctuation">)</span>X_test <span class="token operator">=</span> normalization<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>array([[ 0.02997349, -1.06586717,  1.        ,  0.14215522, -0.21607549,        -0.03383413,  0.        , -0.26256323,  0.        ,  0.        ,        -0.1885562 ,  0.        ,  4.9041296 ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  1.        ,        -0.11434365, -0.69111392, -0.23540742, -0.03992059,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         1.        ,  0.        ,  0.        ,  1.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  1.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  1.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,         0.        ,  0.        ,  1.        ,  0.        ,  0.        ,         0.        ]])</code></pre><h3 id="任务三：完成sigmoid函数"><a href="#任务三：完成sigmoid函数" class="headerlink" title="任务三：完成sigmoid函数"></a>任务三：完成sigmoid函数</h3><p>sigmoid funtion函数原指曲线是 “S”形的函数，logistic function则指满足某个公式形式的一系列函数。<br>在机器学习中，其一般特指以下函数（standard logistic function）：<br>$$f(x) &#x3D; \frac{1}{1+e^{-z}}$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    参数：        z    返回：        sigmoid(z)    """</span>       <span class="token comment">### START THE CODE ###</span>        s<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">### END THE CODE ###</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1e-6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">1e-6</span><span class="token punctuation">)</span>    <span class="token comment">#clip:重要的处理，将超出范围的值强制置为边界值，避免y_pred为0，从而导致下面交叉熵损失无法计算</span>    <span class="token comment">#aeN: a*10的N次方</span>    sigmoid<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.6224593312018546</code></pre><h3 id="任务四：完成交叉熵损失函数"><a href="#任务四：完成交叉熵损失函数" class="headerlink" title="任务四：完成交叉熵损失函数"></a>任务四：完成交叉熵损失函数</h3><p>$$J(\theta)&#x3D;-\frac{1}{m}\sum_1^m[y^ilog(h_\theta(x^i))+(1-y^i)log(1-h_\theta(x^i))]$$<br>损失函数用于评价模型预测同实际情况的差异，越小说明预测越准确。</p><p>概念上, 损失函数针对单个样本，代价函数针对总体。但作为优化目标时二者无不同。</p><p>交叉熵数学意义上衡量的是两个概率分布间的差异，本实验以交叉熵损失为优化目标函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cost</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_label<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""代价函数，这里计算的是所有样本损失函数的和    参数：        y_pred：模型预测的值        y_label：数据实际标签的值        m：数据的样本数    返回：        cst: 预测值同标签值之间的代价    """</span>       <span class="token comment">### START THE CODE ###</span>        cst<span class="token operator">=</span><span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y_label<span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>y_pred<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>y_label<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>m        <span class="token comment">### END THE CODE ###</span>        <span class="token keyword">return</span> cstcost<span class="token punctuation">(</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#numpy的log以e为底</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.7541046886308893</code></pre><h3 id="任务五：构建逻辑回归模型"><a href="#任务五：构建逻辑回归模型" class="headerlink" title="任务五：构建逻辑回归模型"></a>任务五：构建逻辑回归模型</h3><p>$$\hat y&#x3D;sig(θ_1<em>x_1+θ_2</em>x_2+…+θ_n*x_n+θ_0)$$</p><p>接下来先设置模型所需要的参数，可以自己修改观察对模型的影响。</p><p>对于样本的偏置θ0，有两种处理方法：<br>一种是作为一个维度添加到array θ上，相应样本也要添加一个值全为1的维度；</p><p>一种是单独拿出来更新，在梯度下降时分别处理。</p><p>本实验采取的是第二种方法。</p><p>最后完成模型所需的两个基本函数predict，和accuracy。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> theta_0<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""预测    参数：        X：样本特征        theta：权重参数         theta_0: 偏置参数    返回：        Y_pred: 样本的预测值 0~1    """</span>          <span class="token comment">### START THE CODE ###</span>        theta<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    Y_pred<span class="token operator">=</span>sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token operator">+</span>theta_0<span class="token punctuation">)</span>        <span class="token comment">### END THE CODE ###</span>        <span class="token keyword">return</span> Y_pred<span class="token keyword">def</span> <span class="token function">accuracy</span><span class="token punctuation">(</span>Y_hat<span class="token punctuation">,</span> Y_label<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""准确率    参数：        Y_hat：样本最终分类 0 or 1        Y_label：样本标签    返回：        acc: 分类准确率    """</span>          <span class="token comment">### START THE CODE ###</span>        acc<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>Y_hat<span class="token operator">==</span>Y_label<span class="token punctuation">)</span><span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>Y_label<span class="token punctuation">)</span>        <span class="token comment">### END THE CODE ###</span>        <span class="token keyword">return</span> accpredict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0.15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>array([0.58661758])</code></pre><h3 id="任务六：用随机梯度下降算法训练模型"><a href="#任务六：用随机梯度下降算法训练模型" class="headerlink" title="任务六：用随机梯度下降算法训练模型"></a>任务六：用随机梯度下降算法训练模型</h3><p>全样本的梯度下降，在样本过大时，更新一次参数会需要巨大计算量。我们可以每次从中随机取出一定大小的样本，进行小批量随机梯度下降。<br>随机取样部分已完成，只需根据样本梯度下降更新参数即可。</p><p>根据我们的优化目标（默认为交叉熵），对损失函数求导，得到梯度计算公式为：<br>$$(h_\theta(x^i)-y)x^i$$<br>(推导见ppt)</p><p>θ，θ0更新时分别处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gradient_descent</span><span class="token punctuation">(</span>x_bt<span class="token punctuation">,</span> y_bt<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> theta_0<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""用每次取出的一个batch的数据训练模型    参数：        x_bt:本次更新所用样本        y_bt:本次更新样本的标签        theta,theta_0：模型参数    返回:        theta:更新后的theta        theta_0:更新后的theta_0    过程：        用theta,theta_0进行一次预测        计算预测误差        计算theta, theta_0各自的梯度，取均值        用梯度更新theta_0和theta    """</span>     <span class="token comment">### START THE CODE ###</span>    pred_error<span class="token operator">=</span>predict<span class="token punctuation">(</span>x_bt<span class="token punctuation">,</span>theta<span class="token punctuation">,</span>theta_0<span class="token punctuation">)</span><span class="token operator">-</span>y_bt    theta_grad<span class="token operator">=</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>pred_error<span class="token punctuation">,</span>x_bt<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    theta_0_grad<span class="token operator">=</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>pred_error<span class="token punctuation">)</span>    theta<span class="token operator">=</span>theta<span class="token operator">-</span>learning_rate<span class="token operator">*</span>theta_grad    theta_0<span class="token operator">=</span>theta_0<span class="token operator">-</span>learning_rate<span class="token operator">*</span>theta_0_grad    <span class="token comment">### END THE CODE ###</span>        <span class="token keyword">return</span> theta<span class="token punctuation">,</span>theta_0gradient_descent<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.02</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(array([0.20851115]), array([0.10851115]))</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#模型的基本参数：</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment">#106个权重参数，初值全为0</span>theta_0 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment">#1个偏置参数，初值为0</span><span class="token comment">#训练参数</span>max_iter <span class="token operator">=</span> <span class="token number">80</span> <span class="token comment">#迭代次数</span>batch_size <span class="token operator">=</span> <span class="token number">32</span> <span class="token comment">#随机梯度下降中每次取样个数</span>learning_rate <span class="token operator">=</span> <span class="token number">0.02</span> <span class="token comment">#学习率，可以尝试不同的学习率，如0.2、0.002、0.0002</span>num_train <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span>num_test <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Y_test<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> theta_0<span class="token punctuation">,</span> max_iter<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#用于记录训练中损失和准确率的变化</span>    train_cost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    test_cost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    train_acc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    test_acc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_iter<span class="token punctuation">)</span><span class="token punctuation">:</span>        X<span class="token punctuation">,</span> Y <span class="token operator">=</span> shuffle<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span> <span class="token comment">#随机打乱各行数据，这样参数不易陷入局部最优，模型能够更容易达到收敛。 </span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token operator">/</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#每个batch更新一次</span>            x_bt <span class="token operator">=</span> X<span class="token punctuation">[</span>i<span class="token operator">*</span>batch_size<span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>batch_size<span class="token punctuation">]</span> <span class="token comment">#32个样本*106维</span>            y_bt <span class="token operator">=</span> Y<span class="token punctuation">[</span>i<span class="token operator">*</span>batch_size<span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>batch_size<span class="token punctuation">]</span> <span class="token comment">#32个label</span>                        <span class="token comment">#每个batch的样本更新参数theta,theta_0</span>            theta<span class="token punctuation">,</span>theta_0 <span class="token operator">=</span> gradient_descent<span class="token punctuation">(</span>x_bt<span class="token punctuation">,</span>y_bt<span class="token punctuation">,</span>theta<span class="token punctuation">,</span>theta_0<span class="token punctuation">,</span>learning_rate<span class="token punctuation">)</span>                <span class="token comment">#记录每个epoch更新后，训练集上损失的变化和准确率的变化</span>        Y_pred <span class="token operator">=</span> predict<span class="token punctuation">(</span>X<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> theta_0<span class="token punctuation">)</span>        Y_hat <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span>        train_acc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>accuracy<span class="token punctuation">(</span>Y_hat<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">)</span>        train_cost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cost<span class="token punctuation">(</span>Y_pred<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> num_train<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#记录每个epoch更新后，测试集上损失的变化和准确率的变化</span>        Y_test_pred <span class="token operator">=</span> predict<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> theta_0<span class="token punctuation">)</span>        Y_test_hat <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>Y_test_pred<span class="token punctuation">)</span>        test_acc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>accuracy<span class="token punctuation">(</span>Y_test_hat<span class="token punctuation">,</span> Y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>        test_cost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cost<span class="token punctuation">(</span>Y_test_pred<span class="token punctuation">,</span> Y_test<span class="token punctuation">,</span> num_test<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> train_cost<span class="token punctuation">,</span>test_cost<span class="token punctuation">,</span>train_acc<span class="token punctuation">,</span>test_acc        train_cost<span class="token punctuation">,</span>test_cost<span class="token punctuation">,</span>train_acc<span class="token punctuation">,</span>test_acc <span class="token operator">=</span> train<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> theta_0<span class="token punctuation">,</span> max_iter<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span>      <span class="token builtin">len</span><span class="token punctuation">(</span>train_cost<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>80</code></pre><h3 id="任务七：观察模型在训练集和验证集上的表现"><a href="#任务七：观察模型在训练集和验证集上的表现" class="headerlink" title="任务七：观察模型在训练集和验证集上的表现"></a>任务七：观察模型在训练集和验证集上的表现</h3><p>用matplotlib(plt)里的方法生成图表，观察随着迭代进行，模型损失和准确率的变化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#子图1：损失</span>p1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_cost<span class="token punctuation">)</span>p1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_cost<span class="token punctuation">)</span>p1<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">)</span><span class="token comment">#子图2，准确率</span>p2 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span>p2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>test_acc<span class="token punctuation">)</span>p2<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br><img src="/imgs/mlhw2/output_20_0.png" alt="png"><br>​    </p><h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><p><img src="/imgs/mlhw2/2.png" alt="2.png"></p><p>由于训练过程有一定随机性，训练结果可能存在不同</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Logistic回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELBO</title>
      <link href="/2023/10/26/ELBO/"/>
      <url>/2023/10/26/ELBO/</url>
      
        <content type="html"><![CDATA[<h2 id="The-Evidence-Lower-Bound"><a href="#The-Evidence-Lower-Bound" class="headerlink" title="The Evidence Lower Bound"></a>The Evidence Lower Bound</h2><p>ELBO是证据下界的简称，证据指数据或可观测变量的概率密度</p><h3 id="preliminaries"><a href="#preliminaries" class="headerlink" title="preliminaries"></a>preliminaries</h3><blockquote><p>Let $\mathbf{x}&#x3D;\mathrm x_{1:n}$ be a set of observed variables and $\mathbf{z}&#x3D;\mathrm z_{1:m}$ be a set of latent variables, with joint density $\mathrm{p(z,x)}$. </p></blockquote><p>the <strong>conditional density</strong> is<br>$$<br>\mathrm{p(z|x)&#x3D;\frac{p(z,x)}{p(x)}}<br>$$</p><blockquote><p>The denominator contains the marginal density of the observations, also called the <em>evidence</em>.We calculate it by marginalizing out the latent variables from the joint density</p></blockquote><p>$$<br>\mathrm{p(x)&#x3D;\int p(\mathbf{z,x})}d\mathbf{z}<br>$$</p><p>计算上述$\mathrm{p(x)}$很困难</p><h3 id="变分推断variational-inference"><a href="#变分推断variational-inference" class="headerlink" title="变分推断variational inference"></a>变分推断variational inference</h3><p>变分推断是为了近似难以计算的潜在变量在观测变量下的条件概率</p><blockquote><p>Rather than use sampling, the main idea behind variational inference is to <strong>use optimization.</strong></p></blockquote><blockquote><p> we specify a family $\mathscr{Q}$ of densities over the latent variables. Each $q(\mathbf{z}) \in \mathscr{Q}$ is a candidate approximation to the exact conditional. Our goal is to find the best candidate, the one closest in KL divergence to the exact conditional.</p></blockquote><p>也就是说，变分推断的任务就是优化$q(\mathbf{z})$，使得$q(\mathbf{z})$与$\mathrm{p(z|x)}$的KL散度最小<br>$$<br>q^*(\mathbf{z})&#x3D;\arg \min_{q(\mathbf{z}) \in \mathscr{Q}} kl(q(\mathbf{z})||\mathrm{p(z|x)})<br>$$</p><h4 id="KL散度"><a href="#KL散度" class="headerlink" title="KL散度"></a>KL散度</h4><p>$$<br>kl(q(\mathbf{z})||\mathrm{p(z|x)})&#x3D;\mathbb{E}[\log q(\mathbf{z})]-\mathbb{E}[\log \mathrm{p(z|x)}]<br>$$</p><p>根据上面的式子可以改写为<br>$$<br>kl(q(\mathbf{z})||\mathrm{p(\mathbf{z|x})})&#x3D;\mathbb{E}[\log q(\mathbf{z})]-\mathbb{E}[\log \mathrm{p(\mathbf{z,x})}]+\log\mathrm{p(\mathbf{x})}<br>$$<br>由于无法直接计算KL，而KL散度需要大于0，因此设置elbo<br>$$<br>elbo(q)&#x3D;\mathbb{E}[\log \mathrm{p(\mathbf{z,x})}-\mathbb{E}[\log q(\mathbf{z})]<br>$$</p><p>$$<br>&#x3D;\mathbb{E}[\log \mathrm{p(\mathbf{z})}]+\mathbb{E}[\log \mathrm{p(\mathbf{x|z})}]-\mathbb{E}[\log q(\mathbf{z})]<br>$$</p><p>$$<br>&#x3D;\mathbb{E}[\log \mathrm{p(\mathbf{x|z})}]-kl(q(\mathbf{z})||p(\mathbf{z}))<br>$$</p><p>$$<br>elbo&#x3D;-kl+\log\mathrm{p(\mathbf{x})}<br>$$</p><p>$$<br>\log p(\mathrm{x})&#x3D;kl(q(\mathbf{z})||\mathrm{p(z|x)})+elbo(q) \ge elbo(q)<br>$$</p><p>上式就说明了为什么叫elbo，elbo就是证据$\log p(\mathrm{x})$的下界</p><p>任务到了最后就是求<br>$$<br>q^*(\mathbf{z})&#x3D;\arg \min_{q(\mathbf{z}) \in \mathscr{Q}} kl(q(\mathbf{z})||\mathrm{p(z|x)})<br>$$</p><p>$$<br>&#x3D;\arg \max_{q(\mathbf{z}) \in \mathscr{Q}} elbo(q)<br>$$</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.tandfonline.com/doi/full/10.1080/01621459.2017.1285773">Variational Inference: A Review for Statisticians</a></p><p><a href="https://staff.fnwi.uva.nl/m.welling/wp-content/uploads/papers/cvdp-v6.pdf">Collapsed variational Dirichlet process mixture models</a></p><p><a href="https://blog.csdn.net/qy20115549/article/details/93074519">变分推断中的ELBO(证据下界)</a></p><p><a href="https://zhuanlan.zhihu.com/p/385341342">变分推断之傻瓜式推导ELBO</a></p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
            <tag> ELBO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息与网络安全笔记</title>
      <link href="/2023/10/21/%E4%BF%A1%E6%81%AF%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/21/%E4%BF%A1%E6%81%AF%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><h3 id="网络安全威胁"><a href="#网络安全威胁" class="headerlink" title="网络安全威胁"></a>网络安全威胁</h3><ul><li>恶意软件</li><li>安全性破坏</li><li>DoS攻击</li></ul><h3 id="信息与网络安全目标"><a href="#信息与网络安全目标" class="headerlink" title="信息与网络安全目标"></a>信息与网络安全目标</h3><p>三个关键目标：</p><ul><li>机密性<ul><li>数据机密性</li><li>隐私性</li></ul></li><li>完整性<ul><li>数据完整性</li><li>系统完整性</li></ul></li><li>可用性</li></ul><h3 id="TCP-x2F-IP安全服务模型"><a href="#TCP-x2F-IP安全服务模型" class="headerlink" title="TCP&#x2F;IP安全服务模型"></a>TCP&#x2F;IP安全服务模型</h3><p><img src="/imgs/iis/1.png" alt="image-20230915101220938"></p><h3 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h3><ul><li>主动攻击<ul><li>伪装</li><li>重放</li><li>篡改</li><li>拒绝服务</li></ul></li><li>被动攻击<ul><li>窃听攻击</li><li>流量分析</li></ul></li></ul><h3 id="五类安全服务"><a href="#五类安全服务" class="headerlink" title="五类安全服务"></a>五类安全服务</h3><ul><li>认证</li><li>访问控制</li><li>保密</li><li>完整性</li><li>不可否认</li></ul><h3 id="八类安全机制"><a href="#八类安全机制" class="headerlink" title="八类安全机制"></a>八类安全机制</h3><p><img src="/imgs/iis/2.png" alt="image-20230915102412545"></p><h2 id="数据加密技术"><a href="#数据加密技术" class="headerlink" title="数据加密技术"></a>数据加密技术</h2><h3 id="数据加密技术概述"><a href="#数据加密技术概述" class="headerlink" title="数据加密技术概述"></a>数据加密技术概述</h3><ul><li>密码学</li><li>加密系统</li><li>密码分析</li><li>加密</li><li>明文</li><li>密文</li><li>密钥</li></ul><h4 id="对称密码和公钥密码"><a href="#对称密码和公钥密码" class="headerlink" title="对称密码和公钥密码"></a>对称密码和公钥密码</h4><ul><li>对称密码<ul><li>密钥：加密和解密密钥相同或可相互推导</li><li>优点：加密速度快</li><li>缺点：密钥管理复杂</li></ul></li><li>公钥密码<ul><li>密钥：公钥与私钥不同且难以用私钥推导公钥</li><li>优点：密钥管理简单</li><li>缺点：加密速度慢</li></ul></li></ul><h4 id="对称密钥"><a href="#对称密钥" class="headerlink" title="对称密钥"></a>对称密钥</h4><p>加密和解密使用的是同样的密钥</p><h4 id="公开密钥"><a href="#公开密钥" class="headerlink" title="公开密钥"></a>公开密钥</h4><ul><li>加密和解密的密钥不同</li><li>密钥分为公钥、私钥</li></ul><h4 id="密码学基本原则之一"><a href="#密码学基本原则之一" class="headerlink" title="密码学基本原则之一"></a>密码学基本原则之一</h4><ul><li>Kerckhoffs原则：密码系统是安全的，表明可以公开除了密钥之外的整个密码系统的一切内容</li><li>密码系统的内部工作原理对于攻击者完全公开，唯一秘密是密钥</li></ul><p>维护密钥成本低于维护密码算法</p><h3 id="经典加密"><a href="#经典加密" class="headerlink" title="经典加密"></a>经典加密</h3><h4 id="简单替换密码"><a href="#简单替换密码" class="headerlink" title="简单替换密码"></a>简单替换密码</h4><p>改进：非常规字母表替换</p><p>破解方法一：穷举式密钥检索</p><p>破解方法二：统计字母频率</p><h4 id="双换位密码"><a href="#双换位密码" class="headerlink" title="双换位密码"></a>双换位密码</h4><h4 id="一次性密码本"><a href="#一次性密码本" class="headerlink" title="一次性密码本"></a>一次性密码本</h4><p>$明文 \oplus 密钥&#x3D;密文$</p><h3 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h3><h4 id="对称密钥加密的分类"><a href="#对称密钥加密的分类" class="headerlink" title="对称密钥加密的分类"></a>对称密钥加密的分类</h4><ul><li>流密码加密—类似于一次性密码本<ul><li>密钥较短</li><li>密钥延展成长二进制码流</li><li>类似一次性密码本</li></ul></li><li>分组密码加密—类似于电报密码本<ul><li>密钥决定密码本的选择</li><li>电报密码本的电子版本</li><li>扰乱和扩散的两个原则</li></ul></li></ul><h4 id="流密码加密"><a href="#流密码加密" class="headerlink" title="流密码加密"></a>流密码加密</h4><p><img src="/imgs/iis/3.png" alt="image-20231008111905960"></p><p>用n位长度的密钥K，并将其延展成长长的密钥流，然后该密钥流与明文P进行异或运算，生成密文C。接收方再用同样的方法解密</p><ul><li>A5&#x2F;1算法<ul><li>A5 &#x2F; 1是用于在GSM蜂窝电话标准中提供无线通信隐私的流密码算法。</li><li>A5 &#x2F; 1算法使用三个线性反馈移位寄存器：<ul><li>X: 19 bits (x0,x1,x2, …,x18)</li><li>Y: 22 bits (y0,y1,y2, …,y21)</li><li>Z: 23 bits (z0,z1,z2, …,z22)</li></ul></li><li>A5&#x2F;1算法的密钥K共64位，用于三个线性反馈移位寄存器的初始填充，充当三个寄存器的初始值</li><li>三个寄存器用密钥填充之后，就可以开始滚动生成密钥流了。每个回合可以拆分为三个步骤：<ul><li>反馈多项式（Feedback Polynomial）<ul><li>这里使用的是择多原则，三个寄存器中各选择一个钟控信号，19位寄存器中为第8位，22位、23位寄存器中皆为第10位。</li><li>根据这三个钟控信号的取值，必定有0或1数量居多，居多的寄存器需要进行位移操作。</li></ul></li><li>位移<ul><li>$m&#x3D;maj(x_8,y_{10},z_{10})$</li><li>需要移位的寄存器向右移位，将t填入空出来的第0位</li><li>if $x_8&#x3D;m$，X右移，$t&#x3D;x_{13} \oplus x_{16} \oplus x_{17} \oplus x_{18}$</li><li>if $y_{10}&#x3D;m$，Y右移，$t&#x3D;y_{20} \oplus y_{21}$</li><li>if $z_{10}&#x3D;m$，Z右移，$t&#x3D;z_7 \oplus z_{20} \oplus z_{21} \oplus z_{22}$</li></ul></li><li>取KEY<ul><li>取三个寄存器的最后一位，也就是19位、22位、23位，进行异或操作，得到的结果为这一轮密钥流的一位:$Keystream bit&#x3D;x_{18} \oplus y_{21} \oplus z_{22}$</li></ul></li></ul></li></ul></li></ul><h4 id="分组密码加密"><a href="#分组密码加密" class="headerlink" title="分组密码加密"></a>分组密码加密</h4><ul><li>将明文分割成<strong>固定长度</strong>的分组，并生成固定长度的密文分组；</li><li>密文都是通过“用函数F对明文进行若干轮的<strong>迭代</strong>计算”得到的；</li><li>函数F：依赖于前一轮计算的输出和密钥K，称为<strong>轮函数</strong>；</li><li>一般用<strong>软件</strong>实现</li></ul><h5 id="Feistel密码"><a href="#Feistel密码" class="headerlink" title="Feistel密码"></a>Feistel密码</h5><ul><li>明文分组P被分割成左右两部分，$P&#x3D;(L_0,R_0)$</li><li>对于每一轮i，i&#x3D;1,2,3,…,n<ul><li>$L_i&#x3D;R_{i-1}$</li><li>$R_i&#x3D;L_{i-1} \oplus F(R_{i-1},K_i)$</li></ul></li><li>密文：$C&#x3D;(L_n,R_n)$</li><li>解密<ul><li>$C&#x3D;(L_n,R_n)$</li><li>$R_{i-1}&#x3D;L_i$</li><li>$L_{i-1}&#x3D;R_i \oplus F(R_{i-1},K_i)$</li><li>$P&#x3D;(L_0,R_0)$</li></ul></li></ul><p><img src="/imgs/iis/4.png" alt="image-20231016194440635"></p><h5 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h5><ul><li><p>1970年代</p></li><li><p>基于IBM的Lucifer 密码</p></li><li><p>其争议性</p><ul><li><p>NSA密码参与；</p></li><li><p>设计过程保密；</p></li><li><p>密钥长度从128位降到56位；</p></li><li><p>对Lucifer 进行了一些修改。</p></li></ul></li></ul><p>原理</p><ul><li>使用一个56 位的密钥以及附加的8 位奇偶校验位，产生最大64 位的分组大小；</li><li>使用Feistel技术，将加密的文本块分成两半;</li><li>用子密钥对其中一半应用循环功能，然后将输出与另一半进行“异或”运算；</li><li>接着交换这两半，这一过程会继续下去，但最后一个循环不交换。</li><li>DES 使用16 个循环，使用异或，置换，代换，移位操作四种基本运算。</li><li>S-box起到重要作用，每一个S-box将6个二进制位映射到4个二进制位。</li></ul><p><img src="/imgs/iis/5.png" alt="image-20231016194723854"></p><p><img src="/imgs/iis/6.png" alt="image-20231016195055394"></p><p><img src="/imgs/iis/7.png" alt="image-20231016195201337"></p><p><img src="/imgs/iis/8.png" alt="image-20231016195247933"></p><h5 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h5><ul><li>替代DES;</li><li>迭代式分组加密;</li><li>没有采用Feistel结构;</li><li>分组大小为128位;</li><li>三种密钥长度：128，192，256</li><li>依照密钥长度不同，运算轮次从10轮至14轮不等</li><li>每轮包含4个函数，分为3个层次<ul><li>ByteSub(非线性层)</li><li>ShiftRow(线性混合层)</li><li>MixColumn(非线性层)</li><li>AddRoundKey(密钥添加层)</li></ul></li></ul><p><img src="/imgs/iis/9.png" alt="image-20231016201355735"></p><ul><li>行移位</li></ul><p><img src="/imgs/iis/10.png" alt="image-20231016201510542"></p><p><img src="/imgs/iis/11.png" alt="image-20231016201604209"></p><ul><li>轮密钥合并</li></ul><p><img src="/imgs/iis/12.png" alt="image-20231016201635295"></p><h3 id="公开密钥加密"><a href="#公开密钥加密" class="headerlink" title="公开密钥加密"></a>公开密钥加密</h3><p>对称密钥带来的问题：</p><ul><li>密钥不能公开；</li><li>如何安全地交换密钥</li><li>如何确认发送者身份</li></ul><p>需要解决：</p><ul><li>可靠密钥的传输通道问题</li><li>如何提供与手写签名等效的认证体系</li></ul><h4 id="公钥加密算法"><a href="#公钥加密算法" class="headerlink" title="公钥加密算法"></a>公钥加密算法</h4><ul><li>公钥加密算法使用两把完全不同但又是完全匹配的一对钥匙—公钥和私钥。</li><li>加密明文时采用公钥加密。</li><li>解密密文时使用私钥才能完成，只有使用匹配的一对公钥和私钥，才能完成加密和解密过程。</li></ul><p><strong>公开的密钥为公钥</strong></p><p><strong>不公开的密钥为私钥</strong></p><p><img src="/imgs/iis/13.png" alt="image-20231016202349985"></p><h5 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h5><ul><li>两个密钥：<ul><li>公钥：可为任何人知道，用来加密消息或者验证签名;</li><li>私钥：只有接收者本人知道，用来解密消息和签名。</li></ul></li><li>不对称性：<ul><li>用来加密消息的密钥不能用来解密消息</li></ul></li></ul><p><img src="/imgs/iis/14.png" alt="image-20231016202822051"></p><h5 id="公钥密码系统的加密原理"><a href="#公钥密码系统的加密原理" class="headerlink" title="公钥密码系统的加密原理"></a>公钥密码系统的加密原理</h5><ul><li>每个通信实体有一对密钥（公钥，私钥）。公钥公开，用于加密和验证签名，私钥保密，用作解密和签名</li><li>A向B 发送消息，用B的公钥加密</li><li>B收到密文后，用自己的私钥解密</li><li>任何人向B发送信息都可以使用同一个密钥（B的公钥）加密,没有其他人可以得到B的私钥，所以只有B可以解密</li></ul><p><img src="/imgs/iis/15.png" alt="image-20231016210442978"></p><h4 id="通讯方式"><a href="#通讯方式" class="headerlink" title="通讯方式"></a>通讯方式</h4><h5 id="第一回合"><a href="#第一回合" class="headerlink" title="第一回合"></a>第一回合</h5><ul><li>正常情况<ul><li>“客户”-&gt;“服务器”：你好；</li><li>“服务器”-&gt;“客户”：你好，我是服务器；</li><li>“客户”-&gt;“服务器”：我的密码是……</li></ul></li><li>黑客入侵<ul><li>“客户”-&gt;“服务器”：你好；</li><li>黑客在“客户”和“服务器”之间的某个路由器上截获“客户”发给服务器的信息，然后自己冒充“服务器”；</li><li>“黑客”-&gt;“客户”：你好，我是服务器；</li><li>“客户”-&gt;“黑客”：我的密码是……</li></ul></li></ul><h5 id="第二回合"><a href="#第二回合" class="headerlink" title="第二回合"></a>第二回合</h5><ul><li>“客户”-&gt;“服务器”：你好；</li><li>“黑客”-&gt;“客户”：你好，我是服务器；</li><li>“客户”-&gt;“黑客”：向我证明你就是服务器；</li><li>“黑客”-&gt;“客户”：你好，我是服务器{你好，我是服务器}[？？？|RSA]。</li><li>黑客无法冒充，因为他不知道服务器的私钥，无法加密某个字符串后发送给客户去验证。</li><li>“客户”：有内鬼，终止交易！</li></ul><h5 id="第三回合"><a href="#第三回合" class="headerlink" title="第三回合"></a>第三回合</h5><ul><li>“客户”-&gt;“服务器”：你好</li><li>“服务器”-&gt;“客户”：你好，我是服务器</li><li>“客户”-&gt;“服务器”：向我证明你就是服务器</li><li>“服务器”-&gt;“客户”：你好，我是服务器{你好，我是服务器}[私钥|RSA]</li><li>“客户”-&gt;“服务器”：{我的帐号是aaa，密码是123，把我的余额的信息发给我看看}[公钥|RSA]</li><li>“服务器”-&gt;“客户”：{你的余额是100元}[私钥|RSA]</li></ul><h5 id="第四回合"><a href="#第四回合" class="headerlink" title="第四回合"></a>第四回合</h5><ul><li>“客户”-&gt;“服务器”：你好</li><li>“服务器”-&gt;“客户”：你好，我是服务器</li><li>“客户”-&gt;“服务器”：向我证明你就是服务器</li><li>“服务器”-&gt;“客户”：你好，我是服务器{你好，我是服务器}[私钥|RSA]</li><li>“客户”-&gt;“服务器”：{我们后面的通信过程，用对称加密来进行，这里是对称加密算法和密钥}[公钥|RSA]</li><li>&#x2F;&#x2F;红色字体的部分是对称加密的算法和密钥的具体内容，客户把它们发送给服务器。</li><li>“服务器”-&gt;“客户”：{OK，收到！}[密钥|对称加密算法]</li><li>“客户”-&gt;“服务器”：{我的帐号是aaa，密码是123，把我的余额的信息发给我看看}[密钥|对称加密算法]</li><li>“服务器”-&gt;“客户”：{你的余额是100元}[密钥|对称加密算法]</li></ul><h4 id="补充数学概念"><a href="#补充数学概念" class="headerlink" title="补充数学概念"></a>补充数学概念</h4><h5 id="同余式"><a href="#同余式" class="headerlink" title="同余式"></a>同余式</h5><p>同余式是数论的基本概念之一，设m是给定的一个正整数，a、b是整数，若满足$m|(a-b)$，则称a与b对模m同余，记为$a \equiv b(\mod m)$，这个式子称为模m的同余式。</p><p>$m|(a-b)$表示m能够整除(a-b)，即$a \mod m&#x3D;b \mod m$</p><h5 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h5><p>欧拉函数$\varphi (n)$是小于等于n的正整数中与n互质的数的个数</p><p>对于任意互质的a和n，有$a^{\varphi (n)}\equiv 1(\mod n)$，即$a^{\varphi (n)} \mod n &#x3D;1$</p><p>如果n是质数，则$\varphi (n) &#x3D;n-1$，因为质数与小于它的每一个正整数都互质</p><p>如果$n&#x3D;p*q$，而p和q互质，则：</p><p>$\varphi (n)&#x3D;\varphi(p*q)&#x3D;\varphi(p)*\varphi(q)&#x3D;(p-1)(q-1)$</p><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><ul><li><p>生成公钥&#x2F;私钥对</p><ol><li>取两个大素数p, q ($p \neq q$), 保密;</li><li>计算$n&#x3D;p*q$，公开n;</li><li>计算欧拉函数$\varphi (n)&#x3D;(p-1)(q-1)$；</li><li>随机选择整数e($1 \lt e \lt \varphi(n)$)，使得e和$\varphi(n)$互质即两个数的最大公约数为1；</li><li>计算d,使得$ed&#x3D; 1(\mod \varphi(n))$，也就是$ed&#x3D;k\varphi(n)+1$；</li><li>公开$(e,n)&#x3D;(5,119)$；</li><li>将d保密，丢弃p,q</li></ol><p>$$<br>m^{k(p-1)(q-1)+1} \equiv m(\mod n)<br>$$</p><p>$$<br>m^{ed} \equiv m(\mod n)<br>$$</p></li><li><p>加密消息$m$</p><ul><li>获取接收者的公钥：$K_u&#x3D;\lbrace e,n \rbrace$</li><li>计算：$c&#x3D;m^e \mod n(0 \le m \le n)$</li></ul></li><li><p>解密密文$c$</p><ul><li>使用自己的私钥：$K_R&#x3D;\lbrace d,n \rbrace$</li><li>计算：$m&#x3D;c^d \mod n$</li></ul></li></ul><h4 id="Diffie-Hellman密钥交换方案"><a href="#Diffie-Hellman密钥交换方案" class="headerlink" title="Diffie Hellman密钥交换方案"></a>Diffie Hellman密钥交换方案</h4><p>使两个用户安全地交换一个密钥以便用于以后的报文加密，这个算法本身限于<strong>密钥交换</strong>的用途</p><p>在Diffie-Hellman密钥交换算法中单项函数是模指数运算。它的逆过程是离散对数问题，其Diffie-Hellman算法的保密性基于求mod P解离散对数问题的困难</p><h5 id="本原元"><a href="#本原元" class="headerlink" title="本原元"></a>本原元</h5><p>定义素数g的本原元（primitive root）为其乘方能够产生从1到g-1的所有整数的数。也就是说，如果n是素数g的本原元，那么有下列数字：<br>$$<br>n \mod g,n^2 \mod g,n^{g-1} \mod g<br>$$<br>这g−1个数字互不相同，而且包含了从1到g−1的所有整数</p><h5 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a>离散对数</h5><p>对于任何小于g的整数a和素数g的本原元n来说，能够找到唯一的指数i满足：<br>$$<br>a&#x3D;b^i \mod g ,0 \le i \le (g-1)<br>$$<br>称指数i为a对于基数n和运算mod g 的离散对数</p><h5 id="密钥原理"><a href="#密钥原理" class="headerlink" title="密钥原理"></a>密钥原理</h5><p>设$g$是一个质数，$n$是$g$的本原元，要求$n$和$g$是公开的，则网络中的某一用户可以任选一个小于$g$的整数$a$作为秘密密钥</p><p><img src="/imgs/iis/16.png" alt="image-20231020104322307"></p><h4 id="椭圆曲线加密ECC"><a href="#椭圆曲线加密ECC" class="headerlink" title="椭圆曲线加密ECC"></a>椭圆曲线加密ECC</h4><h5 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h5><p>已知椭圆曲线群<br>$$<br>E_p(a,b):y^2&#x3D;x^3+ax+b,4a^3+27b^2 \neq 0<br>$$<br><strong>加法</strong></p><p>过曲线上的两点A、B画一条直线，找到直线与椭圆曲线的交点，交点关于x轴对称位置的点，定义为A+B，即为加法。</p><p><img src="/imgs/iis/17.png" alt="image-20231020110318344"></p><p><strong>取反</strong></p><p>将A关于x轴对称位置的点定义为-A，即椭圆曲线的正负取反运算</p><p><img src="/imgs/iis/18.png" alt="image-20231020110352306"></p><p><strong>二倍运算</strong></p><p>将过椭圆曲线在A点的切线，与椭圆曲线的交点，交点关于x轴对称位置的点，定义为A + A，即2A，即为二倍运算。</p><p><img src="/imgs/iis/19.png" alt="image-20231020110617599"></p><p><strong>无穷远点</strong></p><p>如果将A与-A相加，过A与-A的直线平行于y轴，可以认为直线与椭圆曲线相交于无穷远点</p><p><strong>有限域上的椭圆曲线</strong></p><p>已知有限域$GF(p)(p&#x3D;q^n,q&gt;3)$上的椭圆曲线群：<br>$$<br>E_p(a,b):y^2&#x3D;x^3+ax+b(\mod p)<br>$$<br>有限域GF(p)指给定某个质数p，由0、1、2……p-1共p个元素组成的整数集合中定义的加减乘除运算</p><p><strong>有限域$GF(p)$</strong></p><p>Fp中有p（p为质数）个元素0,1,2,…, p-2,p-1</p><p>加法：$a+b \equiv c(\mod p)$</p><p>乘法：$a \times b \equiv c(\mod p)$</p><p>除法：$a&#x2F;b \equiv c(\mod p)$</p><p>Fp单位元是1，零元是0</p><p>满足交换律、结合律、分配律</p><h5 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h5><p>在定义了这一系列运算之后，我们可以很容易的计算出给定的G点对应的2G，3G等点。即：当给定G点时，已知x，求xG点并不困难。反之，已知xG点，求x则非常困难。此即为椭圆曲线加密算法背后的数学原理。</p><h5 id="计算及求解"><a href="#计算及求解" class="headerlink" title="计算及求解"></a>计算及求解</h5><p>计算椭圆曲线$y^2&#x3D;x^3+ax+b(\mod p)$两点P，Q的和<br>$$<br>\left{\begin{array}{c}<br>\mathrm{y}^2&#x3D;\mathrm{x}^3+\mathrm{ax}+\mathrm{b}(\bmod \mathrm{p}) \<br>\mathrm{y}-\mathrm{y}<em>{\mathrm{p}}&#x3D;k\left(x-x_p\right) \<br>k&#x3D;\frac{y_q-y_p}{x_q-x_p}<br>\end{array}\right.<br>$$<br>计算过椭圆曲线点P的二倍点R<br>$$<br>\left{\begin{array}{c}<br>x_r&#x3D;\left(\frac{3 \mathrm{x}</em>{\mathrm{p}}^2+\mathrm{a}}{2 \mathrm{y}<em>{\mathrm{p}}}\right)^2-2 x_p \<br>y_r&#x3D;\left(\frac{3 \mathrm{x}</em>{\mathrm{p}}^2+\mathrm{a}}{2 \mathrm{y}_{\mathrm{p}}}\right)\left(x_p-x_r\right)-y_p<br>\end{array}\right.<br>$$</p><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ul><li>约定：选取$E_p(a,b)$和生成元$G$，公开</li><li>密钥的生成：选取私钥d,公钥为$e&#x3D;dG$</li></ul><h5 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h5><ul><li>将明文消息m通过编码嵌入到曲线上的点Pm</li><li>随机选取数字k，将密文$C_m&#x3D;\lbrace kG,Pm+ke \rbrace$发送</li></ul><h5 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h5><ul><li>收到密文$C_m&#x3D;\lbrace kG,Pm+ke \rbrace$</li><li>利用自己的密钥d，计算$(Pm+ke)-dkG&#x3D;Pm$</li></ul><p><img src="/imgs/iis/20.png" alt="image-20231020112343650"></p><h2 id="消息认证及数字签名"><a href="#消息认证及数字签名" class="headerlink" title="消息认证及数字签名"></a>消息认证及数字签名</h2><p>消息认证是一种允许通信者验证所收消息是否可信的措施，用于确认：</p><ul><li>内容是否篡改</li><li>来源是否可信</li></ul><h3 id="消息认证方法"><a href="#消息认证方法" class="headerlink" title="消息认证方法"></a>消息认证方法</h3><h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><ul><li>散列函数是一种创建数字“指纹”的方法。它把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来</li><li>与消息认证码（MAC）不同的是散列函数不需要密钥输入</li></ul><p><strong>变长消息-&gt;散列函数-&gt;定长摘要</strong></p><h5 id="单向散列函数消息认证的三种方式"><a href="#单向散列函数消息认证的三种方式" class="headerlink" title="单向散列函数消息认证的三种方式"></a>单向散列函数消息认证的三种方式</h5><h6 id="使用传统加密"><a href="#使用传统加密" class="headerlink" title="使用传统加密"></a>使用传统加密</h6><p><img src="/imgs/iis/21.png" alt="image-20231020113334053"></p><h6 id="使用公钥加密"><a href="#使用公钥加密" class="headerlink" title="使用公钥加密"></a>使用公钥加密</h6><p><img src="/imgs/iis/22.png" alt="image-20231020113407576"></p><h6 id="使用秘密值"><a href="#使用秘密值" class="headerlink" title="使用秘密值"></a>使用秘密值</h6><p><img src="/imgs/iis/23.png" alt="image-20231020113609124"></p><ul><li><p>加密的散列函数，满足以下所有条件</p><ul><li>抗弱碰撞性：给定x和h(x)，要想找到任意y，满足$y \neq x$，并且h(y)&#x3D;h(x)，这是不可能的</li><li>抗强碰撞性：要想找到任意的x和y，使得$x \neq y$，并且h(y)&#x3D;h(x)，这是不可能的</li></ul></li><li><p>散列函数的工作模式</p><p><img src="/imgs/iis/24.png" alt="image-20231021171814550"></p></li><li><p>主流算法：MD5,SHA-1,SHA-2,Tiger Hash</p></li></ul><h5 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h5><p><img src="/imgs/iis/25.png" alt="image-20231021171938372"></p><p>MD5算法以一个任意长度的消息（M）作为输入，生成128位（16字节）的消息摘要作为输出，输入消息是按512位的分组处理的</p><p><img src="/imgs/iis/26.png" alt="image-20231021172013971"></p><h4 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h4><p>消息验证码是利用私钥产生的一小块数据，将其附到消息上，用来进行消息验证</p><p>消息认证码和散列函数区别：散列函数不需要加密，而<strong>消息认证码是需要加密的</strong></p><p>假设两个通信实体（如A和B）共享一个公共密钥Kab</p><ul><li>当A发消息M给B时，A计算消息认证码$MAC&#x3D;F(K_{ab},M)$，并将MAC和消息一起传送给B。</li><li>B对接收到的消息使用密钥Kab做相同运算，生成新的MAC。比较收到的MAC和计算得到的MAC</li></ul><p><img src="/imgs/iis/27.png" alt="image-20231021174421706"></p><p>假设只有接收者和发送者知道密钥，若收到的认证码与计算得到的认证码相吻合，则可得出下列结论：</p><ol><li>接收者能够确认消息没有被篡改</li><li>接收者能够确保消息来自合法的发送者</li><li>如果消息中包含序列号，而攻击者不能成功地修改序列号，那么接收者就可以确认消息的正确序列</li></ol><h5 id="基于散列函数消息认证码-HMAC"><a href="#基于散列函数消息认证码-HMAC" class="headerlink" title="基于散列函数消息认证码-HMAC"></a>基于散列函数消息认证码-HMAC</h5><ul><li>不改动就可以使用散列函数</li><li>嵌入式散列函数要有很好的可移植性</li><li>保持散列函数原有性能，不发生显著退化</li><li>使用和处理密钥简单</li></ul><p><img src="/imgs/iis/29.png" alt="image-20231021184403747"><br>$$<br>HMAC(K,M)&#x3D;H[(K^+ \oplus opad)||H[(K^+ \oplus opad)||M]]<br>$$<br>算法：</p><ol><li>在K的左端追加0，构成b比特的字符串$K^+$；</li><li>Ipad与$K^+$进行XOR生成b比特的分组$S_i$；</li><li>将M追加在$S_i$；</li><li>将H应用于步骤(3)所产生的数据流；</li><li>opad与$K^+$进行XOR生成b比特的分组$S_o$；</li><li>将步骤(4)产生的散列结果追加在$S_o$上；</li><li>将H应用于步骤6产生的数据流，输出结果；</li></ol><h5 id="基于分组密码的MAC—CMAC"><a href="#基于分组密码的MAC—CMAC" class="headerlink" title="基于分组密码的MAC—CMAC"></a>基于分组密码的MAC—CMAC</h5><ul><li><p>当消息长度是分组长度的整数倍时</p><p><img src="/imgs/iis/30.png" alt="image-20231021185226675"></p></li><li><p>当消息长度不是分组长度的整数倍时</p><p><img src="/imgs/iis/31.png" alt="image-20231021185259659"></p></li></ul><p><img src="/imgs/iis/32.png" alt="image-20231021185416402"></p><h3 id="数字签名技术"><a href="#数字签名技术" class="headerlink" title="数字签名技术"></a>数字签名技术</h3><p>数字签名是<strong>只有信息的发送者才能产生的别人无法伪造的一段数字串</strong>，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。它是一种类似写在纸上的普通的物理签名，但是在使用了公钥加密领域的技术来实现的，用于鉴别数字信息的方法</p><p>要求：</p><ul><li>发方发出签名后的消息，就不能否认所签消息</li><li>收方能确认或证实发方的签字，但不能伪造</li><li>收方对已收到的消息不能否认</li><li>第三者可以确认收发双方之间的消息传送，但不能伪造这一过程</li></ul><p>应具有：</p><ul><li>必须能够验证签名者及其签名的日期时间</li><li>必须能够认证被签名消息的内容</li><li>签名必须能够由第三方验证，以解决争议</li></ul><p>两类数字签名函数</p><ul><li>直接数字签名<ul><li>仅涉及通信双方</li><li>有效性依赖发方密钥的安全性</li></ul></li><li>仲裁数字签名<ul><li>使用第三方认证</li></ul></li></ul><p>两种加密方法：</p><p><strong>利用发送方的私钥加密</strong></p><p><img src="/imgs/iis/33.png" alt="image-20231021190603255"></p><p><img src="/imgs/iis/35.png" alt="image-20231021190751442"></p><p><strong>利用发送方的私钥报文散列码加密</strong></p><p><img src="/imgs/iis/34.png" alt="image-20231021190653079"></p><p><img src="/imgs/iis/36.png" alt="image-20231021190822679"></p><h2 id="密钥管理技术"><a href="#密钥管理技术" class="headerlink" title="密钥管理技术"></a>密钥管理技术</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>密钥长度</strong>与时间代价</p><p><strong>密钥生成</strong></p><p>方式一：用户自行设置，攻击者可以使用字典攻击</p><p>方式二：随机密钥，</p><p><strong>密钥使用</strong></p><p>使用软件加密</p><p>使用硬件加密</p><h3 id="对称密钥的管理"><a href="#对称密钥的管理" class="headerlink" title="对称密钥的管理"></a>对称密钥的管理</h3><p><strong>密钥分发技术</strong></p><p>传递密钥给希望交换数据的双方，不允许其他人看见密钥的方法</p><p>任何密码系统的强度取决于<strong>密钥分发技术</strong></p><p>分发技术：</p><ul><li><p>A能够选定密钥并通过物理方法传递给B</p></li><li><p>第三方C可以选定密钥并通过物理方法传递给A和B</p></li><li><p>如果A和B不久之前使用过一个密钥，一方能够把使用旧密钥加密的新密钥传递给另一方</p></li><li><p>A和B各自有一个到达第三方的加密链路，C能够在加密链路上传递密钥给A和B</p><p>需要两种密钥：</p><ul><li>会话密钥，一次性会话密钥加密，会话结束销毁</li><li>永久密钥，用于分发会话密钥</li></ul><p>需要一个<strong>密钥分发中心KDC</strong></p><ul><li>KDC在密钥分配过程中充当可信任的第三方</li><li>KDC保存有每个用户和KDC之间共享的唯一的密钥，以便进行分配</li><li>KDC按照需要生成各对端用户之间的会话密钥，并由用户和KDC共享的密钥进行加密，通过安全协议将会话密钥安全地传送给需要进行通信的双方</li></ul><p>KDC对称密钥分配方案</p><p>A与B双方在KDC中已保存了各自的基本密钥KA和KB</p><p>当双方进行通信前，应首先获得双方通信的会话密钥KS</p><p><img src="/imgs/iis/37.png" alt="image-20231027111631756"></p></li></ul><h3 id="公开密钥分配中心"><a href="#公开密钥分配中心" class="headerlink" title="公开密钥分配中心"></a>公开密钥分配中心</h3><h4 id="公开密钥分配方案"><a href="#公开密钥分配方案" class="headerlink" title="公开密钥分配方案"></a>公开密钥分配方案</h4><ul><li>所有用户的公开密钥由KDC统一管理</li><li>用户只需保存自己的秘密密钥和KDC的公开密钥</li><li>用户可通过KDC获得任何其他用户的公开密钥</li></ul><p><img src="/imgs/iis/38.png" alt="image-20231027112214534"></p><h3 id="公钥的密钥管理"><a href="#公钥的密钥管理" class="headerlink" title="公钥的密钥管理"></a>公钥的密钥管理</h3><p><img src="/imgs/iis/39.png" alt="image-20231027112341734"></p><p><img src="/imgs/iis/40.png" alt="image-20231027112412990"></p><p><img src="/imgs/iis/41.png" alt="image-20231027112440293"></p><p><img src="/imgs/iis/42.png" alt="image-20231027113831372"></p><h4 id="网络中公钥的获得"><a href="#网络中公钥的获得" class="headerlink" title="网络中公钥的获得"></a>网络中公钥的获得</h4><ol><li>从对方处获得</li><li>从可信的中央数据库获得</li><li>从自己的私人数据库获得</li></ol><h4 id="公钥证书"><a href="#公钥证书" class="headerlink" title="公钥证书"></a>公钥证书</h4><p>公钥证书又称CA证书、数字证书。它由可信赖的人或者机构(CA)签发,防止中间人攻击。</p><p>CA是负责签发证书、认证证书、管理已颁发证书的机关</p><p><strong>公钥证书签发</strong></p><p><img src="/imgs/iis/43.png" alt="image-20231103100513625"></p><p><img src="/imgs/iis/44.png" alt="image-20231103100544927"></p><p><img src="/imgs/iis/45.png" alt="image-20231103100636606"></p><p>X.509数字证书格式–V3</p><p><strong>公钥基础设施PKI</strong></p><p>PKI是生成,管理,存储,分发和吊销基于公钥密码学的公钥证书所需要的硬件,软件,人员,策略和规程的总和</p><p><strong>PKI基本组件</strong></p><p>PKI基本组件包括:注册机构RA,认证机构CA,证书库,密钥备份及恢复系统,证书撤消处理系统,PKI应用接口系统</p><p><strong>PKI包括的重要实体</strong></p><ol><li>证书权威CA：颁发证书和证书撤销链CRL</li><li>注册权威RA：向CA登记或担保一个最终用户的身份</li><li>证书库：存放证书和证书撤销链表CRL</li><li>策略管理权威PMA</li><li>终端用户EE</li></ol><p><strong>PKI运行流程</strong></p><p><img src="/imgs/iis/46.png" alt="image-20231103101738209"></p><p><img src="/imgs/iis/47.png" alt="image-20231103101807396"></p><p><strong>PKI运行实例</strong></p><p><img src="/imgs/iis/48.png" alt="image-20231103101859545"></p><p><img src="/imgs/iis/49.png" alt="image-20231103101921459"></p><p><img src="/imgs/iis/50.png" alt="image-20231103101949269"></p><p><img src="/imgs/iis/51.png" alt="image-20231103102012938"></p><h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><h3 id="用户认证基本概念"><a href="#用户认证基本概念" class="headerlink" title="用户认证基本概念"></a>用户认证基本概念</h3><h4 id="用户认证功能"><a href="#用户认证功能" class="headerlink" title="用户认证功能"></a>用户认证功能</h4><ol><li>用户通过一个凭证（例如用户ID）来向系统证明自身</li><li>系统核实用户身份，并授予相应权限</li></ol><h4 id="用户认证流程"><a href="#用户认证流程" class="headerlink" title="用户认证流程"></a>用户认证流程</h4><ul><li>识别步骤：向安全系统提供一个身份标识</li><li>认证步骤：提供或者产生认证信息，以证实实体与标识符之间的绑定关系</li></ul><h4 id="用户认证与消息认证区别"><a href="#用户认证与消息认证区别" class="headerlink" title="用户认证与消息认证区别"></a>用户认证与消息认证区别</h4><ul><li>消息认证：保证消息没有被更改且消息源真实</li><li>用户认证：用于系统识别用户的真实身份，同时提供给用户一个凭证</li></ul><h3 id="用户认证方法"><a href="#用户认证方法" class="headerlink" title="用户认证方法"></a>用户认证方法</h3><ul><li>基于个人所知道的信息：口令认证</li><li>基于个人所拥有的物品：令牌认证</li><li>基于个人生理特征：生物特征认证</li></ul><h4 id="口令认证"><a href="#口令认证" class="headerlink" title="口令认证"></a>口令认证</h4><p><strong>第一代密码</strong></p><p>系统数据库中存储登陆时的用户名及其对应的一个密码，使用明文存储</p><p>缺陷：数据库一旦泄露，所有用户名和密码都会泄露</p><p><strong>第二代密码</strong></p><p>在第一代密码的基础上采用散列函数加密，用户登陆时，将用户输入的密码执行加密算法后再和数据库对比</p><p>缺陷：一些简单口令仍可被破解</p><p><strong>第三代密码</strong></p><p>在第二代的基础上加入盐值；每个用户随机产生一个盐值，将密码+盐值使用散列函数加密后储存在数据库中</p><p><strong>盐值</strong>：在密码任意固定位置插入的特定的字符串，让加盐后的密码进行散列运算的结果和原始密码的散列运算结果不一致</p><p>使用了盐值的UNIX口令方案</p><p><img src="/imgs/iis/52.png" alt="image-20231103103717785"></p><p><strong>盐值的优点</strong></p><ul><li>即使是两个不同的用户选择了相同的口令。这些口令也会被分配不同的“盐值”；因此，这两个用户所持有的散列口令是不同的</li><li>它显著地增加了离线口令字典攻击的难度；对于一个b位长度的“盐值”，可能产生的口令数量将会增长2b倍，这大大增加通过字典攻击猜测口令的难度</li><li>它使得攻击者几乎不可能发现一个用户是否在两个或更多的系统中使用了相同的口令</li></ul><h4 id="令牌认证"><a href="#令牌认证" class="headerlink" title="令牌认证"></a>令牌认证</h4><h5 id="静态协议"><a href="#静态协议" class="headerlink" title="静态协议"></a>静态协议</h5><p>用户首先将自己与令牌绑定，再将令牌与系统用户绑定，即可通过令牌完成身份认证</p><h5 id="动态口令生成器"><a href="#动态口令生成器" class="headerlink" title="动态口令生成器"></a>动态口令生成器</h5><p>系统与令牌首先进行初始化并保持同步，每过一段时间令牌就会生成一段口令，该口令即可用于进行身份认证</p><h5 id="挑战-应答协议"><a href="#挑战-应答协议" class="headerlink" title="挑战-应答协议"></a>挑战-应答协议</h5><p>系统产生一个“挑战信号”，智能令牌基于该信号生成一个“应答信号”，从而完成身份验证（类似公钥加密机制）</p><h4 id="生物特征认证"><a href="#生物特征认证" class="headerlink" title="生物特征认证"></a>生物特征认证</h4><p>对于用户绑定的静态生物信息，如：面部特征，指纹，手型，视网膜模式，虹膜，签名等特征进行识别，从而完成用户认证</p><h3 id="用户认证过程中的安全问题"><a href="#用户认证过程中的安全问题" class="headerlink" title="用户认证过程中的安全问题"></a>用户认证过程中的安全问题</h3><h4 id="口令的脆弱性"><a href="#口令的脆弱性" class="headerlink" title="口令的脆弱性"></a>口令的脆弱性</h4><h5 id="离线字典攻击"><a href="#离线字典攻击" class="headerlink" title="离线字典攻击"></a>离线字典攻击</h5><p>攻击者通过绕过系统的访问控制机制，从而获得对常见口令的访问权，攻击者通过将一些常用的口令进行散列之后的结果与口令文件中的散列值进行比较，匹配时攻击者便可以登录到系统中</p><p>对策：</p><ul><li>修改一些不安全的口令;</li><li>防止非授权的对口令文件的访问；</li><li>使用入侵检测机制对危害系统的行为进行检测</li></ul><h5 id="特定账户攻击"><a href="#特定账户攻击" class="headerlink" title="特定账户攻击"></a>特定账户攻击</h5><p>攻击者把目标锁定为一个具体的账户，不断对其口令进行猜测</p><p>对策：</p><ul><li>采用账户锁定策略</li><li>口令尝试错误达到一定次数</li><li>对账户锁定</li></ul><h5 id="常用口令攻击"><a href="#常用口令攻击" class="headerlink" title="常用口令攻击"></a>常用口令攻击</h5><p>用常用的口令（如123456，adminadmin）对大量的用户ID进行尝试</p><p>对策：</p><ul><li>禁止用户使用常用的口令；</li><li>对请求者的IP地址和用户提交的cookie模式进行扫描</li></ul><h4 id="常用攻击方式"><a href="#常用攻击方式" class="headerlink" title="常用攻击方式"></a>常用攻击方式</h4><h5 id="客户端攻击"><a href="#客户端攻击" class="headerlink" title="客户端攻击"></a>客户端攻击</h5><p>在不访问远程主机的情况下，敌手伪装成一个合法用户来完成用户认证的攻击行为；<br>敌手可能会对口令进行多种猜解，如尝试所有可能的口令；阻止这种攻击的一种方法是选择既长又不可预测的口令（参考“口令的脆弱性”）</p><h5 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h5><p>攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的；<br>重放攻击可以由认证发起者或者拦截并重发该数据的敌方进行；攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器</p><h5 id="特洛伊木马攻击"><a href="#特洛伊木马攻击" class="headerlink" title="特洛伊木马攻击"></a>特洛伊木马攻击</h5><p>在特洛伊木马攻击中，敌手冒充成认证服务来捕获用户口令、验证码或生物特征信息；之后，敌手可以使用捕获到的信息冒充合法用户</p><h5 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h5><p>拒绝服务攻击是试图通过大规模的认证请求使认证服务失效</p><p><img src="/imgs/iis/53.png" alt="image-20231103112039314"></p><p><img src="/imgs/iis/54.png" alt="image-20231103112103783"></p><h3 id="基本认证方法"><a href="#基本认证方法" class="headerlink" title="基本认证方法"></a>基本认证方法</h3><h4 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h4><p>最简单的方式是A向B出示口令</p><p><strong>使用公钥的单向认证</strong></p><p><img src="/imgs/iis/55.png" alt="image-20231103112319312"></p><p><strong>使用对称加密方法的单向认证</strong></p><ul><li>A和B双方共享密钥，B向A发送一个明文R，A返回该明文对应的密文，从而确认A掌握密钥<ul><li>随机数据R每次不同，因此不能回放</li><li>A和B双方安全性相关，一方被攻破，另一方也不安全</li></ul></li></ul><p><strong>口令认证-Lamport散列函数</strong></p><ul><li><p>A存放</p><ul><li>散列函数$h(\cdot)$，用于登录B的password</li></ul></li><li><p>B存放</p><ul><li>散列函数$h(\cdot)$，A的用户名，整数n，将password散列n次的结果$hash^n$</li></ul></li><li><p>当A需要向B作身份认证时，B返回n的当前值</p></li><li><p>A计算$hasn^{n-1}$（password）并送给B</p></li><li><p>B将A返回的结果$hash^{n-1}$（password）再散列一次，与当前存储的散列值（$hash^{n-1}$（password））比较</p></li><li><p>若鉴别成功，则将$hash^{n-1}$（password）更新为当前的散列值，且n的值减1</p><ul><li>若n递减为1，则重新设置口令</li></ul></li></ul><p><img src="/imgs/iis/56.png" alt="image-20231103112837353"></p><p><strong>One-Time Password方法的问题</strong></p><p>小数攻击</p><p>若攻击者已知散列函数$h(\cdot)$且能拦截B的信息，则他可向A返回一个很小的m值，这样就能计算出从$hash^m$（password）到$hash^n$（password）的值，从而在n减少到m前可冒充A</p><p><img src="/imgs/iis/57.png" alt="image-20231103113416943"></p><h4 id="双向鉴别"><a href="#双向鉴别" class="headerlink" title="双向鉴别"></a>双向鉴别</h4><ul><li>对称密钥<ul><li>AB提出challenge</li><li>存在桥接攻击</li></ul></li><li>非对称密钥<ul><li>相互使用对方的公钥</li><li>公钥的真实性问题</li></ul></li><li>时标<ul><li>数据的时效性问题</li></ul></li></ul><h5 id="Key-Distribution-Center"><a href="#Key-Distribution-Center" class="headerlink" title="Key Distribution Center"></a>Key Distribution Center</h5><ul><li>承担一个Site的密钥集中管理工作</li><li>减轻端系统的密钥保管负担</li><li>有利于用户的移动</li><li>容易构成安全的瓶颈</li><li>Single Sign-On的概念</li></ul><h5 id="Needham-Schroeder方法"><a href="#Needham-Schroeder方法" class="headerlink" title="Needham-Schroeder方法"></a>Needham-Schroeder方法</h5><p><img src="/imgs/iis/58.png" alt="image-20231103113943855"></p><h5 id="Keberos认证"><a href="#Keberos认证" class="headerlink" title="Keberos认证"></a>Keberos认证</h5><p>整个方案就是一个可信任的第三方认证服务</p><p>要求用户调用每个服务时需要证明他的身份，并且可随意要求服务器向客户端证明它们的身份</p><p><strong>概述</strong></p><ol><li>$C \to AS:ID_C||P_C||ID_V$</li><li>$AS \to C:Ticket$</li><li>$C \to V:ID_C||Ticket$</li></ol><p>$Ticket&#x3D;E(K_v,[ID_C||AD_C||ID_V])$</p><ul><li>C&#x3D;客户端</li><li>AS&#x3D;认证服务器</li><li>V&#x3D;服务器</li><li>$ID_C$&#x3D;客户端上用户的身份标识</li><li>$ID_V$&#x3D;服务器的身份标识</li><li>$P_C$&#x3D;客户端上用户的口令</li><li>$AD_C$&#x3D;客户端的网络地址</li><li>$K_v$&#x3D;认证服务器和服务器间共享的加密密钥</li></ul><p><strong>一个更加安全的认证会话</strong></p><p>每次用户登录会话就执行一次：</p><ol><li>$C \to AS:ID_C||ID_{tgs}$</li><li>$AS \to C:E(K_C,Ticket_{tgs})$</li></ol><p>每种类型的服务各执行一次：</p><ol start="3"><li>$C \to TGS:ID_C||ID_V||Ticket_{tgs}$</li><li>$TGS \to C:Ticket_v$</li></ol><p>每个服务会话执行一次：</p><ol start="5"><li>$C \to V:ID_C||Ticket_v$</li></ol><ul><li>$Ticket_{tgs}&#x3D;E(K_{tgs},[ID_C||AD_C||ID_{tgs}||TS_1||Lifetime_1])$</li><li>$Ticket_{v}&#x3D;E(K_v,[ID_C||AD_C||ID_{v}||TS_2||Lifetime_2])$</li></ul><p><strong>Kerberos协议</strong></p><p>包括客户端、应用服务器和一个Kerberos服务器</p><ul><li>被设计用来对抗针对客户端&#x2F;服务器对话安全的多种威胁</li><li>很明显的安全性风险是伪装（impersonation）</li><li>服务器必须能确认请求服务的客户端的身份</li></ul><p>使用一个认证服务器(AS)</p><ul><li>用户登录AS进行身份验证</li><li>AS 验证用户的身份，然后把这个信息传送到一个应用服务器，这个应用服务器就将接受客户端的服务请求</li></ul><p>在一种安全的方式下完成上述工作</p><ul><li>如果客户端在网络上把用户口令发送到AS，敌手可以在网络上观测到用户的口令</li><li>敌手可以装扮成AS并发送一个假的确认消息</li></ul><p><img src="/imgs/iis/59.png" alt="image-20231110110400789"></p><p>注意:口令是集中存在Kerberos 服务器上的,不需在网络上传输</p><p><img src="/imgs/iis/60.png" alt="image-20231110110448700"></p><p>Kerberos域</p><p>一个Kerberos环境包括:</p><ul><li>一台Kerberos 服务器</li><li>若干客户端，都在Kerberos 服务器上注册</li><li>若干应用服务器，与服务器共享密钥</li></ul><p>这种环境被称为Kerberos域</p><ul><li>在不同管理组织下的客户端和服务器的网络通常组成不同的域</li></ul><p>如果有多个域：</p><ul><li>它们的Kerberos服务器必须共享一个密钥，并信任另一个域中的Kerberos服务器对其用户进行认证</li><li>在第二个域中参与的服务器也必须信任另一个域中Kerberos服务器</li></ul><p><img src="/imgs/iis/61.png" alt="image-20231110110715483"></p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><h3 id="访问控制原理"><a href="#访问控制原理" class="headerlink" title="访问控制原理"></a>访问控制原理</h3><p>访问控制是按用户身份及其归属的某项定义组来限制用户对某些信息项的访问，或限制对某些控制功能的使用的一种技术。</p><p><strong>广义的访问控制</strong></p><p><img src="/imgs/iis/62.png" alt="image-20231110112025786"></p><p><strong>狭义的访问控制</strong></p><p>访问控制实现的安全策略：指定对于每个具体的系统资源，谁或什么(如一个进程)可以访问</p><p>每个实例允许的访问类型</p><h3 id="访问控制策略"><a href="#访问控制策略" class="headerlink" title="访问控制策略"></a>访问控制策略</h3><h4 id="访问控制三要素"><a href="#访问控制三要素" class="headerlink" title="访问控制三要素"></a>访问控制三要素</h4><p><img src="/imgs/iis/63.png" alt="image-20231110112440120"></p><h4 id="访问控制策略-1"><a href="#访问控制策略-1" class="headerlink" title="访问控制策略"></a>访问控制策略</h4><h5 id="自主访问控制DAC"><a href="#自主访问控制DAC" class="headerlink" title="自主访问控制DAC"></a>自主访问控制DAC</h5><p>基于请求者的身份和访问规则（授权），规定请求者可以（或不可以）做什么。</p><p>一个实体可以被授权按其自己的意志使另一个实体能够访问某些资源。换句话说，拥有客体权限的用户，可以将该客体的权限分配给其他用户</p><p>例如：没有文件File1访问权限的用户可以从有访问权限的B 用户那里得到访问权限</p><p>DAC实现的通常方式是提供<strong>访问矩阵</strong></p><p>矩阵中的每项表示一个特定主体对一个特定客体的访问权。</p><p><img src="/imgs/iis/64.png" alt="image-20231110112803220"></p><p><strong>稀疏-权限控制列表ACL</strong> 不直观</p><p><img src="/imgs/iis/65.png" alt="image-20231110112925940"></p><p><img src="/imgs/iis/66.png" alt="image-20231110112942711"></p><p><strong>授权表</strong></p><p>授权表不像访问矩阵那么稀疏，但比ACL或能力表更为方便。</p><p><img src="/imgs/iis/67.png" alt="image-20231110113107881"></p><p><strong>一个DAC通用模型</strong></p><p><img src="/imgs/iis/68.png" alt="image-20231110113225182"></p><h5 id="强制访问控制MAC"><a href="#强制访问控制MAC" class="headerlink" title="强制访问控制MAC"></a>强制访问控制MAC</h5><p>通过比较具有安全许可的安全标记来控制访问。</p><p>强制访问控制模型(Mandatory Access Control),在计算机安全领域指一种由操作系统约束的访问控制</p><p>目标：限制主体或发起者访问或对对象或目标执行某种操作的能力。</p><p>主体对于对象的任何操作都将根据一组授权规则（也称策略）进行测试，由操作系统决定操作是否允许</p><ol><li>主体(Subject)被赋予一定的安全级别</li><li>客体(Object)被赋予一定的安全级别</li><li>Subject 能否访问Object 由双方的关系安全级别决定，这个判断通常由系统硬性限制</li></ol><p><img src="/imgs/iis/69.png" alt="image-20231110113528906"></p><p><strong>优点</strong></p><ul><li>系统独立于用户行为强制执行访问控制，用户不能改变他们的安全级别或对象的安全属性。</li><li>MAC安全性比DAC有了提高</li><li>非常适合机密机构或者其他等级观念强烈的行业</li></ul><p><strong>缺点</strong></p><p>过重强调保密性，管理不够灵活</p><h5 id="基于角色的访问控制RBAC"><a href="#基于角色的访问控制RBAC" class="headerlink" title="基于角色的访问控制RBAC"></a>基于角色的访问控制RBAC</h5><p>基于用户在系统中所具有的角色和说明各种角色用户享有哪些访问权的规则来控制访问</p><p>传统的DAC系统定义了单独的用户和用户组的访问权。与之相反，RBAC基于用户在系统中设定的角色而不是用户的身份</p><p><img src="/imgs/iis/70.png" alt="image-20231110113651063"></p><p><img src="/imgs/iis/71.png" alt="image-20231110113715515"></p><p><img src="/imgs/iis/72.png" alt="image-20231110113747475"></p><p>用户与角色的关系是多对多的，在某些环境下，用户集改变频繁，给一个用户分配一个或多个角色的方案可能也是动态的。</p><p>RBAC的访问矩阵</p><p><img src="/imgs/iis/73.png" alt="image-20231110113829861"></p><p>RBAC抽象模型</p><p><img src="/imgs/iis/74.png" alt="image-20231110113859025"></p><p>会话用来定义用户与该用户被分配的一个或多个角色之间的一对多的临时关系。用户仅与完成特定任务所必需的角色建立会话。这是最小特权概念的一个实例</p><p>RBAC模型作用域</p><p><img src="/imgs/iis/75.png" alt="image-20231110115820091"></p><p>RBAC的角色层次</p><p><img src="/imgs/iis/76.png" alt="image-20231110115919680"></p><p>RBAC的约束</p><p>约束是在角色之间定义的关系或与角色相关的条件，它提供了一种令RBAC适应组织中的管理和安全策略的细节的手段。</p><h5 id="基于属性的访问控制ABAC"><a href="#基于属性的访问控制ABAC" class="headerlink" title="基于属性的访问控制ABAC"></a>基于属性的访问控制ABAC</h5><p>基于用户、被访问资源及当前环境条件来控制访问</p><p><img src="/imgs/iis/77.png" alt="image-20231124101415470"></p><p><strong>属性</strong></p><p><img src="/imgs/iis/78.png" alt="image-20231124101542817"></p><p><strong>策略</strong></p><p><img src="/imgs/iis/79.png" alt="image-20231124101622501"></p><p><strong>架构</strong></p><p><img src="/imgs/iis/80.png" alt="image-20231124101847322"></p><p><strong>优势</strong></p><ul><li>正如我们之前提到的，ABAC方法的优势在于它的灵活性以及表达能力</li><li>ABAC系统能够实现DAC、RBAC和MAC的思想。</li><li>ABAC允许无限数量的属性组合起来以满足任何访问控制规则，能够实现细粒度的访问控制，能满足来自基本访问控制列表的各种各样的要求</li></ul><p><strong>障碍</strong></p><ul><li>需要考虑每次访问资源和对用户属性的评价所造成的性能影响。</li><li>然而，对于某些应用诸如Web服务和云计算的综合运用来说，每次访问所增加的代价相对于原本就相当高的性能代价是微不足道的。</li><li>因而，Web服务是实现ABAC模型的开创性技术，尤其是引入了可扩展的访问控制标记语言，并且也有人对将ABAC模型应用到云服务表现出相当大的兴趣。</li></ul><h2 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h2><h3 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h3><p>SQLi</p><p>利用Web应用的页面特征，发送恶意的SQL命令到数据库服务器</p><p>可用于</p><ul><li>修改或删除数据</li><li>执行任意的操作系统命令</li><li>发起拒绝服务(DoS)攻击</li></ul><p><img src="/imgs/iis/81.png" alt="image-20231124102454894"></p><p>从上向下：</p><ul><li>攻击者找到Web应用的脆弱点，向Web服务器发送命令</li><li>Web服务器将收到恶意代码发送给Web应用服务器</li><li>Web应用服务器将收到恶意代码发送给数据库服务器</li></ul><p>从下向上：</p><ul><li>Web服务器向攻击者发送信用卡详细信息。</li><li>Web应用服务器生成一个包含数据库信用卡表详细信息的页面。</li><li>数据库服务器在数据库上执行恶意代码，从信用卡表中返回数据。</li></ul><h4 id="注入技术"><a href="#注入技术" class="headerlink" title="注入技术"></a>注入技术</h4><p>SQLi攻击的方法通常是在SQL语句中提前终止文本串，随后附加新的命令代码。</p><p><img src="/imgs/iis/82.png" alt="image-20231124103029480"></p><p>同时，攻击者利用注释符“–”来终止被注入的代码段，使得后面的代码在执行时被忽略。</p><p><img src="/imgs/iis/83.png" alt="image-20231124103122918"></p><p><strong>实例</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'&#123;0&#125;'</span><span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'&#123;1&#125;'</span><span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> username<span class="token operator">=</span><span class="token string">"test' OR 1=1 --"</span>"<span class="token class-name">String</span> password<span class="token operator">=</span><span class="token string">"abcdefg"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>单引号将用户名字符串提前结束</p><p>所有记录都匹配到了该选择条件</p><p>用户将被允许登录到系统，尽管它没有输入正确的用户名密码，甚至连数据库中有哪些有效的用户名都不需要知道</p><p><strong>原因</strong></p><ul><li>对用户输入数据的过分信任，导致用户有机会输入恶意的代码</li><li>数据和操作逻辑没有隔离，本应该是数据的内容最终变成了可执行的语句，并改变了原有的执行逻辑</li></ul><h3 id="SQLi攻击方式"><a href="#SQLi攻击方式" class="headerlink" title="SQLi攻击方式"></a>SQLi攻击方式</h3><h4 id="SQLi攻击途径"><a href="#SQLi攻击途径" class="headerlink" title="SQLi攻击途径"></a>SQLi攻击途径</h4><p><img src="/imgs/iis/84.png" alt="image-20231124103931970"></p><p><img src="/imgs/iis/85.png" alt="image-20231124104013069"></p><h4 id="SQLi攻击方式-1"><a href="#SQLi攻击方式-1" class="headerlink" title="SQLi攻击方式"></a>SQLi攻击方式</h4><h5 id="带内攻击"><a href="#带内攻击" class="headerlink" title="带内攻击"></a>带内攻击</h5><p>带内攻击使用同样的通信通道来完成注入SQL码和结果返回</p><p><img src="/imgs/iis/86.png" alt="image-20231124104253761"></p><ol><li><p>行尾注释</p><p>在注入代码到特定字段之后，字段之后的合法代码会被注释标记为空字段。</p></li><li><p>捎带查询</p><p>攻击者在原本的查询语句之外还插入附加的查询。</p></li><li><p>重言式</p><p>将代码注入一个或多个永真的条件表达式中</p></li></ol><h5 id="推理攻击"><a href="#推理攻击" class="headerlink" title="推理攻击"></a>推理攻击</h5><p>推理攻击没有实际的数据传输，但攻击者能够通过发送特定的请求和观察网站和数据库服务器的响应规律来重新构造信息</p><ol><li><p>攻击者不断试错，通过反馈的错误信息将关于Web应用程序和数据库后端的类型和结构等重要信息收集起来，从而为以后攻击的做准备。</p><p><img src="/imgs/iis/87.png" alt="image-20231124105622552"></p></li><li><p>攻击者发送大量请求，当注入表达式为真时，网站正常运行</p><p>当注入表达式为假时，虽然没有描述性的错误语句，错误页面和正常页面还是有明显区别的。</p><p>攻击者可以根据表达式的真假推测数据库系统中的数据</p><p><img src="/imgs/iis/88.png" alt="image-20231124105710356"></p></li></ol><p><img src="/imgs/iis/89.png" alt="image-20231124105741626"></p><p><strong>使用检测防范推理攻击</strong></p><ol><li><p>数据库设计时的推理检测</p><p>通过修改数据库结构或改变访问控制机制等手段消除推理通道，从而防止推理</p><p>将一个表分成多个表以除去数据依赖</p><p>缺点：这类技术常常导致不必要的更严格的访问控制，从而降低了可用性。</p></li><li><p>查询时的推理检测</p><p>这种方法寻求在一个查询或一系列查询执行期间消除推理通道违例。</p><p>如果发现了推理通道，那个查询就被拒绝或修改。</p></li></ol><h5 id="带外攻击"><a href="#带外攻击" class="headerlink" title="带外攻击"></a>带外攻击</h5><p>在带外攻击中，返回数据使用不同的通信频道</p><p><img src="/imgs/iis/90.png" alt="image-20231124110348011"></p><p>比如一个带有查询结果的Email生成和返回是在不同的信道进的</p><p>这一方式可以用于信息检索有限制但数据库服务器带外连接不严格的情况</p><h4 id="SQLi的防范"><a href="#SQLi的防范" class="headerlink" title="SQLi的防范"></a>SQLi的防范</h4><h5 id="防御性编码"><a href="#防御性编码" class="headerlink" title="防御性编码"></a>防御性编码</h5><ul><li><p>手动防御性编码实践</p><p>例如：进行输入类型的检查</p></li><li><p>参数化查询插入</p><p>分离传递值参数</p></li><li><p>SQL DOM<br>SQL DOM是一组保证自动数据有效和转义的类</p></li></ul><h5 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h5><ul><li><p>基于特征</p><p>匹配特定的攻击模式</p></li><li><p>基于异常</p><p>定义正常行为模式，检测超出行为模式范围的情况</p></li><li><p>代码分析</p><p>一个测试套件，它成能够生成许多攻击，并评估系统的响应</p></li></ul><h5 id="运行时阻断"><a href="#运行时阻断" class="headerlink" title="运行时阻断"></a>运行时阻断</h5><p>若查询与期望的不一致，则阻断。</p><h5 id="数据库加密"><a href="#数据库加密" class="headerlink" title="数据库加密"></a>数据库加密</h5><p><img src="/imgs/iis/91.png" alt="image-20231124110738593"></p><p>加密是数据库安全的最后一道防线，它可以在记录级（加密选定的记录），属性级（加密选定的列）或单个字段级运用到整个数据库。</p><p><strong>缺点</strong></p><ol><li>密钥管理：授权用户必须能够访问其被允许访问的数据的解密密钥</li><li>不灵活：当数据库的部分或全部被加密时，执行记录搜索变得更为困难</li></ol><p><img src="/imgs/iis/92.png" alt="image-20231124110831706"></p><h2 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a>恶意软件</h2><h3 id="恶意软件的概念"><a href="#恶意软件的概念" class="headerlink" title="恶意软件的概念"></a>恶意软件的概念</h3><p>一种被（往往是秘密地）植入系统中，以损害受害者数据、应用程序或操作系统的可信性、完整性或可用性，抑或对用户实施骚扰或妨碍的程序</p><p><img src="/imgs/iis/93.png" alt="image-20231124110923638"></p><p><img src="/imgs/iis/94.png" alt="image-20231124110943882"></p><p><img src="/imgs/iis/95.png" alt="image-20231124111000407"></p><h3 id="恶意软件的类型"><a href="#恶意软件的类型" class="headerlink" title="恶意软件的类型"></a>恶意软件的类型</h3><h4 id="恶意软件的分类方法"><a href="#恶意软件的分类方法" class="headerlink" title="恶意软件的分类方法"></a>恶意软件的分类方法</h4><p><img src="/imgs/iis/96.png" alt="image-20231124111303616"></p><p>有效的分类方法</p><p><img src="/imgs/iis/97.png" alt="image-20231124111354527"></p><h4 id="恶意软件的传播机制"><a href="#恶意软件的传播机制" class="headerlink" title="恶意软件的传播机制"></a>恶意软件的传播机制</h4><ol><li>对现有可执行程序的感染或由病毒翻译并随后传播至其他系统。</li><li>利用软件漏洞（无论是从本地发起或借助蠕虫、夹带式下载等方式从网络发起）来允许恶意软件自我复制</li><li>借助社会工程学方法说服用户绕过安全机制来安装木马或响应网络钓鱼</li></ol><h4 id="恶意软件的有效负荷"><a href="#恶意软件的有效负荷" class="headerlink" title="恶意软件的有效负荷"></a>恶意软件的有效负荷</h4><ol><li>污染系统或数据文件</li><li>窃取服务使系统成为僵尸网络中的一个僵尸代理</li><li>窃取系统信息，以及登录口令和通过键盘记录器或间谍软件获取的隐私信息</li><li>隐蔽恶意软件的存在</li></ol><h3 id="恶意软件的来源"><a href="#恶意软件的来源" class="headerlink" title="恶意软件的来源"></a>恶意软件的来源</h3><h4 id="攻击工具包"><a href="#攻击工具包" class="headerlink" title="攻击工具包"></a>攻击工具包</h4><h4 id="攻击源"><a href="#攻击源" class="headerlink" title="攻击源"></a>攻击源</h4><h4 id="高级持续性威胁"><a href="#高级持续性威胁" class="headerlink" title="高级持续性威胁"></a>高级持续性威胁</h4><p><img src="/imgs/iis/98.png" alt="image-20231124111822452"></p><h3 id="恶意软件的传染机制"><a href="#恶意软件的传染机制" class="headerlink" title="恶意软件的传染机制"></a>恶意软件的传染机制</h3><h4 id="移动代码"><a href="#移动代码" class="headerlink" title="移动代码"></a>移动代码</h4><p>移动代码能够从远程系统传送到本地系统，无需用户明确许可便开始运行，进而利用漏洞实现某些功能，例如非授权的数据访问或特权攻击。</p><h4 id="病毒"><a href="#病毒" class="headerlink" title="病毒"></a>病毒</h4><p>在被感染的主程序运行时，病毒可以秘密执行主程序被允许执行的任何操作。</p><p><img src="/imgs/iis/99.png" alt="image-20231124111942098"></p><p><img src="/imgs/iis/100.png" alt="image-20231124112015274"></p><p><img src="/imgs/iis/101.png" alt="image-20231124112045192"></p><p><img src="/imgs/iis/102.png" alt="image-20231124112110105"></p><p><img src="/imgs/iis/103.png" alt="image-20231124112132437"></p><p><img src="/imgs/iis/104.png" alt="image-20231124112425985"></p><p><img src="/imgs/iis/105.png" alt="image-20231124112450494"></p><p><img src="/imgs/iis/106.png" alt="image-20231124112522967"></p><p><img src="/imgs/iis/107.png" alt="image-20231124112551747"></p><h4 id="蠕虫"><a href="#蠕虫" class="headerlink" title="蠕虫"></a>蠕虫</h4><p>蠕虫是一种主动寻找并感染其他机器的程序，而每台被感染机器又转而成为自动攻击其他机器的跳板。</p><p><img src="/imgs/iis/108.png" alt="image-20231124112721047"></p><h5 id="蠕虫复制"><a href="#蠕虫复制" class="headerlink" title="蠕虫复制"></a>蠕虫复制</h5><p>为了复制自身，蠕虫利用如下方法来访问远程系统</p><ul><li><p>电子邮件或即时通讯工具</p><p>蠕虫通过邮件发送自己的拷贝，或将自身当作即时通信服务的附件发送。当打开电子邮件或附件时，蠕虫的代码就会被执行。</p></li><li><p>文件共享</p><p>蠕虫可以在如USB设备等可插拔媒介上创建自己的拷贝，或像病毒那样感染此类媒介上适合的文件。</p></li></ul><p><img src="/imgs/iis/109.png" alt="image-20231124112841059"></p><h5 id="蠕虫的扫描策略"><a href="#蠕虫的扫描策略" class="headerlink" title="蠕虫的扫描策略"></a>蠕虫的扫描策略</h5><p>网络蠕虫在传播阶段的首要功能是寻找其他系统进行感染，这个过程叫作扫描(scanning)或指纹采集（fingerprinting)。</p><ul><li><p>随机式探索</p><p>每一台被感染的主机使用不同的种子探测IP地址空间的随机地址，会产生大量的网络流量，可能导致在实际攻击开展前，操作便会被中断</p></li><li><p>拓扑式探索</p><p>利用被感染机器中所包含的信息来寻找和扫描更多的主机。</p></li><li><p>黑名单</p><p>攻击者首先为潜在的易感染机器列出一个大名单，这是一个非常慢的过程，可以避免被检测到攻击正在进行</p><p>一旦名单编辑完成，每个被感染的机器会被分配名单中的一部分进行扫描，这种分工明确的扫描时间非常短，因此检测感染的发生是非常困难的</p></li><li><p>本地子网</p><p>如果防火墙后的一台主机被感染，则该主机会在其所在的本地网络中寻找到其他本应受到防火墙保护的主机</p></li></ul><p><img src="/imgs/iis/110.png" alt="image-20231124113118265"></p><h5 id="Morris蠕虫"><a href="#Morris蠕虫" class="headerlink" title="Morris蠕虫"></a>Morris蠕虫</h5><p><img src="/imgs/iis/111.png" alt="image-20231124113210900"></p><p><img src="/imgs/iis/112.png" alt="image-20231124113236032"></p><h5 id="最近的蠕虫攻击"><a href="#最近的蠕虫攻击" class="headerlink" title="最近的蠕虫攻击"></a>最近的蠕虫攻击</h5><h5 id="手机蠕虫"><a href="#手机蠕虫" class="headerlink" title="手机蠕虫"></a>手机蠕虫</h5><p><img src="/imgs/iis/113.png" alt="image-20231124113322099"></p><h4 id="夹带式下载"><a href="#夹带式下载" class="headerlink" title="夹带式下载"></a>夹带式下载</h4><p><img src="/imgs/iis/114.png" alt="image-20231124113410072"></p><h4 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h4><p><img src="/imgs/iis/115.png" alt="image-20231124113438609"></p><h4 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h4><p><img src="/imgs/iis/116.png" alt="image-20231124113508886"></p><p><img src="/imgs/iis/117.png" alt="image-20231124113538158"></p><h3 id="恶意软件的载荷"><a href="#恶意软件的载荷" class="headerlink" title="恶意软件的载荷"></a>恶意软件的载荷</h3><h4 id="系统损坏"><a href="#系统损坏" class="headerlink" title="系统损坏"></a>系统损坏</h4><p><img src="/imgs/iis/118.png" alt="image-20231124114705918"></p><p><img src="/imgs/iis/119.png" alt="image-20231124114745768"></p><h4 id="攻击代理"><a href="#攻击代理" class="headerlink" title="攻击代理"></a>攻击代理</h4><p><img src="/imgs/iis/120.png" alt="image-20231124114957315"></p><p><img src="/imgs/iis/121.png" alt="image-20231124115028791"></p><p><img src="/imgs/iis/122.png" alt="image-20231124115050796"></p><h4 id="信息窃取"><a href="#信息窃取" class="headerlink" title="信息窃取"></a>信息窃取</h4><p><img src="/imgs/iis/123.png" alt="image-20231124115216230"></p><p><img src="/imgs/iis/124.png" alt="image-20231124115245730"></p><h4 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h4><p><img src="/imgs/iis/125.png" alt="image-20231124115312811"></p><h4 id="隐蔽后门"><a href="#隐蔽后门" class="headerlink" title="隐蔽后门"></a>隐蔽后门</h4><p><img src="/imgs/iis/126.png" alt="image-20231124115339230"></p><p><img src="/imgs/iis/127.png" alt="image-20231124115400326"></p><h4 id="隐蔽rootkit"><a href="#隐蔽rootkit" class="headerlink" title="隐蔽rootkit"></a>隐蔽rootkit</h4><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20231124115623526.png" alt="image-20231124115623526"></p><h3 id="恶意软件的对抗措施"><a href="#恶意软件的对抗措施" class="headerlink" title="恶意软件的对抗措施"></a>恶意软件的对抗措施</h3><p>预防为主</p><ul><li><p>规则</p></li><li><p>警惕性</p></li><li><p>弥补弱点</p></li><li><p>缓解威胁</p></li></ul><p><img src="/imgs/iis/128.png" alt="image-20231124115733289"></p><p>反病毒软件的发展</p><ol><li><p>简单的扫描器</p><ul><li>基于病毒特征码来识别病毒</li><li>通过检査文件长度变化来检测病毒</li></ul><p>缺点：仅局限于检测已知病毒</p></li><li><p>启发式扫描器</p><ul><li><p>通过启发式规则来检测可能存在的病毒感染；</p><p>例如：通过搜索经常与病毒关联的代码段来检测病毒</p></li><li><p>完整性检测：每个程序都被附加一个校验和，如果病毒感染了程序但没有修改程序后面附加的校验和，完整性检测就能发现病毒对文件的修改。</p></li></ul></li><li><p>活动陷阱</p><p>一种内存驻留程序，它通过病毒行为来识别病毒而不是通过被感染文件的内部结构特征。</p><p>优点：不用为大量的病毒生成特征码和启发式规则。它只需要去识别一小部分预示病毒想要感染的行为，然后阻止这些行为。</p></li><li><p>全面保护</p><p>综合运用各种反病毒技术的软件包，包括扫描和活动陷阱组件。同时还加入了访问控制功能，从而限制了病毒对系统渗透的能力，也就限制了病毒修改文件以继续传播的能力。</p></li></ol><h2 id="拒绝服务攻击-1"><a href="#拒绝服务攻击-1" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h2><h3 id="拒绝服务攻击-2"><a href="#拒绝服务攻击-2" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><p>拒绝服务(DoS)是一种通过耗尽系统资源，来削弱或阻止对网络、系统或应用程序的正常使用的行为</p><p>目标资源</p><ul><li>网络带宽</li><li>系统资源</li><li>应用资源</li></ul><h4 id="经典的拒绝服务攻击"><a href="#经典的拒绝服务攻击" class="headerlink" title="经典的拒绝服务攻击"></a>经典的拒绝服务攻击</h4><h5 id="泛洪攻击"><a href="#泛洪攻击" class="headerlink" title="泛洪攻击"></a>泛洪攻击</h5><p>洪泛攻击的目的就是占据所有到目标组织的网络连接的容量</p><p><img src="/imgs/iis/129.png" alt="image-20231124140348089"></p><h5 id="源地址欺骗"><a href="#源地址欺骗" class="headerlink" title="源地址欺骗"></a>源地址欺骗</h5><p>产生大量目的地址指向被攻击系统的数据包，但这些数据包的源地址是随机的</p><p>洪泛攻击发送数据包的源地址很容易被识别，从而定位到攻击者真实的IP地址</p><p>使用原始套接字接口伪造源地址，使得攻击者难以被定位</p><p><img src="/imgs/iis/130.png" alt="image-20231124140500032"></p><h5 id="SYN欺骗"><a href="#SYN欺骗" class="headerlink" title="SYN欺骗"></a>SYN欺骗</h5><ul><li>利用TCP三次握手协议进行攻击</li><li>通过发送大量伪造源地址的SYN连接请求数据包，使服务器上用于管理TCP连接的连接表溢出，从而使正常用户无法建立连接</li></ul><p><img src="/imgs/iis/131.png" alt="image-20231124140617805"></p><p><img src="/imgs/iis/132.png" alt="image-20231124140657734"></p><h3 id="泛洪攻击-1"><a href="#泛洪攻击-1" class="headerlink" title="泛洪攻击"></a>泛洪攻击</h3><ul><li>根据攻击所使用的网络协议不同进行分类</li><li>其目的大都是使到服务器的链路超负荷</li><li>几乎任何类型的网络数据包都可以用来进行洪泛攻击</li></ul><h4 id="ICMP泛洪"><a href="#ICMP泛洪" class="headerlink" title="ICMP泛洪"></a>ICMP泛洪</h4><ul><li>利用ICMP回送请求数据包的ping洪泛攻击</li><li>ping是一种很有用的网络分析工具，网络管理员一般允许ICMP回送请求数据包进入他们的网络</li></ul><h4 id="UDP泛洪"><a href="#UDP泛洪" class="headerlink" title="UDP泛洪"></a>UDP泛洪</h4><ul><li>使用指向目标系统上某个端口号的UDP数据包洪泛</li><li>几乎任何UDP端口号都可以作为目标</li></ul><h4 id="TCP-SYN泛洪"><a href="#TCP-SYN泛洪" class="headerlink" title="TCP SYN泛洪"></a>TCP SYN泛洪</h4><ul><li>发送TCP数据包给目标系统</li><li>攻击的对象是数据包的总量而不是目标系统上的网络处理程序</li></ul><h3 id="分布式拒绝服务攻击"><a href="#分布式拒绝服务攻击" class="headerlink" title="分布式拒绝服务攻击"></a>分布式拒绝服务攻击</h3><p>攻击者首先通过操作系统上或者某些常用应用程序的一些熟知的漏洞来获得访问这些系统的权限（僵尸机）</p><p><img src="/imgs/iis/133.png" alt="image-20231124141128450"></p><h3 id="基于HTTP协议的攻击"><a href="#基于HTTP协议的攻击" class="headerlink" title="基于HTTP协议的攻击"></a>基于HTTP协议的攻击</h3><h4 id="HTTP泛洪攻击"><a href="#HTTP泛洪攻击" class="headerlink" title="HTTP泛洪攻击"></a>HTTP泛洪攻击</h4><ul><li>利用来自很多僵尸机的HTTP请求攻击web服务器，每个请求都消耗大量资源</li><li>递归HTTP洪泛（爬虫）：从给定的web服务器出发，遍历其所有链接并发送请求</li></ul><p><img src="/imgs/iis/134.png" alt="image-20231124141406111"></p><h4 id="Slowloris"><a href="#Slowloris" class="headerlink" title="Slowloris"></a>Slowloris</h4><p>通过不完整的HTTP请求占用服务器资源</p><ul><li>利用服务器收到完整请求响应的特性</li><li>服务器接收到不完整请求会将该连接保持，期待收到更多信息以完成这个请求，这一过程会占用服务器的计算资源</li><li>通过发送多个不完整请求，并周期性的发送新包将其保持，消耗服务器的计算资源</li></ul><h3 id="反射攻击与放大攻击"><a href="#反射攻击与放大攻击" class="headerlink" title="反射攻击与放大攻击"></a>反射攻击与放大攻击</h3><h4 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h4><p>中间媒介一般为高性能网络服务器（如DNS服务器），这意味着可以通过中间媒介形成很高的网络通信流量</p><p>攻击者将其想攻击的目标系统地址作为数据包的源地址，并将这些数据包发送给中间媒介</p><p>当中间媒介响应时，大量的响应数据包会被发送给源地址所指向的目标系统</p><p><img src="/imgs/iis/135.png" alt="image-20231124141648131"></p><h4 id="DNS放大攻击"><a href="#DNS放大攻击" class="headerlink" title="DNS放大攻击"></a>DNS放大攻击</h4><ul><li>使用了直接指向合法DNS服务器的数据包进行攻击</li><li>将DNS服务器作为中间媒介</li><li>利用DNS协议将较小的请求数据包转化为较大的响应数据包而达到攻击效果</li><li>目标系统被这些响应流量所洪泛</li></ul><h3 id="防范拒绝服务攻击"><a href="#防范拒绝服务攻击" class="headerlink" title="防范拒绝服务攻击"></a>防范拒绝服务攻击</h3><h4 id="网络输入过滤"><a href="#网络输入过滤" class="headerlink" title="网络输入过滤"></a>网络输入过滤</h4><ul><li>在尽可能靠近源地址的地安装方过滤器，以此限制主机系统发送带有虚假源地址数据包</li><li>使用过滤器来确认源地址所指向的返回路径是当前数据包发送过来所使用的路径</li></ul><h4 id="改进网络协议"><a href="#改进网络协议" class="headerlink" title="改进网络协议"></a>改进网络协议</h4><p>使用改进版本的TCP连接处理程序来抵御SYN欺骗攻击</p><h4 id="主动判断"><a href="#主动判断" class="headerlink" title="主动判断"></a>主动判断</h4><ul><li>主动判断数据包是否来自合法的、人工发起的交互，还是自动的DOS攻击</li><li>屏蔽可疑服务以及定向IP广播</li></ul><h3 id="对拒绝服务攻击的响应"><a href="#对拒绝服务攻击的响应" class="headerlink" title="对拒绝服务攻击的响应"></a>对拒绝服务攻击的响应</h3><h4 id="判断出攻击类型"><a href="#判断出攻击类型" class="headerlink" title="判断出攻击类型"></a>判断出攻击类型</h4><ul><li>数据包的捕获和分析</li><li>配置过滤器来过滤掉上游的攻击数据包</li><li>识别并纠正系统&#x2F;应用程序错误</li></ul><h4 id="通过服务供应商追踪攻击数据包流确定攻击源"><a href="#通过服务供应商追踪攻击数据包流确定攻击源" class="headerlink" title="通过服务供应商追踪攻击数据包流确定攻击源"></a>通过服务供应商追踪攻击数据包流确定攻击源</h4><ul><li>可能很困难，而且非常耗时</li><li>如果希望将攻击报告给相关的执法部门，这是必要的</li></ul><h4 id="攻击分析和更新应急计划"><a href="#攻击分析和更新应急计划" class="headerlink" title="攻击分析和更新应急计划"></a>攻击分析和更新应急计划</h4><p><strong>实施应急计划</strong></p><p>切换到备份服务器，用新的服务器建立具有新地址的新站点</p><p><strong>更新事故应变计划</strong></p><p>攻击分析和响应，并从经验中吸取教训以改进今后的处理措施</p><h2 id="入侵检测"><a href="#入侵检测" class="headerlink" title="入侵检测"></a>入侵检测</h2><h3 id="入侵者"><a href="#入侵者" class="headerlink" title="入侵者"></a>入侵者</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>网络罪犯</li><li>活动家</li><li>国家资助的组织</li><li>其他入侵者</li><li>学徒</li><li>训练有素者</li><li>高手</li></ul><h4 id="入侵者行为"><a href="#入侵者行为" class="headerlink" title="入侵者行为"></a>入侵者行为</h4><p>入侵者的技术和行为模式总是在不断变化，目的是利用新发现的系统弱点并躲避检测和相应的应对策略，通常使用以下步骤发起攻击</p><h5 id="锁定目标和收集信息"><a href="#锁定目标和收集信息" class="headerlink" title="锁定目标和收集信息"></a>锁定目标和收集信息</h5><p>攻击者利用公开的可用信息，通过技术和非技术手段，发现待攻击的目标系统，归纳其特征，并且利用网络探测工具确定目标资源的位置</p><h5 id="获取访问权限"><a href="#获取访问权限" class="headerlink" title="获取访问权限"></a>获取访问权限</h5><p>通常是利用远程网络漏洞，以及在远程服务中使用的弱认证证书，或者是利用在目标系统上安装恶意软件</p><h5 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h5><p>通常是利用远程网络漏洞，以及在远程服务中使用的弱认证证书，或者是利用在目标系统上安装恶意软件</p><h5 id="信息收集或者系统漏洞利用"><a href="#信息收集或者系统漏洞利用" class="headerlink" title="信息收集或者系统漏洞利用"></a>信息收集或者系统漏洞利用</h5><p>访问或者修改目标系统中的信息或者资源，或者从目标系统导航到另一个目标系统。</p><h5 id="维持访问权限"><a href="#维持访问权限" class="headerlink" title="维持访问权限"></a>维持访问权限</h5><p>攻击者安装后门或者其他恶意软件，或者改变认证证书，或者改变系统的其他配置，从而使攻击者在首次获得访问权限后，可以保证其拥有后续的长期访问权限。</p><h4 id="入侵实例"><a href="#入侵实例" class="headerlink" title="入侵实例"></a>入侵实例</h4><ul><li>远程获得电子邮件服务器超级用户(root)权限。</li><li>破坏Web服务器。</li><li>猜测和破解密码。</li><li>复制一个存有信用卡账号的数据库。</li><li>在未授权的情况下浏览敏感数据，包括工资记录和医疗信息等。</li><li>在工作站上运行数据包嗅探器来捕获用户名和密码。</li><li>利用匿名FTP服务器的权限错误( permIssionerror)发送盗版的软件和音乐文件。</li><li>拨号到一个不安全的调制解调器，以获得内网的访问权限。</li><li>伪装成管理人员，呼叫帮助平台，重置该管理人员的电子邮件口令并学习新的口令。</li><li>在未授权的情况下使用一个无人值守的已登录的工作站。</li></ul><p><img src="/imgs/iis/136.png" alt="image-20231201101402063"></p><p><img src="/imgs/iis/137.png" alt="image-20231201101432036"></p><h3 id="入侵检测系统IDS"><a href="#入侵检测系统IDS" class="headerlink" title="入侵检测系统IDS"></a>入侵检测系统IDS</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><h5 id="安全入侵"><a href="#安全入侵" class="headerlink" title="安全入侵"></a>安全入侵</h5><p>一个安全事件或多个安全事件的组合构成一个安全事故( security incident)，在安全事故中入侵者在未经授权的情况下获取或尝试获取一个系统(或系统资源)的访问权。</p><h5 id="入侵检测-1"><a href="#入侵检测-1" class="headerlink" title="入侵检测"></a>入侵检测</h5><p>一种监控并分析系统事件的安全服务，目标是发现未经授权而访问系统资源的尝试活动，并提供实时或近似实时的报警</p><h4 id="入侵检测系统（IDS）"><a href="#入侵检测系统（IDS）" class="headerlink" title="入侵检测系统（IDS）"></a>入侵检测系统（IDS）</h4><p>进行入侵检测的软件与硬件的组合便是入侵检测系统</p><p>intrusion detection sys</p><h5 id="需要IDS原因"><a href="#需要IDS原因" class="headerlink" title="需要IDS原因"></a>需要IDS原因</h5><ul><li>防火墙的不足<ul><li>是网络边界的设备</li><li>自身可以被攻破</li><li>对某些攻击保护很弱</li><li>不是所有的威胁来自防火墙外部</li></ul></li><li>入侵容易<ul><li>入侵教程随处可见</li><li>各种工具唾手可得</li></ul></li></ul><table><thead><tr><th></th><th>优点</th><th>局限性</th></tr></thead><tbody><tr><td>防火墙</td><td>可简化网络管理，产品成熟</td><td>无法处理网络内部的攻击</td></tr><tr><td>IDS</td><td>实时监控网络安全状态</td><td>误报警，缓慢攻击，新的攻击模式</td></tr><tr><td>Scanner</td><td>简单可操作，帮助系统管理员和安全服务人员解决实际问题</td><td>并不能真正扫描漏洞</td></tr><tr><td>VPN</td><td>保护公网上的内部通信</td><td>可视为防火墙上的一个漏洞</td></tr><tr><td>防病毒</td><td>针对文件与邮件，产品成熟</td><td>功能单一</td></tr></tbody></table><h5 id="入侵检测系统性能关键参数"><a href="#入侵检测系统性能关键参数" class="headerlink" title="入侵检测系统性能关键参数"></a>入侵检测系统性能关键参数</h5><p><strong>误报</strong>(false positive)：系统错误地将异常活动定义为入侵。</p><p><strong>漏报</strong>(false negative)：系统未能检测出真正的入侵行为。</p><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><ul><li>不间断运行</li><li>具有容错功能</li><li>抵御破坏</li><li>对系统增加最小的开销</li><li>根据系统安全策略配置</li><li>适应系统和用户行为变化</li><li>监测更多主机</li><li>提供很好的服务降级</li><li>允许动态重新配置</li></ul><h5 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h5><p>三个基本组件</p><ul><li><p>传感器</p><p>信息收集</p></li><li><p>分析器</p><p>分析收集的信息，确定是否发生了入侵</p></li><li><p>用户接口</p><p>查看系统输出或控制系统行为</p></li></ul><h5 id="传感器-信息收集"><a href="#传感器-信息收集" class="headerlink" title="传感器-信息收集"></a>传感器-信息收集</h5><p>入侵检测的第一步是信息收集，收集内容包括系统、网络、数据及用户活动的状态和行为</p><p>从一个源来的信息有可能看不出疑点，因此要尽可能扩大检测范围，信息收集的来源如下</p><ul><li>系统调用踪迹</li><li>审计(日志文件)记录</li><li>文件完整性校验和</li><li>注册表访问</li></ul><p>入侵检测很大程度上依赖于收集信息的可靠性和正确性，因此入侵检测系统软件本身应具有相当强的完整性和坚固性，防止被篡改而收集到错误的信息。</p><h5 id="分析器-信息分析"><a href="#分析器-信息分析" class="headerlink" title="分析器-信息分析"></a>分析器-信息分析</h5><p>分析传感器收集到的信息，确定是否发生了入侵。主要分为以下两种方法。</p><ul><li>异常检测<ul><li>采集有关合法用户在某段时间内的行为数据；</li><li>统计检验被监测的行为，以较高的置信度确定该行为是否不是合法用户的行为</li></ul></li><li>特征或启发性检测<ul><li>使用一组已知恶意数据模式(特征或者攻击规则(启发式)组成的集合来与当前的行为进行比较；</li><li>也被称为误用检测；</li><li>仅仅可以被用来识别有模式或者有规则的已知攻击。</li></ul></li></ul><h6 id="信息分析-异常检测"><a href="#信息分析-异常检测" class="headerlink" title="信息分析-异常检测"></a>信息分析-异常检测</h6><p>异常检测方法首先有一个训练过程，其通过在被监控的系统上收集和处理正常行为的相关信息来建立一个合法用户的行为模型。检测时，会把当前被观测到的行为与模型进行比较，从而确定是否为入侵行为。</p><ul><li>统计法</li><li>基于知识法</li><li>机器学习法</li></ul><p><img src="/imgs/iis/138.png" alt="image-20231201131221503"></p><h6 id="信息分析-特征或启发性探测"><a href="#信息分析-特征或启发性探测" class="headerlink" title="信息分析-特征或启发性探测"></a>信息分析-特征或启发性探测</h6><ul><li>特征方法<ul><li>用一个大的已知恶意数据模式的集合去匹配系统中或发送到网络中的数据。</li><li>特征集合需要足够大，这样可以在尽可能减小误报率的同时检测到最多的恶意数据。</li><li>该方法被广泛应用于反病毒产品、网络流量扫描代理以及NIDS中。</li></ul></li><li>基于规则的启发式识别<ul><li>采用规则来识别已知的渗透或者利用已知漏洞进行的渗透。</li><li>规则还可用来识别可疑行为，即使该行为并未超出已建立的可用模式范围。</li><li>通常，系统中使用的规则与特定的机器和操作系统有关。</li><li>Snort系统是一个基于规则的NIDS实例。</li></ul></li></ul><h4 id="入侵检测的分类-按数据来源"><a href="#入侵检测的分类-按数据来源" class="headerlink" title="入侵检测的分类-按数据来源"></a>入侵检测的分类-按数据来源</h4><ul><li><p>基于主机的IDS-HIDS</p><p>监测一台主机的特征和该主机发生的与可疑活动相关的事件</p></li><li><p>基于网络的IDS-NIDS</p><p>监测特定的网段或设备的流量并分析网络、传输和应用协议，用以识别可疑的活动</p></li><li><p>分布式或混合式IDS<br>通常是将主机的传感器和网络的传感器收集到的信息结合，并汇总到一个中央分析器中，这样能够更好地识别入侵活动并做出响应。</p></li></ul><h5 id="基于主机的入侵检测HIDS"><a href="#基于主机的入侵检测HIDS" class="headerlink" title="基于主机的入侵检测HIDS"></a>基于主机的入侵检测HIDS</h5><p>HIDS向易受攻击或敏感的系统中添加专用的安全软件层，包括数据库服务器和管理系统等。HIDS以多种方式监测系统上的活动，检测可疑行为。</p><h6 id="主要目的"><a href="#主要目的" class="headerlink" title="主要目的"></a>主要目的</h6><p>HIDS可以在任何损害发生之前阻止攻击，但它的主要目的还是检测入侵、记录可疑事件，并发送警报</p><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><p>HIDS可以使用异常、特征、启发式方法来检测未授权的行为，实现检测外部和内部入侵，这一点是基于网络的IDS或者防火墙所不及的</p><h6 id="检测内容"><a href="#检测内容" class="headerlink" title="检测内容"></a>检测内容</h6><p>系统调用、端口调用、系统日志、安全审记、应用日志</p><h5 id="基于网络的入侵检测NIDS"><a href="#基于网络的入侵检测NIDS" class="headerlink" title="基于网络的入侵检测NIDS"></a>基于网络的入侵检测NIDS</h5><p>NIDS监控一个网络或多个互联网络上选定的位置的网络流量。NIDS检测网络层、传输层或应用层协议的活动，实时或接近于实时地分析网络数据包，以试图发现入侵模式。</p><h6 id="与HIDS区别"><a href="#与HIDS区别" class="headerlink" title="与HIDS区别"></a>与HIDS区别</h6><p>NIDS检测网络上流向潜在的易受攻击的计算机系统的数据包流量，而HIDS检测的是主机上的用户和软件活动</p><h6 id="典型的NIDS设备"><a href="#典型的NIDS设备" class="headerlink" title="典型的NIDS设备"></a>典型的NIDS设备</h6><ul><li>大量传感器用来监控数据包流量；</li><li>一个或多个服务器负责NIDS管理功能；</li><li>一个或多个管理控制台提供人机交互的接口</li></ul><p>分析流量模式从而检测入侵的工作可以在传感器、管理服务器或在二者上组合完成</p><h6 id="检测内容-1"><a href="#检测内容-1" class="headerlink" title="检测内容"></a>检测内容</h6><p>包头信息+有效数据部分</p><p><img src="/imgs/iis/139.png" alt="image-20231201131956728"></p><p><img src="/imgs/iis/140.png" alt="image-20231201132026891"></p><h6 id="适合使用特征检测进行识别的攻击"><a href="#适合使用特征检测进行识别的攻击" class="headerlink" title="适合使用特征检测进行识别的攻击"></a>适合使用特征检测进行识别的攻击</h6><ul><li>应用层侦察和攻击</li><li>传输层侦察和攻击</li><li>网络层侦察和攻击</li><li>意外应用程序服务</li><li>策略违背</li></ul><h6 id="适合使用异常检测进行识别的攻击"><a href="#适合使用异常检测进行识别的攻击" class="headerlink" title="适合使用异常检测进行识别的攻击"></a>适合使用异常检测进行识别的攻击</h6><ul><li>拒绝服务(DoS)攻击</li><li>扫描</li><li>蠕虫</li></ul><h6 id="异常检测技术-状态协议分析"><a href="#异常检测技术-状态协议分析" class="headerlink" title="异常检测技术-状态协议分析"></a>异常检测技术-状态协议分析</h6><p>SPA的检测是通过比较观测的网络流量与预定的、供应商提供的正常的流量特征实现的。这与基于组织特定的流量特征的异常检测技术不同。</p><p><strong>优点</strong></p><p>SPA通过推断和追踪网络、传输和应用协议的状态，保证网络活动按预期发展。主要优势在于其对所要求资源的高利用率。</p><p><strong>警报日志记录</strong></p><h5 id="分布式入侵检测系统"><a href="#分布式入侵检测系统" class="headerlink" title="分布式入侵检测系统"></a>分布式入侵检测系统</h5><p><img src="/imgs/iis/141.png" alt="image-20231201132442091"></p><p><img src="/imgs/iis/142.png" alt="image-20231201132503334"></p><h3 id="入侵检测技术-蜜罐"><a href="#入侵检测技术-蜜罐" class="headerlink" title="入侵检测技术-蜜罐"></a>入侵检测技术-蜜罐</h3><p>Honeypot也叫蜜罐，指一种安全资源。蜜罐是掩人耳日的系统，是为引诱潜在的攻击者远离关键系统面设计的，它的价值就是被探测，被攻击或攻陷</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>转移攻击者对重要系统的访问；</li><li>收集有关攻击者活动的信息；</li><li>引诱攻击者在系统中逗留足够长的时间，以便于管理员对此攻击做出响应</li></ul><p>蜜罐填满了看起来有价值但系统的合法用户不会访问的伪造信息。因此，任何对蜜罐的访问都是可疑的。蜜罐系统装备了敏感的监控器和事件记录器，用于检测这些访问和关攻击者的活动信息。</p><p>蜜罐是一种没有产出的资源。网络以外的任何人与蜜罐进行交互都没有合法的理由。因此，任何与蜜罐系统通信的尝试很可能是一个探测、扫描或者攻击。相反，如果一个蜜罐发起对外通信，则系统可能已被破坏。</p><h4 id="蜜罐分类"><a href="#蜜罐分类" class="headerlink" title="蜜罐分类"></a>蜜罐分类</h4><h5 id="低交互蜜罐"><a href="#低交互蜜罐" class="headerlink" title="低交互蜜罐"></a>低交互蜜罐</h5><ul><li>由能够模拟特定IT服务或系统的软件包构成，它足以提供一种真实的初级交互，但是却无法提供所模拟服务或系统的全部功能；</li><li>提供了一个低真实度的目标；</li><li>通常来说，这类蜜罐作为一个提供报警功能的分布式IDS的组件已经足够了</li></ul><h5 id="高交互蜜罐"><a href="#高交互蜜罐" class="headerlink" title="高交互蜜罐"></a>高交互蜜罐</h5><ul><li>是一个带有完整操作系统、服务以及应用程序的真实系统，被部署在攻击者能够访问的地方；</li><li>是一个更为真实的目标，很有可能消耗掉攻击者更长的时间；</li><li>但是它需要极大的资源；</li><li>一旦被攻破，就可能被用来发起对其他系统的攻击</li></ul><h4 id="蜜罐拓扑结构"><a href="#蜜罐拓扑结构" class="headerlink" title="蜜罐拓扑结构"></a>蜜罐拓扑结构</h4><p><img src="/imgs/iis/143.png" alt="image-20231201132843551"></p><h4 id="蜜罐部署"><a href="#蜜罐部署" class="headerlink" title="蜜罐部署"></a>蜜罐部署</h4><p><img src="/imgs/iis/144.png" alt="image-20231201132909777"></p><h3 id="Snort"><a href="#Snort" class="headerlink" title="Snort"></a>Snort</h3><p>Snort是开源、高度可配置且可移植的基于主机或基于网络的IDS。Snort被称为是轻量级IDS，它具有以下特征：</p><ul><li>可以在大多数网络节点(主机、服务器和路由器)轻松地部署；</li><li>使用少量的内存和处理器时间进行高效操作；</li><li>系统管理员可以容易地进行配置，以便在较短时间内实现特定的安全解决方案。</li></ul><p><img src="/imgs/iis/145.png" alt="image-20231201132956210"></p><h4 id="Snort规则"><a href="#Snort规则" class="headerlink" title="Snort规则"></a>Snort规则</h4><p>Snort使用一种简单、灵活的规则定义语言来生成检测引擎可用的规则。尽管规则非常简单，可以直接编写，但它们的功能足以检测各种恶意或可疑的网络流量。</p><p><img src="/imgs/iis/146.png" alt="image-20231201133039463"></p><h4 id="规则动作"><a href="#规则动作" class="headerlink" title="规则动作"></a>规则动作</h4><p><img src="/imgs/iis/147.png" alt="image-20231201133105282"></p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h3 id="防火墙的必要性"><a href="#防火墙的必要性" class="headerlink" title="防火墙的必要性"></a>防火墙的必要性</h3><p>防火墙是一种用于保护本地系统或网络免受基于网络的安全威胁，同时支持通过广域网或Internet访问外部世界的工具。</p><p>保护局域网的有效手段</p><p>作为一种安全周界</p><ul><li>加强安全和审计的遏制点</li><li>将内部系统与外界网络隔开</li></ul><h3 id="防火墙的特征与访问策略"><a href="#防火墙的特征与访问策略" class="headerlink" title="防火墙的特征与访问策略"></a>防火墙的特征与访问策略</h3><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>所有所有入站和出站的网络流量都必须通过防火墙</li><li>只有经过授权的网络流量，例如符合本地安全策略定义的流量，防火墙才允许其通过</li><li>防火墙本身不能被渗透</li></ul><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><ul><li>不能阻止绕开防火墙的攻击</li><li>不能完全防止内部威胁</li><li>在广域网被感染的电子设备可能被连接到内部网络使用，此时防火墙无法阻止</li></ul><h4 id="访问策略"><a href="#访问策略" class="headerlink" title="访问策略"></a>访问策略</h4><p>指定合适的访问策略是防火墙的规划和实施过程的关键部分</p><ul><li>策略中会列出可以通过防火墙的合法流量类型</li><li>包括地址范围、协议、应用程序、内容类型等</li></ul><p>该策略应由企业的信息安全风险评估和策略部门进行制定</p><p>访问策略先是根据一个较为广义的规范，即公司需要支持哪些类型的流量而进行制定</p><h4 id="过滤特性"><a href="#过滤特性" class="headerlink" title="过滤特性"></a>过滤特性</h4><h5 id="IP地址和协议值"><a href="#IP地址和协议值" class="headerlink" title="IP地址和协议值"></a>IP地址和协议值</h5><p>用来限制对特定服务的访问</p><ul><li>通常被包过滤和状态检测防火墙使用</li></ul><h5 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h5><p>主要用于转发和监控特定应用层协议的信息交换</p><ul><li>通常被应用层网关所使用</li></ul><h5 id="用户身份"><a href="#用户身份" class="headerlink" title="用户身份"></a>用户身份</h5><p>通常用于那些需要确认自己正在使用某种形式的安全认证技术的内部用户</p><h5 id="网络活动"><a href="#网络活动" class="headerlink" title="网络活动"></a>网络活动</h5><p>这是基于时间或请求等注意事项的访问控制。例如限定时间段、请求频率、检测扫描请求或其他行为模式</p><h3 id="防火墙的类型"><a href="#防火墙的类型" class="headerlink" title="防火墙的类型"></a>防火墙的类型</h3><p><img src="/imgs/iis/148.png" alt="image-20231208101522714"></p><h4 id="包过滤防火墙"><a href="#包过滤防火墙" class="headerlink" title="包过滤防火墙"></a>包过滤防火墙</h4><p>包中包含信息：源IP，目的IP，源和目的端传输层地址，IP协议域，接口</p><p>包过滤防火墙根据一组规则来检查每个接收和发送的IP包</p><ul><li>通常，包过滤器设置成基于与IP和TCP头（header）域匹配的规则列表</li><li>根据匹配的规则来判断该包是转发还是丢弃</li></ul><p>两种默认策略</p><ul><li>丢弃：没有明确准许的将被阻止<ul><li>更加保守，更受控制，对用户可见</li></ul></li><li>转发：没有明确阻止的将被准许<ul><li>更易管理和使用，但安全性也降低了</li></ul></li></ul><table><thead><tr><th>规则</th><th>方向</th><th>源地址</th><th>目的地址</th><th>协议</th><th>目的端口</th><th>动作</th></tr></thead><tbody><tr><td>1</td><td>进入</td><td>外部</td><td>内部</td><td>TCP</td><td>25</td><td>允许</td></tr><tr><td>2</td><td>离开</td><td>内部</td><td>外部</td><td>TCP</td><td>&gt;1023</td><td>允许</td></tr><tr><td>3</td><td>离开</td><td>内部</td><td>外部</td><td>TCP</td><td>25</td><td>允许</td></tr><tr><td>4</td><td>进入</td><td>外部</td><td>内部</td><td>TCP</td><td>&gt;1023</td><td>允许</td></tr><tr><td>5</td><td>任意</td><td>任意</td><td>任意</td><td>任意</td><td>任意</td><td>禁止</td></tr></tbody></table><ol><li>允许从外部源入站的电子邮件流量（SMTP的端口是25）。</li><li>该规则试图允许对入站的SMTP连接进行响应。</li><li>允许向外部源出站的电子邮件流量。</li><li>该规则试图允许对出站的SMTP连接进行响应。</li><li>这是默认规则的明确说明。所有规则集的最后都必然会存在这样一条规则。</li></ol><p><strong>优点</strong></p><ul><li>简单：仅需根据包的信息确定访问策略</li><li>对用户透明，处理速度快</li></ul><p><strong>缺点</strong></p><ul><li>不能阻止利用了特定应用的漏洞或功能所进行的攻击</li><li>有限的日志记录功能</li><li>不支持高级的用户认证机制</li><li>对利用TCP&#x2F;IP规范和协议栈存在的问题进行的攻击没有很好的应对措施</li><li>不恰当的设置会引起包过滤防火墙的安全性受到威胁</li></ul><h4 id="状态检测防火墙"><a href="#状态检测防火墙" class="headerlink" title="状态检测防火墙"></a>状态检测防火墙</h4><p>状态检测防火墙通过建立一个出站TCP连接目录来强制执行TCP流量的规则</p><ul><li>每个当前建立的连接都有一个条目</li><li>只有数据包符合这个目录中的某项时，包过滤器才允许那些到达高端口号的入站流量通过</li></ul><table><thead><tr><th>源地址</th><th>源端口</th><th>目的地址</th><th>目的端口</th><th>连接状态</th></tr></thead><tbody><tr><td>192.168.1.100</td><td>1030</td><td>210.9.88.29</td><td>80</td><td>已建立</td></tr><tr><td>192.168.1.102</td><td>1031</td><td>216.32.42.123</td><td>80</td><td>已建立</td></tr><tr><td>192.168.1.101</td><td>1033</td><td>173.66.32.122</td><td>25</td><td>已建立</td></tr><tr><td>192.168.1.106</td><td>1035</td><td>177.231.32.12</td><td>79</td><td>已建立</td></tr><tr><td>223.43.21.231</td><td>1990</td><td>192.168.1.6</td><td>80</td><td>已建立</td></tr><tr><td>219.22.123.32</td><td>2112</td><td>192.168.1.6</td><td>80</td><td>已建立</td></tr><tr><td>210.99.212.18</td><td>3321</td><td>192.168.1.6</td><td>80</td><td>已建立</td></tr><tr><td>24.102.32.23</td><td>1025</td><td>192.168.1.6</td><td>80</td><td>已建立</td></tr><tr><td>223.21.22.12</td><td>1046</td><td>192.168.1.6</td><td>80</td><td>已建立</td></tr></tbody></table><h4 id="应用级网关"><a href="#应用级网关" class="headerlink" title="应用级网关"></a>应用级网关</h4><p>起到应用流量中继器的作用</p><ul><li>用户使用TCP&#x2F;IP应用程序连接到网关，同时网关要求用户提供需访问的主机名称</li><li>用户提供一个有效ID和认证信息，网关联系远程主机并在两个端点之间中继TCP分段</li><li>如果网管没有为特定应用程序实现代理代码，则该服务不受支持，无法通过网关</li></ul><h4 id="电路级网关"><a href="#电路级网关" class="headerlink" title="电路级网关"></a>电路级网关</h4><p>建立两条TCP连接：</p><ul><li>自身和内部主机TCP用户间的连接</li><li>自身和外部主机TCP用户间的连接</li></ul><p>网关在这两条连接中中继TCP分段，不检查其内容其安全功能为判断哪些连接是允许的</p><p>一种典型的应用是系统管理员信任系统内部用户的情况，此时网关可被设置为两种连接</p><ul><li>应用级服务或代理服务入站连接</li><li>电路及功能的出站连接</li></ul><h3 id="防火墙的布置"><a href="#防火墙的布置" class="headerlink" title="防火墙的布置"></a>防火墙的布置</h3><h4 id="堡垒主机"><a href="#堡垒主机" class="headerlink" title="堡垒主机"></a>堡垒主机</h4><p>堡垒主机被防火墙管理员称为网络安全中极强的端系统。通常，堡垒主机可以作为应用级或电路级网关平台。</p><p><strong>特征</strong></p><ul><li>运行操作系统的安全版本。</li><li>在用户被允许访问代理服务之前，堡垒主机可能需要对其进行附加认证。</li><li>文件系统中那些包含可执行代码的部分被设置成只读。</li><li>每个代理被配置为只允许对指定系统进行访问。</li><li>每个代理通过记录所有网络流量. 每条连接以及每条连接的持续时间来维护详细的审计信息。</li><li>每个代理模块是专门为网络安全设计的非常小的软件包。易于检查其缺陷。</li><li>每一个代理都独立于其他的代理。</li><li>每个代理被配置为只支持标准应用命令集的子集。</li></ul><h4 id="基于主机的防火墙"><a href="#基于主机的防火墙" class="headerlink" title="基于主机的防火墙"></a>基于主机的防火墙</h4><ul><li>用于保障个人主机安全</li><li>许多操作系统中是自带的，或者以附件的形式提供</li><li>过滤和限制数据包流</li><li>通常位于服务器上</li></ul><p><strong>优点</strong></p><ul><li>过滤规则可以根据主机环境定制，既能够执行服务器共有的安全策略，也能够针对不同的应用使用不同的过滤规则。</li><li>保护功能独立于网络的拓扑结构。因此，不管是内部的攻击还是外部的攻击都必须通过防火墙。</li><li>应用于单机防火墙之间的联合处，基于主机的防火墙提供了一个额外的保护层。当在网络中添加新服务器时，只需配置服务器自带的防火墙，而不需修改整个网络的防火墙设置。</li></ul><h4 id="个人防火墙"><a href="#个人防火墙" class="headerlink" title="个人防火墙"></a>个人防火墙</h4><ul><li>控制个人电脑或者工作站与Internet或企业网络之间的网络流量</li><li>可以用于家庭环境或公司的内网中</li><li>通常，个人防火墙是个人电脑上的一个软件模块.</li></ul><h3 id="防火墙的部署与配置"><a href="#防火墙的部署与配置" class="headerlink" title="防火墙的部署与配置"></a>防火墙的部署与配置</h3><h4 id="DMZ网络"><a href="#DMZ网络" class="headerlink" title="DMZ网络"></a>DMZ网络</h4><p><img src="/imgs/iis/149.png" alt="image-20231208103755293"></p><h4 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h4><p>一组依靠相对不安全的网络互相连接的计算机，通过加密技术和特殊的协议提供安全性</p><p>IPSec安全协议</p><p><img src="/imgs/iis/150.png" alt="image-20231208103837823"></p><h3 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h3><h4 id="屏蔽路由器"><a href="#屏蔽路由器" class="headerlink" title="屏蔽路由器"></a>屏蔽路由器</h4><p>外部网络与内部网络之间具有无状态或者全部包过滤功能的单个路由器</p><h4 id="独立内嵌堡垒主机"><a href="#独立内嵌堡垒主机" class="headerlink" title="独立内嵌堡垒主机"></a>独立内嵌堡垒主机</h4><p>一种在外部和内部路由器之间的单独防火墙设备</p><h4 id="主机驻留防火墙"><a href="#主机驻留防火墙" class="headerlink" title="主机驻留防火墙"></a>主机驻留防火墙</h4><p>包括个人防火墙软件和服务器上的防火墙软件</p><h4 id="分布式防火墙配置"><a href="#分布式防火墙配置" class="headerlink" title="分布式防火墙配置"></a>分布式防火墙配置</h4><p>被大型商业机构和政府部门使用</p><h4 id="双T型堡垒主机"><a href="#双T型堡垒主机" class="headerlink" title="双T型堡垒主机"></a>双T型堡垒主机</h4><p>非军事区连接在堡垒防火墙的一个独立的网络接口上</p><h4 id="独立T型堡垒主机"><a href="#独立T型堡垒主机" class="headerlink" title="独立T型堡垒主机"></a>独立T型堡垒主机</h4><p>在堡垒主机上有一个单独的接口通往一个非军事区DMZ，外部可见的服务器设置在此非军事区内</p><h4 id="双内嵌堡垒主机"><a href="#双内嵌堡垒主机" class="headerlink" title="双内嵌堡垒主机"></a>双内嵌堡垒主机</h4><p>非军事区被夹在两个堡垒防火墙中间</p><h2 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h4><p>存在一个庞大的可继承的代码体使用这些不安全的函数，因此容易导致缓冲区溢出</p><h4 id="缓冲区溢出-1"><a href="#缓冲区溢出-1" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h4><p>缓冲区溢出是指接口的一种状况，此时大量的输入被放置到缓冲区或者数据存储区，超过了其所分配的存储能力，覆盖了其他信息。</p><p>缓冲区可能被设置在进程的栈区、堆区，或者数据区。当一个进程试图存储超出缓冲区存储容量（固定长度）的数据，从而导致相邻的内存区域被覆盖时，就会发生缓冲区溢出。</p><p>这些内存区域可能保存着其他程序的变量或者参数，也可能保存着程序控制流数据，例如返回地址和指向前一个栈帧的指针。</p><p><img src="/imgs/iis/151.png" alt="image-20231208111126533"></p><h4 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h4><ul><li>程序使用的数据受到破坏；</li><li>在程序中发生意外的控制权转移；</li><li>可能的内存非法访问；</li><li>很可能最终导致程序终止。</li></ul><p>当缓冲区溢出被用于蓄意攻击系统时，系统的控制权可能会被转移到攻击者选择的代码，因此导致被攻击进程的特权被用于执行攻击者任意想要执行的代码。</p><p><img src="/imgs/iis/152.png" alt="image-20231208111239801"></p><p><img src="/imgs/iis/153.png" alt="image-20231208111256893"></p><h3 id="缓冲区溢出攻击"><a href="#缓冲区溢出攻击" class="headerlink" title="缓冲区溢出攻击"></a>缓冲区溢出攻击</h3><p><img src="/imgs/iis/154.png" alt="image-20231208111330021"></p><p>缓冲区溢出是一种常见的攻击机制，攻击者利用程序漏洞，将自己的攻击代码植入有缓冲区溢出漏洞的程序执行体中，改变该程序的执行过程，来获取目标系统的控制权</p><h4 id="攻击准备"><a href="#攻击准备" class="headerlink" title="攻击准备"></a>攻击准备</h4><p>要想利用任何一种类型的缓冲区溢出，例如已经举例说明的那些程序，攻击者需要：</p><ul><li>理解缓冲区是如何存储在进程的内存中的，以及因此破坏相邻的内存区域和改变程序的执行流的可能性。</li><li>识别程序中的缓冲区溢出漏洞，这些漏洞在攻击者的控制下使外部的数据资源能够被触发。</li></ul><p>识别有漏洞的程序可以通过检查源代码、在程序处理过长的输入时跟踪程序的执行、或者使用一些工具，例如fuzzing技术。</p><h4 id="栈缓冲区溢出"><a href="#栈缓冲区溢出" class="headerlink" title="栈缓冲区溢出"></a>栈缓冲区溢出</h4><p>当目标缓冲区被设置在栈区时，所发生的缓冲区溢出就是栈缓冲区溢出（stack buffer overflow），又被称为栈溢出攻击（stack smashing）</p><ol><li>当一个函数调用另一个函数时，它需要在某个地方保存返回地址，这样当调用完成以后，被调用的函数能够将控制权返还给调用函数。</li><li>除此之外，还需要一些存储单元保存传递给被调用函数的参数，以及当被调用的函数返回时，也可能保存它希望继续使用的寄存器变量的值。</li></ol><p>所有这些数据一般都保存在栈的一个被称为栈帧（stack frame）的结构中。</p><p><img src="/imgs/iis/155.png" alt="image-20231208112532882"></p><p>函数p调用函数Q的一般过程可以总结如下：<br>调用函数P：</p><ol><li>为被调用的函数压入参数进栈；</li><li>执行call指令调用目标函数，压入返回地址进栈。</li></ol><p>被调用的函数Q：</p><ol><li>压入当前的帧指针，指向其调用函数的栈帧。</li><li>向下移动栈指针，为被调用函数的局部变量分配空间。</li><li>……</li></ol><p><img src="/imgs/iis/156.png" alt="image-20231208112552864"></p><p>程序装载到进程内存</p><p><img src="/imgs/iis/157.png" alt="image-20231208113126719"></p><p><img src="/imgs/iis/158.png" alt="image-20231208113147403"></p><p><img src="/imgs/iis/159.png" alt="image-20231208113201752"></p><h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h4><p>shellcode是一段用于利用缓冲区溢出漏洞而执行的代码，通常为16进制的机器码，保存在发生溢出的缓冲区中。</p><h5 id="shellcode的功能"><a href="#shellcode的功能" class="headerlink" title="shellcode的功能"></a>shellcode的功能</h5><p>将控制权转移给一个用户的命令行解释器或者shell，使攻击者可以利用被攻击程序的特权访问系统上任何可用的程序</p><h5 id="shellcode分类"><a href="#shellcode分类" class="headerlink" title="shellcode分类"></a>shellcode分类</h5><p>本地shellcode：<br>用于利用软件漏洞提升权限。比如在Linux下由普通权限提升至root权限。</p><p>远程shellcode：<br>利用软件漏洞获得特定的shellcode，再经由C或Python编写远程攻击程序，进而取得对方电脑的root权限。</p><p>shellcode仅仅是指机器代码，是与机器指令和数据值相对应的一串二进制值，而这些指令和数据值能够使攻击者实现期望的功能。这意味着：</p><ul><li>编写shellcode需要熟悉汇编语言和目标系统的操作；</li><li>shellcode依赖于特定的处理器结构和操作系统；</li><li>缓冲区溢出攻击总是针对特定操作系统上运行的特定软件。</li></ul><h5 id="若干情况"><a href="#若干情况" class="headerlink" title="若干情况"></a>若干情况</h5><p>目标程序可能是：</p><ul><li>受信任的系统工具</li><li>网络守护进程</li><li>常用的库代码</li></ul><p>shellcode 的功能</p><ul><li>被连接的时候建立一个侦听服务启动一个远程shell</li><li>建立一个相反的shell,反向连接到黑客系统</li><li>使用本地攻击，创建一个shell</li><li>废除当前阻止其他攻击的防火墙规则</li><li>摆脱chrooted(限制执行）的环境，对系统进行完全访问</li></ul><h3 id="缓冲区溢出防御"><a href="#缓冲区溢出防御" class="headerlink" title="缓冲区溢出防御"></a>缓冲区溢出防御</h3><p>两种防御方式</p><ul><li><p>编译时防御</p><p>加固程序来抵抗在新程序中的攻击</p></li><li><p>运行时防御</p><p>在现有的程序中检测和终止攻击</p></li></ul><h4 id="编译时防御"><a href="#编译时防御" class="headerlink" title="编译时防御"></a>编译时防御</h4><h5 id="程序设计语言的选择"><a href="#程序设计语言的选择" class="headerlink" title="程序设计语言的选择"></a>程序设计语言的选择</h5><p>使用一种现代高级程序语言编写程序</p><p>优点</p><ul><li>不容易受到缓冲区溢出的攻击。</li><li>它们的编译器包含附加的代码自动加强范围检査。</li></ul><p>缺点</p><ul><li>在编译和运行时必须执行附加代码，以此加强检査；</li><li>这些语言提供的灵活性和安全机制，在资源使用上会付出一定的代价；</li><li>距离底层的机器语言和结构越远，就意味着访问一些指令和硬件资源越不可能；</li><li>限制了编写代码时的有效性，例如，编写设备驱动程序，必须与底层资源进行交互。</li></ul><h5 id="安全的编码技术"><a href="#安全的编码技术" class="headerlink" title="安全的编码技术"></a>安全的编码技术</h5><p>为了加固这些系统，程序员必须检査代码，以一种安全的方式重新编写任何不安全的代码。</p><p>程序员对已有的代码基底（code base)进行了广泛的审计</p><p>OpenBSD项目是一个很好的典范，它产生了一个自由的多平台的基于4.4BSD的类UNIX (UNIX-like)操作系统。</p><h5 id="语言扩充"><a href="#语言扩充" class="headerlink" title="语言扩充"></a>语言扩充</h5><p>不安全的数组和指针引用，在这些引用中自动插入范围检査</p><p>处理这个问题需要对指针的语义进行扩充，使其包含边界信息及库例程的使用，并确保这些值被正确设置</p><h5 id="安全库的使用"><a href="#安全库的使用" class="headerlink" title="安全库的使用"></a>安全库的使用</h5><p>改进系统安全性的一个方法，是用较安全的变体来代替这些不安全的例程。例如</p><ol><li>包括OpenBSD在内的BSD系列的操作系统中的strlcpy()函数是strcpy函数更加的安全版本。在已知目标缓冲区大小的前提下，将传入的地址参数开始的字符串复制到以目标地址空间，不会造成缓冲区溢出。</li><li>Libsafe是一个动态库，它在现有的标准库之前被装载。它实现了标准的语义但又包含了附加的检査，保证了复制操作没有超出栈帧里的局部变量的有效地址空间。</li></ol><h5 id="栈保护机制"><a href="#栈保护机制" class="headerlink" title="栈保护机制"></a>栈保护机制</h5><p>栈保护机制是一个保护程序免受传统的栈溢出攻击的有效方法</p><p>设定函数入口和出口代码并检査其栈帧寻找有没有受到破坏的征兆，如果发现有任何修改，程序就终止运行</p><h6 id="栈卫士"><a href="#栈卫士" class="headerlink" title="栈卫士"></a>栈卫士</h6><p>栈卫士（stackguard)是已知的最好的保护机制之一，它是GCC编译器的<br>扩充——加入了附加的函数入口和出口代码</p><p>在为局部变量分配地址空间之前，在旧的帧指针地址下写入一个canary值，任何为了改变旧的帧指针和返回地址的尝试都将改变这个值。</p><p><img src="/imgs/iis/160.png" alt="image-20231215101813700"></p><p>在常用函数的退出操作（恢复旧的帧指针和转移控制权后退到返回地址）之前，添加的函数出口代码检査canary的值有没有发生变化。</p><p>为了对函数成功地进行防御，<strong>canary的值应该是不可预测的</strong>，而且不同系统上canary的值也应该是不同的。</p><h6 id="Stackshield和返回地址防护者Return-Address-Defender"><a href="#Stackshield和返回地址防护者Return-Address-Defender" class="headerlink" title="Stackshield和返回地址防护者Return Address Defender"></a>Stackshield和返回地址防护者Return Address Defender</h6><p>Stackshield和返回地址防护者使用了另外一种栈帧保护机制。这些也是GCC的扩展版，包含附加的函数入口和出口代码。</p><p>该方法没有改变栈帧的结构，而是在函数入口处添加代码，将返回地址的一个副本写到内存的一个安全区域(要想破坏这个区域非常困难）。</p><p><img src="/imgs/iis/161.png" alt="image-20231215102233025"></p><p>在函数的出口处，添加的代码检査栈帧里的返回地址与保存的副本，如果发现任何变化就终止程序。</p><p>因为栈帧的格式没有改变，故这些扩展与未改变的调试器兼容。此外，程序必须被重新编译才可以利用这些扩展。</p><h4 id="运行时防御"><a href="#运行时防御" class="headerlink" title="运行时防御"></a>运行时防御</h4><h5 id="地址空间随机化"><a href="#地址空间随机化" class="headerlink" title="地址空间随机化"></a>地址空间随机化</h5><p>一种显著增加预测难度的技术是，以随机的方式改变为每一个进程的栈设置的地址。</p><h6 id="堆内存随机分配"><a href="#堆内存随机分配" class="headerlink" title="堆内存随机分配"></a>堆内存随机分配</h6><p>除了栈之外，还有一类堆缓冲区溢出攻击，它们利用这样一个事实：连续内存分配或者堆管理数据结构的排列非常接近。堆内存分配的随机选择使预测目标缓冲区地址变得相当困难，从而可以成功阻止堆溢出攻击。</p><h6 id="标准库例程的存储位置随机化"><a href="#标准库例程的存储位置随机化" class="headerlink" title="标准库例程的存储位置随机化"></a>标准库例程的存储位置随机化</h6><p>攻击的另一个目标是标准库例程的存储位置，我们可以随机选择一个程序装载标准库的次序，随机选择它的虚拟内存地址的存储位置，这样就可以使任何特定函数的地址变得不可预测，从而减少了攻击者正确预测地址的机会。</p><h5 id="返回系统调用"><a href="#返回系统调用" class="headerlink" title="返回系统调用"></a>返回系统调用</h5><p>前面介绍的不可执行的栈是防御缓冲区溢出的，而攻击者已经转向另一种不同的攻击——改变返回地址，使程序跳转到系统上现有的代码。</p><ol><li>攻击者详细地设定一次溢出：填充缓冲区，用一个合适的地址代替保存的帧指针，用希望的库函数的地址代替返回地址，接下来写入传给库函数的参数的值。</li><li>当被攻击的函数返回时，它恢复（改变的）帧指针，然后出栈，并将控制权转交到返回地址，而这个地址正是攻击者期望运行的库函数代码的地址。</li></ol><p>这种攻击依赖于参数的类型以及库函数对它们的解释，攻击者需要准确知道它们的地址（一般在被改写的缓冲区范围内）</p><p>另一种不同的攻击是将两个库函数调用链接在一起，在一个库函数之后调用另一个库函数。链接是通过让占位符的值（被当作第一个被调用的库函数的返回地址）成为第二个函数的地址实现的。</p><p>防御方法：</p><ul><li>利用函数的出口代码检测栈帧或者返回地址的修改情况；</li><li>使用不可执行的栈（non-executable stack)；</li><li>内存中栈的随机选择和系统库的随机选择。</li></ul><h2 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h2><h3 id="典型的网络入侵手段"><a href="#典型的网络入侵手段" class="headerlink" title="典型的网络入侵手段"></a>典型的网络入侵手段</h3><ul><li>后门和木马</li><li>扫描漏洞</li><li>传输过程中的窃听</li><li>IP地址欺骗</li><li>会话劫持</li><li>拒绝服务攻击</li></ul><h3 id="邮件安全协议"><a href="#邮件安全协议" class="headerlink" title="邮件安全协议"></a>邮件安全协议</h3><h4 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h4><p>多用途Internet邮件扩展（MIME）是对旧的RFC822规范的扩展</p><ul><li>RFC 822采用简单的ASCII文本格式定义了一个简单报头，包括到哪里、来自哪里、主题</li><li>MIME提供一些新的报头域，这些域定义了消息正文(或称主体) 有关的信息</li></ul><p><img src="/imgs/iis/162.png" alt="image-20231215103432410"></p><h4 id="S-x2F-MIME"><a href="#S-x2F-MIME" class="headerlink" title="S&#x2F;MIME"></a>S&#x2F;MIME</h4><p>安全&#x2F;多用途Internet邮件扩展（S&#x2F;MIME）是对MIME的安全性的增强</p><ul><li>基于RSA数据安全性</li><li>提供了数字签名和加密E-mail消息的能力</li></ul><h5 id="S-x2F-MIME的四种新功能"><a href="#S-x2F-MIME的四种新功能" class="headerlink" title="S&#x2F;MIME的四种新功能"></a>S&#x2F;MIME的四种新功能</h5><ul><li>封装数据</li><li>签名封装数据</li><li>签名数据</li><li>透明签名数据</li></ul><h5 id="S-x2F-MIME功能流"><a href="#S-x2F-MIME功能流" class="headerlink" title="S&#x2F;MIME功能流"></a>S&#x2F;MIME功能流</h5><p><img src="/imgs/iis/163.png" alt="image-20231215103616426"></p><p><img src="/imgs/iis/164.png" alt="image-20231215103659174"></p><p><img src="/imgs/iis/165.png" alt="image-20231215103721812"></p><h4 id="域名密钥识别邮件标准DKIM"><a href="#域名密钥识别邮件标准DKIM" class="headerlink" title="域名密钥识别邮件标准DKIM"></a>域名密钥识别邮件标准DKIM</h4><p>一种电子邮件消息加密签名的规范，它允许一个签名的域名来声明其对邮件流中的某个消息负责</p><ul><li>用户生成一个消息，传输给邮件提交代理</li><li>消息被发送者私钥进行签名，签名者与其所在域相关</li><li>消息通过Internet中一系列邮件传输代理传递</li><li>在目的地，邮件投递代理从发送者域的DNS服务器中取得对应签名公钥，验证签名，而后发送给接收者</li></ul><p><img src="/imgs/iis/166.png" alt="image-20231215103836905"></p><p>应用最广泛的一个安全服务就是安全套接层（SSL）和随后出现的传输层安全（TLS）</p><h3 id="安全套接层SSL"><a href="#安全套接层SSL" class="headerlink" title="安全套接层SSL"></a>安全套接层SSL</h3><p>制定SSL协议的宗旨是利用TCP协议提供安全可靠的端到端通信协议服务，协议包括两个层次：</p><ul><li>握手协议，报警协议等上层协议。</li><li>较低的SSL记录层协议，其位于传输协议TCP&#x2F;IP之上。</li></ul><p><img src="/imgs/iis/167.png" alt="image-20231215104031045"></p><h4 id="上层协议"><a href="#上层协议" class="headerlink" title="上层协议"></a>上层协议</h4><ul><li>SSL握手协议</li><li>SSL改变密码规格协议</li><li>SSL报警协议</li></ul><h4 id="下层协议"><a href="#下层协议" class="headerlink" title="下层协议"></a>下层协议</h4><p>SSL记录协议</p><h3 id="传输层安全TLS"><a href="#传输层安全TLS" class="headerlink" title="传输层安全TLS"></a>传输层安全TLS</h3><p>TLS已经在很大程度上取代了早期的SSL实现，其协议组与SSL相似</p><ul><li>TLS以一组协议的方式实现一个通用服务，其中的协议依赖于TCP协议</li><li>TLS有两种实现方式：</li><li>作为基础协议组的一部分，对应用来说透明</li><li>嵌入特定的软件包中</li></ul><h4 id="记录协议"><a href="#记录协议" class="headerlink" title="记录协议"></a>记录协议</h4><p>记录协议为多种高层协议提供基本的安全服务：</p><ul><li>机密性：使用共享密钥进行对消息进行对称加密</li><li>消息完整性：为数据添加消息认证码（MAC）</li></ul><p><img src="/imgs/iis/168.png" alt="image-20231215104422965"></p><h4 id="变更密码协议"><a href="#变更密码协议" class="headerlink" title="变更密码协议"></a>变更密码协议</h4><p>变更密码协议用于将预备状态拷贝到当前状态，更新连接密码套件。</p><ul><li>仅包含一条消息，由一个值为1的字节组成。</li></ul><h4 id="报警协议"><a href="#报警协议" class="headerlink" title="报警协议"></a>报警协议</h4><p>报警协议用于向对等实体传送SSL相关的报警信息。</p><ul><li>第一个字节可以取值为警告或者致命，用以表达该消息的严重程度。如果严重程度是致命的，SSL将立刻中止该连接，该会话的其他连接可以继续，但是本次会话不会允许建立新的连接。</li><li>第二个字节包含一种编码用于指明具体的警告。</li></ul><h4 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a>握手协议</h4><p>握手协议由右图一系列客户端和服务器之间交换的消息组成</p><p>应在任何应用数据被传输前使用</p><ul><li>允许服务器和客户端相互认证</li><li>允许服务器和客户端协商加密和MAC算法</li><li>用于保护TLS记录中所发送数据的加密密钥</li></ul><p><img src="/imgs/iis/169.png" alt="image-20231215111226019"></p><h4 id="心跳协议"><a href="#心跳协议" class="headerlink" title="心跳协议"></a>心跳协议</h4><p>由硬件或软件产生的一个周期性的信号，用以表明操作正常，其运行于TLS记录协议顶部，包含两种消息类型：</p><ul><li>心跳请求：可随时发送，包含长度、载荷、填充字段</li><li>心跳响应：接受到心跳请求消息时应及时响应，包含收到的心跳请求的载荷拷贝、填充字段</li></ul><p>心跳协议的目的：</p><ul><li>确保接收端还活着</li><li>生成了空闲时间段中的活动连接</li></ul><h4 id="SSL-x2F-TLS攻击"><a href="#SSL-x2F-TLS攻击" class="headerlink" title="SSL&#x2F;TLS攻击"></a>SSL&#x2F;TLS攻击</h4><ol><li>握手协议的攻击</li><li>记录和应用数据协议攻击</li><li>PKI攻击</li><li>其他攻击</li></ol><h4 id="心脏出血攻击"><a href="#心脏出血攻击" class="headerlink" title="心脏出血攻击"></a>心脏出血攻击</h4><p><img src="/imgs/iis/170.png" alt="image-20231215112131958"></p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>HTTPS是HTTP和SSL的组合，用以实现Web浏览器和Web服务器之间的安全通信</p><p>使用HTTPS时，下列元素将被加密：</p><ul><li>被请求的文档URL</li><li>文档的内容</li><li>浏览器表单的内容</li><li>由浏览器发送到服务器和由服务器发送到浏览器的cookie</li><li>HTTP头内容</li></ul><p><img src="/imgs/iis/171.png" alt="image-20231215112619288"></p><h5 id="连接开始"><a href="#连接开始" class="headerlink" title="连接开始"></a>连接开始</h5><p>客户端向服务器的一个端口开启一个连接，发送第一个TLSClientHello请求，开始TLS握手过程</p><p>TLS握手结束后，发送第一个HTTP请求，所有的HTTP数据作为TLS数据被发送</p><p><img src="/imgs/iis/172.png" alt="image-20231215112728531"></p><h5 id="连接关闭"><a href="#连接关闭" class="headerlink" title="连接关闭"></a>连接关闭</h5><p>HTTP客户端或服务器在HTTP记录中添加Connect：Close来表明连接在该记录发出后关闭</p><p>在TLS级，在每一端使用TLS警告发送close_notify警告消息，关闭连接</p><p><img src="/imgs/iis/173.png" alt="image-20231215112807044"></p><h3 id="IPv4和IPv6安全"><a href="#IPv4和IPv6安全" class="headerlink" title="IPv4和IPv6安全"></a>IPv4和IPv6安全</h3><h4 id="IP安全"><a href="#IP安全" class="headerlink" title="IP安全"></a>IP安全</h4><p>很多应用领域开发了专用安全机制，未考虑安全协议层的应用的安全问题</p><p>安全性涉及跨协议层</p><p>通过在IP级实现安全，为所有应用程序实施安全性</p><p>下一代IPv6中包含的身份验证和加密安全功能，当前的IPv4中同样能实现</p><ul><li>认证（AH）<ul><li>确保一个接收到的包，的确是报头上标识的源地址的参与实体发出的并且还确保了包在传输过程中没有被篡改</li></ul></li><li>机密性（ESP）<ul><li>使正在通信的结点对消息加密，保证消息在结点之间的传输不被第三方窃听</li></ul></li><li>密钥管理（IKE）<ul><li>与密钥的安全交换相关</li><li>密钥管理是由Intermet密钥交换标准IKEv2协议提供的</li></ul></li></ul><h4 id="IPSec"><a href="#IPSec" class="headerlink" title="IPSec"></a>IPSec</h4><p>IP安全（IPSecurity，简称IPSec）提供了能在LAN、公用和专用的WAN以及Internet上相互安全通信的能力</p><p><img src="/imgs/iis/174.png" alt="image-20231215113007064"></p><h5 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h5><p>在IP报文传输过程中加密和封装传输和应用层数据，并提供IP层的完整性保护。</p><p><img src="/imgs/iis/175.png" alt="image-20231215113121018"></p><h5 id="AH协议"><a href="#AH协议" class="headerlink" title="AH协议"></a>AH协议</h5><ul><li>支持数据完整性服务</li><li>确保IP报文中数据不被篡改</li><li>支持认证服务</li><li>对端系统Host身份进行认证，防止IP欺骗攻击</li><li>内部使用MAC(Message Authentication Code)算法，要求使用AH的通信双方要共享一个密钥</li></ul><p><img src="/imgs/iis/176.png" alt="image-20231215113330970"></p><h5 id="ESP协议"><a href="#ESP协议" class="headerlink" title="ESP协议"></a>ESP协议</h5><ul><li>支持数据机密性服务</li><li>支持完整性服务(可选)</li><li>基于对称密钥算法技术</li><li>可独立使用，也可与AH结合使用</li></ul><p><strong>两种模式</strong></p><ul><li>传输模式：针对上层协议提供保护，将保护扩展到IP包载荷<ul><li>用于主机之间端到端的通信</li></ul></li><li>隧道模式：对整个IP包提供保护<ul><li>当安全关联中一个或两个都是安全网关时可以使用</li><li>防火墙之后的网络中的大多数主机，皆可以进行安全通信，而无须实现IPsec</li></ul></li></ul><p><img src="/imgs/iis/177.png" alt="image-20231215113516496"></p><h5 id="IKE协议"><a href="#IKE协议" class="headerlink" title="IKE协议"></a>IKE协议</h5><ul><li>功能<ul><li>密钥协商</li><li>密钥分发</li></ul></li><li>需管理的密钥数<ul><li>如果同时使用AH和ESP，需要四个密钥</li></ul></li><li>使用Diffie-Hellman密钥交换方案</li></ul><p><img src="/imgs/iis/178.png" alt="image-20231215113625968"></p><p><img src="/imgs/iis/179.png" alt="image-20231215113645572"></p><h5 id="安全关联SA"><a href="#安全关联SA" class="headerlink" title="安全关联SA"></a>安全关联SA</h5><ul><li>关联是发送方和接收方之间的单向关系，该关联为两者间的通信流提供安全服务</li><li>由以下三个参数唯一确定<ol><li>安全参数索引（SPI）<br>一个分配给SA的比特串，仅在本地有意义</li><li>IP目的地址<br>SA的目的端地址</li><li>协议标识<br>标识该SA是否是个一AH安全关联或是ESP安全关联</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读</title>
      <link href="/2023/10/19/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2023/10/19/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="论文整体架构"><a href="#论文整体架构" class="headerlink" title="论文整体架构"></a>论文整体架构</h2><ul><li>摘要<ul><li>研究背景</li><li>研究目的</li><li>研究方法</li><li>研究结果</li><li>结论</li></ul></li><li>引言<ul><li>研究背景</li><li>研究现状</li><li>研究意义</li></ul></li><li>文献综述<ul><li>国内外研究现状</li><li>研究空白&#x2F;问题</li><li>研究探索</li></ul></li><li>研究方法<ul><li>研究对象</li><li>研究设计</li><li>方法介绍</li></ul></li><li>实验&amp;结果<ul><li>实验方式</li><li>结果分析</li><li>结果验证</li></ul></li><li>讨论分析<ul><li>结果比较</li><li>结果解释</li><li>结果推广</li></ul></li><li>结论与展望<ul><li>结论总结</li><li>展望未来研究</li></ul></li><li>参考文献</li></ul><h2 id="如何读"><a href="#如何读" class="headerlink" title="如何读"></a>如何读</h2><p>以<strong>写一篇论文的方式</strong>阅读论文，带着<strong>问题</strong>阅读</p><ul><li>论文是开创性还是延续性</li><li>论文解决问题是不是当前领域的核心问题</li><li>解决方式是否由美</li><li>理论工作还是实验工作</li><li>有没有避免讨论论文的缺陷</li></ul><p><img src="/imgs/essayReading/1.jpg" alt="img"></p><p>阅读论文<strong>摘要</strong>，了解论文目的和主要结论</p><p>阅读论文<strong>引言</strong>，了解研究背景和需解决问题</p><p>阅读<strong>方法&amp;实验</strong>，了解论文主题和实验方式</p><p>阅读结论，理解研究主要结论</p><p><strong>三遍法</strong></p><ul><li>第一遍全面阅读，抓住文章大意</li><li>第二遍理解论文内容，挖掘细节和论点</li><li>第三遍深入思考，评价并吸收文章内容</li></ul><p><img src="/imgs/essayReading/2.png" alt="image-20231019211202606"></p><p><img src="/imgs/essayReading/3.png" alt="image-20231019211538741"></p><h2 id="如何combine"><a href="#如何combine" class="headerlink" title="如何combine"></a>如何combine</h2><p><img src="/imgs/essayReading/4.png" alt="image-20231019212607585"></p><p><strong>实验复现</strong></p><p><img src="/imgs/essayReading/5.png" alt="image-20231019212830935"></p><h2 id="如何汇报"><a href="#如何汇报" class="headerlink" title="如何汇报"></a>如何汇报</h2><p><img src="/imgs/essayReading/6.png" alt="image-20231019213209763"></p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><ul><li>以写一篇论文的方式阅读论文</li><li>以体系构建的方式去得到论文研究脉络</li><li>以扮演后续作者的方式去汇报研究工作</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
            <tag> 工作汇报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Snare和Tanner安装</title>
      <link href="/2023/10/19/Snare%E5%92%8CTanner%E5%AE%89%E8%A3%85/"/>
      <url>/2023/10/19/Snare%E5%92%8CTanner%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Resource</p><p><a href="https://github.com/mushorg/snare">mushorg&#x2F;snare: Super Next generation Advanced Reactive honEypot (github.com)</a></p><p><a href="https://github.com/mushorg/tanner">mushorg&#x2F;tanner: He who flays the hide (github.com)</a></p><p>Document</p><p><a href="https://snare.readthedocs.io/en/latest/">Welcome to SNARE’s documentation! — SNARE v0.3 documentation</a></p><p><a href="https://tanner.readthedocs.io/en/latest/">Welcome to TANNER’s documentation! — tanner 1.0 documentation</a></p><blockquote><p>snare：<em><strong>Super Next generation Advanced Reactive honEypot</strong></em></p><ul><li>SNARE is a web application honeypot sensor attracting all sort of maliciousness from the Internet.</li><li>TANNER is a remote data analysis and classification service to evaluate HTTP requests and composing the response then served by <a href="https://github.com/mushorg/snare">SNARE</a>. TANNER uses multiple application vulnerability type emulation techniques when providing responses for SNARE. In addition, TANNER provides Dorks for SNARE powering its luring capabilities.</li></ul></blockquote><h2 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h2><ul><li><p>操作系统:Ubuntu20.04.2</p><pre class="line-numbers language-none"><code class="language-none">Linux version 5.15.0-86-generic (buildd@lcy02-amd64-062) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) #96~20.04.1-Ubuntu SMP Thu Sep 21 13:23:37 UTC 2023<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>预安装Python3.8.0,将pip3升级到最新版本</p><p>同时将pip进行换源,方便后续下载</p><pre class="line-numbers language-none"><code class="language-none">pip install --upgrade pippip install pip -Upip config set global.index-url https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="snare安装"><a href="#snare安装" class="headerlink" title="snare安装"></a>snare安装</h2><ol><li><p>在指定好的路径(自由指定)clone源码</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;mushorg&#x2F;snare.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入源码文件夹,安装软件依赖</p><pre class="line-numbers language-none"><code class="language-none">cd saresudo pip3 install -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装snare</p><pre class="line-numbers language-none"><code class="language-none">sudo python3 setup.py install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看到当前目录结构为</p><pre class="line-numbers language-none"><code class="language-none">bin          docker-compose.yml  .github     readthedocs.yml   Snare.egg-infobuild        Dockerfile          .gitignore  requirements.txt.coveragerc  docs                LICENSE     setup.pydist         .git                README.md   snare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>则为安装成功</p></li></ol><h2 id="tanner安装"><a href="#tanner安装" class="headerlink" title="tanner安装"></a>tanner安装</h2><ol><li><p>安装redis</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install redis-serverredis-server <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建PHP沙箱</p><p>参考<a href="https://github.com/mushorg/phpox">mushorg&#x2F;phpox: PHP Sandbox (github.com)</a></p><p>其中BFR笔者未能成功安装,但是也能成功运行</p></li><li><p>安装docker</p><p>参考<a href="https://zhuanlan.zhihu.com/p/651148141">最详细的ubuntu 安装 docker教程 - 知乎 (zhihu.com)</a></p><p>对于其中的<strong>添加Docker官方GPG key失败</strong>问题,<a href="https://blog.csdn.net/sunchaoyiA/article/details/81231000">添加Docker官方GPG key失败解决方案</a>这篇文章解决了问题</p><p>具体做法:</p><ul><li><p>把官方GPG key下载到本地,下载下来是一个gpg文件,<a href="https://download.docker.com/linux/ubuntu/gpg">下载地址</a></p></li><li><p>下载到本地后，采用如下命令，安装官方GPG key</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-key add &lt;gpg path&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>在指定好的路径(自由指定)clone源码</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;mushorg&#x2F;tanner.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入源码文件夹,安装软件依赖</p><pre class="line-numbers language-none"><code class="language-none">cd tannersudo pip3 install -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装tanner</p><pre class="line-numbers language-none"><code class="language-none">sudo python3 setup.py install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在tanner目录下运行<code>sudo tanner</code>,出现</p><pre class="line-numbers language-none"><code class="language-none">      _________    _   ___   ____________     &#x2F;_  __&#x2F;   |  &#x2F; | &#x2F; &#x2F; | &#x2F; &#x2F; ____&#x2F; __ \      &#x2F; &#x2F; &#x2F; &#x2F;| | &#x2F;  |&#x2F; &#x2F;  |&#x2F; &#x2F; __&#x2F; &#x2F; &#x2F;_&#x2F; &#x2F;     &#x2F; &#x2F; &#x2F; ___ |&#x2F; &#x2F;|  &#x2F; &#x2F;|  &#x2F; &#x2F;___&#x2F; _, _&#x2F;    &#x2F;_&#x2F; &#x2F;_&#x2F;  |_&#x2F;_&#x2F; |_&#x2F;_&#x2F; |_&#x2F;_____&#x2F;_&#x2F; |_|    Debug logs will be stored in &#x2F;opt&#x2F;tanner&#x2F;tanner.logError logs will be stored in &#x2F;opt&#x2F;tanner&#x2F;tanner.err&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Running on http:&#x2F;&#x2F;0.0.0.0:8090 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(Press CTRL+C to quit)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及<code>curl http://localhost:8090</code>返回<code>Tanner server</code>说明安装成功</p></li></ol><h2 id="snare搭配tanner的example"><a href="#snare搭配tanner的example" class="headerlink" title="snare搭配tanner的example"></a>snare搭配tanner的example</h2><h3 id="使用Snare克隆页面"><a href="#使用Snare克隆页面" class="headerlink" title="使用Snare克隆页面"></a>使用Snare克隆页面</h3><pre class="line-numbers language-none"><code class="language-none">sudo clone --target http:&#x2F;&#x2F;example.com --path &lt;path&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动Snare并在后台挂载Tanner"><a href="#启动Snare并在后台挂载Tanner" class="headerlink" title="启动Snare并在后台挂载Tanner"></a>启动Snare并在后台挂载Tanner</h3><pre class="line-numbers language-none"><code class="language-none">sudo snare --port 8080 --page-dir example.com --path &lt;path&gt; --tanner &lt;tanner-ip&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">   _____ _   _____    ____  ______  &#x2F; ___&#x2F;&#x2F; | &#x2F; &#x2F;   |  &#x2F; __ \&#x2F; ____&#x2F;  \__ \&#x2F;  |&#x2F; &#x2F; &#x2F;| | &#x2F; &#x2F;_&#x2F; &#x2F; __&#x2F; ___&#x2F; &#x2F; &#x2F;|  &#x2F; ___ |&#x2F; _, _&#x2F; &#x2F;___&#x2F;____&#x2F;_&#x2F; |_&#x2F;_&#x2F;  |_&#x2F;_&#x2F; |_&#x2F;_____&#x2F;    serving with uuid ea504261-df23-4e4c-a2e1-72a19725dc17Debug logs will be stored in &#x2F;snare&#x2F;snare&#x2F;snare.logError logs will be stored in &#x2F;snare&#x2F;snare&#x2F;snare.err&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Running on http:&#x2F;&#x2F;127.0.0.1:8080 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(Press CTRL+C to quit)privileges dropped, running as &quot;nobody:nogroup&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接成功</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蜜罐 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习HW1-线性回归</title>
      <link href="/2023/10/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0HW1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/2023/10/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0HW1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>这是一个有部分代码缺失的notebook，需要完成的就是将 ### START CODE HERE ### ### END CODE HERE ###之间的代码补全</p><p>某城市的电网系统需要升级，以应对日益增长的用电需求。电网系统需要考虑最高温度对城市的峰值用电量的影响。项目负责人需要预测明天城市的峰值用电量，他搜集了以往的数据。现在，负责人提供了他搜集到的数据，并请求你帮他训练出一个模型，这个模型能够很好地预测明天城市的峰值用电量。</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1- 准备"></a>1- 准备</h2><p>先导入必要的python包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> time<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>导入负责人提供的数据，并可视化数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">)</span><span class="token comment">#data 第一列为温度信息 第二列为人口信息</span>X_raw <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#data 第三列为用电量信息</span>Y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'High temperature'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Peak demand '</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X_raw<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'X shape:'</span><span class="token punctuation">,</span>X_raw<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Y shape:'</span><span class="token punctuation">,</span>Y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'some X[:5]:\n'</span><span class="token punctuation">,</span>X_raw<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'some Y[:5]:\n'</span><span class="token punctuation">,</span>Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>X shape: (80, 1)Y shape: (80, 1)some X[:5]: [[38.24] [36.53] [32.92] [26.59] [20.05]]some Y[:5]: [[4.04] [2.84] [3.2 ] [3.42] [2.32]]</code></pre><p><img src="/imgs/mlhw1/output_6_1.png" alt="png"></p><p>根据对数据可视化结果的分析，决定使用回归算法训练一个模型，用来预测明天城市的峰值用电量。首先考虑单变量的线性回归模型。</p><h2 id="2-单变量线性回归理论介绍"><a href="#2-单变量线性回归理论介绍" class="headerlink" title="2- 单变量线性回归理论介绍"></a>2- 单变量线性回归理论介绍</h2><h3 id="单变量线性回归模型"><a href="#单变量线性回归模型" class="headerlink" title="单变量线性回归模型"></a>单变量线性回归模型</h3><p>单变量线性回归的模型由两个参数$\theta_0$,$\theta_1$来表示一条直线：$$Peak\ demand \approx \theta_0 + \theta_1 \cdot (High\ temperature) 。$$</p><p>我们的目标也就是找到一条”最符合”的直线，确定这条直线的参数$\theta_i$。</p><p><img src="/imgs/mlhw1/lines.jpg" alt="functions"><br>设输入的特征——最高温度(F)为$x^{(i)} \in \mathbb{R}^{n+1}$，$i&#x3D;1,\cdots,m$。$m$为样本总数，在该例子中$m$&#x3D;80。$n$为特征的个数，这里为$1$。则：$x^{(i)} \in \mathbb{R}^2 &#x3D; \begin{bmatrix} 1 \ \text{high temperature for day} i\end{bmatrix}。$</p><p>设输出为$y^{(i)} \in \mathbb{R}$，表示第$i$天的峰值用电量。</p><p>参数为$\theta \in \mathbb{R}^{n+1} &#x3D; \begin{bmatrix} \theta_0 \ \theta_1 \ \vdots \ \theta_n \end{bmatrix}$。这里$n&#x3D;1$。</p><p>在该例子中，模型为一条直线，模型可表示为：<br>$$h_{\theta}(x) &#x3D; \theta^T x &#x3D; \theta_0 + \theta_1 x 。$$</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意</strong>：</h3><p>这里的$\theta^T$是一个向量，$\theta_0,\theta_1$是标量。使用向量化表示的原因为：（1）简化数学公式的书写（2）与程序代码中的表示保持一致，且使用向量化的代码实现可以加速运算，<strong>因此一般能不用<code>for</code>循环的地方都不用<code>for</code>循环</strong>。 </p><p>下面用一个简单的例子说明向量化的代码运算更快。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># # 随机初始化两个向量，计算它们的点积</span><span class="token comment"># x = np.random.rand(10000000,1)</span><span class="token comment"># y = np.random.rand(10000000,1)</span><span class="token comment"># ans = 0</span><span class="token comment"># start = time.time()</span><span class="token comment"># for i in range(10000000):</span><span class="token comment">#     ans += x[i,0]/timesy[i,0]</span><span class="token comment"># end = time.time()</span><span class="token comment"># print('for循环的计算时间: %.2fs'%(end - start))</span><span class="token comment"># print('计算结果：%.2f'%(ans))</span><span class="token comment"># start = time.time()</span><span class="token comment"># ans = np.dot(x.T,y)</span><span class="token comment"># end = time.time()</span><span class="token comment"># print('向量化的计算时间: %.2fs'%(end - start))</span><span class="token comment"># print('计算结果：%.2f'%(ans))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为$\theta_0 + \theta_1 x&#x3D;\begin{bmatrix} 1 \quad x \end{bmatrix} \begin{bmatrix} \theta_0 \ \theta_1 \end{bmatrix} 。$<br>因此，为了方便编程，我们需要给每一个$x^{(i)}$的前面再加一列1。使得每一个$x^{(i)}$成为一个2维向量。</p><h3 id="预测结果"><a href="#预测结果" class="headerlink" title="预测结果"></a>预测结果</h3><p>模型需要根据输入自变量 $x^{(i)}$ 和参数 $\theta$ 来输出预测结果 $predict_y^{(i)}$。</p><p>将自变量 $x^{(i)}$ 作为模型的输入，模型根据输入和当前参数 $\theta$ 输出预测结果：</p><p>$$<br>predict_y^{(i)} &#x3D; h_\theta(x^{(i)})。<br>$$</p><p>其中 $h_\theta()$ 为模型在参数为 $\theta$ 情况下，对于输入的预测函数。  </p><p>在预测阶段，$x$作为自变量。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>模型的预测结果和实际结果有差距，为了衡量它们之间的差距，或者说量化使用这个模型产生的损失，我们定义损失函数$l(predict_y^{(i)}, y^{(i)})$。这里我们使用平方损失：<br>$$<br>l(predict_y, y) &#x3D; \left ( predict_y^{(i)} - y^{(i)} \right )^2。<br>$$</p><p>上述损失函数表示一个样本的损失，整个训练集的损失使用$J(\theta)$表示：<br>$$<br>\begin{aligned}<br>J(\theta) &amp; &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^{m}l(predict_y^{(i)}, y^{(i)}) \<br>&amp; &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^{m} \left ( h_\theta(x^{(i)}) - y^{(i)} \right )^2 \<br>&amp; &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^{m} \left ( \theta^T x^{(i)} - y^{(i)} \right )^2。<br>\end{aligned}<br>$$<br>（其中数字2的作用是方便求导时的运算）</p><p>为了使模型取得较好的预测效果，需要最小化训练集上的损失，即$\underset{\theta}{\min} J(\theta)$。</p><p>在损失阶段，$\theta$ 作为自变量。</p><h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><p>为了得到使损失函数$J(\theta)$最小化的$\theta$，可以使用梯度下降法。</p><p>损失函数$J(\theta)$的函数图像如下：<br><img src="/imgs/mlhw1/loss_function_j.png" alt="损失函数J"></p><p>损失函数$J(\theta)$关于参数向量$\theta$中的一个参数，比如$\theta_1$的函数图为：<br><img src="/imgs/mlhw1/theta-J.png" alt="theta-J 函数图"></p><p>假设一开始$J(\theta)$的值在紫色点上，为了降低$J(\theta)$值，需要$\theta_1$往右边移动，这个方向是$J(\theta)$在$\theta_1$上的负梯度。只要$\theta$不断往负梯度方向移动，$J(\theta)$一定可以降到最低值。梯度下降法就是使参数$\theta$不断往负梯度移动，经过有限次迭代(更新$\theta$值)之后，损失函数$J(\theta)$达到最低值。</p><p>梯度下降法的过程：</p><ol><li><p>初始化参数向量$\theta$。</p></li><li><p>开始迭代</p><p>A.根据实际输入$x$和参数$\theta$预测输出，</p><p>B. 根据预测输出值和实际输出值之间的差距，计算损失函数$J(\theta)$，</p><p>C. 计算损失函数对$\theta$的梯度，</p><p>D. 更新参数$\theta$。</p></li></ol><h2 id="3-实现单变量线性回归模型"><a href="#3-实现单变量线性回归模型" class="headerlink" title="3- 实现单变量线性回归模型"></a>3- 实现单变量线性回归模型</h2><p>现在，我们开始实现 Regression 算法。</p><h3 id="任务1："><a href="#任务1：" class="headerlink" title="任务1："></a><strong>任务1：</strong></h3><p>首先在$X$前面加上一列1，表示参数$\theta_0$的系数，方便运算。$X$是形状为$(m,1)$的矩阵，一共$m$行数据，我们需要为每一行数据的前面加一列1，如下所示：<br>$$<br>\begin{bmatrix} x^{(0)} \ x^{(1)} \ \vdots \x^{(m-1)}  \end{bmatrix} \longrightarrow<br>\begin{bmatrix} 1\quad x^{(0)} \ 1\quad x^{(1)} \ \vdots \ 1\ x^{(m-1)}  \end{bmatrix}。<br>$$<br><strong>提示</strong>：可以使用<code>np.hstack</code>把两个矩阵水平合在一起。用1初始化向量或矩阵的函数是<code>np.ones</code>。(函数详情可使用python的帮助函数<code>help</code>，比如<code>help(np.ones)</code>，或者自行用搜索引擎检索。)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">preprocess_data</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""输入预处理 在X前面加一列1    参数：        X:原始数据,shape为(m,1)            返回：        X_train: 在X加一列1的数据,shape为(m,2)    """</span>    m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment"># m 是数据X的行数</span>    <span class="token comment">### START CODE HERE ###</span>        one_column<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    X_train<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>one_column<span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> X_train<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> preprocess_data<span class="token punctuation">(</span>X_raw<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'new X shape:'</span><span class="token punctuation">,</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Y shape:'</span><span class="token punctuation">,</span>Y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'new X[:5,:]=\n'</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Y[:5,:]=\n'</span><span class="token punctuation">,</span>Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>new X shape: (80, 2)Y shape: (80, 1)new X[:5,:]= [[ 1.   38.24] [ 1.   36.53] [ 1.   32.92] [ 1.   26.59] [ 1.   20.05]]Y[:5,:]= [[4.04] [2.84] [3.2 ] [3.42] [2.32]]</code></pre><h3 id="任务2："><a href="#任务2：" class="headerlink" title="任务2："></a><strong>任务2：</strong></h3><p>接着，初始化参数向量$\theta$。$\theta$的shape是$(2,1)$，我们随机初始化$\theta$。</p><p><strong>提示</strong>：numpy的随机函数是<code>np.random.rand</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init_parameter</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""初始化参数    参数：        shape: 参数形状            返回：        theta_init: 初始化后的参数    """</span>        np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    m<span class="token punctuation">,</span> n <span class="token operator">=</span> shape    <span class="token comment">### START CODE HERE ###</span>    theta_init <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token comment">### END CODE HERE ###</span>        <span class="token keyword">return</span> theta_init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">theta <span class="token operator">=</span> init_parameter<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'theta shape is '</span><span class="token punctuation">,</span>theta<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'theta = '</span><span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>theta shape is  (2, 1)theta =  [[0.5488135 ] [0.71518937]]</code></pre><h3 id="任务3："><a href="#任务3：" class="headerlink" title="任务3："></a><strong>任务3：</strong></h3><p>通过已知 $X$ 和参数 $\theta$ 计算预测的 $predict_Y$ 值。</p><p>由于使用<code>for</code>循环单独计算每个预测值效率不高，因此我们需要用向量化的方法代替<code>for</code>循环。$X$ 大小为$m \times (n+1)$($n$表示特征数量，这里$n&#x3D;1$)，每行是一条样本特征向量，$\theta$ 大小为$(n+1) \times 1$，可以使用$X \theta$（矩阵相乘）计算所有样本的预测结果,大小为$m\times 1$。于是这里的线性模型就可以表示为：<br>$$<br>h_{\theta}(X) &#x3D; X \theta。<br>$$<br>这里$h_{\theta}(X)$的大小为$m \times 1$，结果上等于 $predict_Y_\theta$。</p><p><strong>提示</strong>：矩阵相乘 <code>np.dot(矩阵1，矩阵2)</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compute_predict_Y</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算预测结果    参数：        X: 训练集数据特征,shape: (m, 2)        theta: 参数,shape: (2, 1)    返回：        predict_Y: 预测结果,shape: (m,1)    """</span>        <span class="token comment">### START CODE HERE ###</span>    predict_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span>    <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> predict_Ypredict_Y <span class="token operator">=</span> compute_predict_Y<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>predict_Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[27.89765487] [26.67468106] [24.09284744] [19.56569876] [14.8883603 ]]</code></pre><h3 id="任务4："><a href="#任务4：" class="headerlink" title="任务4："></a><strong>任务4：</strong></h3><p>实现计算损失函数$J(\theta)$的函数。<br>从公式<br>$$<br>\begin{aligned}<br>J(\theta) &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^{m} \left ( predict_y_\theta^{(i)} - y_\theta^{(i)} \right )^2<br>\end{aligned}<br>$$<br>可以看到有个求和，由于使用<code>for</code>循环效率不高，因此需要用向量化的方法代替<code>for</code>循环。$(predict_Y - Y)^2$计算所有样本的损失值，最后求和并除以$2m$得到$J(\theta)$的值，得到的$J(\theta)$是一个标量。<br><strong>提示</strong>：矩阵乘法运算可使用<code>np.dot</code>函数，平方运算可使用<code>np.power(data, 2)</code>函数，求和运算可使用<code>np.sum</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compute_J</span><span class="token punctuation">(</span>predict_Y<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算损失的函数J    参数：        predict_Y: 预测结果,shape: (m, 1)        Y: 训练集数据标签,shape: (m, 1)            返回：        loss: 损失值    """</span>        m <span class="token operator">=</span> Y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment">### START CODE HERE ###</span>    loss <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>predict_Y<span class="token operator">-</span>Y<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">)</span>        <span class="token comment">### END CODE HERE ###</span>        <span class="token keyword">return</span> loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">first_loss <span class="token operator">=</span> compute_J<span class="token punctuation">(</span>predict_Y<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first_loss = "</span><span class="token punctuation">,</span> first_loss<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>first_loss =  144.05159786255672</code></pre><h3 id="任务5："><a href="#任务5：" class="headerlink" title="任务5："></a><strong>任务5：</strong></h3><p>计算参数$\theta$的梯度。梯度计算的公式为：<br>$$<br>\frac{\partial J(\theta)}{\partial \theta_j} &#x3D; \frac{1}{m} \sum_{i&#x3D;1}^{m} \left ( \theta^T x^{(i)} - y \right ) x_j^{(i)}。<br>$$<br>向量化公式为：<br>$$<br>\text{gradients} &#x3D;\frac{1}{m} X^T (X \theta - Y) 。<br>$$<br><strong>提示</strong>：矩阵A的转置表示为<code>A.T</code>。$X\theta$就是计算出的predict_Y。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compute_gradient</span><span class="token punctuation">(</span>predict_Y<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算对参数theta的梯度值    参数：        predict_Y: 当前预测结果,shape: (m,1)        Y: 训练集数据标签,shape: (m, 1)        X: 训练集数据特征,shape: (m, 2)            返回：        gradients: 对theta的梯度,shape:(2,1)    """</span>        m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment">### START CODE HERE ###</span>    gradients <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>m<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">.</span>T<span class="token punctuation">,</span><span class="token punctuation">(</span>predict_Y<span class="token operator">-</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">### END CODE HERE ###</span>        <span class="token keyword">return</span> gradients<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">gradients_first <span class="token operator">=</span> compute_gradient<span class="token punctuation">(</span>predict_Y<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gradients_first shape : "</span><span class="token punctuation">,</span> gradients_first<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gradients_first = "</span><span class="token punctuation">,</span> gradients_first<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>gradients_first shape :  (2, 1)gradients_first =  [[ 16.0079445 ] [459.96770081]]</code></pre><h3 id="任务6："><a href="#任务6：" class="headerlink" title="任务6："></a><strong>任务6：</strong></h3><p>用梯度下降法更新参数$\theta$,实现<code>update_parameters</code>函数。</p><p><strong>提示</strong>：parameters &#x3D; $\theta$ - $learning_rate·gradients$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_parameters</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> gradients<span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""更新参数theta    参数：        theta: 参数,shape: (2, 1)        gradients: 梯度,shape: (2, 1)        learning_rate: 学习率,默认为0.0001            返回：        parameters: 更新后的参数,shape: (2, 1)    """</span>    <span class="token comment">### START CODE HERE ###</span>    parameters <span class="token operator">=</span> theta<span class="token operator">-</span>learning_rate<span class="token operator">*</span>gradients    <span class="token comment">### END CODE HERE ###</span>        <span class="token keyword">return</span> parameters<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">theta_one_iter <span class="token operator">=</span> update_parameters<span class="token punctuation">(</span>theta<span class="token punctuation">,</span> gradients_first<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"theta_one_iter = "</span><span class="token punctuation">,</span> theta_one_iter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>theta_one_iter =  [[0.54721271] [0.6691926 ]]</code></pre><h3 id="任务7："><a href="#任务7：" class="headerlink" title="任务7："></a><strong>任务7：</strong></h3><p>将前面定义的函数整合起来，实现完整的模型训练函数。</p><p>$\theta$迭代更新 <code>iter_num</code>次。迭代次数<code>iter_num</code>也是一个超参数，如果<code>iter_num</code>太小，损失函数$J(\theta)$还没有收敛；如果<code>iter_num</code>太大，损失函数$J(\theta)$早就收敛了，过多的迭代浪费时间。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> iter_num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""线性回归模型    参数：        X: 训练集数据特征,shape: (m, n+1)        Y: 训练集数据标签,shape: (m, 1)        iter_num: 梯度下降的迭代次数        theta: 初始化的参数,shape: (n+1, 1)        learning_rate: 学习率,默认为0.0001            返回：        loss_history: 每次迭代的损失值        theta_history: 每次迭代更新后的参数        theta: 训练得到的参数    """</span>        loss_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    theta_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iter_num<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment">### START CODE HERE ###</span>        <span class="token comment"># 预测</span>        predict_Y <span class="token operator">=</span> compute_predict_Y<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span>        <span class="token comment"># 计算损失</span>        loss <span class="token operator">=</span> compute_J<span class="token punctuation">(</span>predict_Y<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>        <span class="token comment"># 计算梯度</span>        gradients <span class="token operator">=</span> compute_gradient<span class="token punctuation">(</span>predict_Y<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>X<span class="token punctuation">)</span>        <span class="token comment"># 更新参数</span>        theta <span class="token operator">=</span> update_parameters<span class="token punctuation">(</span>theta<span class="token punctuation">,</span>gradients<span class="token punctuation">,</span>learning_rate<span class="token punctuation">)</span>        <span class="token comment">### END CODE HERE ###</span>                loss_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        theta_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>        <span class="token keyword">return</span> loss_history<span class="token punctuation">,</span> theta_history<span class="token punctuation">,</span> theta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 感兴趣的同学可以自行尝试不同的学习率和迭代次数，最后提交时以100次迭代和0.0001的学习率重新运行一遍再提交</span>loss_history<span class="token punctuation">,</span> theta_history<span class="token punctuation">,</span> theta <span class="token operator">=</span> model<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> iter_num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"theta = "</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>loss_history<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loss = "</span><span class="token punctuation">,</span> loss_history<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>theta =  [[0.52732144] [0.09027749]]loss =  0.09087253295782578</code></pre><p><img src="/imgs/mlhw1/output_33_1.png" alt="png"></p><p>下面是学习到的线性模型与原始数据的关系可视化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Y<span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token operator">/</span>timestheta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>theta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Cell In[17], line 3      1 plt.scatter(X[:,1],Y)      2 x = np.arange(10,42)----&gt; 3 plt.plot(x,x/timestheta[1][0]+theta[0][0],&#39;r&#39;)NameError: name &#39;timestheta&#39; is not defined</code></pre><p><img src="/imgs/mlhw1/output_35_1.png" alt="png"></p><p>现在直观地了解一下梯度下降的过程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">theta_0 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>theta_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>theta_0<span class="token punctuation">,</span> theta_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>theta_0<span class="token punctuation">,</span>theta_1<span class="token punctuation">)</span>J <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>theta_0<span class="token punctuation">)</span>predict_Ys <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>predict_Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>theta_0<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>theta_1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>predict_Ys<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>J<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        predict_Y <span class="token operator">=</span> compute_predict_Y<span class="token punctuation">(</span>X<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>theta_0<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>theta_1<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        J<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> compute_J<span class="token punctuation">(</span>predict_Y<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>theta_0<span class="token punctuation">,</span> theta_1<span class="token punctuation">,</span> J<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">0.6</span><span class="token punctuation">,</span> cmap <span class="token operator">=</span> plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>coolwarm<span class="token punctuation">)</span>C <span class="token operator">=</span> plt<span class="token punctuation">.</span>contour<span class="token punctuation">(</span>theta_0<span class="token punctuation">,</span> theta_1<span class="token punctuation">,</span> J<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> colors <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token comment"># 画出损失函数J的历史位置</span>history_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>theta_history<span class="token punctuation">)</span>theta_0_history <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>history_num<span class="token punctuation">)</span>theta_1_history <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>history_num<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>history_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    theta_0_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>theta_1_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> theta_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>theta_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>theta_0_history<span class="token punctuation">,</span> theta_1_history<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(50, 50)(50, 50)(80, 1)(50, 50)&lt;matplotlib.collections.PathCollection at 0x22dd1ba5990&gt;</code></pre><p>​<br><img src="/imgs/mlhw1/output_37_2.png" alt="png"><br>​    </p><p>可以看到，$J(\theta)$的值不断地往最低点移动。在y轴，$J(\theta)$下降的比较快，在x轴，$J(\theta)$下降的比较慢。</p><h2 id="4-实现多变量线性回归模型"><a href="#4-实现多变量线性回归模型" class="headerlink" title="4- 实现多变量线性回归模型"></a>4- 实现多变量线性回归模型</h2><p>上述例子是单变量回归的例子，样本的特征只有一个一天的最高温度。负责人经过分析后发现，城市一天的峰值用电量还与城市人口有关系，因此，他在回归模型中添加城市人口变量$x_2$，你的任务是训练这个多变量回归方程：<br>$$<br>h(x) &#x3D; \theta^T x &#x3D; \theta_0 * 1 + \theta_1 * x_1 + \theta_2 * x_2。<br>$$<br>之前实现的梯度下降法使用的对象是$\theta$和$X$向量，实现的梯度下降函数适用于单变量回归和多变量回归。不难发现上面使用的向量化公式在多变量回归里依然不变，因此代码也基本一致,直接调用前面实现的函数即可。</p><h3 id="任务8："><a href="#任务8：" class="headerlink" title="任务8："></a><strong>任务8：</strong></h3><p>现在，训练一个多变量回归模型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#读取数据，X取data的前两列</span>X <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">### START CODE HERE ###</span><span class="token comment"># 直接调用上面实现过的函数</span><span class="token comment"># 同样为X的前面添加一列1,使得X的shape从80x2 -> 80x3</span>X <span class="token operator">=</span> preprocess_data<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment"># 初始化参数theta ,theta的shape应为 3x1</span>theta <span class="token operator">=</span> init_parameter<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 传入模型训练,learning_rate设为0.0001</span>loss_history<span class="token punctuation">,</span> theta_history<span class="token punctuation">,</span> theta <span class="token operator">=</span> model<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>theta<span class="token punctuation">,</span>iter_num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>learning_rate<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token comment">### END CODE HERE ###</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"theta = "</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>loss_history<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loss = "</span><span class="token punctuation">,</span> loss_history<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>theta =  [[0.52593585] [0.06715361] [0.57583208]]loss =  0.10300473270580186</code></pre><p><img src="/imgs/mlhw1/output_40_1.png" alt="png"></p><h2 id="5-特征归一化"><a href="#5-特征归一化" class="headerlink" title="5- 特征归一化"></a>5- 特征归一化</h2><p>特征归一化可以确保特征在相同的尺度，加快梯度下降的收敛过程。</p><h3 id="任务9："><a href="#任务9：" class="headerlink" title="任务9："></a><strong>任务9：</strong></h3><p>对数据进行零均值单位方差归一化处理。零均值单位方差归一化公式：<br>$$<br>x_i &#x3D; \frac{x_i - \mu_i}{\sigma_i}<br>$$<br>其中$i$表示第$i$个特征，$\mu_i$表示第$i$个特征的均值，$\sigma_i$表示第$i$个特征的标准差。进行零均值单位方差归一化处理后，数据符合标准正态分布，即均值为0，标准差为1。</p><p><strong>注意</strong>，使用新样本进行预测时，需要对样本的特征进行相同的缩放处理。</p><p><strong>提示</strong>：求特征的均值，使用numpy的函数<code>np.mean</code>;求特征的标准差，使用numpy的函数<code>np.std</code>，需要注意对哪个维度求均值和标准差。比如，对矩阵A的每列求均值<code>np.mean(A,axis=0)</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">### START CODE HERE ###</span><span class="token comment"># 计算特征的均值 mu</span>mu <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 计算特征的标准差 sigma</span>sigma <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>X<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 零均值单位方差归一化</span>X_norm <span class="token operator">=</span> <span class="token punctuation">(</span>X<span class="token operator">-</span>mu<span class="token punctuation">)</span><span class="token operator">/</span>sigma<span class="token comment"># 训练多变量回归模型</span><span class="token comment"># X_norm前面加一列1</span>X <span class="token operator">=</span> preprocess_data<span class="token punctuation">(</span>X_norm<span class="token punctuation">)</span><span class="token comment"># 初始化参数theta</span>theta <span class="token operator">=</span> init_parameter<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 传入模型训练,learning_rate设为0.1</span>loss_history<span class="token punctuation">,</span> theta_history<span class="token punctuation">,</span> theta <span class="token operator">=</span> model<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>theta<span class="token punctuation">,</span>iter_num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>learning_rate<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment">### END CODE HERE ###</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mu = "</span><span class="token punctuation">,</span> mu<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sigma = "</span><span class="token punctuation">,</span> sigma<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"theta = "</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>loss_history<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loss = "</span><span class="token punctuation">,</span> loss_history<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>mu =  [25.617  1.131]sigma =  [8.8648434 0.3606716]theta =  [[2.86181356] [0.70424286] [0.04097817]]loss =  0.08591601385802586</code></pre><p><img src="/imgs/mlhw1/output_42_1.png" alt="png"></p><p>我们来直观地了解特征尺度归一化的梯度下降的过程。这里只展示单变量回归梯度下降过程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X_show <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>X_show <span class="token operator">=</span> preprocess_data<span class="token punctuation">(</span>X_show<span class="token punctuation">)</span>theta_0 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>theta_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>theta_0<span class="token punctuation">,</span> theta_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>theta_0<span class="token punctuation">,</span>theta_1<span class="token punctuation">)</span>J <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>theta_0<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        predict_Y <span class="token operator">=</span> compute_predict_Y<span class="token punctuation">(</span>X_show<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.877</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>theta_0<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>theta_1<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        J<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> compute_J<span class="token punctuation">(</span>predict_Y<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>theta_0<span class="token punctuation">,</span> theta_1<span class="token punctuation">,</span> J<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">0.6</span><span class="token punctuation">,</span> cmap <span class="token operator">=</span> plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>coolwarm<span class="token punctuation">)</span>C <span class="token operator">=</span> plt<span class="token punctuation">.</span>contour<span class="token punctuation">(</span>theta_0<span class="token punctuation">,</span> theta_1<span class="token punctuation">,</span> J<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> colors <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token comment"># 画出损失函数J的历史位置</span>history_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>theta_history<span class="token punctuation">)</span>theta_0_history <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>history_num<span class="token punctuation">)</span>theta_1_history <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>history_num<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>history_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    theta_0_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>theta_1_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> theta_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>theta_history<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>theta_0_history<span class="token punctuation">,</span> theta_1_history<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.collections.PathCollection at 0x22dd1be2e10&gt;</code></pre><p>​<br><img src="/imgs/mlhw1/output_44_1.png" alt="png"><br>​    </p><p>可以看到，$J(\theta)$的值不断地往最低点移动。与没有进行特征尺度归一化的图相比，归一化后，每个维度的变化幅度大致相同，这有助于$J(\theta)$的值快速下降到最低点。</p><h2 id="6-法线方程-The-normal-equations"><a href="#6-法线方程-The-normal-equations" class="headerlink" title="6- 法线方程 (The normal equations)"></a>6- 法线方程 (The normal equations)</h2><p>对于求函数极小值问题，可以使用求导数的方法，令函数的导数为0，然后求解方程，得到解析解。法线方程正是使用这种方法来求解损失函数$J(\theta)$的极小值，而线性回归的损失函数$J(\theta)$是一个凸函数，所以极小值就是最小值。</p><p>法线方程的求解过程详见课件，法线方程的公式是：<br>$$<br>\theta &#x3D; (X^T X)^{-1} X^T Y<br>$$</p><p>如果$m \le n +1$，那么$X^T X$是奇异矩阵，即$X^T X$不可逆。<br>$X^T X$不可逆的原因可能是：</p><ul><li>特征之间冗余，比如特征向量中两个特征是线性相关的。</li><li>特征太多，删去一些特征再进行运算。</li></ul><p>法线方程的缺点之一就是会出现$X^T X$不可逆的情况，可以通过正则化的方式解决。另一个缺点是，如果样本的个数太多，特征数量太多($n \gt 10000$)，法线方程的运算会很慢（求逆矩阵的运算复杂）。</p><h3 id="任务10："><a href="#任务10：" class="headerlink" title="任务10："></a><strong>任务10：</strong></h3><p>下面来实现法线方程。<br><strong>提示</strong>：Numpy 求逆矩阵的函数是<code>np.linalg.inv</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normal_equation</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""法线方程求解线性回归方程的参数    参数：        X: 训练集数据特征,shape: (m, n+1)        Y: 训练集数据标签,shape: (m, 1)            返回：        theta: 线性回归方程的参数    """</span>        <span class="token comment">### START CODE HERE ###</span>            theta <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">.</span>T<span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span>Y<span class="token punctuation">)</span>    <span class="token comment">### END CODE HERE ###</span>        <span class="token keyword">return</span> theta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">theta <span class="token operator">=</span> normal_equation<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"theta = "</span><span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>theta =  [[2.861875  ] [0.70429906] [0.04092011]]</code></pre><p>可以自行对比一下直接用正规方程求解出的$\theta$与用线性回归模型训练出的$\theta$之间的差异，会”惊奇”地发现两者几乎一模一样。</p><h2 id="7-预测结果"><a href="#7-预测结果" class="headerlink" title="7- 预测结果"></a>7- 预测结果</h2><h3 id="任务11："><a href="#任务11：" class="headerlink" title="任务11："></a><strong>任务11：</strong></h3><p>假设明天的最高温度是$x_1 &#x3D; 40$°C，人口$x_2 &#x3D; 3.3$百万，使用通过正规方程计算得到的$\theta$预测明天的城市的峰值用电量（单位：GW）吧！<br><strong>注意</strong>，$x$要进行同样的特征尺度归一化处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""预测峰值用电量    参数：        X: 需要预测数据的特征,shape: (m, n+1), 这里只预测一天的结果, m=1        theta: 最终确定的参数,shape: (n+1, 1)            返回：        prediction: 预测结果,shape: (m, 1)    """</span>    <span class="token comment">### START CODE HERE ###</span>    <span class="token comment"># 零均值单位方差归一化</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>mu<span class="token punctuation">)</span><span class="token operator">/</span>sigma    <span class="token comment"># 在x前面加一列</span>    x <span class="token operator">=</span> preprocess_data<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment">#用theta和处理后的x计算预测值</span>    prediction <span class="token operator">=</span> compute_predict_Y<span class="token punctuation">(</span>x<span class="token punctuation">,</span>theta<span class="token punctuation">)</span>    <span class="token comment">### END CODE HERE ###</span>    <span class="token keyword">return</span> prediction<span class="token comment">#明天的特征</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">3.3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预计明天的峰值用电量为：%.2f GW'</span><span class="token operator">%</span><span class="token punctuation">(</span>predict<span class="token punctuation">(</span>theta<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>预计明天的峰值用电量为：4.25 GW</code></pre><h2 id="8-多项式回归"><a href="#8-多项式回归" class="headerlink" title="8- 多项式回归"></a>8- 多项式回归</h2><p>以上都是线性模型，当我们数据的特征$X$与预测结果$Y$之间没有明显的线性关系，而且又找不到合适的映射函数时，可以尝试多项式回归。<br>下面导入另一组最高气温与用电量数据，我们用线性模型试一试看看效果发现并不太好。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data1 <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'data1.txt'</span><span class="token punctuation">)</span>X <span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>theta <span class="token operator">=</span> normal_equation<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&lt;matplotlib.lines.Line2D at 0x22dd1b75290&gt;]</code></pre><p>​<br><img src="/imgs/mlhw1/output_53_1.png" alt="png"><br>​    </p><p>多项式回归的最大优点就是可以通过增加$X$的高次项对实测点进行逼近，直至满意为止。事实上，多项式回归可以处理相当一类非线性问题，它在回归分析中占有重要的地位，<strong>因为任一函数都可以分段用多项式来逼近</strong>。因此，在通常的实际问题中，不论依变量与其他自变量的关系如何，我们总可以用多项式回归来进行分析。假设数据的特征只有一个$a$，多项式的最高次数为$K$，那么多项式回归方程为：<br>$$<br>h(x) &#x3D; \theta^T x &#x3D; \theta_0 \times a^0 + \theta_1 \times a^1 + \theta_2 \times a^2 + \cdots + \theta_K \times a^K。<br>$$<br>若令$x &#x3D; \begin{bmatrix} a^0, a^1, a^2, \cdots, a^K \end{bmatrix}^T$，那么<br>$$<br>h(x) &#x3D; \theta^T x &#x3D; \theta_0 \times x_0 + \theta_1 \times x_1 + \theta_2 \times x_2, \cdots, \theta_K \times x_K，<br>$$<br>这就变为多变量线性回归了。</p><h3 id="任务12："><a href="#任务12：" class="headerlink" title="任务12："></a><strong>任务12：</strong></h3><p>现在想要得到一个如下的多项式模型，$K&#x3D;2$，直接用上面的正规方程进行求解。<br>$$<br>    h(x) &#x3D; \theta^T x &#x3D; \theta_0 \times 1 + \theta_1 \times x + \theta_2 \times x^2。<br>$$<br>输入数据$X$变为:<br>$$<br>\begin{bmatrix} x^{(0)} \ x^{(1)} \ \vdots \x^{(m-1)}  \end{bmatrix} \longrightarrow<br>\begin{bmatrix} 1\quad x^{(0)}\quad {x^{(0)}}^2 \ 1\quad x^{(1)} \quad {x^{(1)}}^2\ \vdots \ 1\ x^{(m-1)}\quad {x^{(m-1)}}^2  \end{bmatrix}。<br>$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data1 <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'data1.txt'</span><span class="token punctuation">)</span>X <span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># m 是数据X的行数</span>X_square <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>X<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">### START CODE HERE ###</span><span class="token comment"># 对X 前面加1， 后面加平方，变为 m x 3 的矩阵</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>X<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 用法线方程求解theta</span>theta <span class="token operator">=</span> normal_equation<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token comment">### END CODE HERE ###</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&lt;matplotlib.lines.Line2D at 0x22dd1de4fd0&gt;]</code></pre><p>​<br><img src="/imgs/mlhw1/output_55_1.png" alt="png"><br>​    </p><p>所有任务到这里就结束了，下面是对上面的数据进行任意多项式拟合的结果，你可以通过改变$K$的值来调整多项式的阶数，看看不同模型的效果(但不设的太大, $K \le 193$)。可以看到，越复杂的模型，虽然拟合数据的效果越好，但是其泛化能力就会很差，所以模型的选择应该要尽量符合实际需求。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> PolynomialFeatures<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">def</span> <span class="token function">PolynomialRegression</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"poly"</span><span class="token punctuation">,</span>PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span>degree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"std_scaler"</span><span class="token punctuation">,</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>K <span class="token operator">=</span> <span class="token number">193</span>  <span class="token comment">#可以调整K的值(0&lt;=K&lt;=193)</span>poly_reg <span class="token operator">=</span> PolynomialRegression<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">153</span><span class="token punctuation">)</span>poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>E:\anaconda\Lib\site-packages\sklearn\utils\extmath.py:1066: RuntimeWarning: overflow encountered in square  temp **= 2E:\anaconda\Lib\site-packages\sklearn\utils\extmath.py:1072: RuntimeWarning: overflow encountered in square  new_unnormalized_variance -= correction**2 / new_sample_countE:\anaconda\Lib\site-packages\sklearn\utils\extmath.py:1072: RuntimeWarning: invalid value encountered in subtract  new_unnormalized_variance -= correction**2 / new_sample_countE:\anaconda\Lib\site-packages\sklearn\preprocessing\_data.py:86: RuntimeWarning: overflow encountered in square  upper_bound = n_samples * eps * var + (n_samples * mean * eps) ** 2---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Cell In[42], line 18     15 K = 193  #可以调整K的值(0&lt;=K&lt;=193)     17 poly_reg = PolynomialRegression(degree=153)---&gt; 18 poly_reg.fit(X,Y)     19 y_predict = poly_reg.predict(X)     20 plt.scatter(X,Y)File E:\anaconda\Lib\site-packages\sklearn\pipeline.py:405, in Pipeline.fit(self, X, y, **fit_params)    403     if self._final_estimator != &quot;passthrough&quot;:    404         fit_params_last_step = fit_params_steps[self.steps[-1][0]]--&gt; 405         self._final_estimator.fit(Xt, y, **fit_params_last_step)    407 return selfFile E:\anaconda\Lib\site-packages\sklearn\linear_model\_base.py:648, in LinearRegression.fit(self, X, y, sample_weight)    644 n_jobs_ = self.n_jobs    646 accept_sparse = False if self.positive else [&quot;csr&quot;, &quot;csc&quot;, &quot;coo&quot;]--&gt; 648 X, y = self._validate_data(    649     X, y, accept_sparse=accept_sparse, y_numeric=True, multi_output=True    650 )    652 sample_weight = _check_sample_weight(    653     sample_weight, X, dtype=X.dtype, only_non_negative=True    654 )    656 X, y, X_offset, y_offset, X_scale = _preprocess_data(    657     X,    658     y,   (...)    661     sample_weight=sample_weight,    662 )File E:\anaconda\Lib\site-packages\sklearn\base.py:584, in BaseEstimator._validate_data(self, X, y, reset, validate_separately, **check_params)    582         y = check_array(y, input_name=&quot;y&quot;, **check_y_params)    583     else:--&gt; 584         X, y = check_X_y(X, y, **check_params)    585     out = X, y    587 if not no_val_X and check_params.get(&quot;ensure_2d&quot;, True):File E:\anaconda\Lib\site-packages\sklearn\utils\validation.py:1106, in check_X_y(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)   1101         estimator_name = _check_estimator_name(estimator)   1102     raise ValueError(   1103         f&quot;&#123;estimator_name&#125; requires y to be passed, but the target y is None&quot;   1104     )-&gt; 1106 X = check_array(   1107     X,   1108     accept_sparse=accept_sparse,   1109     accept_large_sparse=accept_large_sparse,   1110     dtype=dtype,   1111     order=order,   1112     copy=copy,   1113     force_all_finite=force_all_finite,   1114     ensure_2d=ensure_2d,   1115     allow_nd=allow_nd,   1116     ensure_min_samples=ensure_min_samples,   1117     ensure_min_features=ensure_min_features,   1118     estimator=estimator,   1119     input_name=&quot;X&quot;,   1120 )   1122 y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)   1124 check_consistent_length(X, y)File E:\anaconda\Lib\site-packages\sklearn\utils\validation.py:921, in check_array(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)    915         raise ValueError(    916             &quot;Found array with dim %d. %s expected &lt;= 2.&quot;    917             % (array.ndim, estimator_name)    918         )    920     if force_all_finite:--&gt; 921         _assert_all_finite(    922             array,    923             input_name=input_name,    924             estimator_name=estimator_name,    925             allow_nan=force_all_finite == &quot;allow-nan&quot;,    926         )    928 if ensure_min_samples &gt; 0:    929     n_samples = _num_samples(array)File E:\anaconda\Lib\site-packages\sklearn\utils\validation.py:161, in _assert_all_finite(X, allow_nan, msg_dtype, estimator_name, input_name)    144 if estimator_name and input_name == &quot;X&quot; and has_nan_error:    145     # Improve the error message on how to handle missing values in    146     # scikit-learn.    147     msg_err += (    148         f&quot;\n&#123;estimator_name&#125; does not accept missing values&quot;    149         &quot; encoded as NaN natively. For supervised learning, you might want&quot;   (...)    159         &quot;#estimators-that-handle-nan-values&quot;    160     )--&gt; 161 raise ValueError(msg_err)ValueError: Input X contains NaN.LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values</code></pre><h2 id="学习调包sklearn-Optional"><a href="#学习调包sklearn-Optional" class="headerlink" title="学习调包sklearn (Optional)"></a>学习调包sklearn (Optional)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"SimHei"</span><span class="token punctuation">]</span> <span class="token comment">#设置字体</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"axes.unicode_minus"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span> <span class="token comment">#该语句解决图像中的“-”负号的乱码问题</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token comment"># data 数据第一列为人口信息</span>X_data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># data 数据第三列为城市峰值用电量</span>y_data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"X shape: "</span><span class="token punctuation">,</span> X_data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"y shape: "</span><span class="token punctuation">,</span> y_data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>X shape:  (80, 1)y shape:  (80, 1)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionlinear_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>linear_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_data<span class="token punctuation">,</span> y_data<span class="token punctuation">)</span>X_test <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_pred <span class="token operator">=</span> linear_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X_data<span class="token punctuation">,</span>y_data<span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span><span class="token string">"r-"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Temperture"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"PeakDemand"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Linear Regression model predictions"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br><img src="/imgs/mlhw1/output_60_0.png" alt="png"><br>​    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵计算</title>
      <link href="/2023/10/05/%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97/"/>
      <url>/2023/10/05/%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>以下内容在浏览器中显示有一点小问题，建议直接访问仓库<br>仓库地址：<a href="https://github.com/JIANG-Wu-19/myNote/blob/master/machineLearning/%E5%90%91%E9%87%8F%E6%B1%82%E5%AF%BC.md">向量求导</a></p><p>矩阵的求导等运算无论在高等数学还是线性代数的学习中都没有进行详细讲述，所以在学习DL还有ML之前都先进行相关运算的学习。</p><p>首先用一张直观的图像展示向量导数的形状：</p><p><img src="/imgs/dl/1.jpg" alt="img"></p><p>下面进行详细的解释</p><h2 id="标量对向量求导"><a href="#标量对向量求导" class="headerlink" title="标量对向量求导"></a>标量对向量求导</h2><p>$$<br>\mathbf{x}&#x3D;\left[\begin{array}{c}<br>x_1\<br>x_2\<br>\vdots\<br>x_n<br>\end{array}<br>\right]<br>,<br>\frac{\partial y}{\partial \mathbf{x}}&#x3D;\left[\frac{\partial y}{\partial x_1},\frac{\partial y}{\partial x_2},\ldots,\frac{\partial y}{\partial x_n}\right]<br>$$</p><h2 id="向量对标量求导"><a href="#向量对标量求导" class="headerlink" title="向量对标量求导"></a>向量对标量求导</h2><p>$$<br>\mathbf{y}&#x3D;\left[\begin{array}{c}<br>y_1\<br>y_2\<br>\vdots\<br>y_m<br>\end{array}<br>\right]<br>,<br>\frac{\partial \mathbf{y}}{\partial x}&#x3D;\left[\begin{array}{c}<br>\frac{\partial y_1}{\partial x}\<br>\frac{\partial y_2}{\partial x}\<br>\vdots\<br>\frac{\partial y_m}{\partial x}<br>\end{array}<br>\right]<br>$$</p><h2 id="向量对向量求导"><a href="#向量对向量求导" class="headerlink" title="向量对向量求导"></a>向量对向量求导</h2><p>$$<br>\mathbf{x}&#x3D;\left[\begin{array}{c}<br>x_1\<br>x_2\<br>\vdots\<br>x_n<br>\end{array}<br>\right]<br>$$</p><p>$$<br>\mathbf{y}&#x3D;\left[\begin{array}{c}<br>y_1\<br>y_2\<br>\vdots\<br>y_m<br>\end{array}<br>\right]<br>$$</p><p>$$<br>\frac{\partial \mathbf{y}}{\partial \mathbf{x}}&#x3D;\left[\begin{array}{c}<br>\frac{\partial y_1}{\partial \mathbf{x}}\<br>\frac{\partial y_2}{\partial \mathbf{x}}\<br>\vdots\<br>\frac{\partial y_m}{\partial \mathbf{x}}<br>\end{array}\right]&#x3D;\left[\begin{array}{c}\frac{\partial y_1}{\partial x_1},\frac{\partial y_1}{\partial x_2},\ldots,\frac{\partial y_1}{\partial x_n}\<br>\frac{\partial y_2}{\partial x_1},\frac{\partial y_2}{\partial x_2},\ldots,\frac{\partial y_2}{\partial x_n}\<br>\vdots\<br>\frac{\partial y_m}{\partial x_1},\frac{\partial y_m}{\partial x_2},\ldots,\frac{\partial y_m}{\partial x_n}\end{array}\right]<br>$$</p><h2 id="向量链式法则"><a href="#向量链式法则" class="headerlink" title="向量链式法则"></a>向量链式法则</h2><p>$$<br>\frac{\partial y}{\partial \mathbf{x}}&#x3D;\frac{\partial y}{\partial u}\frac{\partial u}{\partial \mathbf{x}}\<br>\frac{\partial y}{\partial \mathbf{x}}&#x3D;\frac{\partial y}{\partial \mathbf{u}}\frac{\partial \mathbf{u}}{\partial \mathbf{x}}\<br>\frac{\partial \mathbf{y}}{\partial \mathbf{x}}&#x3D;\frac{\partial \mathbf{y}}{\partial \mathbf{u}}\frac{\partial \mathbf{u}}{\partial \mathbf{x}}\<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 动手学深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵计算 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始《剑指Offer》新坑</title>
      <link href="/2023/10/04/%E5%BC%80%E5%A7%8B%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E6%96%B0%E5%9D%91/"/>
      <url>/2023/10/04/%E5%BC%80%E5%A7%8B%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B%E6%96%B0%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>自己的数据结构与算法基础比较薄弱，现在也在刷<strong>AcWing</strong>，感觉比较乏力（<del>最近动规刷的比较多，想吐，有点高屋建瓴，基础不牢</del>）所以打算基础和提高一起抓，现在在刷的有AcWing、剑指Offer，之后看一下要不要LeetCode的基础。</p><p>2023年10月4日</p><h2 id="JZ6-从尾到头打印链表"><a href="#JZ6-从尾到头打印链表" class="headerlink" title="JZ6 从尾到头打印链表"></a>JZ6 从尾到头打印链表</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。</p><p>如输入$\lbrace 1,2,3 \rbrace$的链表如下图:</p><p><img src="/imgs/jzoffer/1.png" alt="img"></p><p>返回一个数组为$[3,2,1]$</p><p>$0 \le length \le 10000$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>使用递归的方式可以从尾到头</p><p>递归的三个条件：</p><ul><li>终止条件：递归进入链表尾</li><li>返回值：每次返回子问题之后的全部输出</li><li>本级任务：递归进入下一级，下一级数组返回时将本级节点添加在返回值的末尾</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;***  struct ListNode &#123;*        int val;*        struct ListNode *next;*        ListNode(int x) :*              val(x), next(NULL) &#123;*        &#125;*  &#125;;*&#x2F;#include &lt;cstddef&gt;class Solution &#123;public:    void recursion(ListNode* head,vector&lt;int&gt;&amp; res)&#123;        if(head)&#123;            recursion(head-&gt;next,res);            res.push_back(head-&gt;val);        &#125;    &#125;    vector&lt;int&gt; printListFromTailToHead(ListNode* head) &#123;        vector&lt;int&gt; res;        recursion(head,res);        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>将链表的每一元素压栈，将栈顶元素添入数组，栈顶出栈，交换链表顺序</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;***  struct ListNode &#123;*        int val;*        struct ListNode *next;*        ListNode(int x) :*              val(x), next(NULL) &#123;*        &#125;*  &#125;;*&#x2F;#include &lt;cstddef&gt;#include &lt;stack&gt;class Solution &#123;public:    vector&lt;int&gt; printListFromTailToHead(ListNode* head) &#123;        vector&lt;int&gt; res;        stack&lt;int&gt; s;        while(head)&#123;            s.push(head-&gt;val);            head&#x3D;head-&gt;next;        &#125;        while(!s.empty())&#123;            res.push_back(s.top());            s.pop();        &#125;        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JZ24-反转链表"><a href="#JZ24-反转链表" class="headerlink" title="JZ24 反转链表"></a>JZ24 反转链表</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是1)，长度为n，反转该链表后，返回新链表的表头。</p><p>数据范围： $0 \le n \le 1000$</p><p>要求：空间复杂度$O(1)$，时间复杂度$O(n)$。</p><p>如当输入链表$\lbrace 1,2,3 \rbrace$时，</p><p>经反转后，原链表变为$\lbrace 3,2,1 \rbrace$，所以对应的输出为$\lbrace 3,2,1 \rbrace$。</p><p>以上转换过程如下图所示：</p><p><img src="/imgs/jzoffer/2.png" alt="img"></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;#include &lt;cstddef&gt;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param head ListNode类      * @return ListNode类     *&#x2F;    ListNode* ReverseList(ListNode* head) &#123;        &#x2F;&#x2F; write code here        if(head&#x3D;&#x3D;NULL||head-&gt;next&#x3D;&#x3D;NULL)&#123;            return head;        &#125;        ListNode* reverse&#x3D;ReverseList(head-&gt;next);        head-&gt;next-&gt;next&#x3D;head;        head-&gt;next&#x3D;NULL;        return reverse;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;#include &lt;cstddef&gt;#include &lt;stack&gt;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param head ListNode类      * @return ListNode类     *&#x2F;    ListNode* ReverseList(ListNode* head) &#123;        &#x2F;&#x2F; write code here        if(head&#x3D;&#x3D;NULL||head-&gt;next&#x3D;&#x3D;NULL)&#123;            return head;        &#125;        stack&lt;ListNode*&gt; s;        while(head)&#123;            s.push(head);            head&#x3D;head-&gt;next;        &#125;        ListNode* node&#x3D;s.top();        ListNode* reverse&#x3D;node;        s.pop();        while(!s.empty())&#123;            ListNode* tmp&#x3D;s.top();            s.pop();            node-&gt;next&#x3D;tmp;            node&#x3D;node-&gt;next;        &#125;        node-&gt;next&#x3D;NULL;        return reverse;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两种都是常规做法，非递归就用栈，需要注意的是栈最后需要在链表结尾添加NULL，否则会成环导致陷入死循环。</p><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>双链表的做法是比较巧妙的，<strong>构建一个新链表，然后遍历原链表的元素，对于每一元素尾插入新链表</strong>，最后返回的新链表就是反转链表。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;#include &lt;cstddef&gt;#include &lt;stack&gt;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param head ListNode类      * @return ListNode类     *&#x2F;    ListNode* ReverseList(ListNode* head) &#123;        &#x2F;&#x2F; write code here        ListNode* reverse&#x3D;NULL;        while(head)&#123;            ListNode* tmp&#x3D;head-&gt;next;            head-&gt;next&#x3D;reverse;            reverse&#x3D;head;            head&#x3D;tmp;        &#125;        return reverse;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双链表法的性能也是最好的</p><h2 id="JZ25-合并排序链表"><a href="#JZ25-合并排序链表" class="headerlink" title="JZ25 合并排序链表"></a>JZ25 合并排序链表</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><p>数据范围： $0 \le n \le 10000$，$−1000 \le 节点值 \le 1000$<br>要求：空间复杂度 $O(1)$，时间复杂度$O(n)$</p><p>如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}，所以对应的输出为{1,2,3,4,5,6}，转换过程如下图所示：</p><p><img src="/imgs/jzoffer/3.png" alt="img"></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param pHead1 ListNode类      * @param pHead2 ListNode类      * @return ListNode类     *&#x2F;    ListNode* Merge(ListNode* pHead1, ListNode* pHead2) &#123;        &#x2F;&#x2F; write code here        if(pHead1&#x3D;&#x3D;NULL)&#123;            return pHead2;        &#125;        if(pHead2&#x3D;&#x3D;NULL)&#123;            return pHead1;        &#125;        if(pHead1-&gt;val&lt;&#x3D;pHead2-&gt;val)&#123;            pHead1-&gt;next&#x3D;Merge(pHead1-&gt;next,pHead2);            return pHead1;        &#125;else&#123;            pHead2-&gt;next&#x3D;Merge(pHead1,pHead2-&gt;next);            return pHead2;        &#125;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param pHead1 ListNode类      * @param pHead2 ListNode类      * @return ListNode类     *&#x2F;    ListNode* Merge(ListNode* pHead1, ListNode* pHead2) &#123;        &#x2F;&#x2F; write code here        if(pHead1&#x3D;&#x3D;NULL)&#123;            return pHead2;        &#125;        if(pHead2&#x3D;&#x3D;NULL)&#123;            return pHead1;        &#125;        ListNode* res&#x3D;new ListNode(0);        ListNode* node&#x3D;res;        while(pHead1&amp;&amp;pHead2)&#123;            if(pHead1-&gt;val&lt;&#x3D;pHead2-&gt;val)&#123;                node-&gt;next&#x3D;pHead1;                pHead1&#x3D;pHead1-&gt;next;            &#125;else&#123;                node-&gt;next&#x3D;pHead2;                pHead2&#x3D;pHead2-&gt;next;            &#125;            node&#x3D;node-&gt;next;        &#125;        if(pHead1)&#123;            node-&gt;next&#x3D;pHead1;        &#125;else&#123;            node-&gt;next&#x3D;pHead2;        &#125;        return res-&gt;next;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JZ52-两个链表的第一个公共结点"><a href="#JZ52-两个链表的第一个公共结点" class="headerlink" title="JZ52 两个链表的第一个公共结点"></a>JZ52 两个链表的第一个公共结点</h2><h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p>输入两个无环的单向链表，找出它们的第一个公共结点，如果没有公共节点则返回空。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</p><p>数据范围： $n \le 1000$</p><p>要求：空间复杂度$O(1)$，时间复杂度$O(n)$</p><p>例如，输入{1,2,3},{4,5},{6,7}时，两个无环的单向链表的结构如下图所示：</p><p><img src="/imgs/jzoffer/4.png" alt="img"></p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><h4 id="双结点"><a href="#双结点" class="headerlink" title="双结点"></a>双结点</h4><p>第一个结点从第一个链表头开始遍历，遍历完后切换到第二个链表头；第二个结点反之。</p><p>两个结点遍历最终一定能够找到公共结点</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*struct ListNode &#123;int val;struct ListNode *next;ListNode(int x) :val(x), next(NULL) &#123;&#125;&#125;;*&#x2F;class Solution &#123;public:    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) &#123;        ListNode* l1&#x3D;pHead1,* l2&#x3D;pHead2;while(l1!&#x3D;l2)&#123;l1&#x3D;(l1&#x3D;&#x3D;NULL)?pHead2:l1-&gt;next;l2&#x3D;(l2&#x3D;&#x3D;NULL)?pHead1:l2-&gt;next;&#125;return l1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删减结点法"><a href="#删减结点法" class="headerlink" title="删减结点法"></a>删减结点法</h4><p>获取两链表的长度，将较长的链表删至与较短的链表长度一样，然后开始遍历至公共结点。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*struct ListNode &#123;int val;struct ListNode *next;ListNode(int x) :val(x), next(NULL) &#123;&#125;&#125;;*&#x2F;class Solution &#123;public:    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) &#123;        ListNode* l1&#x3D;pHead1,* l2&#x3D;pHead2;int len1&#x3D;length(pHead1),len2&#x3D;length(pHead2);while(len1!&#x3D;len2)&#123;if(len1&gt;len2)&#123;l1&#x3D;l1-&gt;next;len1--;&#125;else&#123;l2&#x3D;l2-&gt;next;len2--;&#125;&#125;while(l1!&#x3D;l2)&#123;l1&#x3D;l1-&gt;next;l2&#x3D;l2-&gt;next;&#125;return l1;    &#125;int length(ListNode* head)&#123;int length&#x3D;0;ListNode* cur&#x3D;head;while(cur)&#123;length++;cur&#x3D;cur-&gt;next;&#125;return length;&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JZ22-链表中倒数最后k个结点"><a href="#JZ22-链表中倒数最后k个结点" class="headerlink" title="JZ22 链表中倒数最后k个结点"></a>JZ22 链表中倒数最后k个结点</h2><h3 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h3><p>给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。</p><p>数据范围： $n \le 10000$，1&lt;&#x3D;结点值&lt;&#x3D;10000</p><p>要求：空间复杂度 $O(1)$，时间复杂度 $O(n)$</p><p>例如，输入{1,2},{3,4,5}时，对应的环形链表如下图所示：</p><p><img src="/imgs/jzoffer/5.png" alt="img"></p><p>可以看到环的入口结点的结点值为3，所以返回结点值为3的结点。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><p>使用hash键值对一一对应，不允许有重复，重复点为环的起点</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*struct ListNode &#123;    int val;    struct ListNode *next;    ListNode(int x) :        val(x), next(NULL) &#123;    &#125;&#125;;*&#x2F;#include &lt;unordered_set&gt;class Solution &#123;public:    ListNode* EntryNodeOfLoop(ListNode* pHead) &#123;        if(pHead&#x3D;&#x3D;NULL) return NULL;        unordered_set&lt;ListNode*&gt; set;        while(pHead)&#123;            if(set.find(pHead)!&#x3D;set.end())&#123;                return pHead;            &#125;            set.insert(pHead);            pHead&#x3D;pHead-&gt;next;        &#125;        return NULL;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><p>使用快慢指针，快指针走两步，慢指针走一步，如果有环最终肯定会相遇，从相遇处到入口结点的距离与头结点与入口结点的距离相同</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*struct ListNode &#123;    int val;    struct ListNode *next;    ListNode(int x) :        val(x), next(NULL) &#123;    &#125;&#125;;*&#x2F;class Solution &#123;public:    ListNode* EntryNodeOfLoop(ListNode* pHead) &#123;        if(pHead&#x3D;&#x3D;NULL) return NULL;        ListNode* l1&#x3D;pHead,* l2&#x3D;pHead;        while(l1!&#x3D;NULL&amp;&amp;l1-&gt;next!&#x3D;NULL)&#123;            l1&#x3D;l1-&gt;next-&gt;next;            l2&#x3D;l2-&gt;next;            if(l1&#x3D;&#x3D;l2) break;        &#125;        if(l1&#x3D;&#x3D;NULL||l1-&gt;next&#x3D;&#x3D;NULL) return NULL;        l1&#x3D;pHead;        while(l1!&#x3D;l2)&#123;            l1&#x3D;l1-&gt;next;            l2&#x3D;l2-&gt;next;        &#125;        return l1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JZ22-链表中倒数最后k个结点-1"><a href="#JZ22-链表中倒数最后k个结点-1" class="headerlink" title="JZ22 链表中倒数最后k个结点"></a>JZ22 链表中倒数最后k个结点</h2><h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><p>输入一个长度为n的链表，设链表中的元素的值为$a_i$ ，返回该链表中倒数第k个节点。</p><p>如果该链表长度小于k，请返回一个长度为0的链表。</p><p>例如输入{1,2,3,4,5},2时，对应的链表结构如下图所示：</p><p><img src="/imgs/jzoffer/6.png" alt="img"></p><p>其中蓝色部分为该链表的最后2个结点，所以返回倒数第2个结点（也即结点值为4的结点）即可，系统会打印后面所有的节点来比较。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><h4 id="长度法"><a href="#长度法" class="headerlink" title="长度法"></a>长度法</h4><p>疯狂遍历，先遍历出长度，然后将倒数改为正数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param pHead ListNode类      * @param k int整型      * @return ListNode类     *&#x2F;    int len(ListNode* pHead)&#123;        ListNode* l&#x3D;pHead;        int len&#x3D;0;        while(l)&#123;            len++;            l&#x3D;l-&gt;next;        &#125;        return len;    &#125;    ListNode* FindKthToTail(ListNode* pHead, int k) &#123;        &#x2F;&#x2F; write code here        int length&#x3D;len(pHead);        if(length&lt;k || k&#x3D;&#x3D;0) return NULL;        int n&#x3D;length-k;        while(n--)&#123;            pHead&#x3D;pHead-&gt;next;        &#125;        return pHead;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="栈-2"><a href="#栈-2" class="headerlink" title="栈"></a>栈</h4><p>用栈很好想到，就是空间比较浪费</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;#include &lt;stack&gt;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param pHead ListNode类      * @param k int整型      * @return ListNode类     *&#x2F;    ListNode* FindKthToTail(ListNode* pHead, int k) &#123;        &#x2F;&#x2F; write code here        stack&lt;ListNode*&gt; s;        while(pHead)&#123;            s.push(pHead);            pHead&#x3D;pHead-&gt;next;        &#125;        ListNode* res&#x3D;NULL;        while(k--)&#123;            if(s.empty()) return NULL;            res&#x3D;s.top();            s.pop();        &#125;        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h4><p>连续两道用到快慢指针，这里的快慢指针有点类似于前面的长度法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;** * struct ListNode &#123; *int val; *struct ListNode *next; *ListNode(int x) : val(x), next(nullptr) &#123;&#125; * &#125;; *&#x2F;class Solution &#123;public:    &#x2F;**     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可     *     *      * @param pHead ListNode类      * @param k int整型      * @return ListNode类     *&#x2F;    ListNode* FindKthToTail(ListNode* pHead, int k) &#123;        &#x2F;&#x2F; write code here        ListNode* fast&#x3D;pHead,* slow&#x3D;pHead;        if(k&#x3D;&#x3D;0) return NULL;        while(k--)&#123;            if(fast&#x3D;&#x3D;NULL) return NULL;            fast&#x3D;fast-&gt;next;        &#125;        while(fast)&#123;            slow&#x3D;slow-&gt;next;            fast&#x3D;fast-&gt;next;        &#125;        return slow;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebPage制作的一点尝试</title>
      <link href="/2023/09/27/WebPage%E5%88%B6%E4%BD%9C%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%9D%E8%AF%95/"/>
      <url>/2023/09/27/WebPage%E5%88%B6%E4%BD%9C%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>网页实例：<a href="https://github.com/JIANG-Wu-19/page#%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C">This is a try for page making</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><ul><li>images文件夹：存放固定图片素材</li><li>uploads文件夹：存放非固定使用的图片素材</li><li>css文件夹：存放CSS文件<ul><li>base.css：基础公共样式</li><li>index.css：首页CSS样式</li></ul></li><li>index.html：首页HTML文件</li></ul><h4 id="基础公共样式"><a href="#基础公共样式" class="headerlink" title="基础公共样式"></a>基础公共样式</h4><ul><li>清除默认样式，例如内外边距、项目符号</li><li>设置通用样式，例如文字样式</li></ul><h4 id="默认样式代码"><a href="#默认样式代码" class="headerlink" title="默认样式代码"></a>默认样式代码</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">li</span> <span class="token punctuation">&#123;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font</span><span class="token punctuation">:</span> 14px/1.5 <span class="token string">"Microsoft Yahei"</span><span class="token punctuation">,</span><span class="token string">"Hiragino Sans GB"</span><span class="token punctuation">,</span> <span class="token string">"Heiti SC"</span><span class="token punctuation">,</span> <span class="token string">"WenQuanYi Micro Hei"</span><span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网页制作思路"><a href="#网页制作思路" class="headerlink" title="网页制作思路"></a>网页制作思路</h2><h3 id="布局思路"><a href="#布局思路" class="headerlink" title="布局思路"></a>布局思路</h3><p>先整体后局部，从外到内，从上到下，从左到右</p><h3 id="CSS实现思路"><a href="#CSS实现思路" class="headerlink" title="CSS实现思路"></a>CSS实现思路</h3><ol><li>画盒子，调整盒子范围-&gt;宽高背景色</li><li>调整盒子位置-&gt;flex布局，内外边距</li><li>控制图片、文字内容样式</li></ol><h2 id="制作网页"><a href="#制作网页" class="headerlink" title="制作网页"></a>制作网页</h2><h3 id="header区域"><a href="#header区域" class="headerlink" title="header区域"></a>header区域</h3><p>通栏：宽度与浏览器窗口相同的盒子</p><p>标签结构：通栏&gt;<strong>版心</strong>&gt;logo+导航+搜索+用户</p><p>版心display:flex</p><h4 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h4><p>功能：</p><ul><li>单击跳转首页</li><li>搜索引擎优化</li></ul><p>实现方法：</p><ul><li><p>标签结构：h1&gt;a&gt;网站名称(搜索关键字)</p></li><li><p>CSS：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.logo a</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 195px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 41px<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../images/logo.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h4><p>功能：</p><ul><li>单击跳转页面</li></ul><p>实现方法：</p><ul><li>标签结构：ul&gt;li*3&gt;a</li><li>CSS思路<ul><li>li 设置 margin-right</li><li>a 设置 左右padding</li></ul></li></ul><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><ul><li>标签结构：.search&gt;input+a&#x2F;button</li><li>div.search标签flex布局，侧轴居中，input标签flex：1</li></ul><h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><ul><li>标签结构：.user&gt;a&gt;img+span</li><li>图片、文字垂直方向居中</li></ul><h3 id="banner区域"><a href="#banner区域" class="headerlink" title="banner区域"></a>banner区域</h3><p>结构：通栏banner&gt;版心&gt;.left+.right</p><h4 id="left"><a href="#left" class="headerlink" title="left"></a>left</h4><ul><li>标签结构：.left&gt;ul&gt;li*9&gt;a</li><li>默认状态：背景图白色右箭头</li><li>悬停状态：背景图蓝色右箭头</li></ul><h4 id="right"><a href="#right" class="headerlink" title="right"></a>right</h4><ul><li>标签结构：.right&gt;h3+.content</li></ul><h3 id="精品推荐"><a href="#精品推荐" class="headerlink" title="精品推荐"></a>精品推荐</h3><ul><li>标签结构：.recommend&gt;h3+ul+a.modify</li><li>flex布局</li></ul><h3 id="精品课程"><a href="#精品课程" class="headerlink" title="精品课程"></a>精品课程</h3><ul><li>标签结构:.hd+.bd</li><li>盒子模型</li></ul><h4 id="hd"><a href="#hd" class="headerlink" title="hd"></a>hd</h4><ul><li>标签结构：.hd&gt;h3+a.more</li><li>a.more设置箭头背景图</li></ul><h4 id="bd"><a href="#bd" class="headerlink" title="bd"></a>bd</h4><ul><li>课程卡片各个区域样式复用</li><li>标签结构：.bd&gt;ul&gt;li&gt;a</li><li>flex布局</li></ul><h3 id="学科课程"><a href="#学科课程" class="headerlink" title="学科课程"></a>学科课程</h3><ul><li>标签结构：.hd(复用)+.bd</li></ul><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><ul><li>标签结构:h3+ul+a.more</li></ul><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><ul><li>标签结构：.left+.right&gt;.top+.bottom</li></ul><h3 id="版权区域footer"><a href="#版权区域footer" class="headerlink" title="版权区域footer"></a>版权区域footer</h3><ul><li>标签结构：通栏&gt;版心&gt;.left+.right&gt;dl</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Html </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理笔记</title>
      <link href="/2023/09/27/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/27/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数字图像处理"><a href="#数字图像处理" class="headerlink" title="数字图像处理"></a>数字图像处理</h1><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="人眼视觉感知"><a href="#人眼视觉感知" class="headerlink" title="人眼视觉感知"></a>人眼视觉感知</h3><ul><li><p>人眼 &lt;&#x3D;&gt; 照相机</p><ul><li>眼帘 &lt;&#x3D;&gt; 镜头盖</li><li>瞳孔 &lt;&#x3D;&gt; 光圈</li><li>晶状体 &lt;&#x3D;&gt; 透镜</li><li>视网膜 &lt;&#x3D;&gt; 底片</li><li>视神经细胞 &lt;&#x3D;&gt; 感光药膜<ul><li>视杆细胞</li><li>视锥细胞</li></ul></li></ul></li><li><p>人眼辨别亮度差别的能力，与环境亮度和本身亮度有关</p></li><li><p>感知亮度并不是实际灰度的简单函数（马赫带效应）</p></li></ul><h3 id="图像的感知与获取"><a href="#图像的感知与获取" class="headerlink" title="图像的感知与获取"></a>图像的感知与获取</h3><p>图像获取方式：</p><ul><li>单传感器</li><li>条传感器</li><li>传感器阵列</li></ul><h3 id="图像采样与量化"><a href="#图像采样与量化" class="headerlink" title="图像采样与量化"></a>图像采样与量化</h3><ul><li><p>成像模型</p><p>$0&lt;f(x,y)&lt; \infty$</p></li><li><p>连续感知数据-&gt;数字形式</p></li><li><p>采样与量化</p><ul><li>采样：空间坐标的离散化，决定图像的空间分辨率</li><li>量化：图像函数值（幅值）的数字化，光强，决定图像幅度（灰度级）分辨率</li></ul></li><li><p>动态范围、饱和度、对比度</p><ul><li>$f(x,y):x,y \in Z,f \in Z$</li></ul></li></ul><h4 id="图像数字化：对M、N和离散灰度级数L"><a href="#图像数字化：对M、N和离散灰度级数L" class="headerlink" title="图像数字化：对M、N和离散灰度级数L"></a>图像数字化：对M、N和离散灰度级数L</h4><ul><li>$L&#x3D;2^k$</li><li>$f \in [0,L-1]$</li></ul><h4 id="图像量化"><a href="#图像量化" class="headerlink" title="图像量化"></a>图像量化</h4><ul><li>均匀量化</li><li>非均匀量化<ul><li>基于视觉特性</li><li>基于统计特性</li></ul></li></ul><h4 id="空间与灰度分辨率"><a href="#空间与灰度分辨率" class="headerlink" title="空间与灰度分辨率"></a>空间与灰度分辨率</h4><ul><li><p>空间分辨率：每英寸点数表示dpi</p></li><li><p>灰度分辨率：用于量化灰度的比特数</p></li><li><p>图像内插（重采样）：调整图像的大小、旋转、几何校正</p><ul><li>下采样&#x2F;收缩：行列删除</li><li>上采样&#x2F;放大：创建新的像素位置，对新位置上的像素赋值</li></ul></li></ul><h5 id="最近邻插值"><a href="#最近邻插值" class="headerlink" title="最近邻插值"></a>最近邻插值</h5><p>原图中最近邻的灰度赋给新像素</p><p>块效应和马赛克效应</p><h5 id="双线性插值"><a href="#双线性插值" class="headerlink" title="双线性插值"></a>双线性插值</h5><p>用四个最近邻位置上的灰度值估计给定位置的灰度值</p><h3 id="图像的表示与描述"><a href="#图像的表示与描述" class="headerlink" title="图像的表示与描述"></a>图像的表示与描述</h3><h4 id="数学表示"><a href="#数学表示" class="headerlink" title="数学表示"></a>数学表示</h4><p>二维离散信号：$I&#x3D;f(x,y)$</p><p>$(x,y)$表示图像像素坐标</p><p>$f(x,y)$表示在坐标处像素的灰度值</p><h4 id="图像描述"><a href="#图像描述" class="headerlink" title="图像描述"></a>图像描述</h4><h5 id="黑白图像-x2F-二值图像"><a href="#黑白图像-x2F-二值图像" class="headerlink" title="黑白图像&#x2F;二值图像"></a>黑白图像&#x2F;二值图像</h5><p>黑白图像是对灰度图像二值化</p><p>对二值图像进一步处理</p><h4 id="像素间基本关系"><a href="#像素间基本关系" class="headerlink" title="像素间基本关系"></a>像素间基本关系</h4><p>像素是图像的基本组成单元，在图像空间中网格化排列</p><p>像素间基本关系：</p><ul><li>相邻像素</li><li>邻接、连接、连通</li><li>集合间关系</li></ul><h5 id="像素间的距离"><a href="#像素间的距离" class="headerlink" title="像素间的距离"></a>像素间的距离</h5><ul><li><p>欧氏距离$D_E$</p><p>范数为2的距离</p><p>$D_E(p,q)&#x3D; \sqrt{(x-s)^2+(y-t)^2}$</p></li><li><p>曼哈顿距离</p></li><li><p>切比雪夫距离</p></li></ul><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程笔记</title>
      <link href="/2023/09/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="软件危机与软件工程"><a href="#软件危机与软件工程" class="headerlink" title="软件危机与软件工程"></a>软件危机与软件工程</h2><h3 id="软件危机"><a href="#软件危机" class="headerlink" title="软件危机"></a>软件危机</h3><p>问题</p><ul><li>如何开发软件以满足不断增长</li><li>如何维护数量不断膨胀的软件产品</li></ul><p>表现</p><ul><li>成本超预算，上线拖延</li><li>偏离用户需求</li><li>质量不够</li><li>可维护度低</li><li>没有适当文档</li><li>成本提高</li><li>供不应求</li></ul><p>原因</p><ul><li>软件本身特点</li><li>软件开发错误认识做法</li><li>开发维护的不正确</li></ul><h2 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h2><p>软件生存周期过程</p><h3 id="软件过程七大元素"><a href="#软件过程七大元素" class="headerlink" title="软件过程七大元素"></a>软件过程七大元素</h3><ul><li><p>活动</p><p>开发、维护、管理</p></li><li><p>任务</p><p>活动细分，确定、安排任务</p></li><li><p>工件</p><p>软件过程的工作产品，分输入与输出工作</p></li><li><p>角色</p><p>定义软件过程中的个人或小组的行为与职责</p></li><li><p>资源</p><p>最佳实践、工具、技术、机器、场地等</p></li><li><p>目标</p><p>每个过程有明确目标</p></li><li><p>度量指标</p><p>目标的具体度量与分析：进度、成本、质量、返工率</p></li></ul><h3 id="软件生存周期模型"><a href="#软件生存周期模型" class="headerlink" title="软件生存周期模型"></a>软件生存周期模型</h3><ul><li><p>线性顺序模型</p><p>瀑布模型</p><p>特点：</p><ul><li>强调阶段的划分顺序与依赖；</li><li>强调各阶段工作文档的完备性，即文档驱动静态描述；</li><li>每个阶段从技术和管理进行严格的审查，即质量保证的<br>观点；</li><li>是一种线性的、顺序的、逐步细化的开发模式；</li><li>推迟实现的观点；</li></ul><p>适用时机：</p><ul><li>所有功能、性能等要求能一次理解和描述时</li><li>所有的系统功能一次交付时</li><li>必须同时淘汰全部老系统时</li></ul><p>实际的瀑布模型具有<strong>反馈环</strong></p><p>风险缺点：</p><ul><li>获得完善的需求规约是非常困难的；</li><li>难以适应快速变化需求；</li><li>系统太大时,难以一次做完；</li><li>反馈信息慢；</li><li>极可能引起开发后期的大量返工，如返工到需求、设计等早<br>期活动；</li></ul><p>建议不适用的情况：</p><p><img src="/imgs/se/1.png" alt="image-20230914085603259"></p></li><li><p>增量式模型</p><p>软件被分解成许多增量构件，逐个提交</p><p>构造中间版本</p><p><img src="/imgs/se/2.png" alt="image-20230914085943130"></p><p>适用实际：</p><ul><li>需要早期获得功能；</li><li>中间产品可以提供使用；</li><li>系统被自然地分割成增量；</li><li>工作人员&#x2F;资金可以逐步增加。</li></ul><p>考虑风险：</p><ul><li>需求未被很好地理解</li><li>一次要求所有功能</li><li>需求迅速发生变化</li><li>事先打算采用的技术迅速发生变化</li><li>长时期内仅有有限的资源（人员&#x2F;资金）</li></ul></li><li><p>演化模型</p><p>只要核心需求能够被很好地理解，就可以进行渐进式开发，其余需求可以在后续的迭代中进一步定义和实现。这种过程模型称为演化模型，它能很好地适应随时间演化的产品的开发。</p><p>特点：</p><ul><li><p>迭代的开发方法，渐进地开发各个可执行版本，逐步完善软件产品。每个版本在开发时，开发过程中的活动和任务顺序地或部分重叠平行地被采用。</p></li><li><p>与增量模型的区别是：需求在开发早期不能被完全了解和确定，在一部分被定义后开发就开始了，然后在每个相继的版本中逐步完善。</p><p><img src="/imgs/se/3.png" alt="image-20230921080755595"></p></li><li><p>现代软件工程采用演化模型</p><ul><li>统一软件过程RUP</li><li>敏捷过程</li><li>净室软件过程</li></ul></li><li><p>演化模型的子类</p><ul><li>原型</li><li>螺旋模型</li><li>并发开发模型</li></ul></li></ul></li></ul><h3 id="演化模型"><a href="#演化模型" class="headerlink" title="演化模型"></a>演化模型</h3><h4 id="迭代化开发"><a href="#迭代化开发" class="headerlink" title="迭代化开发"></a>迭代化开发</h4><p>特点： 尽可能降低风险，适用处理不确定的复杂系统。<br>原则:</p><ol><li>每次迭代产生一个可执行的版本；</li><li>要求有计划地迭代。</li></ol><p><img src="/imgs/se/4.png" alt="image-20230921081712692"></p><h5 id="快速原型模型"><a href="#快速原型模型" class="headerlink" title="快速原型模型"></a>快速原型模型</h5><p>特点：定义出总体目标或初步需求就开发原型，通过原型与用户交互识别进一步的需求.</p><ol><li>抛弃式原型</li><li>演化式原型</li></ol><p><img src="/imgs/se/5.png" alt="image-20230921081842792"></p><h5 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h5><p><img src="/imgs/se/6.png" alt="image-20230921081928140"></p><h4 id="RUP统一软件过程"><a href="#RUP统一软件过程" class="headerlink" title="RUP统一软件过程"></a>RUP统一软件过程</h4><ol><li>迭代式开发</li><li>管理需求</li><li>使用基于构件的体系结构</li><li>可视化建模</li><li>贯穿于开发过程的软件质量验证</li><li>控制软件变更</li></ol><p><img src="/imgs/se/7.png" alt="image-20230921082152709"></p><p>Best Practices<br>Process Made Practical<br>Develop Iteratively<br>Manage Requirements<br>Use Component Architectures<br>Model Visually (UML)<br>Continuously Verify Quality<br>Manage Change</p><h5 id="RUP软件开发生命周期"><a href="#RUP软件开发生命周期" class="headerlink" title="RUP软件开发生命周期"></a>RUP软件开发生命周期</h5><p><img src="/imgs/se/8.png" alt="image-20230921082504263"></p><p>RUP是一个风险驱动的、基于UML和构件式架构的迭代、递增型开发过程</p><h5 id="阶段和迭代"><a href="#阶段和迭代" class="headerlink" title="阶段和迭代"></a>阶段和迭代</h5><p><img src="/imgs/se/9.png" alt="image-20230921082630957"></p><h5 id="6个核心规范和3个支持规范"><a href="#6个核心规范和3个支持规范" class="headerlink" title="6个核心规范和3个支持规范"></a>6个核心规范和3个支持规范</h5><p>RUP把软件开发生命周期分成6个核心规范和3个支持规范</p><h6 id="6个核心规范"><a href="#6个核心规范" class="headerlink" title="6个核心规范"></a>6个核心规范</h6><ul><li>业务建模(系统目标达成共识)</li><li>需求(系统范围达成共识)</li><li>设计</li><li>实现</li><li>测试</li><li>部署</li></ul><h6 id="3个支持规范"><a href="#3个支持规范" class="headerlink" title="3个支持规范"></a>3个支持规范</h6><ul><li>配置与变更管理</li><li>项目管理(风险,计划,进度等)</li><li>环境</li></ul><h4 id="敏捷过程与极限编程"><a href="#敏捷过程与极限编程" class="headerlink" title="敏捷过程与极限编程"></a>敏捷过程与极限编程</h4><h5 id="敏捷过程"><a href="#敏捷过程" class="headerlink" title="敏捷过程"></a>敏捷过程</h5><p>具有高效、快速响应变化的开发过程</p><p><img src="/imgs/se/10.png" alt="image-20230921083304665"></p><p>动机：快速的市场进入时间、快速变化的需求、快速发展的技术</p><p><strong>敏捷宣言</strong></p><ol><li>个体和交互胜过过程和工具；</li><li>可以工作的软件胜过面面俱到的文档；</li><li>客户合作胜过合同谈判；</li><li>响应变化胜过遵循计划。</li></ol><p>敏捷过程的原则</p><ul><li>优先目标是尽早持续交付高价值的软件来满足客户需求；</li><li>通过驾驭变化帮助客户赢得竞争；</li><li>经常交付可用软件；</li><li>业务员和开发人员必须每天一起工作；</li><li>以积极主动地人为核心建立项目团队；</li><li>可用软件是最主要的项目进展目标；</li><li>团队内外最有效的交流是面对面交流；</li><li>提倡可持续开发，保持稳定的工作步调；</li><li>用精益求精和优良设计增强敏捷性；</li><li>简约—工作最小化；</li><li>最优的架构、需求和设计来自自组织的团队；</li><li>团队不断开展工作反思，校正自身行为。</li></ul><p>实践做法</p><ul><li>敏捷过程很容易适应变化并迅速做出自我调整，在保证质量的前提下，实现企业效益的最大化</li><li>敏捷过程在保证软件开发有成功产出的前提下，尽量减少开发过程中的活动和制品，Just enough</li></ul><p>适用范围</p><ul><li>需求不确定、易挥发</li><li>有责任感和积极向上的开发人员</li><li>用户容易沟通并能参与</li><li>小于10个人的项目团队</li></ul><h5 id="极限编程XP-敏捷软件工程实践"><a href="#极限编程XP-敏捷软件工程实践" class="headerlink" title="极限编程XP-敏捷软件工程实践"></a>极限编程XP-敏捷软件工程实践</h5><p>价值观</p><p>沟通、反馈、简化、勇气</p><p>特点</p><p>测试成为开发的核心;</p><p>纪律性与灵活性巧妙结合.</p><p>XP项目的整体开发过程</p><p><img src="/imgs/se/11.png" alt="image-20230921090250148"></p><p><img src="/imgs/se/12.png" alt="image-20230921090334703"></p><p>XP迭代开发过程</p><p><img src="/imgs/se/13.png" alt="image-20230921090521198"></p><p><img src="/imgs/se/14.png" alt="image-20230921090600558"></p><p>XP关键做法</p><ul><li>现场客户（On-site Customer）</li><li>计划博弈（Planning Game）</li><li>系统隐喻（System Metaphor）</li><li>简化设计（Simple Design）</li><li>集体拥有代码（Collective Code Ownership）</li><li>结对编程（Pair Programming）</li><li>测试驱动（Test-driven）</li><li>小型发布（Small Releases）</li><li>重构（Refactoring）</li><li>持续集成（Continuousintegration）</li><li>每周40小时工作制（40-hour Weeks）</li><li>代码规范（Coding Standards）</li></ul><h5 id="RUP与XP共性"><a href="#RUP与XP共性" class="headerlink" title="RUP与XP共性"></a>RUP与XP共性</h5><ul><li>基础都是面向对象方法（取代传统的结构化方法）</li><li>都重视代码、文档的最小化和设计的简化</li><li>采用动态适应变化的演进式迭代周期（取代传统的瀑布型生命周期）</li><li>需求和测试驱动</li><li>鼓励用户积极参与</li></ul><h5 id="RUP与XP的区别"><a href="#RUP与XP的区别" class="headerlink" title="RUP与XP的区别"></a>RUP与XP的区别</h5><ul><li>XP以代码为中心，编码和设计活动融为一体，弱化了架构的概念。</li><li>RUP过程通常以架构为中心，细化阶段的主要目的就是构造出一个可运行的架构原型，作为将来添加需求功能的稳固基础。</li><li>XP不包含业务建模、部署、过程管理等概念。</li><li>RUP适合各种规模的项目，XP只适用于小团队。</li></ul><h4 id="微软过程"><a href="#微软过程" class="headerlink" title="微软过程"></a>微软过程</h4><h5 id="微软过程准则"><a href="#微软过程准则" class="headerlink" title="微软过程准则"></a>微软过程准则</h5><ul><li>项目计划应该兼顾未来的不确定因素;</li><li>用有效的风险管理来减少不确定因素的影响;</li><li>经常生成并快速的地测试软件的过渡版本，提高稳定性和可预测性;</li><li>采用快速循环，递进的开发过程;</li><li>用创造性的工作来平衡产品特性和产品成本;</li><li>项目进度表应该具有较高稳定性和权威性;</li><li>使用小型项目组并发的完成开发工作;</li><li>在项目早期把软件配置项基线化，项目后期则冻结产品;</li><li>使用原型验证概念，对项目进行早期论证;</li><li>把零缺陷作为追求的目标;</li><li>里程碑评审会的目的是改进工作，切忌相互指责.</li></ul><h5 id="微软软件生命周期"><a href="#微软软件生命周期" class="headerlink" title="微软软件生命周期"></a>微软软件生命周期</h5><p><img src="/imgs/se/15.png" alt="image-20230921092829901"></p><h5 id="微软过程模型"><a href="#微软过程模型" class="headerlink" title="微软过程模型"></a>微软过程模型</h5><p><img src="/imgs/se/16.png" alt="image-20230921093011743"></p><h4 id="Scrum过程"><a href="#Scrum过程" class="headerlink" title="Scrum过程"></a>Scrum过程</h4><ul><li>强调经验性过程而不是确定性过程</li><li>演化型的迭代开发过程</li></ul><p><img src="/imgs/se/17.png" alt="image-20230921093118096"></p><h3 id="软件过程的选择与裁切"><a href="#软件过程的选择与裁切" class="headerlink" title="软件过程的选择与裁切"></a>软件过程的选择与裁切</h3><h4 id="软件过程的选择"><a href="#软件过程的选择" class="headerlink" title="软件过程的选择"></a>软件过程的选择</h4><ol><li>产品&#x2F;项目自身的特点</li><li>团队的实际情况和企业文化</li><li>客户的影响</li></ol><h4 id="软件过程进行裁剪"><a href="#软件过程进行裁剪" class="headerlink" title="软件过程进行裁剪"></a>软件过程进行裁剪</h4><ol><li>流程归并与裁剪</li><li>角色的筛选与定制</li><li>工件的裁剪和定制</li></ol><h3 id="软件过程的评估与改进"><a href="#软件过程的评估与改进" class="headerlink" title="软件过程的评估与改进"></a>软件过程的评估与改进</h3><h4 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h4><ol><li><p>CMM&#x2F;CMMI</p><p>过程能力成熟度模型</p><p>CMMI是一个标准簇</p><ul><li>CMMI4Development</li><li>CMMI4Svervice</li><li>CMMI4Acquisition</li></ul><p>CMMI模型不同的改进方法：</p><ul><li>组织成熟度方法（阶梯式模型）</li><li>过程能力方法（连续式模型）</li></ul><p><img src="/imgs/se/18.png" alt="image-20230921100418465"></p><p><img src="/imgs/se/19.png" alt="image-20230921100537595"></p></li><li><p>ISO&#x2F;IEC 15504</p><p>信息技术-软件过程评价标准，又称为SPICE</p><p><img src="/imgs/se/20.png" alt="image-20230921100651886"></p></li><li><p>ISO&#x2F;IEC 20000</p><p>用于评估和认证IT运维服务管理过程的能力</p></li></ol><h4 id="软件过程的改进"><a href="#软件过程的改进" class="headerlink" title="软件过程的改进"></a>软件过程的改进</h4><p><img src="/imgs/se/21.png" alt="image-20230921100821461"></p><h2 id="软件建模"><a href="#软件建模" class="headerlink" title="软件建模"></a>软件建模</h2><h3 id="软件建模的三个层面"><a href="#软件建模的三个层面" class="headerlink" title="软件建模的三个层面"></a>软件建模的三个层面</h3><p>CIM、PIM和PSM</p><ol><li>计算无关模型</li><li>平台无关模型</li><li>平台相关模型</li></ol><h3 id="软件建模方法"><a href="#软件建模方法" class="headerlink" title="软件建模方法"></a>软件建模方法</h3><ul><li>结构化方法</li><li>面向对象方法</li><li>基于构件的开发方法</li><li>面向服务方法</li><li>面向方面方法</li><li>模型驱动开发方法</li><li>形式化方法</li><li>产品线开发方法和领域工程</li></ul><h4 id="结构化方法"><a href="#结构化方法" class="headerlink" title="结构化方法"></a>结构化方法</h4><ul><li>核心: 自顶向下，逐步求精</li><li>手段: 分解（模块化）、抽象</li><li>任务：结构化分析、结构化设计、结构化编程</li><li>常用建模工具:<ul><li>需求建模：<ul><li>DFD(数据流图)</li><li>DD(数据字典)、ERD(实体关系图)</li><li>STD(状态图)</li></ul></li><li>设计建模：<ul><li>概要设计：结构图（SC）</li><li>详细设计：程序流程图、N-S图、PAD图、伪代码</li></ul></li><li>结构化编程：三种经典程序结构</li></ul></li></ul><h4 id="面向对象方法"><a href="#面向对象方法" class="headerlink" title="面向对象方法"></a>面向对象方法</h4><h4 id="基于构件的开发方法"><a href="#基于构件的开发方法" class="headerlink" title="基于构件的开发方法"></a>基于构件的开发方法</h4><ul><li>跨时间、跨空间、跨用户以及跨用户的共享</li><li>异构协同工作、各层次集成、反复重用</li><li>支持分布式计算与构件化集成、不同标准构件拼装</li><li>CBSD具备：<ol><li>用预先编程功能明确的部件定制而成，可用不同版本部件实现应用扩展；</li><li>系统分解为相互独立协同工作的部件，可反复重用；</li><li>利用统一的接口和标准实现跨平台的互操作。<br>CBSD通过构造和组装可复用构件来开发一个新系统。</li></ol></li></ul><p>抽象程度：</p><ul><li>面向对象方法，以类为封装单位，为类及宠用；</li><li>构建话方法，</li><li>对一组类进行组合封装，通过接口将底层多个逻辑组合成高层次的新构件，可在代码级、对象级、架构级、系统级重用，实现定制组装软件</li></ul><h5 id="构建的概念"><a href="#构建的概念" class="headerlink" title="构建的概念"></a>构建的概念</h5><p>独立于特定平台和应用系统，具有标准接口，支持一定功能，可重用与自包含的软件构成部分。</p><p><img src="/imgs/se/154.png" alt="image-20231207091540068"></p><p><img src="/imgs/se/155.png" alt="image-20231207091600467"></p><h5 id="构建的类型"><a href="#构建的类型" class="headerlink" title="构建的类型"></a>构建的类型</h5><ol><li>按重用的方式<br>白盒构件、灰盒构件、黑盒构件</li><li>按使用的范围<br>通用构件、领域共性构件、应用专用构件</li><li>按粒度的大小<br>小粒度，基本数据结构构件，如窗口、菜单等<br>中粒度，如文本录入、查询、删除功能构件等<br>大粒度，子系统构件，如文本编辑子系统、图形图像处理子系统等。</li><li>按用途<br>系统构件，整个集成与系统环境中都使用的构件；<br>支撑构件，在集成环境和构件管理系统中使用的构件；<br>领域构件，专门领域开发的构件。</li><li>按构件结构<br>原子构件，无需再分的最小基本单元；<br>组合构件，由多个构件聚集而成。</li></ol><h5 id="常用的构建标准"><a href="#常用的构建标准" class="headerlink" title="常用的构建标准"></a>常用的构建标准</h5><ol><li><p>CORBA</p><p><img src="/imgs/se/156.png" alt="image-20231207091746075"></p></li><li><p>COM&#x2F;DCOM&#x2F;COM+</p><p><img src="/imgs/se/157.png" alt="image-20231207091826129"></p><p><img src="/imgs/se/158.png" alt="image-20231207091844947"></p></li><li><p>J2E和EJB</p><p><img src="/imgs/se/159.png" alt="image-20231207091917448"></p></li><li><p>SCA</p><p><img src="/imgs/se/160.png" alt="image-20231207091944907"></p></li></ol><p><img src="/imgs/se/161.png" alt="image-20231207092023991"></p><h5 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h5><ul><li>构件开发<ul><li>领域分析与设计</li><li>构件设计与实现</li><li>构件入库</li></ul></li><li>构件管理<ul><li>组织、描述、分类、检索构件</li><li>管理与维护构件库</li><li>评估构件资产，不断改进</li></ul></li><li>应用开发与组装<ul><li>基于构件的设计（基于构件的应用系统体系结构）</li><li>构件组装</li><li>系统测试与发布</li></ul></li></ul><h4 id="面向服务的方法"><a href="#面向服务的方法" class="headerlink" title="面向服务的方法"></a>面向服务的方法</h4><p><img src="/imgs/se/162.png" alt="image-20231207092201095"></p><h5 id="服务、构建和类之间的关系"><a href="#服务、构建和类之间的关系" class="headerlink" title="服务、构建和类之间的关系"></a>服务、构建和类之间的关系</h5><p><img src="/imgs/se/163.png" alt="image-20231207092239761"></p><h5 id="服务的特征"><a href="#服务的特征" class="headerlink" title="服务的特征"></a>服务的特征</h5><ul><li><p>服务的抽象性（基于接口的编程）</p><ul><li>服务是实际程序、数据库、业务过程等软件实体的抽象了的逻<br>辑视图。</li><li>实现平台透明性</li></ul></li><li><p>服务的自治性（实现分布式应用）</p><p>You don’t “new” a service – it’s just there.</p></li><li><p>服务间的松耦合式绑定，基于标准化消息进行通信</p></li><li><p>服务的自描述性（支持动态发现与延迟绑定）</p><ul><li>服务具有可发布、可发现、机器可处理的接口契约</li></ul></li><li><p>服务的粗粒度（支持基于业务逻辑的积木式装配）</p></li></ul><h5 id="SOA模型"><a href="#SOA模型" class="headerlink" title="SOA模型"></a>SOA模型</h5><ol><li>相对较粗的粒度上对应用服务或业务模块进行封装与重用；</li><li>服务间保持松散耦合，基于开放的标准， 服务的接口描述与具体实现无关；</li><li>灵活的架构-服务的实现细节，服务的位置乃至服务请求的底层协议都应该透明；</li></ol><p><img src="/imgs/se/164.png" alt="image-20231207092419320"></p><p>企业服务总线ESB</p><p>在SOA中还需要一个中间层，能够帮助实现在SOA架构中不同服务之间的智能化管理。这就是企业服务总线.<br>ESB的主要功能是:</p><ol><li>对各个服务之间消息监控与路由</li><li>解决各个服务组件之间通信</li><li>控制服务版本与部署</li><li>满足服务像事件处理,数据转换与映射,消息与事件查询与排序,安全或异常处理,协议转换,保证服务通讯的质量.</li></ol><p><img src="/imgs/se/165.png" alt="image-20231207092535454"></p><p><img src="/imgs/se/166.png" alt="image-20231207092609216"></p><h5 id="面向服务软件开发SOAD"><a href="#面向服务软件开发SOAD" class="headerlink" title="面向服务软件开发SOAD"></a>面向服务软件开发SOAD</h5><p><img src="/imgs/se/167.png" alt="image-20231207092641934"></p><h6 id="业务建模"><a href="#业务建模" class="headerlink" title="业务建模"></a>业务建模</h6><p><img src="/imgs/se/168.png" alt="image-20231207092751988"></p><h6 id="服务分析"><a href="#服务分析" class="headerlink" title="服务分析"></a>服务分析</h6><ol><li>服务识别<ul><li>自顶向下分解，由业务需求驱动，设计服务。如果没有已有的软件服务相对应，就需要设计一个全新的服务。<ul><li>优点：业务流程中的业务服务和软件服务之间的交互是完全匹配的；</li><li>缺点：可能对现有软件服务的利用率不高，因为识别出来的业务服务有可能与现有软件服务之间不能完全匹配。</li></ul></li><li>自底向上抽象，以现有服务驱动进行匹配<ul><li>优点：通过不断地将业务服务与已有的软件服务进行匹配，使得对已有软件服务能够进行最大限度的复用；</li><li>缺点：可能会发现很多业务服务无法找到合适的现有服务进行匹配，导致需要新开发的服务数量变多。中间汇合，两头并行设计</li></ul></li></ul></li><li>服务粒度的确定<ul><li>以对业务的精确掌握和理解为基础，在性能、可维护性和随需应变之间进行平衡，选择适合的粒度进行服务的识别和划分。<ul><li>服务粒度太细会使得服务流程过于复杂，而且服务流程执行的效率也会降低很多；</li><li>服务流程太粗会使得服务流程难以改动，从而使得随需应变无法实现。</li></ul></li><li>需要我们能够预判业务流程在将来有可能出现的变化，然后根据这种预判来设计服务的粒度。</li></ul></li><li>服务的组织<ul><li>编制<ul><li>在流程中有一个作为流程中心的服务，它负责控制流程中其他参与交互的服务，协调服务间的消息传递。</li><li>除流程中心服务之外的其他参与交互的服务。</li></ul></li><li>编排<ul><li>参与业务过程的Web服务之间是协作关系，为了实现一个业务流程，每一个参与其中的服务都需要明确地知道自己应该在什么情况下与哪些其他服务进行交互。</li></ul></li></ul></li></ol><h5 id="面向服务建模涉及的三个层面"><a href="#面向服务建模涉及的三个层面" class="headerlink" title="面向服务建模涉及的三个层面"></a>面向服务建模涉及的三个层面</h5><ol><li>业务层面<br>功能域：业务逻辑描述<br>业务流程：业务逻辑编排<br>业务服务：识别服务，产生业务服务集</li><li>服务层面<br>根据业务流程和业务服务集设计软件服务集。</li><li>构件层面<br>服务最终由构件实现的，在特定的开发语言与框架中进行设计，可将多个服务中的共用部分抽取出来构成通用的工具构件。<br>通过面向服务的架构将多个相关但独立开发的应用系统集成。从底层构件层面向上，并从顶层的业务层面向下，最终在软件服务和业务服务的中间点会合，得到完整的设计方案。</li></ol><h4 id="模型驱动开发"><a href="#模型驱动开发" class="headerlink" title="模型驱动开发"></a>模型驱动开发</h4><ul><li>将软件的开发集中于模型而不是程序(代码)的一种开发方法<ul><li>从模型自动产生程序(代码)</li><li>主要用来提高开发生产率和代码的可靠性</li></ul></li><li>OMG 定义模型驱动的体系结构(Model-Driven Architecture，简称MDA)的初衷<ul><li>定义一组标准来支持模型驱动的开发</li><li>UML 是MDA 的基础之一</li></ul></li></ul><h5 id="模型与元模型"><a href="#模型与元模型" class="headerlink" title="模型与元模型"></a>模型与元模型</h5><p><img src="/imgs/se/169.png" alt="image-20231207093306289"></p><p><img src="/imgs/se/170.png" alt="image-20231207093336759"></p><h6 id="计算无关模型"><a href="#计算无关模型" class="headerlink" title="计算无关模型"></a>计算无关模型</h6><ul><li>Uses the vocabulary of the domain.</li><li>No information in the model indicates that a computerbased solution will be used.</li></ul><p><img src="/imgs/se/171.png" alt="image-20231207093429895"></p><h6 id="平台无关模型"><a href="#平台无关模型" class="headerlink" title="平台无关模型"></a>平台无关模型</h6><ul><li>Less abstract than CIM</li><li>Closer to implementation but not tied to a platform.</li></ul><p><img src="/imgs/se/172.png" alt="image-20231207093516355"></p><h6 id="平台有关模型"><a href="#平台有关模型" class="headerlink" title="平台有关模型"></a>平台有关模型</h6><ul><li>Less abstract than PIM</li><li>Closer to implementation</li><li>J2EE elements captured in model</li></ul><p><img src="/imgs/se/173.png" alt="image-20231207093552723"></p><h5 id="模型间的转换"><a href="#模型间的转换" class="headerlink" title="模型间的转换"></a>模型间的转换</h5><p><img src="/imgs/se/174.png" alt="image-20231207093648371"></p><h5 id="模型驱动的软件开发MDD"><a href="#模型驱动的软件开发MDD" class="headerlink" title="模型驱动的软件开发MDD"></a>模型驱动的软件开发MDD</h5><ul><li>以模型为中心（相对于以代码为中心）的软件开发方法</li><li>基于以下两种久经考验的技术</li></ul><p><img src="/imgs/se/175.png" alt="image-20231207093735499"></p><ol><li><p>可执行的UML（xUML）</p><p>xUML &#x3D;UML－语义较弱的元素+精确定义的动作语义</p></li><li><p>从PIM到PSM或代码的（半）自动生成</p><ul><li>通过标记、profile、OCL或者其他途径进行平台无关模型（PIM）的刻画，然后定义相关的转换规则来完成从平台无关模型到平台相关模型或代码的转换。</li></ul></li><li><p>基于DSL的开发方法</p><ul><li>领域描述语言（Domain Specific Language，DSL）通过适当的表示方法和抽象机制来提供对特定问题领域的表述能力，DSL 常用来生成特定应用领域中的一个产品／应用家族的应用。</li></ul></li></ol><h4 id="形式化方法"><a href="#形式化方法" class="headerlink" title="形式化方法"></a>形式化方法</h4><ul><li>形式化方法是基于数学的技术开发软件，如集合论、模糊逻辑、函数、有限状态机、Petrinet等。</li><li>形式化方法的好处：<ul><li>无二义性</li><li>一致性</li><li>正确性</li><li>完整性</li></ul></li></ul><p>有限状态机见PPT</p><h2 id="需求工程"><a href="#需求工程" class="headerlink" title="需求工程"></a>需求工程</h2><ul><li>软件需求面临的挑战</li></ul><ol><li>用户说不清需求；</li><li>需求表达的二义性问题；</li><li>需求经常变化, 项目没有时限；</li><li>因误解或二义性的需求直到开发后期才发现；</li><li>测试者没有明白产品要做什么；</li><li>产品性能低、使用不方便等用户不满意；</li><li>许多增强性需求未在需求获取阶段提出。</li></ol><h3 id="需求工程的概念"><a href="#需求工程的概念" class="headerlink" title="需求工程的概念"></a>需求工程的概念</h3><h4 id="软件需求-FURPS-and-FURPS"><a href="#软件需求-FURPS-and-FURPS" class="headerlink" title="软件需求 FURPS and FURPS+"></a>软件需求 FURPS and FURPS+</h4><p>功能性需求（F）与非功能性需求（URPS）</p><table><thead><tr><th align="center">需求</th><th align="center">能力</th><th align="center">具体要求</th></tr></thead><tbody><tr><td align="center">Functionality</td><td align="center">Feature Set,Capabilities</td><td align="center">Generality,Security</td></tr><tr><td align="center">Usability</td><td align="center">Human Factors,Aesthetics</td><td align="center">Consistency,Documentation</td></tr><tr><td align="center">Reliability</td><td align="center">Frequency&#x2F;Severity,of Failure,Recoverability</td><td align="center">Predictability,Accuracy,MTBF</td></tr><tr><td align="center">Performance</td><td align="center">Speed,Efficiency,&gt;Resource Usage</td><td align="center">Throughput,Response Time</td></tr><tr><td align="center">Supportability</td><td align="center">Testability,Extensibility,Adaptability,Maintainability,Compatibility</td><td align="center">Configurability,Serviceability,Installability,Localizability,Robustness</td></tr></tbody></table><h4 id="Functionality需求"><a href="#Functionality需求" class="headerlink" title="Functionality需求"></a>Functionality需求</h4><p>功能、特性和安全性</p><ul><li>概要功能需求</li><li>详细功能需求</li></ul><h4 id="Usablity需求"><a href="#Usablity需求" class="headerlink" title="Usablity需求"></a>Usablity需求</h4><p>可用性</p><p>The ease with which software can be learned and<br>operated by the intended users</p><h4 id="Reliability需求"><a href="#Reliability需求" class="headerlink" title="Reliability需求"></a>Reliability需求</h4><p>软件在给定时间间隔内成功运行的概率</p><ul><li>可靠性需求<ul><li>故障的频率</li><li>可恢复性</li><li>可预见性</li><li>准确性</li><li>平均失效间隔时间&#x2F;平均无故障时间，MTBF</li></ul></li></ul><h4 id="Performance需求"><a href="#Performance需求" class="headerlink" title="Performance需求"></a>Performance需求</h4><ul><li>性能需求<ul><li>速度</li><li>效率</li><li>吞吐量</li><li>响应时间</li><li>容量</li><li>资源利用情况</li></ul></li></ul><h4 id="Supportability需求"><a href="#Supportability需求" class="headerlink" title="Supportability需求"></a>Supportability需求</h4><p>支持性需求</p><ul><li>可测试性</li><li>可扩展性</li><li>可适应性</li><li>可维护性</li><li>兼容性</li><li>可配置性</li><li>可服务性</li><li>可安装性</li><li>可本地化&#x2F;国际化</li></ul><h4 id="FURPS"><a href="#FURPS" class="headerlink" title="FURPS+"></a>FURPS+</h4><ul><li>设计约束（design constraints）：规定或约束了系统的设计的需求；</li><li>实现需求（implementation requirements） ：规定或约束了系统的编码或构建，如所需标准、编程语言、数据库完整性策略、资源限制和操作环境；</li><li>接口需求（interface requirements）：规定了系统必须与之交互操作的外部软件或硬件，以及对这种交互操作所使用的格式、时间或其他因素的约束；</li><li>物理需求（physical requirements.）：规定了系统必须具备的物理特征，可用来代表硬件要求，如物理网络配置需求。</li></ul><h4 id="软件需求的三个层次"><a href="#软件需求的三个层次" class="headerlink" title="软件需求的三个层次"></a>软件需求的三个层次</h4><ul><li>系统需求：业务&#x2F;产品需求</li><li>项目干系人需求：原始需求</li><li>项目前景文档：概要需求</li><li>软件需求规约：详细需求</li></ul><p><img src="/imgs/se/22.png" alt="image-20230928085813446"></p><h3 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h3><p>业务分析-〉确定系统边界-〉项目干系人交流-〉竞争产品观察-〉定义系统高层输入-〉形成前景文档</p><h4 id="前景文档–产品范围文档"><a href="#前景文档–产品范围文档" class="headerlink" title="前景文档–产品范围文档"></a>前景文档–产品范围文档</h4><ol><li>简介</li><li>定位<ul><li>商机</li><li>问题说明</li><li>产品定位</li></ul></li><li>项目干系人和用户描述</li><li>产品概述</li><li>产品特性</li><li>约束</li><li>质量范围</li><li>优先级</li><li>其他产品需求</li><li>文档需求</li></ol><h5 id="分析问题及根源"><a href="#分析问题及根源" class="headerlink" title="分析问题及根源"></a>分析问题及根源</h5><h5 id="识别项目干系人"><a href="#识别项目干系人" class="headerlink" title="识别项目干系人"></a>识别项目干系人</h5><h5 id="识别项目的约束"><a href="#识别项目的约束" class="headerlink" title="识别项目的约束"></a>识别项目的约束</h5><h5 id="获取常用术语"><a href="#获取常用术语" class="headerlink" title="获取常用术语"></a>获取常用术语</h5><h5 id="识别需求的来源"><a href="#识别需求的来源" class="headerlink" title="识别需求的来源"></a>识别需求的来源</h5><h5 id="收集需求"><a href="#收集需求" class="headerlink" title="收集需求"></a>收集需求</h5><h5 id="产品定位"><a href="#产品定位" class="headerlink" title="产品定位"></a>产品定位</h5><h5 id="撰写产品特性"><a href="#撰写产品特性" class="headerlink" title="撰写产品特性"></a>撰写产品特性</h5><h5 id="定义质量范围"><a href="#定义质量范围" class="headerlink" title="定义质量范围"></a>定义质量范围</h5><h5 id="定义文档需求"><a href="#定义文档需求" class="headerlink" title="定义文档需求"></a>定义文档需求</h5><h5 id="建立项目范围"><a href="#建立项目范围" class="headerlink" title="建立项目范围"></a>建立项目范围</h5><h5 id="划分特性优先级"><a href="#划分特性优先级" class="headerlink" title="划分特性优先级"></a>划分特性优先级</h5><h3 id="需求分析建模"><a href="#需求分析建模" class="headerlink" title="需求分析建模"></a>需求分析建模</h3><h4 id="分析模型"><a href="#分析模型" class="headerlink" title="分析模型"></a>分析模型</h4><p>需求分析的结果</p><p>与平台无关模型PIM</p><ul><li>描述客户需求</li><li>建立软件设计基础</li><li>定义软件完成后可以被确认</li></ul><h5 id="结构化分析模型"><a href="#结构化分析模型" class="headerlink" title="结构化分析模型"></a>结构化分析模型</h5><ul><li>数据流图（DFD）</li><li>控制流图（CFD）</li><li>数据字典（DD）</li><li>实体—关系图（ERD）</li><li>状态转换图（STD）</li><li>加工说明（PSPEC）</li></ul><h5 id="面向对象分析模型"><a href="#面向对象分析模型" class="headerlink" title="面向对象分析模型"></a>面向对象分析模型</h5><ul><li>用例图</li><li>活动图</li><li>类图</li><li>时序图、通信图</li><li>状态机图</li></ul><h4 id="分析建模准则"><a href="#分析建模准则" class="headerlink" title="分析建模准则"></a>分析建模准则</h4><ul><li>必须描述并理解问题的信息域<ul><li>输入输出数据、永久性数据对象</li></ul></li><li>必须确定软件所需要的功能</li><li>必须描述软件的行为<ul><li>受外部事件驱动的结果</li></ul></li><li>模型必须能提以一种能提示层次化方式的分解</li><li>分析任务应该从本质信息向实现细节转移</li></ul><h3 id="需求定义和验证"><a href="#需求定义和验证" class="headerlink" title="需求定义和验证"></a>需求定义和验证</h3><p>定义需求、撰写需求文档（前景文档和详细的软件需求规约）</p><h4 id="软件前景文档"><a href="#软件前景文档" class="headerlink" title="软件前景文档"></a>软件前景文档</h4><p>软件需求规约</p><p>作用：</p><p>作用：</p><ul><li>项目管理的依据；</li><li>设计与实现的输入；</li><li>测试与质量保证的输入；</li></ul><p>组成：</p><ul><li>功能需求；</li><li>非功能性需求；</li><li>约束；</li></ul><p>软件需求规约SRS定义了系统的外在行为和属性</p><p>统一软件过程UP提供的两个SRS需求模板</p><p><img src="/imgs/se/23.png" alt="image-20230928103723819"></p><p><img src="/imgs/se/24.png" alt="image-20230928103815246"></p><p><img src="/imgs/se/25.png" alt="image-20230928103906107"></p><h4 id="细化需求"><a href="#细化需求" class="headerlink" title="细化需求"></a>细化需求</h4><ul><li>细化功能需求<ul><li>引入分析模型</li></ul></li><li>细化非功能需求</li><li>细化约束条件</li></ul><h4 id="用户界面原型"><a href="#用户界面原型" class="headerlink" title="用户界面原型"></a>用户界面原型</h4><ul><li>也称“行为模型”，用来描述软件产品的行为，达到明确与细化需求的目的。</li><li>如果和用户交互，则需简要设计用户界面<ul><li>图纸（在纸上）</li><li>位图（采用绘图工具），或可执行代码（交互式的电子界面原型）</li></ul></li></ul><h4 id="需求验证"><a href="#需求验证" class="headerlink" title="需求验证"></a>需求验证</h4><h5 id="验证方面"><a href="#验证方面" class="headerlink" title="验证方面"></a>验证方面</h5><ol><li><p>一致性</p><p>所有需求必须是一致的，任何一条需求不能和其他需求互相矛盾</p></li><li><p>完整性</p><p>需求必须是完整的，规格说明书应该包括用户需要的每一个功能或性能</p></li><li><p>现实性</p><p>指定的需求应该是用现有的硬件技术和软件技术基本上可以实现的</p></li><li><p>有效性</p><p>必须证明需求是正确有效的，确实能解决用户面对的问题</p></li></ol><h5 id="需求验证方法"><a href="#需求验证方法" class="headerlink" title="需求验证方法"></a>需求验证方法</h5><ul><li><p>原型确认</p><ul><li>抛弃型</li><li>演进型</li></ul></li><li><p>需求评审</p><ul><li><p>评审需求文档（Vision和SRS等），及时发现缺陷，寻找改进的契机，同时从评审反馈中获得知识，补充了正规的交流和培训机制，帮助团队建立对产品的共同理解</p></li><li><p>评审过程</p><p>准备计划-〉实施评审-〉返工-〉定稿签字</p></li></ul></li></ul><p>需求评审方法</p><ul><li>审查</li><li>小组评审</li><li>走查</li><li>结对编程</li><li>同级桌查</li><li>轮查</li><li>临时评审</li></ul><p>需求评审的输入输出</p><ul><li>输入<ul><li>待评审的需求文档</li><li>Check list</li></ul></li><li>输出<ul><li>评审结论<ul><li>通过</li><li>有条件通过</li><li>不通过</li></ul></li><li>缺陷清单</li></ul></li></ul><h4 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h4><ul><li>定义需求基线</li><li>需求跟踪</li><li>需求变更控制（建立新的需求基线）</li></ul><h5 id="建立需求基线"><a href="#建立需求基线" class="headerlink" title="建立需求基线"></a>建立需求基线</h5><p>通过对软件产品的特性和需求划分优先级来定义需求基线</p><h5 id="需求变更控制和版本控制"><a href="#需求变更控制和版本控制" class="headerlink" title="需求变更控制和版本控制"></a>需求变更控制和版本控制</h5><ul><li>需求&#x2F;范围变化的原因<ul><li>初期的认识不足导致错误或不完整的需求&#x2F;范围</li><li>需求&#x2F;范围本身存在不一致</li><li>业务变化导致的刚性需求&#x2F;范围变更</li><li>外部经济、市场环境的变化</li><li>客户和项目组对已确认的需求&#x2F;范围理解不一致</li><li>技术制约或多目标权衡带来的需求&#x2F;范围变更</li></ul></li><li>需求变更策略<ul><li>以基线为核心统一变更控制过程</li><li>建立项目变更管理小组</li><li>未获批准不得擅自实施变更</li><li>干系人和项目组成员应即时了解变更</li><li>开发计划、设计测试代码的文档应及时更新</li><li>采用需求变更控制工具</li></ul></li></ul><h5 id="需求跟踪"><a href="#需求跟踪" class="headerlink" title="需求跟踪"></a>需求跟踪</h5><p><img src="/imgs/se/26.png" alt="image-20230928105944712"></p><h2 id="结构化分析"><a href="#结构化分析" class="headerlink" title="结构化分析"></a>结构化分析</h2><h3 id="结构化方法概述"><a href="#结构化方法概述" class="headerlink" title="结构化方法概述"></a>结构化方法概述</h3><p>一种面向数据流的传统软件开发方法</p><p>以数据流为中心构建软件的分析模型、设计模型和实现模型</p><ul><li>结构化分析(Structured Analysis，简称SA)</li><li>结构化设计(Structured Design，简称SD)</li><li>结构化编程(Structured Programming，简称SP)</li></ul><h4 id="结构化分析方法中的抽象与分解"><a href="#结构化分析方法中的抽象与分解" class="headerlink" title="结构化分析方法中的抽象与分解"></a>结构化分析方法中的抽象与分解</h4><p>随着分解层次的增加，抽象的级别越来越低，也越接近问题的解(算法和数据结构)</p><p><img src="/imgs/se/27.png" alt="image-20231007092853653"></p><h4 id="结构化分析模型-1"><a href="#结构化分析模型-1" class="headerlink" title="结构化分析模型"></a>结构化分析模型</h4><p><img src="/imgs/se/28.png" alt="image-20231007092941126"></p><ul><li>数据字典是模型的核心，它包含了软件使用和产生所有数据的描述</li><li>数据流图：用于功能建模，描述系统的输入数据流如何经过一系列的加工变换逐步变换成系统的输出数据流</li><li>实体—关系图：用于数据建模，描述数据字典中数据之间的关系</li><li>状态转换图：用于行为建模，描述系统接收哪些外部事件，以及在外部事件的作用下的状态迁移情况</li></ul><h3 id="面向数据流的软件建模"><a href="#面向数据流的软件建模" class="headerlink" title="面向数据流的软件建模"></a>面向数据流的软件建模</h3><h4 id="系统流程图"><a href="#系统流程图" class="headerlink" title="系统流程图"></a>系统流程图</h4><p>描绘物理系统的工具，其基本思想是用图形符号以黑盒子形式描绘系统里面的每个部件（程序、文件、数据库、表格、人工过程等）,表达的是信息在系统各部件之间流动的情况。</p><p><strong>常用符号</strong></p><p><img src="/imgs/se/29.png" alt="image-20231024161127649"></p><h4 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h4><p>系统逻辑模型描述分为三个方面：</p><ul><li>数据流图 DFD</li><li>数据字典 DD</li><li>加工&#x2F;处理说明 IPO</li></ul><p><strong>数据流图的定义</strong></p><p>描述输入数据流到输出数据流的变换(即加工)过程，用于对系统的功能建模，基本元素包括：</p><p><img src="/imgs/se/30.png" alt="image-20231024161430439"></p><p>e.g. 图书订购系统DFD</p><p><img src="/imgs/se/31.png" alt="image-20231024161742480"></p><p><strong>数据流图的扩充符号</strong></p><p>描述一个加工的多个数据流之间的关系</p><p><img src="/imgs/se/32.png" alt="image-20231024161918825"></p><p><strong>绘制方法</strong></p><ul><li>基本方法：自顶向下逐层分解。</li><li>分解原则：上层是下层的抽象，下层是上层的分解。</li><li>直到所有的处理都足够简单，不必再分解为止。通常把这种不能再分解的加工称为“基本处理”</li></ul><p><strong>分层数据流图</strong></p><p><img src="/imgs/se/33.png" alt="image-20231024162201836"></p><ul><li>在多层数据流图中，顶层流图仅包含一个处理，它代表被开发系统。它的输入流是该系统的输入数据，输出流是系统所输出数据</li><li>底层流图是指其处理不需再做分解的数据流图，它处在最底层</li><li>中间层流图则表示对其上层父图的细化，它的每一处理可能继续细化，形成子<br>图。</li></ul><p><strong>DFD细化</strong></p><ul><li>确定加工</li><li>确定数据流</li><li>确定文件</li></ul><p><strong>画分层数据流图的步骤</strong></p><ol><li>画系统的输入和输出</li><li>画系统内部</li><li>画加工内部</li><li>重复第3步，直至每个尚未分解的加工都足够简单(即不必再分解)</li></ol><p><strong>分层数据流图的审查</strong></p><ul><li>检查图中是否存在错误或不合理(不理想)的部分<ul><li>一致性</li><li>完整性</li></ul></li><li>父图和子图平衡</li><li>数据守恒</li></ul><h4 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h4><p>数据字典由字典条目组成，每个条目描述DFD中的一个元素</p><p>数据字典条目包括：数据流、文件、加工、源或宿</p><h5 id="数据字典描述符号"><a href="#数据字典描述符号" class="headerlink" title="数据字典描述符号"></a>数据字典描述符号</h5><p><img src="/imgs/se/34.png" alt="image-20231024164033623"></p><h5 id="数据流条目的描述内容"><a href="#数据流条目的描述内容" class="headerlink" title="数据流条目的描述内容"></a>数据流条目的描述内容</h5><ul><li>名称：数据流名(可以是中文名或英文名)</li><li>别名：名称的另一个名字</li><li>简述：对数据流的简单说明</li><li>数据流组成：描述数据流由哪些数据项组成</li><li>数据流来源：描述数据流从哪个加工或源流出</li><li>数据流去向：描述数据流流入哪个加工或宿</li><li>数据量：系统中该数据流的总量<ul><li>如考务处理系统中“报名单”的总量是100000张</li><li>或者单位时间处理的数据流数量，如80000张&#x2F;天</li></ul></li><li>峰值：某时段处理的最大数量<ul><li>如每天上午9：00至11：00处理60000张表单</li></ul></li><li>注解：对该数据流的其它补充说明</li></ul><p><strong>数据流组成</strong></p><p>是数据流条目的核心</p><h5 id="文件条目的描述内容"><a href="#文件条目的描述内容" class="headerlink" title="文件条目的描述内容"></a>文件条目的描述内容</h5><ul><li>名称：文件名</li><li>别名：同数据流条目</li><li>简述：对文件的简单说明</li><li>文件组成：描述文件的记录由哪些数据项组成(与数据流条目中的文件组成描述方法相同)</li><li>写文件的加工：描述哪些加工写文件</li><li>读文件的加工：描述哪些加工读文件</li><li>文件组织：描述文件的存储方式(顺序、索引)，排序的关键字</li><li>使用权限：描述各类用户对文件读、写、修改的使用权限</li><li>数据量：文件的最大记录个数</li><li>存取频率：描述对该文件的读写频率</li><li>注解：对该文件的其它补充说明</li></ul><h5 id="加工条目的描述内容"><a href="#加工条目的描述内容" class="headerlink" title="加工条目的描述内容"></a>加工条目的描述内容</h5><ul><li>名称：加工名</li><li>别名：同数据流条目</li><li>加工号: 加工在DFD中的编号</li><li>简述：对加工的功能的简要说明</li><li>输入数据流：描述加工的输入数据流，包括读哪些文件名</li><li>输出数据流：描述加工的输出数据流，包括写哪些文件名</li><li>加工逻辑：简要描述加工逻辑，或者对加工规约的索引<ul><li>基本加工的加工逻辑用小说明描述，在加工条目中可填写对加工规约的索引</li><li>非基本加工分解而成的DFD子图已反映了它的加工逻辑，不必书写小说明</li></ul></li><li>异常处理：描述加工处理过程中可能出现的异常情况，及其处理方式</li><li>加工激发条件：描述执行加工的条件，如“身份认证正确”，“收到报名单”</li><li>执行频率：描述加工的执行频率，如，每月执行一次，每天0点执行</li><li>注解：对加工的其它补充说明</li></ul><h5 id="源或宿条目的描述内容"><a href="#源或宿条目的描述内容" class="headerlink" title="源或宿条目的描述内容"></a>源或宿条目的描述内容</h5><ul><li>名称：源或宿的名(外部实体名)</li><li>别名：同数据流条目</li><li>简要描述：对源或宿的简要描述(包括指明该外部实体在DFD中是用作“源”，还是“宿”，还是“既是源又是宿”)</li><li>输入数据流：描述源向系统提供哪些输入数据流</li><li>输出数据流：描述系统向宿提供哪些输出数据流</li><li>注解：对源或宿的其它补充说明</li></ul><h4 id="加工逻辑的描述方法"><a href="#加工逻辑的描述方法" class="headerlink" title="加工逻辑的描述方法"></a>加工逻辑的描述方法</h4><ul><li><p>结构化语言：介于自然语言和形式语言之间的一种半形式语言</p></li><li><p>判定表：适用于加工逻辑包含多个条件，而不同的条件组合需做不同的动作</p><ul><li>条件桩(Condition Stub)：列出各种条件的对象，如发货单金额，赊欠天数等，每行写一个条件对象</li><li>条件条目(Condition entry)：列出各条件对象的取值，条件条目的每一列表示了一个可能的条件组合</li><li>动作桩(action stub)：列出所有可能采取的动作，如发出发货单等，每行写一个动作</li><li>动作条目(action entry)：列出各种条件组合下应采取的动作</li></ul><p>e.g.<img src="/imgs/se/35.png" alt="image-20231024170051741"></p></li><li><p>判定树：判定表的变种，它本质上与判定表是相同的，只是表示形式不同</p><p>e.g.<img src="/imgs/se/36.png" alt="image-20231024170119698"></p></li></ul><h4 id="实体-关系图"><a href="#实体-关系图" class="headerlink" title="实体-关系图"></a>实体-关系图</h4><p>描述数据字典中数据之间的关系</p><p><img src="/imgs/se/37.png" alt="image-20231024170312798"></p><p><img src="/imgs/se/38.png" alt="image-20231024170337998"></p><h3 id="面向数据流的需求分析过程"><a href="#面向数据流的需求分析过程" class="headerlink" title="面向数据流的需求分析过程"></a>面向数据流的需求分析过程</h3><p>面向数据流自顶向下逐步求精进行需求分析</p><ol><li><p>确定系统的综合需求</p><p>功能需求、性能需求、可靠性和可用性需求、出错处理需求、接口需求、约束、逆向需求、将来可能的需求</p></li><li><p>分析系统的数据要求</p><p>ER模型</p></li><li><p>导出系统的逻辑模型</p></li><li><p>修正系统开发计划</p></li><li><p>开发原型系统</p></li><li><p>写需求规格说明书</p></li></ol><h2 id="面向对象分析"><a href="#面向对象分析" class="headerlink" title="面向对象分析"></a>面向对象分析</h2><h3 id="面向对象方法概述"><a href="#面向对象方法概述" class="headerlink" title="面向对象方法概述"></a>面向对象方法概述</h3><ul><li><p>抽象</p><p>最核心的抽象内容的对象</p><p>对象是一个具有明确边界和唯一标识，且封装了行为和状态的实体。</p><p>主要抽取事务的结构特征和行为特征，并组成一个有机整体</p></li><li><p>封装</p><p>将对象特征的实现方式隐藏在一个公共接口后面的黑盒子中</p></li><li><p>模块化</p><p>Breaks up something complex into manageable pieces.</p></li><li><p>层次</p><p>高度抽象</p><p>​     ^</p><p>​      |</p><p>​      |</p><p>​      |</p><p>低度抽象</p></li></ul><h4 id="出发点和基本原则"><a href="#出发点和基本原则" class="headerlink" title="出发点和基本原则"></a>出发点和基本原则</h4><p>尽可能模拟人类习惯的思维方式，使描述问题的问题空间(也称为问题域)与实现解法的解空间(也称为求解域)在结构上尽可能一致。</p><ul><li>客观世界的问题都是由实体及关系构成的</li><li>把客观世界中的实体抽象为问题域中的对象(object)</li></ul><h4 id="面向对象方法-1"><a href="#面向对象方法-1" class="headerlink" title="面向对象方法"></a>面向对象方法</h4><ol><li>认为客观世界是由各种对象组成的</li><li>把所有对象都划分成各种对象类(简称为类，class)，每个对象类都定义了一组数据和一组方法</li><li>按照子类(或称为派生类subclass)与父类(或称为基类superclass)的关系，把若干个对象类组成一个层次结构的系统(也称为类等级)</li><li>对象彼此之间仅能通过传递消息互相联系</li></ol><p>$$<br>OO&#x3D;objects+classes+inheritance+communication\ with\ messages<br>$$</p><h4 id="面向对象方法的优点"><a href="#面向对象方法的优点" class="headerlink" title="面向对象方法的优点"></a>面向对象方法的优点</h4><ol><li>与人类习惯的思维方法一致</li><li>稳定性好</li><li>可重用性好</li><li>较易开发大型软件产品</li><li>可维护性好</li></ol><h3 id="面向对象的概念"><a href="#面向对象的概念" class="headerlink" title="面向对象的概念"></a>面向对象的概念</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p><img src="/imgs/se/58.png" alt="image-20231026084209729"></p><p>对象是具有相同状态（属性）的一组操作的集合<br>$$<br>对象&#x3D;&lt;ID,MS,DS,MI&gt;<br>$$</p><ul><li>以数据为中心</li><li>对象是主动的</li><li>实现了数据封装</li><li>本质上具有并行性</li><li>模块独立性好</li></ul><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>类是对具有相同属性和行为的一个或多个对象的描述。类是支持继承的抽象数据类型，而对象就是类的实例</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>实例就是由某个特定的类所描述的一个具体的对象</p><h4 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h4><p>消息就是要求某个对象执行它的某个操作的规格说明</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>方法就是对象所能执行的操作，也就是类中所定义的服务。方法描述了对象执行操作的算法，响应消息的方法。在C++语言中把方法称为成员函数。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>属性就是类中所定义的数据，类的每个实例都有自己特有的属性值</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>所谓封装就是把某个事物包起来，使外界不知道该事物的具体内容</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是指能够直接获得已有的性质和特征，而不必重复定义它们。继承是子类自动地共享基类中定义的数据和方法的机制。<br>当类等级为树形结构时，类的继承是单继承；当允许一个类有多个父类时，类的继承是多重继承。但是，使用多重继承时要注意避免二义性</p><p><img src="/imgs/se/59.png" alt="image-20231026085952380"></p><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><p>多态性是指子类对象可以像父类对象那样使用，同样的消息既可以发送给父类对象也可以发送给子类对象。根据该对象所属于的类动态选用在该类中定义的实现算法</p><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><ul><li>函数重载是指在同一作用域内的若干个参数特征不同的函数可以使用相同的函数名字</li><li>运算符重载是指同一个运算符可以施加于不同类型的操作数上面</li></ul><h3 id="各种分析图"><a href="#各种分析图" class="headerlink" title="各种分析图"></a>各种分析图</h3><p>UML建模</p><p><img src="/imgs/se/60.png" alt="image-20231102082403892"></p><p>从功能和行为对问题进行抽象，主要建模包括:用例图，活动图，类图，时序图，通信图和包图</p><h4 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h4><p><img src="/imgs/se/61.png" alt="image-20231102083513164"></p><p>要素：执行者、用例、关系（包含、扩展、泛化）系统框常被省略</p><p>也就是说，系统外部的执行者需要系统处理什么事务，系统处理的事务就是用例，执行者与用例存在关联关系</p><h4 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h4><p><img src="/imgs/se/62.png" alt="image-20231102083713826"></p><ul><li>动作：行为的基本单元</li><li>控制流：动作之间的过程</li><li>控制节点：起协调动作的作用<br>初始、分叉、判断、汇合、终止</li><li>对象节点：是动作处理的数据</li></ul><p>带泳道的活动图，已明确责任</p><p><img src="/imgs/se/63.png" alt="image-20231102084231206"></p><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p>使用UML表示类</p><p>包括三个部分：</p><ul><li>类名</li><li>数据结构（属性）</li><li>行为（操作）</li></ul><p><img src="/imgs/se/64.png" alt="image-20231102084502941"></p><ul><li><p>继承&#x2F;泛化：is-a关系，用空心箭头实线表示</p></li><li><p>实现：类实现接口，用带空心箭头虚线表示</p><p><img src="/imgs/se/68.png" alt="image-20231102092200621"></p></li><li><p>依赖：一个类对另一个类局域变量、方法的形参，或者对静态方法的调用，虚线箭头表示，临时的非结构性关系</p><p><img src="/imgs/se/67.png" alt="image-20231102092117988"></p></li><li><p>关联：一个类的实例与另外一个类的特定实例存在固定关系，被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量，实线箭头表示</p></li><li><p>聚合：聚合是特殊的关联关系，强调整体与部分之间的关系，用带一个空心菱形（整体的一端）的实线箭头表示</p></li><li><p>组合：强调了整体与部分的生命周期是一致的，用带实心菱形(整体的一端)的实线箭头表示</p></li></ul><p>基数<img src="/imgs/se/65.png" alt="image-20231102090912808"></p><p>聚合和组合的区别在于整体和部分的生命周期是否独立</p><ul><li>聚合的整体和部分之间在生命周期上没有什么必然的联系</li><li>组合关系中，整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束</li></ul><p><img src="/imgs/se/66.png" alt="image-20231102091004309"></p><blockquote><p>参考<a href="https://zhuanlan.zhihu.com/p/359672087">关联、聚合、组合的区别 - 知乎 (zhihu.com)</a></p></blockquote><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h4><p><img src="/imgs/se/69.png" alt="image-20231102092304288"></p><ul><li>交互使用：ref</li><li>循环：loop</li><li>条件：alt</li><li>并发：par</li></ul><h4 id="通信图"><a href="#通信图" class="headerlink" title="通信图"></a>通信图</h4><p>强调发送和接收消息的对象之间的组织结构</p><p>两对象对应类之间存在关联关系时，对象之间存在一条通信路径，称为link</p><p><img src="/imgs/se/70.png" alt="image-20231102092753551"></p><h4 id="包图"><a href="#包图" class="headerlink" title="包图"></a>包图</h4><p>UML提供一种称为包的组织元素</p><p><img src="/imgs/se/71.png" alt="image-20231102092845212"></p><h3 id="面向对象分析建模"><a href="#面向对象分析建模" class="headerlink" title="面向对象分析建模"></a>面向对象分析建模</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>use case技术</p><p><img src="/imgs/se/72.png" alt="image-20231102093004525"></p><p>use-case模型，识别actor和use case</p><h4 id="建模步骤"><a href="#建模步骤" class="headerlink" title="建模步骤"></a>建模步骤</h4><h5 id="用例建模"><a href="#用例建模" class="headerlink" title="用例建模"></a>用例建模</h5><h6 id="use-case模型的组成"><a href="#use-case模型的组成" class="headerlink" title="use-case模型的组成"></a>use-case模型的组成</h6><p><img src="/imgs/se/73.png" alt="image-20231107161539379"></p><h6 id="actor"><a href="#actor" class="headerlink" title="actor"></a>actor</h6><p>与系统交互的系统外的某些人或某些东西</p><ul><li>最终用户</li><li>外界软件系统</li><li>外界硬件设备</li></ul><p>如何识别actor</p><ul><li>谁需要在系统的帮助下完成自己的任务？</li><li>需要谁去执行系统的核心功能？</li><li>需要谁去完成系统的管理和维护？</li><li>系统是否需要和外界的硬件或软件系统进行交互？</li></ul><h6 id="use-case"><a href="#use-case" class="headerlink" title="use case"></a>use case</h6><p>Actor想使用系统去做的事</p><p>如何识别use case</p><p>每个actor的目标和需求是什么?</p><ul><li>actor希望系统提供什么功能？</li><li>actor 将创建、存取、修改和删除数据吗？</li><li>actor是否要告诉系统外界的事件？</li><li>actor 需要被告知系统中的发生事件吗?</li></ul><p>一个用例定义了和actor之间的一次完整对话</p><h6 id="用例图-1"><a href="#用例图-1" class="headerlink" title="用例图"></a>用例图</h6><p>通信-关联</p><ul><li>Actor和use case 间的通信渠道</li><li>用一条线表示</li><li>箭头表示谁启动通信</li></ul><p><img src="/imgs/se/74.png" alt="image-20231107162257193"></p><p>用例规约</p><ul><li>Name</li><li>Brief description</li><li>Flow of Events</li><li>Relationships</li><li>Activity diagrams</li><li>Use-Case diagrams</li><li>Special requirements</li><li>Pre-conditions<br>前置条件</li><li>Post-conditions<br>后置条件</li><li>Other diagrams</li></ul><p><img src="/imgs/se/75.png" alt="image-20231107162500369"></p><h6 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h6><p>执行者与用例之间对话期间发生的基本活动</p><ul><li>一个基本流<ul><li>执行用例时“通常”会发生的事件</li><li>从开始到结束的成功的事件流程</li></ul></li><li>多个备选流<ul><li>基本事件流的“绕行道”</li><li>相关的可选或异常特征的行为</li><li>正常行为的各种变形</li></ul></li></ul><p>每个用例的事件流动作都对应一个活动</p><h6 id="用例模型的优化"><a href="#用例模型的优化" class="headerlink" title="用例模型的优化"></a>用例模型的优化</h6><p><img src="/imgs/se/76.png" alt="image-20231107163655411"></p><p>用例间关系</p><ul><li><p>include包含</p><p>多个用例存在共同行为，可以分提炼一个新的用例。</p><p>执行include：到达插入点时执行包含用例</p><p><img src="/imgs/se/77.png" alt="image-20231107164556438"></p></li><li><p>extend扩展</p><p>若用例的部分行为是可选的，可分离形成扩展用例</p><p>执行extend：当到达扩展点并且扩展条件为真时执行</p><p><img src="/imgs/se/78.png" alt="image-20231107164645507"></p></li><li><p>generalization泛化</p><p>若多个用例在行为和结构上具有共同点，可以分离出形成父用例</p><ul><li>在父用例中描述通用的共享的行为</li><li>在子用例中描述特殊的行为</li><li>共享共同的目标</li></ul><p><img src="/imgs/se/79.png" alt="image-20231107170419113"></p></li></ul><h5 id="建立概念模型"><a href="#建立概念模型" class="headerlink" title="建立概念模型"></a>建立概念模型</h5><h6 id="识别conceptual-class"><a href="#识别conceptual-class" class="headerlink" title="识别conceptual class"></a>识别conceptual class</h6><p>概念类业务和需求建模会揭示系统必须处理的核心概念，它是设计模型的核心要素</p><ul><li><p>Use a conceptual class category list（分类法）</p><p><img src="/imgs/se/80.png" alt="image-20231107170915920"></p></li><li><p>Finding conceptual classes with Noun Phrase（名词提出和过滤法）</p><ul><li>Use use-case flow of events as input</li><li>Underline noun clauses in the use-case flow of events</li><li>Remove redundant candidates</li><li>Remove vague candidates</li><li>Remove actors (out of scope)</li><li>Remove implementation constructs（与实现有关的）</li><li>Remove attributes (save for later)</li><li>Remove operations</li></ul></li><li><p>Use analysis patterns, which are existing conceptual models created by experts（已有的分析模式）</p><ul><li>using published resources such as <strong>Analysis Patterns</strong>[Fowler96] and <strong>Data Model Patterns</strong> [Hay96].</li></ul></li></ul><p>一个错误：把原本是类的实体当作属性来处理.</p><p>解决方法：</p><p><strong>If X is not a number or text in the real world, X is probably a conceptual class, not an attribute.</strong></p><h6 id="建立conceptual-class之间的关系"><a href="#建立conceptual-class之间的关系" class="headerlink" title="建立conceptual class之间的关系"></a>建立conceptual class之间的关系</h6><p><strong>关系种类</strong></p><ul><li>Association（关联）<ul><li>Aggregation（聚合）</li><li>Composition（组合）</li></ul></li><li>Inheritance&#x2F;Generalization（继承&#x2F;泛化）</li><li>Dependency（依赖）</li></ul><p><img src="/imgs/se/81.png" alt="image-20231107171409785"></p><h6 id="增加conceptual-class的属性（画类图）"><a href="#增加conceptual-class的属性（画类图）" class="headerlink" title="增加conceptual class的属性（画类图）"></a>增加conceptual class的属性（画类图）</h6><p>识别出概念类的主要属性，可以有遗漏，在后续的分析与设计中，这些属性会逐渐补全</p><p>同时可以识别出概念类的部分操作。在概念模型中，类的属性比操作更为重要</p><h5 id="用例分析"><a href="#用例分析" class="headerlink" title="用例分析"></a>用例分析</h5><h6 id="识别出用例实现"><a href="#识别出用例实现" class="headerlink" title="识别出用例实现"></a>识别出用例实现</h6><p><img src="/imgs/se/82.png" alt="image-20231107173250804"></p><p>用例实现充当了从以需求为中心到以设计为中心转移的桥梁， 用例与用例实现的关系是依赖关系的衍型《realize 》</p><p><img src="/imgs/se/83.png" alt="image-20231107173339107"></p><h6 id="针对每个用例实现"><a href="#针对每个用例实现" class="headerlink" title="针对每个用例实现"></a>针对每个用例实现</h6><p><strong>识别出分析类</strong></p><p>MVC设计模式</p><ul><li><p>view————边界类boundary</p><p>boundary class：The interaction between the external environment and the internal operation of the system</p></li><li><p>model———实体类entity</p><p>entity class 是系统的关键抽象</p><p>Store and manage information in the system.</p><ul><li>用户接口类</li><li>系统接口类</li><li>设备接口类</li></ul><p>One boundary class per actor&#x2F;use-case pair</p><p>执行者和用例之间的一条通信关联对应一个边界类Use-</p></li><li><p>control———控制类control</p><p>控制类用于描述一个或几个用例所特有的事件流控制行为，如事务管理器、资源协调器和错误处理器</p><p>使用或规定若干实体类的内容，协调这些实体类的行为</p><p>identify one control class per use case</p></li></ul><p><img src="/imgs/se/84.png" alt="image-20231109093544344"></p><h5 id="完成用例分析"><a href="#完成用例分析" class="headerlink" title="完成用例分析"></a>完成用例分析</h5><h6 id="建立时序图，生成通信图"><a href="#建立时序图，生成通信图" class="headerlink" title="建立时序图，生成通信图"></a>建立时序图，生成通信图</h6><p>以用例作为研究对象，分析类的实例作为行为载体，通过消息传递的方式对用例场景进行分析，构建出时序图、通信图和类图。</p><p><img src="/imgs/se/85.png" alt="image-20231109104334401"></p><ul><li><p>Sequence Diagram</p><ul><li>Time oriented view of object interaction</li><li>The diagram shows:<ul><li>The objects participating in the interaction.</li><li>The sequence of messages exchanged.</li></ul></li></ul><p><img src="/imgs/se/86.png" alt="image-20231109104557920"></p><p><img src="/imgs/se/87.png" alt="image-20231109105117867"></p></li><li><p>Communication Diagram</p><ul><li>Structural view of messaging objects</li><li>The communication diagram shows:<ul><li>The objects participating in the interaction.</li><li>Links between the objects.</li><li>Messages passed between the objects.</li></ul></li></ul><p><img src="/imgs/se/88.png" alt="image-20231109105207350"></p><p><img src="/imgs/se/89.png" alt="image-20231109105236721"></p></li></ul><h6 id="对照通信图建立类图，完善每个分析类的属性和操作"><a href="#对照通信图建立类图，完善每个分析类的属性和操作" class="headerlink" title="对照通信图建立类图，完善每个分析类的属性和操作"></a>对照通信图建立类图，完善每个分析类的属性和操作</h6><p>Relationship for every link</p><p><img src="/imgs/se/90.png" alt="image-20231109105420028"></p><h4 id="补充一：构建对象模型-原文分析法"><a href="#补充一：构建对象模型-原文分析法" class="headerlink" title="补充一：构建对象模型-原文分析法"></a>补充一：构建对象模型-原文分析法</h4><p>面向对象分析，就是抽取和整理用户需求并建立问题域精确模型的过程。</p><p>发现和改正原始陈述中的二义性和不一致性，补充遗漏的内容，从而使需求陈述更完整、更准确。</p><p>抽象出目标系统的本质属性，并用模型准确地表示出来。通过建立分析模型能够纠正在开发早期对问题域的误解。</p><p>复杂问题的对象模型的五个层次</p><p><img src="/imgs/se/91.png" alt="image-20231109105628454"></p><p>对象模型通常由下述5个层次组成： 主题层(Subject)、类与对象层(class-object)、结构层(structure)、属性层(attribute)和服务层(service)</p><p>上述5个层次对应着在面向对象分析过程中建立对象模型的5项主要活动：</p><ul><li>找出类与对象(Finding Class-object)</li><li>识别结构(Recognising Structure)</li><li>识别主题(Recognising Subject)</li><li>定义属性(Defining attribute)</li><li>定义服务(Defining service)</li></ul><p>这5项活动没有必要顺序完成，也无须彻底完成一项工作以后再开始另外一项工作。</p><h2 id="设计工程"><a href="#设计工程" class="headerlink" title="设计工程"></a>设计工程</h2><h3 id="软件设计工程概述"><a href="#软件设计工程概述" class="headerlink" title="软件设计工程概述"></a>软件设计工程概述</h3><p><img src="/imgs/se/92.png" alt="image-20231116091901102"></p><h4 id="软件设计的两个阶段"><a href="#软件设计的两个阶段" class="headerlink" title="软件设计的两个阶段"></a>软件设计的两个阶段</h4><ul><li><p>架构设计</p><ul><li><p>软件质量属性的设计策略</p><ol><li>可用性设计</li><li>可维护性设计</li><li>性能设计</li><li>安全性设计</li><li>可测性设计</li><li>易用性设计</li></ol></li><li><p>确定合适的软件架构风格</p><ul><li>数据流风格(Dataflow)：批处理序列、管道－过滤器风格(Pipe-and-Filter)</li><li>调用&#x2F;返回风格：主程序&#x2F;子程序、面向对象风格(ADT)、层次系统(Layered Systems)</li><li>独立构件风格：进程通信、事件系统</li><li>虚拟机风格：解释器、基于规则的系统</li><li>仓库风格：数据库系统、超文本系统、黑板系统</li></ul></li><li><p>定义软件的主要结构元素——模块</p><p><img src="/imgs/se/93.png" alt="image-20231116092651439"></p></li><li><p>接口设计</p><ul><li>软件模块间的内部接口</li><li>模块和协作系统(如外部软件系统、外部设备、网络等)之间的外部接口</li><li>使用人员和软件的接口(用户界面)</li></ul></li></ul></li><li><p>详细设计</p><ul><li>为所有数据对象定义详细的数据结构</li><li>为所有在模块内发生的处理定义算法细节、控制流和数据流</li></ul></li></ul><h3 id="软件设计的原则"><a href="#软件设计的原则" class="headerlink" title="软件设计的原则"></a>软件设计的原则</h3><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><ul><li>数据抽象<ul><li>把一个数据对象的定义抽象为一个数据类型名，用此类型名可定义多个具有相同性质的数据对象</li></ul></li><li>过程抽象<ul><li>把完成一个特定功能的动作序列抽象为一个过程名和参数表，以后通过指定过程名和实际参数调用此过程</li></ul></li><li>对象抽象<ul><li>通过操作和属性，组合了这两种抽象，即在抽象数据类型的定义中加入一组操作的定义，以确定在此类数据对象上可以进行的操作。</li></ul></li></ul><h4 id="分解和模块化"><a href="#分解和模块化" class="headerlink" title="分解和模块化"></a>分解和模块化</h4><ul><li><p>分解（decomposition）：控制复杂性的另一种有效方法，软件设计用分解来实现模块化设计。</p><p>$C(P_1+P_2) \gt C(P_1)+C(P_2)$</p><p>$E(P_1+P_2) \gt E(P_1)+E(P_2)$</p><p>C为问题的复杂度，E为解题需要的工作量</p></li><li><p>模块化（modularity）：将一个复杂的软件系统自顶向下地分解成若干模块（module），每个模块完成一个软件的特性，所有的模块组装起来，成为一个整体，完成整个系统所要求的特性。<br>模块是能够单独命名并独立地完成一定功能的程序语句的集合，例如，过程、函数、子程序、宏、类等</p><p>模块的两个特征</p><ul><li>外部特征是指模块跟外部环境联系的接口和模块的功能；</li><li>内部特征是指模块的内部环境具有的特点，即该模块的局部数据和处理逻辑</li></ul><p>模块化的成本</p><ul><li>如果模块是相互独立的，当模块变得越小，每个模块花费的工作量越低；</li><li>但当模块数增加时，模块间的联系也随之增加，把这些模块联接起来的工作量也随之增加。</li></ul><p><img src="/imgs/se/94.png" alt="image-20231116093742535"></p></li></ul><h4 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏"></a>信息隐藏</h4><p>每个模块的实现细节对于其它模块来说应该是隐蔽的</p><h4 id="模块的独立性"><a href="#模块的独立性" class="headerlink" title="模块的独立性"></a>模块的独立性</h4><p>模块的独立性是模块化追求的目标</p><p>模块独立的衡量指标</p><ul><li>内聚（cohesion），是一个模块内部各个元素彼此结<br>合的紧密程度的度量</li><li>耦合（coupling），是模块之间的相对独立性（互相<br>连接的紧密程度）的度量</li></ul><h5 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h5><ol><li><p>偶然内聚coincidental cohesion</p></li><li><p>逻辑内聚logical cohesion</p></li><li><p>时间内聚temporal cohesion</p></li><li><p>过程内聚procedural cohesion</p></li><li><p>通信内聚communicational cohesion</p></li><li><p>顺序内聚sequential cohesion</p></li><li><p>功能内聚functional cohesion</p></li></ol><p><img src="/imgs/se/95.png" alt="image-20231121162244488"></p><h5 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h5><ol><li>非直接耦合no direct coupling</li><li>数据耦合data coupling</li><li>标记（特征）耦合stamp coupling</li><li>控制耦合control coupling</li><li>外部耦合external coupling</li><li>公共耦合common coupling</li><li>内容耦合content coupling</li></ol><p><img src="/imgs/se/96.png" alt="image-20231121162405277"></p><h3 id="软件设计的质量"><a href="#软件设计的质量" class="headerlink" title="软件设计的质量"></a>软件设计的质量</h3><h4 id="软件设计的质量要求"><a href="#软件设计的质量要求" class="headerlink" title="软件设计的质量要求"></a>软件设计的质量要求</h4><ul><li>设计应当模块化，高内聚、低耦合。<ul><li>支持多人合作开发</li><li>易于测试和修改</li><li>能够以演化过程实现</li></ul></li><li>设计应当包含数据、体系结构、接口和构件的清楚的表示。</li><li>设计应根据软件需求采用可重复使用的方法进行。</li><li>应使用能够有效传达其意义的表示法来表达设计模型。</li></ul><h4 id="7种软件设计的坏味道"><a href="#7种软件设计的坏味道" class="headerlink" title="7种软件设计的坏味道"></a>7种软件设计的坏味道</h4><ul><li>僵化性（Rigidity）<ul><li>很难对软件进行改动，因为每个改动都会迫使对系统其他部分的许多改动</li></ul></li><li>脆弱性（Fragility）<ul><li>对系统的改动会导致系统中和改动的地方在概念上无关的许多地方出现问题</li></ul></li><li>牢固性（Immobility）<ul><li>很难解开系统中某部分与其它部分之间的纠结，从而难以使其中的任何部分可以被分离出来被其它系统复用</li></ul></li><li>粘滞性（Viscosity）<ul><li>做正确的事情要比做错误的事情困难。表现为两种形式：<ul><li>软件粘滞性<ul><li>需要对软件进行修改时，可能存在多种方法。有的方法可以保持原有的设计质量，另一些方法则会破坏原有的设计质量。如果，破坏软件质量的修改比保持原有设计质量的修改更容易实施时，我们就称该软件具有“软件粘滞性”。</li></ul></li><li>环境粘滞性<ul><li>当开发环境迟钝、低效时，就会产生环境粘滞性。</li><li>例如：如果编译时间很长，那么开发人员可能会放弃那些能保持设计质量，但是却需要导致大规模重新编译的改动。</li></ul></li></ul></li></ul></li><li>不必要的复杂性（Needless Complexity）<ul><li>设计中包含不具有任何好处的基础结构。</li></ul></li><li>不必要的重复（Needless Repetition）<ul><li>设计中包含一些重复的结构，这些结构本来可以通过单一的抽象进行统一<ul><li>使用Cut&#x2F;Copy&#x2F;Paste实施源代码级的软件复用容易导致这一问题</li><li>这种代码级别的冗余，将带来修改上的问题</li></ul></li></ul></li><li>晦涩性（Opacity）<ul><li>很难阅读和理解，不要相信你永远都会如此清楚的了解你的每一行代码，“时间会冲淡一切”。要站在阅读者的角度进行设计</li></ul></li></ul><h3 id="软件设计的复用"><a href="#软件设计的复用" class="headerlink" title="软件设计的复用."></a>软件设计的复用.</h3><p>模式可重用</p><blockquote><p>每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动</p></blockquote><p>在一个上下文中对一种问题的解决方案</p><h4 id="设计重用-Design-reuse"><a href="#设计重用-Design-reuse" class="headerlink" title="设计重用 Design reuse"></a>设计重用 Design reuse</h4><ul><li><p>pattern</p><ul><li><p>architectural style</p><p>An architectural pattern (architectural style) expresses a fundamental structural organization schema for software systems. It provides a set of predefined subsystems, specifies their responsibilities, and includes rules and guidelines（指南）for organizing the relationships between them.</p></li><li><p>design pattern</p><p>A design pattern provides a scheme for refining the subsystems or components of a software system, or the relationships between them. It describes a commonlyrecurring（常见） structure of communicating components（组件） that solves a general design problem within a particular context（上下文）.</p></li><li><p>idiom</p><p>An idiom is a low-level pattern specific to a programming<br>language. An idiom describes how to implement particular<br>aspects of components or the relationships between them<br>using the features of the given language</p></li></ul></li><li><p>framework</p><ul><li>通用结构: Organize components<ul><li>Layers: Organize components into layers where layer’s services are only used by layer i+1.</li><li>Pipes and Filters: Divide the task into several sequential processing steps – the output of task i is the input of task i+1.</li><li>Blackboard: Several independent programs work cooperatively on a common data structure.</li></ul></li><li>分布式系统: Handle distributed computation.<ul><li>Broker（代理）: Introduce a broker component to<br>achieve better decoupling（降低耦合） of clients and<br>servers – brokers accept requests from clients and<br>forward the requests to servers, then return the<br>results back to the clients.</li><li>Client&#x2F;Server</li><li>3 Tiers（三层架构）</li></ul></li><li>交互式系统: Keep a program’s functional core<br>independent of the user interface<ul><li>Model - View - Controller: Divides the application into processing, output, and input. View and controller parts are usually observers of the model via the observer pattern</li><li>Presentation - Abstract - Control: Divides the application up to heirarchies or MVC-like components. Each component is dependent upon and provides functionality for the a higher-level component. There is only one toplevel component</li></ul></li><li>自适应系统: Design for change<ul><li>Microkernel （微内核）Encapsulate（封装） the fundamental services of the application</li><li>Reflection（反射） Divide the application into a meta-level and a base level to make the application “self-aware”（自意识）. The meta level encapsulates knowledge of the system; the base level encapsulates knowledge about the problem domain</li></ul></li><li>Others：批处理、解释器、进程控制、基于规则</li></ul></li></ul><h4 id="软件体系结构"><a href="#软件体系结构" class="headerlink" title="软件体系结构"></a>软件体系结构</h4><h5 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h5><ul><li>模型Model：管理系统中存储的数据和业务规则，并执行相应的计算功能。</li><li>视图View：根据模型生成提供给用户的交互界面，不同的视图可以对相同的数据产生不同的界面。</li><li>控制器Control：接收用户输入，通过调用模型获得响应，并通知视图进行用户界面的更新。</li></ul><p><img src="/imgs/se/97.png" alt="image-20231121170911645"></p><h5 id="Pipes-and-Filter"><a href="#Pipes-and-Filter" class="headerlink" title="Pipes and Filter"></a>Pipes and Filter</h5><p>each component has a set of inputs and a set of outputs</p><p>A component reads streams of data on its inputs and produces streams of data on its output.</p><p><img src="/imgs/se/98.png" alt="image-20231121171516537"></p><p>Linux的Shell程序可以看做是典型的管道与过滤器架构的例子</p><h5 id="层次架构风格"><a href="#层次架构风格" class="headerlink" title="层次架构风格"></a>层次架构风格</h5><p><img src="/imgs/se/99.png" alt="image-20231121171706705"></p><p><img src="/imgs/se/100.png" alt="image-20231121171734524"></p><h5 id="Three-Tiers三层架构"><a href="#Three-Tiers三层架构" class="headerlink" title="Three Tiers三层架构"></a>Three Tiers三层架构</h5><p><img src="/imgs/se/101.png" alt="image-20231121171805010"></p><ul><li>表示层：负责向用户呈现界面，并接收用户请求发送给业务逻辑层；</li><li>业务逻辑层：负责执行业务逻辑以处理用户请求，并调用数据访问层提供的持久性操作；</li><li>数据访问层：负责执行数据库持久性操作。</li></ul><h5 id="黑板风格"><a href="#黑板风格" class="headerlink" title="黑板风格"></a>黑板风格</h5><p>黑板架构为参与问题解决的知识源提供了共享的数据表示，这些数据表示是与应用相关的</p><p>在黑板架构中，控制流是由黑板数据的状态决定的，而并非按照某个固定的顺序执行。黑板架构的结构包括如下部分：</p><ul><li>知识源：是指彼此分离独立的与应用相关的知识包，知识源之间的交互都是通过黑板来完成的，它们彼此并不直接交互。</li><li>黑板数据结构：按照应用相关的层次结构组织而成的问题解决过程中的状态数据。知识源会更新黑板数据，从而增量式地解决问题。</li><li>控制流：完全有黑板状态驱动，知识源会在黑板数据更新时根据其状态做出相应的响应。</li></ul><p>通用结构</p><p>黑板架构专门针对没有确定的解决方法的问题，例如信号处理和模式识别，它通过多个知识源的协作来解决问题，而这种协作完全是状态驱动的，因此各个知识源具有公平的机会获取并更新黑板中的状态数据</p><p><img src="/imgs/se/102.png" alt="image-20231121172113684"></p><h5 id="微内核风格"><a href="#微内核风格" class="headerlink" title="微内核风格"></a>微内核风格</h5><p>微内核概念来源与操作系统领域。微内核是提供了操作系统核心功能的内核，它只需占用很小的内存空间即可启动，并向用户提供了标准接口，以使用户能够按照模块化的方式扩展其功能。现在大多数操作系统都采用了微内核架构。</p><p><img src="/imgs/se/103.png" alt="image-20231121172147537"></p><h5 id="解释器架构"><a href="#解释器架构" class="headerlink" title="解释器架构"></a>解释器架构</h5><p>解释器架构用于仿真当前不具备的计算环境，通常包含四个组成部分：用来解释伪码程序的解释引擎、包含待解释程序的内存、解释引擎的控制状态，以及被仿真程序的当前状态：</p><p><img src="/imgs/se/104.png" alt="image-20231121172228975"></p><h5 id="基于规则的架构"><a href="#基于规则的架构" class="headerlink" title="基于规则的架构"></a>基于规则的架构</h5><p>基于规则的架构是一种解释器架构风格，它将人类专家的问题解决知识编码成规则，这些规则在系统执行计算满足指定的条件时被执行或激活，通过规则不断地被执行和激活，最终使得问题被解决。由于这些规则不能被计算机系统直接执行，因此需要通过解释器来解释它们。</p><p><img src="/imgs/se/105.png" alt="image-20231121172534973"></p><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>架构风格是宏观的设计模式，描述高层组织结构</p><p>设计模式描述的低成层局部细节，是实现设计复用的有效手段</p><p>按作用分类：</p><p>创造型（对象创造过程）、结构型、行为型</p><p>按作用域分类：</p><p>类模式（静态关系）、对象模式（动态关系）</p><p><img src="/imgs/se/106.png" alt="image-20231121172638922"></p><h5 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h5><p>将抽象部分与其实现部分分离，在运行时连接起来（不是编译时绑定），使它们可以独立变化。</p><p><img src="/imgs/se/107.png" alt="image-20231121172848216"></p><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>框架是一个代码骨架，可以使用为解决问题而设计的特定类或功能来填充这个代码骨架，使之丰满。</p><h2 id="人机界面设计"><a href="#人机界面设计" class="headerlink" title="人机界面设计"></a>人机界面设计</h2><h3 id="界面设计的原则"><a href="#界面设计的原则" class="headerlink" title="界面设计的原则"></a>界面设计的原则</h3><ul><li>易学性（Learnability）<ul><li>系统应容易学习和掌握，不应对用户有额外的知识和技能要求。</li><li>用户可以通过两种途径来学习系统，即：系统的联机手册；系统功能的操作演示及例子。</li></ul></li><li>用户熟悉性（User familiarity）<ul><li>界面应以用户导向的名称和观念为主，而不是以计算机的概念为主。这能让用户更快地熟悉系统，使用系统。</li></ul></li><li>一致性（Consistency）<ul><li>系统的各个界面之间，甚至不同系统之间，应具有相似的界面外观、布局，相似的人机交互方式以及相似的信息显示格式等。</li></ul></li><li>减少意外（Minimal surprise）<ul><li>系统功能和行为对用户应是明确、清楚的。</li><li>例如：系统有标准的界面；系统不会产生异常的结果，在相同情况下总会有相同的行为；系统有预定的响应时间等。</li></ul></li><li>易恢复性（Recoverability）<ul><li>系统设计应该能够对可能出现的错误进行检测和处理，提供机制允许用户从错误中恢复过来。</li></ul></li><li>提供用户指南（User guidance）<ul><li>系统应提供及时的用户反馈和帮助功能。</li></ul></li><li>用户多样性（User diversity）<ul><li>系统应适应各类用户（从偶然型用户、生疏型用户到熟练型用户，直至专家型用户）的使用需要，提供满足其要求的界面形式。</li></ul></li></ul><p>黄金规则</p><ul><li>让用户驾驭软件，不是软件驾驭用户</li><li>减少用户的记忆</li><li>保持界面的一致性</li></ul><h3 id="人机交互方式"><a href="#人机交互方式" class="headerlink" title="人机交互方式"></a>人机交互方式</h3><ul><li>问答式对话<ul><li>优点：容易使用、学习，软件编程实现容易，用户回答范围小，因此不易出错。</li><li>缺点：效率不高，速度慢，灵活性差，修改扩充不方便</li></ul></li><li>直接操纵<ul><li>示例：可视化编辑器、飞行控制系统和电视游戏等。</li><li>优点：直接操纵对新手很有吸引力，对知识断层的用户来说是容易记住的，可以快速地执行任务。</li></ul></li><li>菜单选择<ul><li>优点：如果术语和菜单项的意义是可理解且明确的，则用户可以用少量的学习或记忆和很少的击键次数来完成任务。界面设计的过程</li></ul></li><li>填表<ul><li>在填表时，用户必须理解字段的标题，知道值的允许范围和数据输入方法，能够对出错信息做出反应。</li><li>对有知识断层的用户或经常性用户来说是最合适的。</li></ul></li><li>命令语言<ul><li>对熟练型用户来说，命令语言提供了一个控制和创造性的氛围。用户学习句法并能够迅速地表达复杂的任务，而不必阅读容易分散注意力的提示信息。</li><li>但这类界面出错率通常比较高，培训是必须的，保持性也比较差，很难提供出错信息和联机求助。</li></ul></li><li>自然语言<ul><li>优点：具有用户无需学习训练就能以自然交流方式使用计算机的优点</li><li>缺点：具有输入冗长文字，自然语言语义有二义性，需要具有应用领域的知识基础以及编程实现困难等缺点。到目前为止，成功案例还比较少。</li><li>自然语言界面是最理想、最友好的人机界面类型，但是要变为现实，仍有很多工作要做。</li></ul></li></ul><h3 id="界面设计的过程"><a href="#界面设计的过程" class="headerlink" title="界面设计的过程"></a>界面设计的过程</h3><ul><li><p>用户分析</p></li><li><p>界面设计</p></li><li><p>界面原型开发</p></li><li><p>界面评估</p></li></ul><p>用户分类：</p><ul><li>外行型：不熟悉计算机操作，对系统很少或毫无认识</li><li>初学型：对计算机有一些经验，对新系统不熟悉，需要相当多的支持</li><li>熟练型：对系统有丰富的使用经验，能熟练操作，但不了解系统的内部结构，不能纠正意外错误，不能扩充系统的能力</li><li>专家型：了解系统内部的结构，有系统工作机制的专门知识，具有维护和修改系统的能力，希望为他们提供具备修改和扩充系统能力的复杂界面</li></ul><h3 id="界面设计的问题"><a href="#界面设计的问题" class="headerlink" title="界面设计的问题"></a>界面设计的问题</h3><h4 id="系统响应时间"><a href="#系统响应时间" class="headerlink" title="系统响应时间"></a>系统响应时间</h4><ul><li>系统响应时间指从用户执行某个控制动作（如按回车键或点鼠标）到软件作出响应（期望的输出或动作）的时间。</li><li>时间长度：系统响应时间长会使用户感到不安和沮丧。人的一般容忍度为15秒。</li><li>可变性：稳定的响应时间（如1秒）比不定的响应时间（如0.1秒到2.5秒）要好。用户往往比较敏感，总是关心界面背后是否发生了异常。</li></ul><p><img src="/imgs/se/108.png" alt="image-20231123093247979"></p><h4 id="帮助设施"><a href="#帮助设施" class="headerlink" title="帮助设施"></a>帮助设施</h4><ul><li>在系统交互时，是否总能得到各种系统功能的帮助？是提供部分功能的帮助还是提供全部功能的帮助。</li><li>用户怎样请求帮助？使用帮助菜单、特殊功能键还是HELP命令。</li><li>怎样表示帮助？在另一个窗口中、指出参考某个文档（不是理想的方法）还是在屏幕特定位置的简单提示。</li><li>用户怎样回到正常的交互方式？可做的选择有：屏幕上显示返回键、功能键或控制序列。</li><li>怎样构造帮助信息？是平面式（所有信息均通过关键字来访问）、分层式（用户可以进一步查询得到更详细的信息）还是超文本式。</li></ul><h4 id="出错处理"><a href="#出错处理" class="headerlink" title="出错处理"></a>出错处理</h4><p>交互系统给出的出错消息和警告应具备以下特征：</p><ul><li>消息以用户可以理解的术语描述问题。</li><li>消息应提供如何从错误中恢复的建议性意见。</li><li>消息应指出错误可能导致哪些不良后果（比如破坏数），以便用户检查是否出现了这些情况或帮助用户进行改正。</li><li>消息应伴随着视觉或听觉上的提示，也就是说，显示消息时应该伴随警告声或者消息用闪耀方式，或明显表示错误的颜色显示。</li><li>消息应是“非批评性的”（nonjudgmental），即不能指责用户。</li></ul><p><strong>防错处理</strong></p><p>在设计界面时必须考虑防错处理，目的是让用户不必为避免犯错误而提心吊胆、小心翼翼地操作。</p><p>常见的防错处理措施有：</p><ul><li>对输入数据进行校验。如果用户输入错误的数据，软件应当识别错误并且提示用户改正数据。</li><li>对于在某些情况下不应该使用的菜单项和命令按钮，应当将其“失效”（变成灰色，可见但不可操作）或者“隐藏”。</li><li>执行破坏性的操作之前，应当获得用户的确认。</li><li>尽量提供Undo功能，用户可以撤销刚才的操作。</li></ul><h4 id="菜单和命令交互"><a href="#菜单和命令交互" class="headerlink" title="菜单和命令交互"></a>菜单和命令交互</h4><p><img src="/imgs/se/109.png" alt="image-20231123093559424"></p><h4 id="可访问性"><a href="#可访问性" class="headerlink" title="可访问性"></a>可访问性</h4><p>确保系统界面能让那些身体上面临挑战的用户也易于访问，即，为视觉、听觉、活动性、语音和学习等方面有障碍的用户提供系统的访问机制。</p><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p><img src="/imgs/se/110.png" alt="image-20231123093650668"></p><p><img src="/imgs/se/113.png" alt="image-20231123093814871"></p><h4 id="合理的布局和合理的色彩"><a href="#合理的布局和合理的色彩" class="headerlink" title="合理的布局和合理的色彩"></a>合理的布局和合理的色彩</h4><p><img src="/imgs/se/111.png" alt="image-20231123093717830"></p><p><img src="/imgs/se/112.png" alt="image-20231123093747171"></p><h2 id="结构化设计"><a href="#结构化设计" class="headerlink" title="结构化设计"></a>结构化设计</h2><h3 id="结构化设计概述"><a href="#结构化设计概述" class="headerlink" title="结构化设计概述"></a>结构化设计概述</h3><h4 id="面向数据流的软件设计过程"><a href="#面向数据流的软件设计过程" class="headerlink" title="面向数据流的软件设计过程"></a>面向数据流的软件设计过程</h4><p><img src="/imgs/se/39.png" alt="image-20231024170813083"></p><h3 id="结构设计-概要设计"><a href="#结构设计-概要设计" class="headerlink" title="结构设计-概要设计"></a>结构设计-概要设计</h3><h4 id="结构设计工具-结构图"><a href="#结构设计工具-结构图" class="headerlink" title="结构设计工具-结构图"></a>结构设计工具-结构图</h4><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>一个模块具有其外部特征和内部特征</p><ul><li>外部特征包括：模块的接口(模块名、输入&#x2F;输出参数、返回值等)和模块的功能</li><li>内部特征包括：模块的内部数据和完成其功能的程序代码</li></ul><h4 id="调用和数据"><a href="#调用和数据" class="headerlink" title="调用和数据"></a>调用和数据</h4><ul><li>调用(call)：用从一个模块指向另一个模块的箭头来表示，其含义是前者调用了后者<ul><li>为了方便，有时常用直线替代箭头，此时，表示位于上方的模块调用位于下方的模块</li></ul></li><li>数据(data)：模块调用时需传递的参数可通过在调用箭头旁附加一个小箭头和数据名来表示</li></ul><p><img src="/imgs/se/40.png" alt="image-20231024171808595"></p><h4 id="结构图中的辅助符号"><a href="#结构图中的辅助符号" class="headerlink" title="结构图中的辅助符号"></a>结构图中的辅助符号</h4><p><img src="/imgs/se/41.png" alt="image-20231024171852610"></p><h4 id="数据流图到结构图的映射"><a href="#数据流图到结构图的映射" class="headerlink" title="数据流图到结构图的映射"></a>数据流图到结构图的映射</h4><p>结构化设计是将结构化分析的结果(数据流图)映射成软件的体系结构(结构图)</p><p>将数据流图分为<strong>变换型数据流图</strong>和<strong>事务型数据流图</strong>，对应的映射分别称为<strong>变换分析</strong>和<strong>事务分析</strong></p><h5 id="变换流"><a href="#变换流" class="headerlink" title="变换流"></a>变换流</h5><p>特征：数据流图可明显地分成三部分</p><ul><li>输入：信息沿着输入路径进入系统，并将输入信息的外部形式经过编辑、格式转换、合法性检查、预处理等辅助性加工后变成内部形式</li><li>变换：内部形式的信息由变换中心进行处理</li><li>输出：然后沿着输出路径经过格式转换、组成物理块、缓冲处理等辅助性加工后变成输出信息送到系统外</li></ul><p><img src="/imgs/se/42.png" alt="image-20231024172335556"></p><h5 id="变换分析"><a href="#变换分析" class="headerlink" title="变换分析"></a>变换分析</h5><p>变换分析的任务是将变换型的DFD映射成初始的结构图，步骤如下：</p><ol><li><p>划定输入流和输出流的边界，确定变换中心</p><p><img src="/imgs/se/44.png" alt="image-20231024172611179"></p></li><li><p>进行第一级分解：将DFD映射成变换型的程序结构</p><ul><li>将DFD映射成变换型的程序结构</li><li>大型的软件系统第一级分解时可多分解几个模块，<br>以减少最终结构图的层次数<ul><li>例如，每条输入或输出路径画一个模块，每个主要变换功<br>能各画一个模块</li></ul></li></ul><p>e.g.<img src="/imgs/se/45.png" alt="image-20231024172820255"></p></li><li><p>进行第二级分解：将DFD中的加工映射成结构图中的一个适当的模块</p><p><img src="/imgs/se/46.png" alt="image-20231024172947192"></p></li><li><p>标注输入输出信息：根据DFD，在初始结构图上标注模块之间传递的输入信息和输出信息</p></li></ol><h5 id="事务流"><a href="#事务流" class="headerlink" title="事务流"></a>事务流</h5><p>特征：数据流沿着输入路径到达一个事务中心，事务中心根据输入数据的类型在若干条动作路径中选择一条来执行</p><p>事务中心的任务是：接收输入数据(即事务)；分析每个事务的类型；根据事务类型选择执行一条动作路径</p><p><img src="/imgs/se/43.png" alt="image-20231024172437805"></p><h5 id="事务分析"><a href="#事务分析" class="headerlink" title="事务分析"></a>事务分析</h5><p>将事务型DFD映射成初始的结构图</p><p>事务型的结构图包括：</p><ul><li>主控模块：完成整个系统的功能</li><li>接收模块：接收输入数据(事务)</li><li>发送模块：根据输入事务的类型，选择一个动作路径控制模块</li><li>动作路径控制模块：完成相应的动作路径所执行的子功能</li></ul><p><img src="/imgs/se/47.png" alt="image-20231024173107440"></p><p><strong>分析步骤</strong></p><ol><li><p>在DFD图上确定边界</p><ul><li>事务中心</li><li>接受部分（包括接受路径）</li><li>发送部分（包括全部动作路径）</li></ul><p><img src="/imgs/se/48.png" alt="image-20231024173230136"></p></li><li><p>画出SC图框架</p><ul><li>DFD图的三个部分分别映射为事务控制模块，接受模块和动作发送模块</li></ul><p><img src="/imgs/se/49.png" alt="image-20231024173259040"></p></li><li><p>分解和细化接受分支和发送分支</p></li></ol><h4 id="优化结构图"><a href="#优化结构图" class="headerlink" title="优化结构图"></a>优化结构图</h4><p>启发式设计策略</p><ol><li>降低耦合度，提高内聚度</li></ol><ol start="2"><li>避免高扇出，并随着深度的增加，力求高扇入</li><li>模块的影响范围应限制在该模块的控制范围内</li></ol><p>改进技巧</p><ul><li>减少模块间的耦合度</li><li>消除重复功能</li><li>消除“管道”模块</li><li>模块的大小适中</li><li>避免高扇出</li><li>应尽可能研究整张结构图，而不是只考虑其中的一部分</li></ul><h3 id="过程设计-详细设计"><a href="#过程设计-详细设计" class="headerlink" title="过程设计-详细设计"></a>过程设计-详细设计</h3><p>确定应该怎样具体地实现所要求的系统</p><ul><li>流程图</li><li>N-S图</li><li>PAD图</li><li>PDL语言</li></ul><h4 id="将非结构化程序转换成结构化程序"><a href="#将非结构化程序转换成结构化程序" class="headerlink" title="将非结构化程序转换成结构化程序"></a>将非结构化程序转换成结构化程序</h4><h5 id="重复编码技术"><a href="#重复编码技术" class="headerlink" title="重复编码技术"></a>重复编码技术</h5><p><img src="/imgs/se/50.png" alt="image-20231024174115266"></p><h5 id="设标志量技术"><a href="#设标志量技术" class="headerlink" title="设标志量技术"></a>设标志量技术</h5><p><img src="/imgs/se/51.png" alt="image-20231024174158786"></p><h5 id="状态变量法"><a href="#状态变量法" class="headerlink" title="状态变量法"></a>状态变量法</h5><p><img src="/imgs/se/52.png" alt="image-20231024174238351"></p><h4 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h4><p><img src="/imgs/se/53.png" alt="image-20231024174310179"></p><p><strong>常用符号</strong></p><p><img src="/imgs/se/54.png" alt="image-20231024174342914"></p><h4 id="盒图（N-S图）"><a href="#盒图（N-S图）" class="headerlink" title="盒图（N-S图）"></a>盒图（N-S图）</h4><p><img src="/imgs/se/55.png" alt="image-20231024174450499"></p><h4 id="PAD图"><a href="#PAD图" class="headerlink" title="PAD图"></a>PAD图</h4><p><img src="/imgs/se/56.png" alt="image-20231024174525729"></p><p><img src="/imgs/se/57.png" alt="image-20231024174558977"></p><h4 id="PDL"><a href="#PDL" class="headerlink" title="PDL"></a>PDL</h4><ul><li>PDL是一种用于描述功能模块的算法设计和加工细节的语言。称为设计程序用语言。它是一种伪码。</li><li>伪码的语法规则分为“外语法”和“内语法”。</li><li>PDL具有严格的关键字外语法，用于定义控制结构和数据结构，同时它的表示实际操作和条件的内语法可使用自然语言的词汇。</li></ul><h2 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h2><p><strong>设计模型和分析模型</strong></p><p>设计模型的元素很多都是在分析模型中使用的UML图。差别在于这些图被精化和细化为设计的一部分，并且提供了更多的与实现相关的特殊细节，突出了架构的结构和风格、架构内存在的构件以及构件和外界之间的接口。</p><h3 id="面向对象设计模型"><a href="#面向对象设计模型" class="headerlink" title="面向对象设计模型"></a>面向对象设计模型</h3><h4 id="UML相关模型图"><a href="#UML相关模型图" class="headerlink" title="UML相关模型图"></a>UML相关模型图</h4><h5 id="构件图"><a href="#构件图" class="headerlink" title="构件图"></a>构件图</h5><p>构件是比类的封装粒度更大的软件重用结构，并通过接口向构件的用户提供服务。</p><ul><li>内部类以紧耦合方式完成相对独立的功能；</li><li>有明确的供给接口和需求接口；</li><li>构件是可配置的；</li><li>构件是可组装的；</li></ul><p><img src="/imgs/se/114.png" alt="image-20231130092846310"></p><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20231130092913978.png" alt="image-20231130092913978"></p><h5 id="部署图"><a href="#部署图" class="headerlink" title="部署图"></a>部署图</h5><p>软件的部署方案定义了系统的执行架构，即将软件制品分配到不同的节点上运行</p><p><img src="/imgs/se/116.png" alt="image-20231130093026039"></p><h5 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h5><p>描述类的行为特性。</p><p>核心元素：<strong>状态、转移、事件</strong></p><p><img src="/imgs/se/117.png" alt="image-20231130093108568"></p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><p><a href="https://zhuanlan.zhihu.com/p/590865345">架构设计的4+1视图：场景视图、逻辑视图、物理视图、流程视图和开发视图 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/112531852">架构设计4+1视图的作用与关系 - 知乎 (zhihu.com)</a></p><h5 id="4-1架构视图"><a href="#4-1架构视图" class="headerlink" title="4+1架构视图"></a>4+1架构视图</h5><p><img src="/imgs/se/118.png" alt="image-20231130093233342"></p><h5 id="逻辑视图设计"><a href="#逻辑视图设计" class="headerlink" title="逻辑视图设计"></a>逻辑视图设计</h5><p>Logical view</p><p>软件的逻辑结构，用于支持功能性需求。</p><p><img src="/imgs/se/119.png" alt="image-20231130093354196"></p><h5 id="进程视图设计"><a href="#进程视图设计" class="headerlink" title="进程视图设计"></a>进程视图设计</h5><p>process view</p><p>软件的进程架构，针对非功能性需求</p><p>构成进程的任务是彼此相互分隔的控制线程，这个软件被划分成这样一组彼此独立的任务。（部署图）</p><p><img src="/imgs/se/120.png" alt="image-20231130093543116"></p><p>process和thread</p><p>process</p><ul><li>Provides heavyweight flow of control</li><li>Is stand-alone</li><li>Can be divided into individual threads</li></ul><p>thread</p><ul><li>Provides lightweight flow of control</li><li>Runs in the context of an enclosing process</li></ul><p><img src="/imgs/se/121.png" alt="image-20231130093801450"></p><h5 id="开发视图设计"><a href="#开发视图设计" class="headerlink" title="开发视图设计"></a>开发视图设计</h5><p>implementation view&#x2F;实现视图</p><p>软件的开发架构，即如何分解成实现单元，是需求分配的基础也是开发组织结构的基础。</p><p>如图水平分割方案，6个包分配给6个开发组且处于架构的不同层次，开发组可按技术层次分配人员。</p><p>下图垂直分割方案，按业务逻辑在多个开发组分配任<br>务，每个开发组必须具备综合开发能力。</p><p><img src="/imgs/se/122.png" alt="image-20231130102032780"></p><h5 id="物理视图设计"><a href="#物理视图设计" class="headerlink" title="物理视图设计"></a>物理视图设计</h5><p>deployment view&#x2F;部署视图</p><p>软件的物理架构，针对非功能性需求的可用性、可靠性、可扩展性等。（部署图）</p><p><img src="/imgs/se/123.png" alt="image-20231130102320464"></p><h5 id="场景视图设计"><a href="#场景视图设计" class="headerlink" title="场景视图设计"></a>场景视图设计</h5><p>use-case view</p><p>场景是用例的实例，将4个视图有机第联系起来。它是发现架构元素的动力，担负起验证和说明的角色</p><p><img src="/imgs/se/124.png" alt="image-20231130102517910"></p><p>需要多少视图？</p><ul><li>简化模型</li><li>不是所有系统都需要上面的所有视图<ul><li>单处理器：无需物理视图&#x2F;部署视图</li><li>单进程：无需进程视图</li><li>小项目：无需实现视图</li></ul></li><li>添加视图<ul><li>数据视图</li><li>安全视图</li></ul></li></ul><h4 id="包和子系统设计"><a href="#包和子系统设计" class="headerlink" title="包和子系统设计"></a>包和子系统设计</h4><h5 id="类与包"><a href="#类与包" class="headerlink" title="类与包"></a>类与包</h5><ul><li><p>类</p><p>A description of a set of objects that share the same responsibilities, relationships, operations, attributes, and semantics</p></li><li><p>包</p><p>A general purpose mechanism for organizing elements into groups</p><p>A model element which can contain other model elements</p></li></ul><h5 id="包设计原则"><a href="#包设计原则" class="headerlink" title="包设计原则"></a>包设计原则</h5><ul><li>重用-发布等价：重用粒度等于发布粒度；</li><li>共同重用：包中所有类一起被重用；</li><li>共同封闭：包中的所有类对同类型的变更封闭；</li><li>无环依赖：包之间无环依赖结构；</li><li>稳定依赖：包应该依赖比他更稳定的包；</li><li>稳定抽象：最稳定的包即最抽象，不稳定包是具体包。</li></ul><p><img src="/imgs/se/125.png" alt="image-20231130103435204"></p><p><img src="/imgs/se/126.png" alt="image-20231130103451116"></p><h5 id="子系统与接口"><a href="#子系统与接口" class="headerlink" title="子系统与接口"></a>子系统与接口</h5><p>接口</p><p>Realizes one or more interfaces that define its behavior</p><p><img src="/imgs/se/127.png" alt="image-20231130103951744"></p><p>子系统</p><ul><li>完全封装行为</li><li>使用清晰的接口实现独立的功能</li><li>对多个实现变体进行建模</li></ul><p><img src="/imgs/se/128.png" alt="image-20231130104337279"></p><h5 id="包与子系统"><a href="#包与子系统" class="headerlink" title="包与子系统"></a>包与子系统</h5><ul><li>子系统<ul><li>提供行为</li><li>完全封装内容</li><li>能够轻易被替换</li></ul></li><li>包<ul><li>不提供行为</li><li>不完全封装内容</li><li>可能不能被轻易替换</li></ul></li></ul><p><img src="/imgs/se/129.png" alt="image-20231130104608540"></p><h5 id="子系统的使用"><a href="#子系统的使用" class="headerlink" title="子系统的使用"></a>子系统的使用</h5><ul><li>子系统能够被用于将系统拆分成多个独立的部分<ul><li>ordered, configured, or delivered</li><li>可开发的，只要接口保持不变</li><li>在一串分布式计算节点上部署</li><li>更改不破坏系统的其他部分</li></ul></li><li>也能被用于：<ul><li>将系统拆分为可以对关键资源提供限制安全的单元</li><li>在设计中表现现有产品或外部系统</li></ul></li></ul><h4 id="类设计"><a href="#类设计" class="headerlink" title="类设计"></a>类设计</h4><h5 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h5><p><img src="/imgs/se/130.png" alt="image-20231130105156907"></p><h5 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h5><p>[面向对象基础设计原则：3.里氏替换原则 - 知乎 (zhihu.com)](<a href="https://zhuanlan.zhihu.com/p/158386715#:~:text=%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99%EF%BC%88The">https://zhuanlan.zhihu.com/p/158386715#:~:text=里氏替换原则（The</a> Liskov Substitution,Principle，LSP）是由Barbara Liskov女士于1988年提出的，其定义为：“如果对于类型S的每个对象O1存在类型T的对象O2，那么对于所有定义了T的程序P来说，当用O1替换 O2并且S是T的子类型时，P的行为不会改变”。)</p><p><a href="https://zhuanlan.zhihu.com/p/268574641">细说 里氏替换原则 - 知乎 (zhihu.com)</a></p><p>如果对于类型S的每个对象O1存在类型T的对象O2，那么对于所有定义了T的程序P来说，当用O1替换 O2并且S是T的子类型时，P的行为不会改变</p><p><img src="/imgs/se/131.png" alt="image-20231130105214727"></p><h5 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h5><p><img src="/imgs/se/132.png" alt="image-20231130105247475"></p><h5 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h5><p><img src="/imgs/se/133.png" alt="image-20231130105446463"></p><h5 id="开发-关闭原则"><a href="#开发-关闭原则" class="headerlink" title="开发-关闭原则"></a>开发-关闭原则</h5><p><img src="/imgs/se/134.png" alt="image-20231130105509590"></p><h4 id="持久化设计"><a href="#持久化设计" class="headerlink" title="持久化设计"></a>持久化设计</h4><ol><li>实体对象建模；</li><li>数据库设计；</li><li>持久化框架。</li></ol><h3 id="面向对象设计过程"><a href="#面向对象设计过程" class="headerlink" title="面向对象设计过程"></a>面向对象设计过程</h3><p>从分析类到设计元素</p><p><img src="/imgs/se/135.png" alt="image-20231130105838497"></p><h4 id="识别设计元素"><a href="#识别设计元素" class="headerlink" title="识别设计元素"></a>识别设计元素</h4><ul><li>如果满足以下要求，一个分析类直接映射到一个设计类<ul><li>一个简单类</li><li>表示单一的逻辑抽象</li></ul></li><li>更复杂的分析类<ul><li>拆分成多个类</li><li>成为一个包</li><li>成为一个子系统</li><li>参与组合</li></ul></li></ul><h5 id="候选子系统"><a href="#候选子系统" class="headerlink" title="候选子系统"></a>候选子系统</h5><ul><li>分析类可能演变成子系统<ul><li>类提供复杂服务或者工具</li><li>边界类（用户接口和外部系统接口）</li></ul></li><li>设计中现有的产品和外部系统<ul><li>通讯软件</li><li>数据库连接支持</li><li>类型和数据结构</li><li>共有的工具</li><li>特定应用产品</li></ul></li></ul><h5 id="子系统设计过程"><a href="#子系统设计过程" class="headerlink" title="子系统设计过程"></a>子系统设计过程</h5><ol><li>对子系统职责进行定义，即接口的定义；</li><li>通过职责分配确定子系统中的元素，由构件等元素来实现职责；</li><li>对子系统中各元素进行设计，即类设计（静态结构和动态结构）；</li><li>确定子系统间的依赖关系。</li></ol><p><img src="/imgs/se/136.png" alt="image-20231130111607451"></p><h4 id="确定架构风格，设计整体结构"><a href="#确定架构风格，设计整体结构" class="headerlink" title="确定架构风格，设计整体结构"></a>确定架构风格，设计整体结构</h4><h5 id="识别架构风格"><a href="#识别架构风格" class="headerlink" title="识别架构风格"></a>识别架构风格</h5><ul><li>layers</li><li>model-view-controller（MVC）</li><li>pipes and filters</li><li>blackboard</li></ul><p><img src="/imgs/se/137.png" alt="image-20231205172420878"></p><h5 id="对架构层级建模"><a href="#对架构层级建模" class="headerlink" title="对架构层级建模"></a>对架构层级建模</h5><p>Architectural layers can be modeled using stereotyped packages.</p><p><img src="/imgs/se/138.png" alt="image-20231205172634868"></p><h5 id="对设计元素进行分层和分包"><a href="#对设计元素进行分层和分包" class="headerlink" title="对设计元素进行分层和分包"></a>对设计元素进行分层和分包</h5><ul><li>Partitioning Considerations<ul><li>Coupling and cohesion</li><li>User organization</li><li>Competency and&#x2F;or skill areas</li><li>System distribution</li><li>Secrecy</li><li>Variability</li></ul></li></ul><h5 id="持久化设计模式"><a href="#持久化设计模式" class="headerlink" title="持久化设计模式"></a>持久化设计模式</h5><ul><li>Describe Persistence-Related Behavior<ul><li>Modeling Transactions</li><li>Writing Persistent Objects</li><li>Reading Persistent Objects</li><li>Deleting Persistent Objects</li></ul></li></ul><p><img src="/imgs/se/139.png" alt="image-20231205173044256"></p><h4 id="构件级设计"><a href="#构件级设计" class="headerlink" title="构件级设计"></a>构件级设计</h4><h5 id="更新use-case-Realization"><a href="#更新use-case-Realization" class="headerlink" title="更新use-case Realization"></a>更新use-case Realization</h5><p><img src="/imgs/se/140.png" alt="image-20231205173239165"></p><p><img src="/imgs/se/141.png" alt="image-20231205173308270"></p><p><img src="/imgs/se/142.png" alt="image-20231205173401659"></p><p><img src="/imgs/se/143.png" alt="image-20231205173430130"></p><p>encapsulating subsystem interactions</p><h5 id="子系统的设计"><a href="#子系统的设计" class="headerlink" title="子系统的设计"></a>子系统的设计</h5><p>类似于系统的设计，对每个接口的每个操作设计交互图和VOPC类图</p><p><img src="/imgs/se/144.png" alt="image-20231205173910372"></p><h5 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h5><ol><li>创建设计类：将分析类映射成设计类；</li><li>定义操作：实现单一的职责；</li><li>定义方法：对操作的内部实现进行描述；</li><li>定义状态：描述对象的状态对行为的影响，将对象的属性和操作关联起来；</li><li>定义属性：包括方法中的参数、对象的状态等；</li><li>定义依赖：类与类之间的存在关系，非结构关系；</li><li>定义关联：对关联关系的细化，包括聚合与组合、导向性、多重性、关联类；</li><li>形成设计类的规格说明书。</li></ol><h6 id="优化UI类"><a href="#优化UI类" class="headerlink" title="优化UI类"></a>优化UI类</h6><p>UI边界类</p><p><img src="/imgs/se/145.png" alt="image-20231205174120116"></p><h6 id="优化Control类"><a href="#优化Control类" class="headerlink" title="优化Control类"></a>优化Control类</h6><ul><li>是否该被拆分</li></ul><h6 id="优化entity类"><a href="#优化entity类" class="headerlink" title="优化entity类"></a>优化entity类</h6><p><img src="/imgs/se/146.png" alt="image-20231207082742049"></p><h6 id="定义操作符号"><a href="#定义操作符号" class="headerlink" title="定义操作符号"></a>定义操作符号</h6><p><img src="/imgs/se/147.png" alt="image-20231207083016775"></p><h6 id="画出时序图"><a href="#画出时序图" class="headerlink" title="画出时序图"></a>画出时序图</h6><p>从用例事件流中提取出各类事件并确定事件交互行为的发送对象和接受对象，用时序图把事件序列以及事件与对象的关系表示出来</p><p><img src="/imgs/se/148.png" alt="image-20231207083612917"></p><h6 id="画出状态机图"><a href="#画出状态机图" class="headerlink" title="画出状态机图"></a>画出状态机图</h6><ul><li>状态图描绘事件与对象状态的关系。当对象接受了一个事件以后，引起的状态改变称为“转换”。</li><li>用一张状态图描绘一类对象的行为，它确定了由事件序列引出的状态序列。仅考虑具有重要交互行为的那些类。</li><li>事件跟踪图中入事件作为状态图中的有向边(即箭头线)，边上标以事件名。两个事件之间的间隔就是一个状态。</li><li>事件跟踪图中的射出的箭头线，是这条竖线代表的对象达到某个状态时所做的行为(往往是引起另一类对象状态转换的事件)。</li></ul><p><img src="/imgs/se/149.png" alt="image-20231207083933133"></p><p><img src="/imgs/se/150.png" alt="image-20231207084014358"></p><p><img src="/imgs/se/151.png" alt="image-20231207084031217"></p><p>什么对象拥有显著状态</p><ul><li>角色由状态转换声明</li><li>状态控制的复杂用例</li></ul><h6 id="属性表达"><a href="#属性表达" class="headerlink" title="属性表达"></a>属性表达</h6><ul><li>特定姓名、种类、选择性缺省值</li><li>命名规则</li><li>类型应是实现语言的基本数据类型</li><li>权限控制<ul><li>public:+</li><li>private:-</li><li>protected:#</li></ul></li></ul><p><img src="/imgs/se/152.png" alt="image-20231207090436034"></p><p><img src="/imgs/se/153.png" alt="image-20231207090500055"></p><p>关联类设计</p><p>双向工程</p><h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h2><h3 id="测试概述"><a href="#测试概述" class="headerlink" title="测试概述"></a>测试概述</h3><ul><li>测试（testing）的目的<ul><li>发现软件的错误，从而保证软件质量</li></ul></li><li>成功的测试<ul><li>发现了未曾发现的错误</li></ul></li><li>与调试（debugging）的不同在哪？<ul><li>定位和纠正错误</li><li>保证程序的可靠运行</li></ul></li></ul><h4 id="软件引入错误阶段"><a href="#软件引入错误阶段" class="headerlink" title="软件引入错误阶段"></a>软件引入错误阶段</h4><p><img src="/imgs/se/176.png" alt="image-20231214080844494"></p><h4 id="测试准则"><a href="#测试准则" class="headerlink" title="测试准则"></a>测试准则</h4><ul><li>所有的软件测试应追溯到用户的需求</li><li>穷举测试是不可能的</li><li>根据软件错误的聚集性规律，对存在错误的程序段应进行重点测试</li><li>尽早地和不断地进行软件测试</li><li>避免测试自己的程序</li><li>制定测试计划，避免测试的随意性</li><li>测试应该从小到大</li></ul><p>黑盒测试不可能实现穷尽测试</p><p>白盒测试也不可能实现穷尽测试</p><h4 id="测试组的组成"><a href="#测试组的组成" class="headerlink" title="测试组的组成"></a>测试组的组成</h4><ul><li>测试经理&#x2F;测试组长</li><li>测试工程师<ul><li>测试开发工程师</li><li>测试工程师</li></ul></li></ul><h3 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h3><ul><li>按测试层次分类<ul><li>单元测试、集成测试、系统测试</li></ul></li><li>按软件质量属性分类<ul><li>功能性测试、可靠性测试、易用性测试、性能测试、可移植性测试、可维护性测试</li></ul></li><li>其他测试策略<ul><li>验收测试、α测试、β测试、安装测试、回归测试</li></ul></li></ul><h4 id="测试层次"><a href="#测试层次" class="headerlink" title="测试层次"></a>测试层次</h4><ul><li>单元测试(Unit testing)</li><li>集成测试(Integration testing)</li><li>系统测试(System testing)</li></ul><p><img src="/imgs/se/177.png" alt="image-20231214081303001"></p><h5 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h5><p>单元测试（unit testing），又称为模块测试，是针对软件结构中独立的基本单元（如函数、子过程、类）进行的测试。</p><p><img src="/imgs/se/178.png" alt="image-20231214081506018"></p><p><img src="/imgs/se/179.png" alt="image-20231214082021331"></p><h6 id="测试对象"><a href="#测试对象" class="headerlink" title="测试对象"></a>测试对象</h6><p>单元测试是针对每个基本单元，重点关注5个方面：</p><ul><li>模块接口</li><li>局部数据结构</li><li>边界条件</li><li>独立的路径</li><li>错误处理路径</li></ul><h6 id="测试时间"><a href="#测试时间" class="headerlink" title="测试时间"></a>测试时间</h6><p>一般地，该基本单元的编码完成后就可以对其进行单元测试。<br>也可以提前，即测试驱动开发（test driven development），在详细设计的时候就编写测试用例，然后再编写程序代码来满足这些测试用例。</p><h5 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h5><p><img src="/imgs/se/180.png" alt="image-20231214082122826"></p><ul><li>集成测试（integration testing），又称组装测试，它根据设计将软件模块组装起来，进行有序的、递增的测试，并通过测试评价它们之间的交互。</li><li>集成测试一般由项目经理组织软件测试工程师或由独立的测试部门进行。</li><li>集成测试重点关注：<ul><li>在把各个软件单元连接起来的时候，穿越单元接口的数据是否会丢失；</li><li>一个软件单元的功能是否会对另一个软件单元的功能产生不利的影响；</li><li>各个子功能组合起来，能否达到预期要求的父功能；</li><li>全局数据结构是否有问题；</li><li>单个软件单元的误差累积起来，是否会放大，从而达到不能接受的程度。</li></ul></li></ul><h6 id="软件集成策略"><a href="#软件集成策略" class="headerlink" title="软件集成策略"></a>软件集成策略</h6><ul><li>增量式集成<ul><li>自顶向下集成</li><li>由底向上集成</li><li>混合方式集成<ul><li>对软件中上层使用自顶向下集成，对软件的中下层采用自底向上集成。</li></ul></li></ul></li><li>一次性集成<ul><li>缺点：接口错误发现晚，错误定位困难</li><li>优点：可以并行测试和调试所有软件单元</li></ul></li></ul><p><img src="/imgs/se/181.png" alt="image-20231214083818345"></p><p><img src="/imgs/se/182.png" alt="image-20231214083847172"></p><p><img src="/imgs/se/183.png" alt="image-20231214083947043"></p><h5 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h5><p><img src="/imgs/se/184.png" alt="image-20231214084042159"></p><ul><li>软件集成及集成测试完成后，对整个软件系统进行的一系列测试，称为系统测试（system testing）。</li><li>系统测试的目的是为了验证系统是否满足需求规约。</li><li>测试内容包括功能测试和非功能测试，其中非功能测试常常是系统测试的重点，例如：可靠性测试、性能测试、易用性测试、可维护性测试、可移植性测试等。</li><li>如果该软件只是一个大的计算机系统的一个组成部分，此时应将软件与计算机系统的其他元素集成起来，检验它能否与计算机系统的其他元素协调地工作。</li><li>系统测试一般由与开发无直接责任关系的独立方负责，例如项目组的软件测试工程师、测试部门、第三方评测机构、客户等。</li></ul><h4 id="软件质量属性的测试"><a href="#软件质量属性的测试" class="headerlink" title="软件质量属性的测试"></a>软件质量属性的测试</h4><ul><li>功能性测试<br>又称正确性测试或一致性测试，包括适应性、准确性、互操作性、安全性、功能依存性测试。</li><li>可靠性测试<br>成熟性、容错性、已恢复性、可靠性依从性测试。</li><li>性能测试<br>时间特性、资源利用性、性能依存性测试，常用压力测试方法。</li><li>易用性测试<br>易理解性、易学性、易操作性、吸引性、依从性测试。</li><li>可移植性测试<br>适应性、易安装、易替换、可移植性依从测试。</li><li>可维护性测试<br>被修改的能力，包括易分析、易改变、稳定性、易测试、维护依从性测试。</li></ul><h4 id="其他测试策略"><a href="#其他测试策略" class="headerlink" title="其他测试策略"></a>其他测试策略</h4><ul><li>验收测试<br>由用户主导的，根据合同、需求规约或验收计划对软件成品进行验收测试。</li><li>$\alpha$测试和$\beta$测试<ul><li>$\alpha$测试：由开发者主导，在受控环境中进行</li><li>$\beta$测试：在用户环境中进行，开发者不在现场</li></ul></li><li>安装测试<br>测试各种允许安装平台能否成功安装。</li><li>回归测试<br>对软件系统或部件重新测试，测试改动没有引入新的错误。</li></ul><h3 id="测试技术"><a href="#测试技术" class="headerlink" title="测试技术"></a>测试技术</h3><p><img src="/imgs/se/185.png" alt="image-20231214084445031"></p><h4 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h4><ul><li>白盒测试把被测软件看作一个透明的白盒子，测试人员可以完全了解软件的设计或代码，按照软件内部逻辑进行测试。</li><li>白盒测试又称玻璃盒测试，常常应用在单元测试中。</li></ul><h4 id="控制流测试（属白盒测试）"><a href="#控制流测试（属白盒测试）" class="headerlink" title="控制流测试（属白盒测试）"></a>控制流测试（属白盒测试）</h4><ol><li>语句覆盖法</li><li>判定覆盖（分支）</li><li>条件覆盖</li><li>判定&#x2F;条件覆盖</li><li>条件组合覆盖</li><li>路径覆盖</li></ol><h5 id="语句覆盖法"><a href="#语句覆盖法" class="headerlink" title="语句覆盖法"></a>语句覆盖法</h5><p>使得程序中的每一个语句至少被遍历一次</p><p><img src="/imgs/se/186.png" alt="image-20231214084723359"></p><p>测试用例：$A&#x3D;2,B&#x3D;0,X&#x3D;3$</p><h5 id="判定覆盖分支"><a href="#判定覆盖分支" class="headerlink" title="判定覆盖分支"></a>判定覆盖分支</h5><p>使得程序中每一个分支至少被遍历一次</p><p><img src="/imgs/se/186.png" alt="image-20231214084723359"></p><p>测试用例：</p><ol><li>$A&#x3D;2,B&#x3D;0,X&#x3D;1$</li><li>$A&#x3D;1,B&#x3D;0,X&#x3D;0$</li></ol><h5 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h5><p>使得每个判定的条件获取各种可能的结果</p><p><img src="/imgs/se/186.png" alt="image-20231214084723359"></p><p>a:$A \gt 1,A \le,B&#x3D;0,B \neq 0$</p><p>b:$A&#x3D;2,A \neq 2,X \gt1,X \le 1$</p><ol><li>$A&#x3D;2,B&#x3D;0,X&#x3D;4$</li><li>$A&#x3D;1,B&#x3D;1,X&#x3D;1$</li></ol><h5 id="判定-x2F-条件覆盖"><a href="#判定-x2F-条件覆盖" class="headerlink" title="判定&#x2F;条件覆盖"></a>判定&#x2F;条件覆盖</h5><p>使得判定中的条件取得各种可能的值，并使得每个判定取得各种可能的结果</p><ol><li>$A&#x3D;2,B&#x3D;0,X&#x3D;4$</li><li>$A&#x3D;1,B&#x3D;1,X&#x3D;1$</li></ol><h5 id="条件组合覆盖"><a href="#条件组合覆盖" class="headerlink" title="条件组合覆盖"></a>条件组合覆盖</h5><p>使得每个判定条件的各种可能组合都至少出现一次</p><p><img src="/imgs/se/186.png" alt="image-20231214084723359"></p><p><img src="/imgs/se/187.png" alt="image-20231214092315949"></p><p><img src="/imgs/se/188.png" alt="image-20231214092334009"></p><h5 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h5><p>覆盖程序中所有可能的路径</p><p><img src="/imgs/se/189.png" alt="image-20231214092425448"></p><h4 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h4><ul><li>黑盒测试把程序看成一个黑盒子，完全不考虑程序内部结构和处理过程。</li><li>黑盒测试是在程序接口进行测试，它只是检查程序功能是否按照需求规约正常使用。</li><li>黑盒测试又称功能测试、行为测试，在软件开发后期执行。</li></ul><p>基于规约的测试</p><ul><li>等价类划分<ul><li>将所有可能的输入数据划分成若干个等价类，然后在每个等价类中选取一组（通常是一个）代表性的数据作为测试用例。</li></ul></li><li>边界值分析<ul><li>通常是等价类划分技术的一种补充，在等价类划分技术中，一个等价类中的任一输入数据都可作为该等价类的代表用作测试用例，而边界值分析技术则是专门挑选那些位于输入或输出范围边界附近的数据用作测试用例。</li></ul></li><li>随机测试<ul><li>在软件输入域上随机选择输入数据来测试软件的技术。</li></ul></li></ul><h5 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h5><p>等价类的划分在很大程度上依靠的是测试人员的经验，下面给出几<br>条基本原则：</p><ol><li>输入规定了取值范围，则可划分出一个有效的等价类（输入值在此范围内）和两个无效的等价类（输入值小于最小值、输入值大于最大值）。</li><li>输入规定了输入数据的个数，则可相应地划分出一个有效的等价类（输入数据的个数等于给定的个数要求）和两个无效的等价类（输入数据的个数少于给定的个数要求、输入数据的个数多于给定的个数要求）。</li><li>输入规定了输入数据的一组可能的值，而且程序对这组可能的值做相同的处理，则可将这组可能的值划分为一个有效的等价类，而这些值以外的值划分成无效的等价类。</li><li>输入规定了输入数据的一组可能的值，但是程序对不同的输入值做不同的处理，则每个输入值是一个有效的等价类，此外还有一个无效的等价类（所有不允许值的集合）。</li><li>输入规定了输入数据必须遵循的规则，则可以划分一个有效的等价类（符合规则）和若干个无效的等价类（从各种角度违反规则）。</li></ol><p><strong>确定测试用例</strong></p><p>划分出等价类后，根据以下原则设计测试用例：</p><ol><li>为每个等价类编号。</li><li>设计一个新的测试用例，使它能包含尽可能多的尚未被覆盖的有效等价类。重复这一过程，直到所有的有效等价类都被覆盖。</li><li>设计一个新的测试用例，使它包含一个尚未被覆盖的无效等价类。重复这一过程，直到所有的无效等价类都被覆盖。</li></ol><h5 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h5><p>人们在长期的测试中发现，程序往往在处理边界值的时候容易出错。</p><p>通常输入等价类和输出等价类的边界，就是应该着重测试的程序边界情况。</p><p>边界值分析也属于黑盒测试，可以看作是对等价类划分的一个补充。</p><p>在设计测试用例时，往往联合等价类划分和边界值分析这两种方法。</p><h4 id="错误猜测"><a href="#错误猜测" class="headerlink" title="错误猜测"></a>错误猜测</h4><ul><li>错误猜测（error guessing）是一种凭经验、知识和直觉推测某些可能存在的错误，从而针对这些可能存在的错误设计测试用例的技术。</li><li>基本思想：列举出程序中所有可能的错误和容易发生错误的特殊情况，然后根据这些猜测设计测试用例。</li><li>例如，测试一个排序子程序，可考虑如下情况：<ul><li>输入表为空</li><li>输入表只有一个元素</li><li>输入表的所有元素都相同</li><li>输入表已排好序</li></ul></li></ul><p><img src="/imgs/se/190.png" alt="image-20231214093423027"></p><p><img src="/imgs/se/191.png" alt="image-20231214093448011"></p><h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><p><img src="/imgs/se/192.png" alt="image-20231214093538649"></p><h4 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h4><ul><li>测试目的</li><li>测试对象</li><li>测试范围</li><li>文档的检验</li><li>测试策略和测试技术</li><li>测试过程</li><li>进度安排</li><li>资源</li><li>测试开始、结束准则</li><li>测试文档和测试记录</li></ul><h4 id="测试用例设计文档"><a href="#测试用例设计文档" class="headerlink" title="测试用例设计文档"></a>测试用例设计文档</h4><p>测试用例（test case）是按一定顺序执行的与测试<br>目标相关的一系列测试。其主要内容包括：</p><ul><li>测试输入</li><li>测试操作</li><li>期望结果</li></ul><h4 id="缺陷报告"><a href="#缺陷报告" class="headerlink" title="缺陷报告"></a>缺陷报告</h4><ul><li>内容包括：缺陷名称、分类、等级、发现时间，发<br>现人，所执行的测试用例、现象等</li><li>缺陷等级<ul><li>5级：灾难性的–系统崩溃、数据被破坏</li><li>4级：很严重的–数据被破坏</li><li>3级：严重的–特性不能运行，无法替代</li><li>2级：中等的–特性不能运行，可替代</li><li>1级：烦恼的–提示不正确，报警不确切</li><li>0级：轻微的–表面化的错误，拼写错等</li></ul></li><li>缺陷报告通常保存在缺陷跟踪系统</li></ul><h4 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h4><ul><li>被测软件的名称和标识</li><li>测试环境</li><li>测试对象</li><li>测试起止日期</li><li>测试人员</li><li>测试过程</li><li>测试结果</li><li>缺陷清单</li><li>等</li></ul><h4 id="开始和终止测试的标准"><a href="#开始和终止测试的标准" class="headerlink" title="开始和终止测试的标准"></a>开始和终止测试的标准</h4><ul><li>在测试计划中规定开始和终止测试的标准</li><li>开始测试的常用标准<ul><li>通过“冒烟” 测试</li></ul></li><li>终止测试的常用标准<ul><li>所有严重的缺陷都已纠正，剩余的缺陷密度少于<br>0.01%</li><li>100%测试覆盖度</li><li>缺陷数收敛了</li></ul></li></ul><h3 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h3><ul><li>工具类型<ul><li>单元测试工具，即白盒测试工具</li><li>性能测试工具</li><li>功能测试工具，即回归测试工具</li><li>缺陷跟踪工具</li><li>测试数据生成工具</li><li>测试管理工具</li><li>等</li></ul></li><li>工具产品<ul><li>HP Mercury： WinRunner, LoadRunner …</li><li>IBM Rational</li><li>Compuware： QA Run, QA Load, QA Director …</li><li>Freeware：JUnit, Bugzilla, Mantis …</li><li>……</li></ul></li></ul><h3 id="软件可靠性"><a href="#软件可靠性" class="headerlink" title="软件可靠性"></a>软件可靠性</h3><p>软件可靠性是软件可靠性是程序在给定的时间间隔内，按照规格说明书的规定成功地运行的概率。</p><p>术语“错误”的含义是由开发人员造成的软件差错（bug），而术语“故障”的含义是由错误引起的软件的不正确行为。</p><p>软件可用性是程序在给定的时间点，按照规格说明书的规定，成功地运行的概率。</p><p>平均无故障时间MTTF是系统按规格说明书规定成功地运行的平均时间。</p><p>软件系统故障停机时间为$t_{d1},t_{d2},\dots$</p><p>正常运行时间为$t_{u1},t_{u2},\dots$</p><p>系统的稳态可用性为$A_{ss}&#x3D;T_{up}&#x2F;\left(T_{up}+T_{down}\right)$</p><p>$T_{up}&#x3D;\sum t_{ui},T_{down}&#x3D;\sum t_{di}$</p><p>系统平均无故障时间MTTF，平均维修时间MTTR<br>$$<br>A_{ss}&#x3D;MTTF&#x2F;(MTTF+MTTR)<br>$$<br>平均无故障时间MTTF主要取决于系统中潜伏的错误数目</p><h4 id="估算平均无故障时间的方法"><a href="#估算平均无故障时间的方法" class="headerlink" title="估算平均无故障时间的方法"></a>估算平均无故障时间的方法</h4><p>软件的平均无故障时间MTTF是一个重要的质量指标，往往作为对软件的一项要求，由用户提出来。为了估算MTTF，首先引入一些有关的量。</p><h5 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h5><p>在估算MTTF的过程中使用下述符号表示有关的数量：</p><ul><li>$E_T$测试之前程序中错误总数；</li><li>$I_T$程序长度(机器指令总数)；</li><li>$\tau$测试(包括调试)时间；</li><li>$E_d(\tau)$在0至$\tau$期间发现的错误数；</li><li>$E_c(\tau)$在0至$\tau$期间改正的错误数。</li></ul><h5 id="基本假定"><a href="#基本假定" class="headerlink" title="基本假定"></a>基本假定</h5><ol><li>在类似的程序中，单位长度里的错误数ET&#x2F;IT近似为常数。美国的一些统计数字表明，通常$0.5\times10^{-2}\le E_T&#x2F;I_T \le 2 \times10^{-2}$也就是说，在测试之前每1000条指令中大约有5～20个错误。</li><li>失效率正比于软件中剩余的(潜藏的)错误数，而平均无故障时间MTTF与剩余的错误数成反比。</li><li>此外，为了简化讨论，假设发现的每一个错误都立即正确地改正了(即，调试过程没<br>有引入新的错误)。因此$E_c(\tau)&#x3D;E_d(\tau)$，剩余错误数量为$E_r(\tau)&#x3D;E_T-E_c(\tau)$，单位长度程序中剩余的错误数为$\varepsilon_{\mathrm{r}}(\tau)\mathrm{&#x3D;E_{T}}&#x2F;\mathrm{I_{T}}-\mathrm{E_{c}}(\tau)&#x2F;\mathrm{I_{T}}$</li></ol><h5 id="估算平均无故障时间"><a href="#估算平均无故障时间" class="headerlink" title="估算平均无故障时间"></a>估算平均无故障时间</h5><p>经验表明，平均无故障时间与单位长度程序中剩余的错误数成反比，即<br>$$<br>MTTF&#x3D;1&#x2F;[K(E_T&#x2F;I_T-E_c(\tau)&#x2F;I_T)]<br>$$<br>其中K为常数，它的值应该根据经验选取。美国的一些统计数字表明，K的典型值是200。<br>估算平均无故障时间的公式，可以评价软件测试的进展情况。此外，由上式可得<br>$$<br>\mathrm{E_{c}&#x3D;E_{T}-I_{T}&#x2F;(K\times MTTF)}<br>$$<br>因此也可以根据对软件平均无故障时间的要求，估计需要改正多少个错误之后，测试工作才能结束。</p><h4 id="估计错误总数的方法"><a href="#估计错误总数的方法" class="headerlink" title="估计错误总数的方法"></a>估计错误总数的方法</h4><p>程序中潜藏的错误的数目是一个十分重要的量，它既直接标志软件的可靠程度，又是计算软件平均无故障时间的重要参数。</p><p>程序中的错误总数估计ET的两个方法。</p><h5 id="植入错误法"><a href="#植入错误法" class="headerlink" title="植入错误法"></a>植入错误法</h5><p>在测试之前由专人在程序中随机地植入一些错误，测试之后，根据测试小组发现的错误中原有的和植入的两种错误的比例，来估计程序中原有错误的总数ET。</p><p>假设人为地植入的错误数为Ns,经过一段时间的测试之后发现ns个植入的错误，此外还发现了n个原有的错误。如果可以认为测试方案发现植入错误和发现原有错误的能力相同，则能够估计出程序中原有错误的总数为<br>$$<br>N&#x3D; (n&#x2F;n_s) \times Ns<br>$$<br>其中N即是错误总数ET的估计值。</p><h5 id="分别测试法"><a href="#分别测试法" class="headerlink" title="分别测试法"></a>分别测试法</h5><p>植入错误法的基本假定是所用的测试方案发现植入错误和发现原有错误的概率相同。但是，人为地植入的错误和程序中原有的错误可能性质很不相同，发现它们的难易程度自然也不相同，因此，上述基本假定可能有时和事实不完全一致。</p><p>如果有办法随机地把程序中一部分原有的错误加上标记，然后根据测试过程中发现的有标记错误和无标记错误的比例，估计程序中的错误总数，则这样得出的结果比用植入错误法得到的结果更可信一些。</p><p>为了随机地给一部分错误加标记，分别测试法使用两个测试员(或测试小组)，彼此独立地测试同一个程序的两个副本，把其中一个测试员发现的错误作为有标记的错误。具体做法是，在测试过程的早期阶段，由测试员甲和测试员乙分别测试同一个程序的两个副本，由另一名分析员分析他们的测试结果。用$\tau$表示测试时间，假设</p><p>$\tau&#x3D;0$时错误总数为B0</p><p>$\tau&#x3D;\tau_1$时测试员甲发现的错误数为B1</p><p>$\tau&#x3D;\tau_1$时测试员乙发现的错误数为B2</p><p>$\tau&#x3D;\tau_1$时两个测试员发现的相同错误数为$b_c$</p><p>即程序中有标记的错误总数为B1,则测试员乙发现的B2个错误中有bc个是有标记的。假定测试员乙发现有标记错误和发现无标记错误的概率相同，则可以估计出测试前程序中的错误总数为<br>$$<br>\mathrm{B}<em>{0}&#x3D;(\mathrm{B}</em>{1}&#x2F;\mathrm{b}<em>c)\mathrm{B}</em>{2}<br>$$</p><h2 id="软件演化和维护"><a href="#软件演化和维护" class="headerlink" title="软件演化和维护"></a>软件演化和维护</h2><p>对软件进行维护和更新的一种行为，它是软件生命周期中始终存在的变化活动。</p><p>按生命周期的不同阶段，软件演化可分为：</p><ul><li>开发演化<br>创造一个新软件的过程，它强调要在一定的约束条件下从头开始实施，占软件演化的30%</li><li>运行演化<br>又称软件维护（Software Maintenance），是软件系统交付使用以后，为了改正错误或满足新的需要而修改软件的过程，它强调必须在现有系统的限定和约束条件下实施，占软件演化的70%。</li></ul><p>在传统环境下，运行演化在开发演化后发生</p><p>在网络环境下，开发演化与运行演化已呈现出交织协同、并生共长的态势，软件运行状态改变的同时，软件版本也不断升级</p><p><img src="/imgs/se/193.png" alt="image-20231214162109939"></p><h3 id="Lehman的8条软件演化法则"><a href="#Lehman的8条软件演化法则" class="headerlink" title="Lehman的8条软件演化法则"></a>Lehman的8条软件演化法则</h3><ol><li>持续变更法则。软件必须持续改进，否则就会变得越来越不令人满意。</li><li>复杂度递增法则。软件的复杂性随着演化不断增加，除非采取措施使系统保持或降低复杂性。</li><li>自调节法则。软件的演化过程可以自动调节产品分布和过程测量，以接近正常状态。</li><li>组织稳定性法则。在软件的生命周期中，组织的平均开发效率是稳定的。</li><li>通晓法则。随着软件的演化，所有相关人员（如开发人员、销售人员和用户）都必须始终掌握软件的内容和行为，以便达到满意的演化效果。</li><li>功能持续增加法则。在软件的生命周期中，软件功能必须持续增加，否则用户的满意度会降低。</li><li>质量衰减法则。如果没有严格的维护和适应性调整使之适应运行环境的变化，软件的质量会逐渐衰减。</li><li>反馈系统法则。软件演化过程是由多层次、多循环、多主体的反馈系统组成，而且要想在任何合理的基础上达到有意义的改进就必须这样进行处理。</li></ol><p>软件维护是软件工程中最消耗资源的活动，很多软件公司中软件维护的成本已经达到了整个软件生存周期资源的40%到70%，甚至达到了90%</p><p>大多数软件在设计时没有考虑到将来的修改问题，常常还伴有开发人员变动频繁、文档不够详细、维护周期过长等等问题</p><h3 id="维护类型"><a href="#维护类型" class="headerlink" title="维护类型"></a>维护类型</h3><p><img src="/imgs/se/194.png" alt="image-20231214162404530"></p><ul><li>纠错性维护（Corrective maintenance）<ul><li>由于软件中的缺陷引起的修改</li></ul></li><li>完善性维护（Perfective maintenance）<ul><li>根据用户在使用过程中提出的一些建设性意见而进行的维护活动</li></ul></li><li>适应性维护（Adaptive maintenance）<ul><li>为适应环境的变化而修改软件的活动</li></ul></li><li>预防性维护（Preventive maintenance）<ul><li>为了进一步改善软件系统的可维护性和可靠性，并为以后的改进奠定基础</li></ul></li></ul><h3 id="维护的技术问题"><a href="#维护的技术问题" class="headerlink" title="维护的技术问题"></a>维护的技术问题</h3><ul><li>有限理解（Limited understanding），对他人开发软件进行维护时，如何快速理解程序并找到需要修改或纠错的地方？</li><li>在软件维护过程中需要大量的回归测试，耗时耗力。</li><li>当软件非常关键以致不能停机时，如何进行在线维护而不影响软件的运行？</li><li>影响分析，如何对现有软件的变更所进行的全面分析？</li><li>如何在开发中促进和遵循软件的可维护性？<ul><li>易分析性（Analyzability）</li><li>易改变性（Changeability）</li><li>稳定性（Stability）</li><li>易测试性（Testability）</li></ul></li></ul><h3 id="维护成本"><a href="#维护成本" class="headerlink" title="维护成本"></a>维护成本</h3><ul><li><p>维护的工作可划分成：</p><ul><li>生产性活动如，分析评价、修改设计、编写程序代码等</li><li>非生产性活动如，程序代码功能理解、数据结构解释、接口特点和性能界限分析等</li></ul></li><li><p>维护工作量的模型<br>$$<br>M &#x3D; p + Ke ^{c-d}<br>$$</p><ul><li>M：维护的总工作量；</li><li>P：生产性工作量；</li><li>K：经验常数；</li><li>e: 软件的规模；</li><li>c：复杂程度；</li><li>d：维护人员对软件的熟悉程度</li></ul></li></ul><h3 id="影响维护成本的因素"><a href="#影响维护成本的因素" class="headerlink" title="影响维护成本的因素"></a>影响维护成本的因素</h3><ul><li>操作环境：硬件和软件<ul><li>软件的规模越大、复杂性越高、年龄越大，硬件的能力越低，软件维护的成本和工作量就越大。</li></ul></li><li>组织环境：策略、竞争力、过程、产品和个人<ul><li>软件开发过程和维护过程越规范，采用的设计方法和编程语言模块化程度越高，工程师对软件的熟悉程度越高、能力越强，产品的可靠性和安全性要求越低，软件维护的成本和工作量就越小。</li></ul></li></ul><h3 id="维护过程"><a href="#维护过程" class="headerlink" title="维护过程"></a>维护过程</h3><p><img src="/imgs/se/195.png" alt="image-20231214163415922"></p><h3 id="软件维护技术"><a href="#软件维护技术" class="headerlink" title="软件维护技术"></a>软件维护技术</h3><p><img src="/imgs/se/196.png" alt="image-20231214163700760"></p><h4 id="程序理解"><a href="#程序理解" class="headerlink" title="程序理解"></a>程序理解</h4><ul><li>软件维护的总工作量大约一半被用在理解程序上。</li><li>程序理解通过提取并分析程序中各种实体之间的关系，形成系统的不同形式和层次的抽象表示，完成程序设计领域到应用领域的映射。</li><li>程序员在理解程序的过程中，经常通过反复三个活动──阅读关于程序的文档，阅读源代码，运行程序来捕捉信息。</li><li>程序理解工具<ul><li>基于程序结构的可视化工具，通过分析程序的结构，抽取其中各种实体，使用图形表示这些实体和它们之间的关系，可以直观地为维护者提供不同抽象层次上的信息。</li><li>帮助维护者导航浏览源代码，为浏览工作提供着眼点，缩小需要浏览的代码范围。</li></ul></li></ul><h4 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h4><ul><li>逆向工程是分析软件，识别出软件的组成成份及其相互的关系，以更高的抽象层次来刻画软件的过程，它并不改变软件本身，也不产生新的软件。</li><li>逆向工程主要分为以下几类:<ul><li>重新文档化（redocumentation）：分析软件，改进或提供软件新的文档。</li><li>设计恢复（design recovery）：从代码中抽象出设计信息；</li><li>规约恢复（specification recovery）：分析软件，导出需求规约信息；</li><li>重构（refactoring, restructuring）：在同一抽象级别上转换软件描述形式，而不改变原有软件的功能；</li><li>数据逆向工程（data reverse engineering）：从数据库物理模式中获取逻辑模式，如实体关系图。</li></ul></li></ul><h4 id="再工程"><a href="#再工程" class="headerlink" title="再工程"></a>再工程</h4><p>再工程是在逆向工程所获信息的基础上修改或重构已有的软件，产生一个新版本的过程，它将逆向工程、重构和正向工程组合起来，将现存系统重新构造为新的形式。</p><p><img src="/imgs/se/197.png" alt="image-20231219160918867"></p><h2 id="软件项目管理"><a href="#软件项目管理" class="headerlink" title="软件项目管理"></a>软件项目管理</h2><p><img src="/imgs/se/198.png" alt="image-20231219163812372"></p><p><img src="/imgs/se/199.png" alt="image-20231219163905998"></p><p><img src="/imgs/se/200.png" alt="image-20231219163950323"></p><p><img src="/imgs/se/201.png" alt="image-20231219164016570"></p><p>失败的六拍</p><ul><li>老板拍脑袋决策，想出新的需求；</li><li>老板拍拍项目经理的肩膀：此项目非君莫属</li><li>项目经理高兴了，拍拍胸脯：此事包在我身上</li><li>几个月后，任务没完成，老板拍桌子发火</li><li>项目经理一看情况不妙，拍屁股走人</li><li>老板拍大腿后悔，早知如此，何必当初</li></ul><h3 id="项目管理体系知识PMBOK"><a href="#项目管理体系知识PMBOK" class="headerlink" title="项目管理体系知识PMBOK"></a>项目管理体系知识PMBOK</h3><ul><li>项目管理的知识体系（Project Management Body of Knowledge，PMBOK），是美国项目管理学会（PMI）对项目管理所需的知识、技能和工具进行的概括性描述。</li><li>第1版1996年提出，目前最新版本为2012年第5版</li><li>核心内容<ul><li>五大过程组：启动，计划，执行，控制和收尾</li><li>十大知识域：范围管理、人力资源管理、采购管理、时间<br>管理、风险管理、沟通管理、费用管理、质量管理、干系<br>人管理、整合管理</li></ul></li><li>PMI项目管理专业人员资格认证PMP</li><li>ISO以PMBOK为框架制订了ISO10006标准</li><li>中国项目管理委员会（PMRC）参考PMBOK于2002年推出了C-PMBOK</li></ul><h4 id="PMBOK十大知识领域"><a href="#PMBOK十大知识领域" class="headerlink" title="PMBOK十大知识领域"></a>PMBOK十大知识领域</h4><p><img src="/imgs/se/202.png" alt="image-20231219164244748"></p><h4 id="PRINCE2"><a href="#PRINCE2" class="headerlink" title="PRINCE2"></a>PRINCE2</h4><p>后面看ppt就好了，没啥重要的</p><h2 id="软件项目计划"><a href="#软件项目计划" class="headerlink" title="软件项目计划"></a>软件项目计划</h2><h3 id="项目计划概述"><a href="#项目计划概述" class="headerlink" title="项目计划概述"></a>项目计划概述</h3><p>制订计划：</p><ul><li>定义软件开发过程</li><li>软件估算</li><li>安排进度，确定里程碑</li><li>分配资源，商讨承诺</li><li>支持计划<ul><li>质量计划、风险管理计划、沟通计划、配置计划、组织计划、采购计划</li></ul></li></ul><p><img src="/imgs/se/203.png" alt="image-20231219164929461"></p><p><img src="/imgs/se/204.png" alt="image-20231219165013755"></p><p><img src="/imgs/se/205.png" alt="image-20231219165044223"></p><p><img src="/imgs/se/206.png" alt="image-20231219165919673"></p><h3 id="进度安排"><a href="#进度安排" class="headerlink" title="进度安排"></a>进度安排</h3><ul><li>建立PERT图或网络图，确定关键路径，即决定项目开发时间的任务链。</li><li>根据每个活动的工期估算值设置时间窗口（将节假日等非工作日除外）。</li><li>考虑时间缓冲，按工期的百分比或固定时间。</li><li>对活动时序关系设定Lead和Lag。</li></ul><p>备注：进度安排和人员分配常常同时进行，相互影响</p><h4 id="PERT图"><a href="#PERT图" class="headerlink" title="PERT图"></a>PERT图</h4><p><img src="/imgs/se/207.png" alt="image-20231219170023632"></p><h4 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h4><p><img src="/imgs/se/208.png" alt="image-20231219170436507"></p><h4 id="项目计划Gantt图"><a href="#项目计划Gantt图" class="headerlink" title="项目计划Gantt图"></a>项目计划Gantt图</h4><p><img src="/imgs/se/209.png" alt="image-20231219170714651"></p><h3 id="人员分配"><a href="#人员分配" class="headerlink" title="人员分配"></a>人员分配</h3><p><img src="/imgs/se/210.png" alt="image-20231219170806887"></p><h4 id="两条定律"><a href="#两条定律" class="headerlink" title="两条定律"></a>两条定律</h4><p>人员-时间权衡定律<br>$$<br>\mathrm{E&#x3D;<del>a</del>&#x2F;<del>(T_d)</del>^b}<br>$$<br>Brooks定律<br>向一个已经延晚的项目追加开发人员，可能使它完成得更晚</p><h4 id="人力资源分配原则"><a href="#人力资源分配原则" class="headerlink" title="人力资源分配原则"></a>人力资源分配原则</h4><ul><li>考虑人员的技术水平、专业、人数</li><li>考虑在开发过程各阶段中对各种人员的需要</li><li>尽早落实责任</li><li>减少接口</li><li>责权均衡</li></ul><h4 id="资源负荷和资源平衡"><a href="#资源负荷和资源平衡" class="headerlink" title="资源负荷和资源平衡"></a>资源负荷和资源平衡</h4><ul><li>资源负荷是指在项目特定时间段现有计划中个体资源的负荷</li><li>资源平衡是指通过资源调配、延迟任务等方式来解决资源冲突问题</li></ul><p><img src="/imgs/se/211.png" alt="image-20231219225433510"></p><h3 id="项目计划变更管理"><a href="#项目计划变更管理" class="headerlink" title="项目计划变更管理"></a>项目计划变更管理</h3><p><img src="/imgs/se/212.png" alt="image-20231219225509461"></p><ul><li>需求变化</li><li>资源变化</li><li>技术难题</li><li>计划细化</li><li>估算失误</li></ul><p><img src="/imgs/se/213.png" alt="image-20231219225614109"></p><h3 id="项目跟踪与监控"><a href="#项目跟踪与监控" class="headerlink" title="项目跟踪与监控"></a>项目跟踪与监控</h3><ul><li><p>进度监控</p></li><li><p>范围监控</p></li><li><p>质量监控</p></li><li><p>费用监控</p></li><li><p>风险监控</p></li><li><p>变更控制</p></li><li><p>团队管理</p></li><li><p>合同管理</p></li><li><p>信息收集技术</p><ul><li>会议、交谈</li><li>报告</li><li>软件工具</li></ul></li><li><p>信息分析技术</p><ul><li>偏差分析</li><li>趋势预测</li><li>度量</li><li>获得值分析&#x2F;挣值分析（Earned Value Analysis）</li></ul></li></ul><h2 id="质量管理"><a href="#质量管理" class="headerlink" title="质量管理"></a>质量管理</h2><h3 id="软件质量管理概述"><a href="#软件质量管理概述" class="headerlink" title="软件质量管理概述"></a>软件质量管理概述</h3><ul><li><p>ANSI&#x2F;IEEE Std 729-1983定义“与软件产品满足规定的和隐含的需求的能力有关的特征或特性的全体”。</p></li><li><p>M.J. Fisher 定义“所有描述计算机软件优秀程度的特性的组合”。</p></li><li><p>明确声明的功能和性能需求、明确文档化过程的开发标准、以及专业人员开发的软件所应具有的所有隐含特征都得到满足。</p><ul><li>软件需求是进行质量度量的基础，与需求不符就是质量不合格</li><li>指定的标准定义了一组指导软件开发的准则，如果不能遵照这些准则，就极有可能导致质量不好</li><li>通常有一组隐含需求是不被提及的，如易维护性，如果软件符合了明确的需求却没有满足隐含需求，软件质量仍然值得怀疑</li></ul></li></ul><h4 id="软件的质量属性"><a href="#软件的质量属性" class="headerlink" title="软件的质量属性"></a>软件的质量属性</h4><p>质量的三种视角：内部、外部、和使用质量</p><p><img src="/imgs/se/214.png" alt="image-20231219230254632"></p><h4 id="外部和内部质量模型"><a href="#外部和内部质量模型" class="headerlink" title="外部和内部质量模型"></a>外部和内部质量模型</h4><p><img src="/imgs/se/215.png" alt="image-20231219230331644"></p><h4 id="使用质量的模型"><a href="#使用质量的模型" class="headerlink" title="使用质量的模型"></a>使用质量的模型</h4><p><img src="/imgs/se/216.png" alt="image-20231219230404232"></p><h4 id="质量成本"><a href="#质量成本" class="headerlink" title="质量成本"></a>质量成本</h4><ul><li>预防成本：使项目的差错保持在一个可接受范围内的成本，如培训、分包商评定等</li><li>评估成本：评估产品或服务的成本。如产品检查、评审或测试、处理和报告测试数据</li><li>内部故障成本：在客户收到产品之前，纠正已识别出的一个缺陷所引起的成本</li><li>外部故障成本：为产品交付顾客之后发现的缺陷而支付的成本。如顾客抱怨处理、讼案、未来商务机会丧失</li><li>测量和测试设备成本</li></ul><h4 id="软件质量管理"><a href="#软件质量管理" class="headerlink" title="软件质量管理"></a>软件质量管理</h4><ul><li>ISO9000：质量计划、质量控制、质量保证、质量改进。</li><li>ISO12207和SWEBOK ：软件质量保证、验证和确认、软件评审、软件审核、配置管理。</li><li>SQuBOK ：从组织级和项目级进行质量管理。</li></ul><p><img src="/imgs/se/217.png" alt="image-20231219230543789"></p><h4 id="软件质量计划"><a href="#软件质量计划" class="headerlink" title="软件质量计划"></a>软件质量计划</h4><ul><li>是软件项目计划的子计划</li><li>内容：<ul><li>质量目标</li><li>开展质量活动的质量标准、方法、规程和工具</li><li>验证、确认、评审、测试、审核、问题解决等质量活动和任务的安排</li><li>开展质量活动的资源、日程和职责</li><li>质量记录的标识、收集、归档、维护和处理的规程</li></ul></li></ul><h4 id="验证和确认的使用"><a href="#验证和确认的使用" class="headerlink" title="验证和确认的使用"></a>验证和确认的使用</h4><p><img src="/imgs/se/218.png" alt="image-20231219230957731"></p><h4 id="软件质量管理技术"><a href="#软件质量管理技术" class="headerlink" title="软件质量管理技术"></a>软件质量管理技术</h4><p><img src="/imgs/se/219.png" alt="image-20231219231035098"></p><h3 id="软件评审"><a href="#软件评审" class="headerlink" title="软件评审"></a>软件评审</h3><p><img src="/imgs/se/220.png" alt="image-20231219231318915"></p><h4 id="评审方法"><a href="#评审方法" class="headerlink" title="评审方法"></a>评审方法</h4><ul><li>审查</li><li>小组评审</li><li>走查</li><li>结对编程</li><li>同级桌查</li><li>轮查</li><li>临时评审</li></ul><h5 id="审查"><a href="#审查" class="headerlink" title="审查"></a>审查</h5><ul><li>最系统化、最严密的评审技术</li><li>被认为是软件工业中最实用的、最有效的评审方法</li><li>严格定义的审查过程，明确的分工<ul><li>审查组长、读者、审查者</li><li>作者、记录员</li></ul></li></ul><h5 id="小组评审"><a href="#小组评审" class="headerlink" title="小组评审"></a>小组评审</h5><ul><li>评审过程<ul><li>计划、准备、开会、返工</li></ul></li><li>作者或评审组长主持会议</li><li>读者这个角色被省略了，改由评审组长询问其他评审者这一部分是否有问题</li><li>使用记录员</li><li>使用缺陷检查表</li></ul><h5 id="走查walkthrough"><a href="#走查walkthrough" class="headerlink" title="走查walkthrough"></a>走查walkthrough</h5><ul><li>评审过程<ul><li>计划、开会、返工</li></ul></li><li>作者主持会议，起主导作用，陈述产品</li><li>常用走查方法<ul><li>使用一些样品数据一步步执行一个模块，和同事一道检查以确保正确的逻辑和行为。</li><li>使用交互式调试器</li><li>按脚本执行，脚本描述了一项具体的任务或场景，用以说明系统如何在用户会话中发挥功能</li></ul></li></ul><h5 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h5><ul><li>极值编程XP中的一个实践</li><li>两个开发者在一个工作站上同时编写同一个程序，进行实时的、持续的、非正式的评审。司机和搭档的角色还要不时地交换。</li><li>由于搭档的实时评审，结对者可以迅速纠正错误。快速的迭代能使设计和程序更加强壮。</li><li>结对编程技术除了能应用于编码，还能应用需求、设计、测试等文档。</li></ul><h5 id="同级桌查"><a href="#同级桌查" class="headerlink" title="同级桌查"></a>同级桌查</h5><ul><li>在两次编译之间仔细地检查源代码以保证程序正确执行，这就是桌查。桌查是PSP的组成部分,是一种自评审，不属于同级评审。</li><li>在同级桌查中，除作者外的一位评审者对工作产品进行检查。评审者可以和作者坐在一起讨论，也可以独立检查。</li><li>评审完成后，评审者把错误表交给作者，或者两人一起坐下来共同准备错误表，或者简单地将做过标记的工作产品交给作者。</li><li>要寻找一位足够专业且值得信赖的人担任评审者。</li></ul><h5 id="轮查"><a href="#轮查" class="headerlink" title="轮查"></a>轮查</h5><ul><li>轮查是由多人组成的并行同级桌查</li><li>轮查有助于缓和同级桌查的两个主要风险<ul><li>评审者不能及时提供反馈</li><li>评审效果太糟</li></ul></li></ul><h5 id="合适的评审方法"><a href="#合适的评审方法" class="headerlink" title="合适的评审方法"></a>合适的评审方法</h5><p><img src="/imgs/se/221.png" alt="image-20231219231801856"></p><h4 id="审查过程"><a href="#审查过程" class="headerlink" title="审查过程"></a>审查过程</h4><p><img src="/imgs/se/222.png" alt="image-20231219231836886"></p><h5 id="受审查的工件"><a href="#受审查的工件" class="headerlink" title="受审查的工件"></a>受审查的工件</h5><ul><li>项目计划</li><li>需求规格说明书</li><li>概要设计、详细设计</li><li>系统测试计划、用例和报告</li><li>代码等</li></ul><h5 id="审查的规划"><a href="#审查的规划" class="headerlink" title="审查的规划"></a>审查的规划</h5><ul><li>审查组长判断是否已满足审查的进入标准</li><li>作者和审查组长协同对审查进行规划，确定审查员和时间进度</li><li>审查会议效率：每小时4~6页</li><li>审查人员不超过7人或者更少</li><li>审查人员可以是开发人员、测试人员、项目经理、用户等</li></ul><h5 id="评审小组人数对效率的影响"><a href="#评审小组人数对效率的影响" class="headerlink" title="评审小组人数对效率的影响"></a>评审小组人数对效率的影响</h5><p><img src="/imgs/se/223.png" alt="image-20231219232022445"></p><h5 id="进入审查的标准"><a href="#进入审查的标准" class="headerlink" title="进入审查的标准"></a>进入审查的标准</h5><ul><li>文档符合标准模板</li><li>文档已经做过拼写检查和语法检查</li><li>作者已经检查了文档在版面安排上所存在的错误</li><li>已经获得了审查员所需要的先前或参考文档</li><li>在文档中打印了行序号以方便在审查中对特定位置的查阅</li><li>所有未解决的问题都被标记为TBD（待确定）</li><li>包括了文档中使用到的术语词汇表</li></ul><h5 id="审查的准备"><a href="#审查的准备" class="headerlink" title="审查的准备"></a>审查的准备</h5><ul><li>将需求说明书等到交给每位审查员</li><li>每个审查员以审查清单为指导，检查文档可能出现的错误，并提出问题</li><li>75%的错误是在准备阶段发现的</li></ul><h5 id="审查会议"><a href="#审查会议" class="headerlink" title="审查会议"></a>审查会议</h5><ul><li>参加人员：审查组长、作者、记录员、审查人员（选其中一个为读者）</li><li>每次会议不超过2小时</li><li>审查目标：尽可能多地发现问题，而不是解决问题</li><li>递交：会议记录（问题和缺陷）、审查结论</li></ul><h5 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h5><p>由作者根据审查发现的问题，重写文档</p><h5 id="重审"><a href="#重审" class="headerlink" title="重审"></a>重审</h5><ul><li>由审查组长或指派人单独重审由作者重写的文档，确保所有问题得到解决，所有错误得到修改。</li><li>由审查组长判断：是否已满足审查的退出标准</li></ul><h5 id="退出审查的标准"><a href="#退出审查的标准" class="headerlink" title="退出审查的标准"></a>退出审查的标准</h5><ul><li>已经明确阐述了审查员提出的所有问题</li><li>已经正确修改了文档</li><li>修订过的文档已经进行了拼写检查和语法检查</li><li>所有TBD的问题已经全部解决，或者已记录下每个待确定问题的解决过程，目标日期和提出问题的人</li><li>文档已经登记入项目的配置管理系统</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构笔记</title>
      <link href="/2023/09/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><ul><li>IO原理</li><li>存储层次</li><li>流水线并行计算的原理</li></ul><h2 id="计算机系统结构概念"><a href="#计算机系统结构概念" class="headerlink" title="计算机系统结构概念"></a>计算机系统结构概念</h2><h3 id="计算机系统结构"><a href="#计算机系统结构" class="headerlink" title="计算机系统结构"></a>计算机系统结构</h3><p>$系统效率&#x3D;min(器件速度)*min(系统结构效率)$</p><p>计算机体系结构是软件设计者与硬件设备设计者（VLSI）之间的中间层，是软件与硬件的接口（Interface）</p><p>程序员可见的计算系统的属性。包括：概念性的结构和功能行为（外特性）。不包括：数据流和控制流的组织、逻辑设计以及物理实现</p><h3 id="结构特性"><a href="#结构特性" class="headerlink" title="结构特性"></a>结构特性</h3><h4 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h4><p><img src="/imgs/ca/1.png" alt="image-20230919141845531"></p><p>分层带来的透明性</p><h3 id="系统结构内容"><a href="#系统结构内容" class="headerlink" title="系统结构内容"></a>系统结构内容</h3><p>指令系统、数据表示、寻址方式、寄存器组织、存储系统、终端机构、IO结构、及其工作状态定义切换、信息保护</p><h3 id="计算机体系结构的分类"><a href="#计算机体系结构的分类" class="headerlink" title="计算机体系结构的分类"></a>计算机体系结构的分类</h3><ol><li><p>按处理机性能分类</p><ul><li><p>按大小划分</p><p>巨型、大型、中型、小型、微型机</p></li><li><p>按用途划分</p><p><strong>科学计算、事务处理、实时控制、工作站、服务器、家用计算机</strong></p></li><li><p>按数据类型划分</p><p>定点计算机、浮点计算机、向量计算机、堆栈计算机</p></li><li><p>按处理机个数和种类划分</p><p>单处理机</p><p>并行处理机、多处理机、分布处理机</p><p>关联处理机</p><p>超标量处理机, 超流水线处理机, VLIW处理机</p><p>SMP(对称多处理机)、MPP(大规模并行处理机)、机群(Cluster)系统</p></li><li><p>使用器件划分</p><p>第一代：电子管(Valve)计算机</p><p>第二代：晶体管(Transistor)计算机</p><p>第三代：集成电路(LSI)计算机</p><p>第四代：大规模集成电路(VLSI)计算机</p><p>第五代：智能计算机</p></li></ul></li><li><p>按“流”分类：Flynn分类法</p><ul><li><p>概念</p><p>指令流（Instruction Stream）：机器执行的<strong>指令序列</strong>；</p><p>数据流（Data stream）：由指令处理的<strong>数据序列</strong>；</p><p>多倍性（Multiplicity）：在系统最窄的部件上，处于<strong>同一执行阶段</strong>的指令和数据的最大可能个数。</p></li><li><p>基本模块</p><p>MM（Memory Module）：内存模块</p><p>PU（Process Unit）：处理单元</p><p>CU（Control Unit）：控制单元</p></li><li><p>指令流和数据流的个数</p><ul><li><p>单指令流单数据流SISD</p><p><img src="/imgs/ca/2.png" alt="image-20230919151309716"></p></li><li><p>单指令流多数据流SIMD</p><p><img src="/imgs/ca/3.png" alt="1695107777668"></p></li><li><p>多指令流单数据流MISD</p><p><img src="/imgs/ca/4.png" alt="1695107968627"></p><ul><li>没有MISD计算机的原因之一：通常PU用于处理简单数据，一般没有多个简单数据需要一组相同处理的需求，<strong>没有存在的需求基础</strong></li><li>没有MISD计算机的原因之二：如果把PU用于处理复杂数据（向量、矩阵等），一方面<strong>MISD已经变成了MIMD</strong>，另一方面，相对于<strong>SIMD性能价格比较低</strong></li><li>没有MISD计算机的原因之三：适合MISD实现的应用都可以使用其它结构实现，没有存在的必然性，<strong>因为任何复杂数据都可以分解为简单数据</strong>。</li></ul></li><li><p>多指令流多数据流MIMD</p><p><img src="/imgs/ca/5.png" alt="1695108484531"></p></li></ul></li><li><p>主要缺点</p><ul><li>分类太粗</li><li>把两个不同等级的功能并列对待</li><li>没有非冯计算机的分类</li></ul></li></ul></li><li><p>库克分类法</p><p>按控制流和执行流分类</p><ul><li><p>单指令流单执行流SISE</p></li><li><p>单指令流多执行流SIME</p><p>多功能部件处理机、相联处理机、向量处理机、流水线处理机、超流水线处理机、超标量处理机、SIMD并行处理机</p></li><li><p>多指令流单执行流MISE</p></li><li><p>多指令流多执行流MIME</p></li></ul><p>缺点：</p><p>有些系统如分布处理机等，没有总控制器</p><p>分类级别太低，没有处理机级和机器级</p><p>分类太粗，如SIME中包含了多种处理机</p></li><li><p>最大并行度分类：冯氏分类法</p><p>最大并行度$P_m$是指一个系统在单位时间内能够处理的最多的二进制位数，显然这是一个完全由计算机硬件结构决定的参数</p><p><strong>最大并行度的数值越大越好</strong></p><p><img src="/imgs/ca/6.png" alt="image-20230926143105299"></p><ul><li>字串位串WSBS：n&#x3D;1，m&#x3D;1 全串行</li><li>字并位串WPBS：n&gt;1，m&#x3D;1 并行单处理机</li><li>字串位并WSBP：n&#x3D;1，m&gt;1 每处理机只一位，但有多个字处理机并行运用</li><li>字并位并WPBP：n&gt;1，m&gt;1</li></ul><p>如果在一个时钟周期$\Delta t_i$内实际处理的二进制位数为$P_i$，那么在$T$个时钟周期内的平均并行度$P_a$ 就为：<br>$$<br>P_a&#x3D;(\sum_{i&#x3D;1}^T P_i)&#x2F;T<br>$$<br>把平均并行度与最大并行度之比称为平均利用率，用$\mu$表示为：<br>$$<br>\mu&#x3D;P_a&#x2F;P_m&#x3D; \frac{\sum_{i&#x3D;1}^TP_i}{T \cdot P_m}<br>$$</p></li><li><p>按“并行集”和“流水线”分类：$Handler$表示法</p><p>根据可并行和流水处理的程度，将硬件分成三个层次：</p><ul><li>程序控制部件（PCU）的个数$k$</li><li>算术逻辑部件（ALU）或处理部件（PE）的个数$k$</li><li>每个算逻部件包含基本逻辑线路（ECL）的套数$w$</li></ul><p>每一个计算机系统都可以用上述三个参数表示其结构特征，即：<br>$$<br>t(系统型号)&#x3D;(k,d,w)<br>$$<br>更细致的表达：<br>$$<br>t(系统型号)&#x3D;(k \times k’,d \times d’,w \times w’)<br>$$<br>$k’$表示宏流水线中程序控制部件的个数；</p><p>$d’$表示指令流水线中算术逻辑部件的个数；</p><p>$w’$表示操作流水线中基本逻辑线路的套数</p></li><li><p>按控制方式分类</p><p>控制流方式：顺序执行（冯·诺伊曼型）</p><p>数据流方式：操作数到位即可运算，无序执行</p><p>规约方式：驱动方式与数据流相反</p><p>匹配方式：非数值型应用，主要对象为符号</p></li><li><p>按系统结构风格分类</p><p>面向堆栈型、面向寄存器型、面向对象型</p></li></ol><h3 id="系统结构设计"><a href="#系统结构设计" class="headerlink" title="系统结构设计"></a>系统结构设计</h3><h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><ol><li><p>由上向下方法</p><p>适合于专用机的设计，从应用到实现级，周期几年。</p><p>缺点：当应用对象或范围变化时，效率急剧下降。</p><p>原因：软、硬件脱节，不能利用最新的软件技术。</p></li><li><p>由下向上方法</p><p>前提：硬件不能改变。</p><p>缺点：易形成软、硬脱节，软件不能获得最新硬件的支持，结果软件繁杂、效率低。</p></li><li><p>从中间开始</p><p>从软、硬件交界面开始设计。</p><p>要求首先进行软、硬件功能分配，同时考虑硬件能为软件提供什么支持。</p><p>优点：避免软、硬件脱节，设计周期短，有利于优化设计。</p><p> 缺点：对设计人员要求较高，要求具有有效的软件设计环境和开发工具，便于分析、评价和设计。</p></li></ol><h4 id="设计步骤"><a href="#设计步骤" class="headerlink" title="设计步骤"></a>设计步骤</h4><ol><li>需求分析</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记</title>
      <link href="/2023/09/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="ML框架"><a href="#ML框架" class="headerlink" title="ML框架"></a>ML框架</h3><p><img src="/imgs/ml/1.png" alt="image-20230913084005731"></p><h3 id="types-of-learning-problems"><a href="#types-of-learning-problems" class="headerlink" title="types of learning problems"></a>types of learning problems</h3><ul><li>监督学习</li><li>无监督学习<ul><li>自监督学习</li></ul></li><li>半监督学习</li><li>迁移学习</li><li>主动学习</li><li>强化学习</li><li>元学习</li></ul><h2 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h2><h3 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h3><ul><li><p><strong>输入特征</strong></p><p>$x^{(i)} \in R^{n+1},i&#x3D;1,2,···,m$</p></li><li><p><strong>输出</strong></p><p>$y^{(i)} \in R$</p></li><li><p><strong>参数</strong></p><p>$\theta &#x3D; R^{n+1}$</p></li><li><p>假设$h_{\theta}(x):R^{n+1} \to R$</p></li><li><p><strong>损失函数</strong></p><p>$\ell :R \times R \to R_+$</p><p>满足</p><ul><li>非负：不存在负损失</li><li>如果预测结果$h_{\theta}(x)$与给定的y差别小，则损失小，反之则损失大</li></ul><p>平方损失：</p><p>$\ell(h_{\theta}(x),y)&#x3D;(h_{\theta}(x)-y)^2$</p></li></ul><h4 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a><strong>三要素</strong></h4><ul><li><p>假设：$h_{\theta}(x)&#x3D; \theta_0+\theta_1x$，其中参数为$\theta_0,\theta_1$</p></li><li><p>目标函数：</p><p>$J\left(\theta_0, \theta_1\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m \ell\left(h_\theta\left(x^{(i)}\right), y^{(i)}\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m\left(h_\theta\left(x^{(i)}\right)-y^{(i)}\right)^2$</p></li><li><p>优化算法：给定训练集，如何找到最优的参数$\theta$使得<br>$$<br>\min _{\theta_0, \theta_1} J\left(\theta_0, \theta_1\right)<br>$$</p></li><li><p><strong>参数优化</strong></p><p>找到最优的参数$\theta^*&#x3D;arg~ \min_{\theta} J(\theta)$</p><ul><li>穷举所有$\theta$</li><li>随机搜索</li><li>梯度下降</li></ul></li></ul><h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a><strong>梯度下降</strong></h4><p>  repeat until convergence{</p><p>  $\theta_j:&#x3D;\theta_j-\alpha \frac{\partial}{\partial \theta_j} J\left(\theta_0, \theta_1\right) \quad($ for $j&#x3D;0$ and $j&#x3D;1)$</p><p>  }</p><ul><li><p><strong>梯度</strong>：<br>$$<br>\nabla_\theta f(\theta) \in \mathbb{R}^n&#x3D;\left[\begin{array}{c}<br>\frac{\partial f(\theta)}{\partial \theta_1} \<br>\frac{\partial f(\theta)}{\partial \theta_2} \<br>\vdots \<br>\frac{\partial f(\theta)}{\partial \theta_n}<br>\end{array}\right]<br>$$<br>梯度下降算法的另一种表述：<br>$$<br>Repeat:~\theta&#x3D;\theta-\alpha \nabla_{\theta}f(\theta)<br>$$</p></li><li><p>单变量线性回归模型的梯度下降</p><p>repeat until convergence:<br>$$<br>\theta_0&#x3D;\theta_0-\alpha \frac{1}{m} \sum_{i&#x3D;1}^{m}(h_\theta(x^{(i)})-y^{(i)})\<br>\theta_1&#x3D;\theta_1-\alpha \frac{1}{m} \sum_{i&#x3D;1}^{m}(h_\theta(x^{(i)})-y^{(i)}) \cdot x^{(i)}<br>$$</p></li></ul><h3 id="多特征（变量）"><a href="#多特征（变量）" class="headerlink" title="多特征（变量）"></a>多特征（变量）</h3><h4 id="三要素-1"><a href="#三要素-1" class="headerlink" title="三要素"></a>三要素</h4><ul><li>假设：$h_\theta(x)&#x3D;\theta_0 x_0+\theta_1 x_1+\theta_2 x_2+\cdots+\theta_n x_n, x_0&#x3D;1$</li><li>参数：$\theta_0,\theta_1,\dots,\theta_n$</li><li>目标函数：$J\left(\theta_0, \theta_1, \cdots, \theta_n\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m \ell\left(h_\theta\left(x^{(i)}\right), y^{(i)}\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m\left(h_\theta\left(x^{(i)}\right)-y^{(i)}\right)^2$</li></ul><h4 id="梯度下降-1"><a href="#梯度下降-1" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>repeat until convergence:<br>$$<br>\theta_j:&#x3D;\theta_j-\alpha \frac{\partial}{\partial \theta_j} J\left(\theta_0, \theta_1,\dots,\theta_n\right)~~j&#x3D;0,1,\dots,n<br>$$</p><h4 id="特征尺度归一化"><a href="#特征尺度归一化" class="headerlink" title="特征尺度归一化"></a>特征尺度归一化</h4><ul><li><p>范围归一化：使得每个特征尽量接近某个范围，如$0 \le x_i \le 1$</p></li><li><p>零均值归一化：用$x_i-\mu_i$替代$x_i$，即$x_i- \mu_i \to x_i$，其中$\mu_i&#x3D;\frac{1}{m} \sum_{i&#x3D;1}^{m} x_i$为均值</p></li><li><p>零均值+范围归一化</p></li><li><p>零均值单位方差归一化：<br>$$<br>\frac{x_i- \mu_i}{\sigma_i} \to x_i<br>$$</p></li></ul><h4 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h4><p>梯度下降$\theta_j:&#x3D;\theta_j-\alpha \frac{\partial}{\partial \theta_j} J\left(\theta \right)$</p><p>收敛条件$\Delta J(\theta) \le 10^{-3}$</p><p>自动收敛测试</p><ul><li>对于足够小的$\alpha,J(\theta)$应该在每一次迭代中减小</li><li>如果$\alpha$太小，梯度下降算法收敛速度慢</li><li>反之，梯度下降算法不会收敛、发散或者震荡</li></ul><h4 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h4><ul><li>对于求函数极小值问题，除了迭代方法之外，可以<strong>令函数的微分为零，然后求解方程</strong></li></ul><p>$$<br>\theta \in \mathbb{R}^{n+1},\<br>J\left(\theta_0, \theta_1, \cdots, \theta_n\right)&#x3D;\frac{1}{2 m} \sum_{i&#x3D;1}^m\left(h_\theta\left(x^{(i)}\right)-y^{(i)}\right)^2\<br>\nabla_\theta J(\theta)&#x3D;0<br>$$</p><p>解出$\theta_0,\theta_1,\dots,\theta_n$</p><p>考虑到求和需要进行循环，使用矩阵运算会有更小的时间复杂度</p><p>得到$J(\theta)&#x3D;\frac{1}{2m}(X\theta-y)^T(X\theta-y)$</p><p>则$\nabla_\theta J(\theta)&#x3D;\frac{1}{m}(X^TX\theta-X^Ty)&#x3D;0$</p><p>解出$\theta&#x3D;(X^TX)^{-1}X^Ty$</p><h4 id="梯度下降和正规方程的比较"><a href="#梯度下降和正规方程的比较" class="headerlink" title="梯度下降和正规方程的比较"></a>梯度下降和正规方程的比较</h4><p>m训练样本，n个特征</p><ul><li>梯度下降<ul><li>需要选择合适的$\alpha$</li><li>需要多次迭代</li><li>即使n很大效果也很好</li></ul></li><li>正规方程<ul><li>不需要选择$\alpha$</li><li>不需要迭代</li><li>需要计算$(X^TX)^{-1}$</li><li>n很大会导致求解很慢</li><li>矩阵不可逆时需要删减一些特征，或者进行正则化</li></ul></li></ul><h2 id="classification"><a href="#classification" class="headerlink" title="classification"></a>classification</h2><h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><p>目标：$0 \le h_\theta(x) \le 1$<br>$$<br>h_\theta(x)&#x3D;g(\theta^Tx)&#x3D;\frac{1}{1+e^{-\theta^Tx}}<br>$$</p><h4 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h4><p><img src="/imgs/ml/2.png" alt="image-20230927092917418"></p><h4 id="概率解释"><a href="#概率解释" class="headerlink" title="概率解释"></a>概率解释</h4><p>$$<br>h_\theta(x)&#x3D;g(\theta^Tx)&#x3D;\frac{1}{1+e^{-\theta^Tx}}<br>$$</p><p>$h_\theta(x)$对于输入x，输出y&#x3D;1的可能性</p><p>给出x，估计y&#x3D;1的可能性，$\theta$为参数<br>$$<br>P(y&#x3D;0|x;\theta)+P(y&#x3D;1|x;\theta)&#x3D;1<br>$$</p><h4 id="分类边界"><a href="#分类边界" class="headerlink" title="分类边界"></a>分类边界</h4><p>数形结合可知，$h_{\theta}(x)$形成的一个闭合曲线&#x2F;曲面作为一个分类边界<br>$$<br>h_{\theta}(x) \ge c \to y&#x3D;1<br>$$</p><p>$$<br>h_{\theta}(x) \lt c \to y&#x3D;0<br>$$</p><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>$$<br>P(y&#x3D;0|x;\theta)&#x3D;h_{\theta}(x)<br>$$</p><p>$$<br>P(y&#x3D;1|x;\theta)&#x3D;1-h_{\theta}(x)<br>$$</p><p>$$<br>p(y|x;\theta)&#x3D;(h_\theta(x))^y(1-h_\theta(x))^{1-y}<br>$$</p><p>$$<br>L(\theta)&#x3D;p(y|\mathbf{X};\theta)&#x3D;\prod_{i&#x3D;1}^m p(y^{(i)}|x^{(i)};\theta)&#x3D;\prod_{i&#x3D;1}^m (h_\theta(x^{(i)}))^{y^{(i)}}(1-h_\theta(x^{(i)}))^{1-y^{(i)}}<br>$$</p><p><strong>Logistic损失函数</strong><br>$$<br>\ell(\theta)&#x3D;-\log L(\theta)&#x3D;-\left[\sum_{i&#x3D;1}^m y^{(i)} \log h_\theta(x^{(i)})+(1-y^{(i)}) \log (1-h_\theta(x^{(i)})) \right]<br>$$<br><strong>cross entropy 交叉熵</strong><br>$$<br>H(p,q)&#x3D;-\sum_x p(x) \log q(x)<br>$$<br>通俗来说，$p(x)$是真实样本的分布，$q(x)$是预测样本的分布，cross entropy代表的是两个分布之间的距离，越小说明分布越接近，迭代过程中需要将ce降下来</p><p><strong>分类问题中常用</strong><br>$$<br>\operatorname{Cost}\left(h_\theta(x), y\right)&#x3D;\left{\begin{aligned}<br>-\log \left(h_\theta(x)\right) &amp; \text { if } y&#x3D;1 \<br>-\log \left(1-h_\theta(x)\right) &amp; \text { if } y&#x3D;0<br>\end{aligned}\right.<br>$$</p><h4 id="梯度下降-2"><a href="#梯度下降-2" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>$$<br>J(\theta)&#x3D;-\left[\sum_{i&#x3D;1}^m y^{(i)} \log h_\theta(x^{(i)})+(1-y^{(i)}) \log (1-h_\theta(x^{(i)})) \right]<br>$$</p><p>找到合适的参数$\theta$使得$\min_\theta J(\theta)$</p><p>repeat{<br>$$<br>\theta_j&#x3D;\theta_j-\alpha \frac{\partial}{\partial \theta_j}J(\theta)<br>$$<br>}</p><p>$\frac{\partial}{\partial \theta_j}J(\theta)&#x3D;(h_\theta(x)-y)x_j$</p><p>不可以直接使用线性回归中的平方损失函数</p><p><img src="/imgs/ml/3.png" alt="image-20231008163324478"></p><p>黑色的是cross entropy，红色的是square error</p><h4 id="Multi-class-Classification"><a href="#Multi-class-Classification" class="headerlink" title="Multi-class Classification"></a>Multi-class Classification</h4><p>$$<br>h_{\theta_i}&#x3D;P(y&#x3D;i|x;\theta_i),i&#x3D;1,2,3,…<br>$$</p><p>一对多</p><ul><li><p>为每类训练一个逻辑回归分类器$h_{\theta_i}(x)$用来预测$y&#x3D;i$的可能性</p></li><li><p>对于新输入$x$，做一个预测，选择一个类别$i^*$使得：<br>$$<br>i^*&#x3D;arg \max_i h_{\theta_i}(x)<br>$$</p></li></ul><h4 id="softmax-Regression"><a href="#softmax-Regression" class="headerlink" title="softmax Regression"></a>softmax Regression</h4><p>$$<br>p(y&#x3D;i|x;\theta)&#x3D;h_{\theta_i}(x)&#x3D;\frac{e^{z_i}}{\sum_{j&#x3D;1}^K e^{z_j}},z_j&#x3D;(\theta_i)^Tx<br>$$</p><p>对数似然为<br>$$<br>L(\theta)&#x3D;\sum_{i&#x3D;1}^{m} \log p(y^{(i)}|x^{(i)};\theta)&#x3D;\sum_{i&#x3D;1}^{m} \log (\frac{e^zy^{(i)}}{\sum_{j&#x3D;1}^K e^{z_j}})<br>$$<br>总损失为<br>$$<br>\ell(\theta)&#x3D;-L(\theta)&#x3D;-\sum_{i&#x3D;1}^{m} \log (\frac{e^zy^{(i)}}{\sum_{j&#x3D;1}^K e^{z_j}})&#x3D;\sum_{i&#x3D;1}^m \left[\log(\sum_{j&#x3D;1}^K e^{z_j})-z_{y^(i)}  \right]<br>$$</p><p>$$<br>\hat{y_i}&#x3D;h_{\theta_i}(x)<br>$$</p><h2 id="模型选择与正则化"><a href="#模型选择与正则化" class="headerlink" title="模型选择与正则化"></a>模型选择与正则化</h2><h3 id="偏差与方差"><a href="#偏差与方差" class="headerlink" title="偏差与方差"></a>偏差与方差</h3><p>偏差bias，方差variance<br>$$<br>bias(h(x))&#x3D;E[h(x)-y(x)]<br>$$</p><p>$$<br>var(h(x))&#x3D;E \lbrace h(x)-E[h(x)] \rbrace<br>$$</p><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><p>如果多项式阶数较大，训练得到的模型对于训练集能正确拟合$J(\theta)&#x3D;\frac{1}{2m}[h_\theta(x^{(i)}-y^{(i)})^2] \approx  0$，但是对于新的样本预测效果却不好</p><p>实际应用中容易出现过拟合</p><p>绘制这个模型的学习曲线</p><p>通过学习曲线的形态来判断</p><p>所谓学习曲线就是训练集得分和验证集得分随着训练样本数的增大而变化的曲线</p><p><strong>欠拟合情况</strong>：随着训练样本数增大，训练集得分和验证集得分收敛，并且两者的收敛值很接近</p><p><strong>过拟合情况</strong>：随着训练样本数增大，训练集得分和验证集得分相差还是很大</p><h3 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h3><p>将训练集随机分成两部分：用于训练参数的训练集和用于模型选择的验证集</p><p><img src="/imgs/ml/4.png" alt="image-20231015142857582"></p><p><img src="/imgs/ml/5.png" alt="image-20231015142932617"></p><p><img src="/imgs/ml/6.png" alt="image-20231015142956584"></p><h3 id="诊断误差和方差"><a href="#诊断误差和方差" class="headerlink" title="诊断误差和方差"></a>诊断误差和方差</h3><p>训练误差：$L_{train}(\theta)&#x3D;\frac{1}{2m} \sum_{i&#x3D;1}^m (h_\theta(x^{(i)})-y^{(i)})^2$</p><p>验证误差：$L_{val}(\theta)&#x3D;\frac{1}{2m_{val}} \sum_{i&#x3D;1}^{m_{val}} (h_\theta(x_{val}^{(i)})-y_{val}^{(i)})^2$</p><h4 id="偏差大（underfit欠拟合）"><a href="#偏差大（underfit欠拟合）" class="headerlink" title="偏差大（underfit欠拟合）"></a>偏差大（underfit欠拟合）</h4><p>训练误差：大</p><p>训练误差与验证误差差别较小</p><h4 id="方差大（overfit过拟合）"><a href="#方差大（overfit过拟合）" class="headerlink" title="方差大（overfit过拟合）"></a>方差大（overfit过拟合）</h4><p>训练误差：小</p><p>验证误差远大于训练误差</p><p><img src="/imgs/ml/7.png" alt="image-20231015143732091"></p><p>从图像上可以知道，靠左侧是欠拟合，靠右侧是过拟合</p><h3 id="解决欠拟合和过拟合问题"><a href="#解决欠拟合和过拟合问题" class="headerlink" title="解决欠拟合和过拟合问题"></a>解决欠拟合和过拟合问题</h3><h4 id="欠拟合"><a href="#欠拟合" class="headerlink" title="欠拟合"></a>欠拟合</h4><p>核心：增加模型的复杂度</p><ul><li>收集新的特征</li><li>增加多项式组合特征</li><li>…</li></ul><h4 id="过拟合-1"><a href="#过拟合-1" class="headerlink" title="过拟合"></a>过拟合</h4><ul><li>增加数据</li><li>降低模型的复杂度<ul><li>减少特征（人为筛选）</li><li>正则化，可降低方差提高偏差</li></ul></li></ul><h3 id="正则化线性回归"><a href="#正则化线性回归" class="headerlink" title="正则化线性回归"></a>正则化线性回归</h3><h4 id="Regularized-Linear-Regression"><a href="#Regularized-Linear-Regression" class="headerlink" title="Regularized Linear Regression"></a>Regularized Linear Regression</h4><p>$$<br>\min_\theta J(\theta)<br>$$</p><p>$$<br>J(\theta)&#x3D;\frac{1}{2m} \left[ \sum_{i&#x3D;1}^m (h_\theta(x^{(i)})-y^{(i)})^2 + \lambda \sum_{j&#x3D;1}^n \theta_j^2 \right]<br>$$</p><p>$$<br>L(\theta)&#x3D;\frac{1}{2m} \sum_{i&#x3D;1}^m (h_\theta(x^{(i)})-y^{(i)})^2<br>$$</p><p>$$<br>J(\theta)&#x3D;L(\theta)+\lambda R(\theta)<br>$$</p><p>gradient descent</p><p>repeat{<br>$$<br>\theta_j&#x3D;\theta_j(1-\alpha \frac{\lambda}{m})-\alpha \frac{1}{m} \sum_{i&#x3D;1}^m (h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}<br>$$<br>}</p><p><strong>正则化参数$\lambda$的选择</strong><br>$$<br>J(\theta)&#x3D;\frac{1}{2m} \left[ \sum_{i&#x3D;1}^m (h_\theta(x^{(i)})-y^{(i)})^2 + \lambda \sum_{j&#x3D;1}^n \theta_j^2 \right]<br>$$</p><p>$$<br>L(\theta)&#x3D;\frac{1}{2m} \sum_{i&#x3D;1}^m (h_\theta(x^{(i)})-y^{(i)})^2<br>$$</p><h4 id="RegularizedNormal-equation"><a href="#RegularizedNormal-equation" class="headerlink" title="RegularizedNormal equation"></a>RegularizedNormal equation</h4><p>$$<br>\theta&#x3D;\left(X^T X+\lambda\left[\begin{array}{lllll}<br>0 &amp; &amp; &amp; &amp; \<br>&amp; 1 &amp; &amp; &amp; \<br>&amp; &amp; 1 &amp; &amp; \<br>&amp; &amp; &amp; \ddots &amp; \<br>&amp; &amp; &amp; &amp; 1<br>\end{array}\right]\right) X^{-1} X^T y<br>$$</p><h3 id="Regularized-Logistic-Regression"><a href="#Regularized-Logistic-Regression" class="headerlink" title="Regularized Logistic Regression"></a>Regularized Logistic Regression</h3><p>$$<br>J(\theta)&#x3D;\left[-\frac{1}{m} \sum_{i&#x3D;1}^m y^{(i)} \log \left(h_\theta\left(x^{(i)}\right)+\left(1-y^{(i)}\right) \log (1-h_\theta\left(x^{(i)}\right))\right]+\frac{\lambda}{2 m} \sum_{j&#x3D;1}^n \theta_j^2\right.<br>$$</p><p>梯度下降同上</p><p>$$<br>J(\theta)&#x3D;L(\theta)+\lambda R(\theta)<br>$$</p><p>$$<br>L(\theta)&#x3D;\left[-\frac{1}{m} \sum_{i&#x3D;1}^m y^{(i)} \log (h_\theta(x^{(i)})+(1-y^{(i)}) \log (1-h_\theta(x^{(i)}))\right]<br>$$</p><h3 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h3><p><img src="/imgs/ml/8.png" alt="image-20231016190009923"></p><p>如果一个模型测试结果是high bias，使用更多的训练数据并不能改进模型</p><p><img src="/imgs/ml/9.png" alt="image-20231016190147599"></p><p>如果一个模型测试结果是high variance，使用更多的训练数据会有效改进模型</p><h3 id="模型性能评估"><a href="#模型性能评估" class="headerlink" title="模型性能评估"></a>模型性能评估</h3><ul><li>用训练集训练参数</li></ul><p>$$<br>\theta^*&#x3D;a\arg \min_\theta \frac{1}{m} \sum_{i&#x3D;1}^m \ell(h_\theta(x^{(i)}),y^{(i)})<br>$$</p><ul><li>用验证集选择模型，用于调参（正则化参数、多项式阶数、特征选择）</li><li>测试集仅用于性能评估</li></ul><h4 id="验证集和测试集"><a href="#验证集和测试集" class="headerlink" title="验证集和测试集"></a>验证集和测试集</h4><ul><li>验证集和测试集应具有同分布</li><li>验证集和测试集的大小<ul><li>验证集：1000-10000；应当足够大</li><li>测试集：中小30%；大数据足够大</li></ul></li></ul><h4 id="交叉验证-k-fold-cross-validation"><a href="#交叉验证-k-fold-cross-validation" class="headerlink" title="交叉验证 k-fold cross validation"></a>交叉验证 k-fold cross validation</h4><ul><li>数据集规模较小情况下采用</li><li>把数据随机划分为k等份，每次用其中的(k - 1)份做训练，剩下的做验证</li><li>计算平均误差（和方差）</li></ul><h2 id="神经网络与深度学习"><a href="#神经网络与深度学习" class="headerlink" title="神经网络与深度学习"></a>神经网络与深度学习</h2><h3 id="非线性分类"><a href="#非线性分类" class="headerlink" title="非线性分类"></a>非线性分类</h3><h3 id="The-“one-learning-algorithm”-hypothesis"><a href="#The-“one-learning-algorithm”-hypothesis" class="headerlink" title="The “one learning algorithm” hypothesis"></a>The “one learning algorithm” hypothesis</h3><h3 id="神经元模型：Logistic-unit"><a href="#神经元模型：Logistic-unit" class="headerlink" title="神经元模型：Logistic unit"></a>神经元模型：Logistic unit</h3><p><img src="/imgs/ml/10.png" alt="image-20231016192226609"></p><h3 id="全连接前馈网络-Fully-Connect-Feedforward-Network"><a href="#全连接前馈网络-Fully-Connect-Feedforward-Network" class="headerlink" title="全连接前馈网络 Fully Connect Feedforward Network"></a>全连接前馈网络 Fully Connect Feedforward Network</h3><p><img src="/imgs/ml/11.png" alt="image-20231016192336825"></p><p><img src="/imgs/ml/12.png" alt="image-20231016192436942"></p><p>如果在第j层有$s_j$个units，第j+1层有$s_{j+1}$个units，则$\theta^{(j)}$的维数是$s_j \times s_{j+1}$</p><p>FCFN的执行过程</p><p>激活函数$g(z)&#x3D;\frac{1}{1+e^{-z}}$</p><p><img src="/imgs/ml/13.png" alt="image-20231016193208513"></p><h3 id="前向传播：矩阵表示"><a href="#前向传播：矩阵表示" class="headerlink" title="前向传播：矩阵表示"></a>前向传播：矩阵表示</h3><p><img src="/imgs/ml/14.png" alt="image-20231016193446007"><br>$$<br>h_\theta(x)&#x3D;g(\theta^{(2)}g(\theta^{(1)}x))<br>$$</p><h3 id="特征学习"><a href="#特征学习" class="headerlink" title="特征学习"></a>特征学习</h3><p><img src="/imgs/ml/15.png" alt="image-20231016193745129"></p><h3 id="多层神经网络"><a href="#多层神经网络" class="headerlink" title="多层神经网络"></a>多层神经网络</h3><p><img src="/imgs/ml/16.png" alt="image-20231016193817513"></p><h4 id="用神经网络求解XOR-x2F-XNOR问题"><a href="#用神经网络求解XOR-x2F-XNOR问题" class="headerlink" title="用神经网络求解XOR&#x2F;XNOR问题"></a>用神经网络求解XOR&#x2F;XNOR问题</h4><p><img src="/imgs/ml/18.png" alt="image-20231017090005632"></p><p><img src="/imgs/ml/17.png" alt="image-20231017085931923"></p><p><img src="/imgs/ml/19.png" alt="image-20231017090721937"></p><p><img src="/imgs/ml/20.png" alt="image-20231017090803876"></p><h4 id="处理多分类问题"><a href="#处理多分类问题" class="headerlink" title="处理多分类问题"></a>处理多分类问题</h4><p><img src="/imgs/ml/21.png" alt="image-20231017091225042"></p><h4 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h4><p><img src="/imgs/ml/22.png" alt="image-20231017091338145"></p><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p>$$<br>h_\theta(x)&#x3D;g_L(\theta^{L-1}g_{L-1}(\dots g_2(\theta^{(2)}g_1(\theta^{(1)}x))))<br>$$</p><h3 id="DeepLearning-Many-hidden-layers"><a href="#DeepLearning-Many-hidden-layers" class="headerlink" title="DeepLearning:Many hidden layers"></a>DeepLearning:Many hidden layers</h3><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p>$$<br>z&#x3D;\sum \theta_ix_i +\theta_0<br>$$</p><p>$$<br>\frac{dz}{d\theta_i}&#x3D;x_i<br>$$</p><p>$$<br>\frac{dJ}{d\theta_i}&#x3D;\frac{dJ}{dz} \frac{dz}{d \theta_i}&#x3D;\frac{dJ}{dz}x_i<br>$$</p><h4 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h4><p><img src="/imgs/ml/23.png" alt="image-20231020160853644"><br>$$<br>sigmoid:g(x)&#x3D;\frac{1}{1+e^{-x}}<br>$$</p><ol><li>Saturated neurons “kill” the gradients</li><li>Sigmoid outputs are not zerocentered</li><li>exp() is a bit compute expensive</li></ol><h4 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h4><p><img src="/imgs/ml/24.png" alt="image-20231020161036525"><br>$$<br>tanh:g(x)&#x3D;\frac{e^x-e^{-x}}{e^x+e^{-x}}<br>$$</p><ol><li><p>Zero centered (nice)</p></li><li><p>“kill”the gradients</p></li><li><p>exp() is a bit compute expensive</p></li></ol><h4 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h4><p><img src="/imgs/ml/25.png" alt="image-20231020161629731"><br>$$<br>ReLU:g(x)&#x3D;\max(0,x)<br>$$</p><ol><li><p>Does not saturate (in +region)</p></li><li><p>Very computationally efficient</p></li><li><p>Converges much faster than sigmoid&#x2F;tanh in practice (e.g. 6x)</p></li><li><p>Actually more biologically plausible than sigmoid</p></li><li><p>Not zero-centered output</p></li><li><p>x&lt;0: dead ReLU will never activate &#x3D;&gt; never update</p></li></ol><h4 id="Leaky-ReLU"><a href="#Leaky-ReLU" class="headerlink" title="Leaky ReLU"></a>Leaky ReLU</h4><p><img src="/imgs/ml/26.png" alt="image-20231020161851458"><br>$$<br>Leaky ReLU:g(x)&#x3D;\max(0.1x,x)<br>$$</p><ol><li><p>Does not saturate (in +region)</p></li><li><p>Very computationally efficient</p></li><li><p>Converges much faster than sigmoid&#x2F;tanh in practice (e.g. 6x)</p></li><li><p>Actually more biologically plausible than sigmoid</p></li><li><p>Not zero-centered output</p></li><li><p>Will not “die”</p></li></ol><p>$$<br>Parametric\ Rectifier\ Linear\ Unit(PReLU):g(x)&#x3D;\max(\alpha x,x)<br>$$</p><h3 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h3><p>$$<br>l(y,\hat{y})&#x3D;-\sum_{i&#x3D;1}^n y_i \log(\hat{y_i})<br>$$</p><h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>$$<br>J(\theta)&#x3D;L(\theta)+\lambda R(\theta)<br>$$</p><p>$$<br>h_\theta(x) \in \mathbb{R}^K,(h_\theta(x))_k&#x3D;k^{th}\ output<br>$$</p><p>$$<br>\begin{aligned}<br>J(\Theta) &amp; &#x3D;-\frac{1}{m}\left[\sum_{i&#x3D;1}^m \log p\left(y^{(i)} \mid x^{(i)} ; \Theta\right)\right]+\frac{\lambda}{2 m} \sum_{l&#x3D;1}^{L-1} \sum_{i&#x3D;1}^{s_l} \sum_{j&#x3D;1}^{s_{l+1}}\left(\Theta_{j i}^{(l)}\right)^2 \<br>&amp; &#x3D;-\frac{1}{m} \sum_{i&#x3D;1}^m \sum_{k&#x3D;1}^K y_k^{(i)} \log \left(h_{\Theta}\left(x^{(i)}\right)\right)<em>k+\frac{\lambda}{2 m} \sum</em>{l&#x3D;1}^{L-1} \sum_{i&#x3D;1}^{s_l} \sum_{j&#x3D;1}^{s_{l+1}}\left(\Theta_{j i}^{(l)}\right)^2<br>\end{aligned}<br>$$</p><h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><p>$$<br>\min_\theta J(\theta)<br>$$</p><h3 id="梯度计算：反向传播"><a href="#梯度计算：反向传播" class="headerlink" title="梯度计算：反向传播"></a>梯度计算：反向传播</h3><p>BackPropagation，BP</p><h4 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h4><p><img src="/imgs/ml/27.png" alt="image-20231020170049734"></p><h4 id="梯度矢量化表示"><a href="#梯度矢量化表示" class="headerlink" title="梯度矢量化表示"></a>梯度矢量化表示</h4><p><img src="/imgs/ml/28.png" alt="image-20231020170507628"></p><h4 id="Batch-gradient-descent-vs-Stochastic-gradient-descent"><a href="#Batch-gradient-descent-vs-Stochastic-gradient-descent" class="headerlink" title="Batch gradient descent vs. Stochastic gradient descent"></a>Batch gradient descent vs. Stochastic gradient descent</h4><p><img src="/imgs/ml/29.png" alt="image-20231020171456260"></p><p><img src="/imgs/ml/30.png" alt="image-20231020171603203"></p><p><strong>Mini-batch gradient descent</strong></p><p><img src="/imgs/ml/31.png" alt="image-20231020171644520"></p><ul><li><p>Batch gradient descent</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nb_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>params_grad<span class="token operator">=</span>evaluate_gradient<span class="token punctuation">(</span>loss_function<span class="token punctuation">,</span>data<span class="token punctuation">,</span>params<span class="token punctuation">)</span>params<span class="token operator">=</span>params<span class="token operator">-</span>learning_rate<span class="token operator">*</span>params_grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Stochastic gradient descent</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nb_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">for</span> example <span class="token keyword">in</span> data<span class="token punctuation">:</span>params_grad<span class="token operator">=</span>evaluate_gradient<span class="token punctuation">(</span>loss_function<span class="token punctuation">,</span>example<span class="token punctuation">,</span>params<span class="token punctuation">)</span>params<span class="token operator">=</span>params<span class="token operator">-</span>learning_rate<span class="token operator">*</span>params_grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Mini-batch gradient descent</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nb_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">for</span> batch <span class="token keyword">in</span> get_batches<span class="token punctuation">(</span>data<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>params_grad<span class="token operator">=</span>evaluate_gradient<span class="token punctuation">(</span>loss_function<span class="token punctuation">,</span>batch<span class="token punctuation">,</span>params<span class="token punctuation">)</span>params<span class="token operator">=</span>params<span class="token operator">-</span>learning_rate<span class="token operator">*</span>params_grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Stepsize-vs-Gradient"><a href="#Stepsize-vs-Gradient" class="headerlink" title="Stepsize vs. Gradient"></a>Stepsize vs. Gradient</h3><p><img src="/imgs/ml/32.png" alt="image-20231020172336633"></p><h3 id="Adaptive-学习率"><a href="#Adaptive-学习率" class="headerlink" title="Adaptive 学习率"></a>Adaptive 学习率</h3><p><img src="/imgs/ml/33.png" alt="image-20231020172436170"></p><h4 id="AdaGrad"><a href="#AdaGrad" class="headerlink" title="AdaGrad"></a>AdaGrad</h4><p>$$<br>\alpha^t&#x3D;\frac{\alpha}{\sqrt{t+1}},g_t&#x3D;\frac{\partial J(\theta^t)}{\partial \theta}<br>$$</p><p>$$<br>\theta^{t+1}&#x3D;\theta^t-\frac{\alpha^t}{\sigma^t}g_t,\sigma^t&#x3D;\sqrt{\frac{1}{t+1}\sum_{i&#x3D;0}^{t}g_i^2}<br>$$</p><p>$$<br>\theta^{t+1}&#x3D;\theta^t-\frac{\alpha^t}{\sqrt{\sum_{i&#x3D;0}^tg_i^2}}g_t<br>$$</p><h4 id="RMSProp"><a href="#RMSProp" class="headerlink" title="RMSProp"></a>RMSProp</h4><p>$$<br>u^0&#x3D;0<br>$$</p><p>$$<br>u^t&#x3D;\rho u^{t-1}+(1-\rho)g_t^2<br>$$</p><p>$$<br>\theta^{t+1}&#x3D;\theta^t-\frac{\alpha}{\sqrt{u^t}}g_t<br>$$</p><h4 id="AdaDelta"><a href="#AdaDelta" class="headerlink" title="AdaDelta"></a>AdaDelta</h4><p><img src="/imgs/ml/34.png" alt="image-20231021145518518"></p><h4 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h4><p><strong>GD+Momentum</strong><br>$$<br>v^0&#x3D;0<br>$$</p><p>$$<br>v^t&#x3D;\rho v^{t-1}+\alpha g_t<br>$$</p><p>$$<br>\theta^{t+1}&#x3D;\theta^t-v^t<br>$$</p><p>引入速度（前面梯度的加权均值）</p><p><img src="/imgs/ml/35.png" alt="image-20231021145743467"></p><p><strong>Nesterov Momentum</strong></p><p><img src="/imgs/ml/36.png" alt="image-20231021145908869"><br>$$<br>v^t&#x3D;\rho v^{t-1}+\alpha \frac{\partial J(\theta^t+\rho v^{t-1})}{\partial \theta}<br>$$</p><p>$$<br>\theta^{t+1}&#x3D;\theta^t-v^t<br>$$</p><h4 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h4><p>$$<br>m^0&#x3D;0,v^0&#x3D;0<br>$$</p><p>$$<br>m^t&#x3D;\beta_1 m^{t-1}+(1-\beta_1)g_t<br>$$</p><p>$$<br>v^t&#x3D;\beta_2 v^{t-1}+(1-\beta_2)g_t^2<br>$$</p><p>$$<br>\theta^{t+1}&#x3D;\theta^t-\frac{\alpha}{\sqrt{v^t+\epsilon}}m%t<br>$$</p><p><img src="/imgs/ml/37.png" alt="image-20231021161930422"></p><h4 id="AdaBelief"><a href="#AdaBelief" class="headerlink" title="AdaBelief"></a>AdaBelief</h4><p><img src="/imgs/ml/38.png" alt="image-20231021162335145"><br>$$<br>s^t&#x3D;\beta_2 s^{t-1}+(1-\beta_2)(g_t-m_t)^2<br>$$</p><p>$$<br>\theta^{t+1}&#x3D;\theta^t-\frac{\alpha}{\sqrt{s^t+\epsilon}}m%t<br>$$</p><p>Adam or AdaBelief might be the best overall choice</p><p>SGD</p><ul><li>usually achieves to find a minimum, but it might take significantly longer</li><li>is much more reliant on a robust initialization and annealing schedule</li><li>may get stuck in saddle points rather than local minima</li></ul><h3 id="Additional-strategies-for-optimizing-SGD"><a href="#Additional-strategies-for-optimizing-SGD" class="headerlink" title="Additional strategies for optimizing SGD"></a>Additional strategies for optimizing SGD</h3><ul><li>Shuffling and Curriculum Learning 打乱数据集和课程学习</li><li>Early stopping: Early stopping (is) beautiful free lunch (Geoff Hinton) 早停</li><li>Gradient noise: add noise to each gradient update 梯度噪声</li></ul><h3 id="二阶方法：牛顿法"><a href="#二阶方法：牛顿法" class="headerlink" title="二阶方法：牛顿法"></a>二阶方法：牛顿法</h3><p>迭代规则<br>$$<br>\theta:&#x3D;\theta-\frac{f(\theta)}{f’(\theta)}<br>$$</p><p>$$<br>\theta:&#x3D;\theta-\frac{f(\theta)}{f’(\theta)},\min_\theta J(\theta) \to J’(\theta)&#x3D;0,f(\theta)&#x3D;J’(\theta)<br>$$</p><p>$$<br>\theta&#x3D;\theta-\frac{J’(\theta)}{J’’(\theta)}<br>$$</p><p>$\theta$是矢量，则$\theta:&#x3D;\theta-H^{-1} \nabla_\theta J(\theta) ,H_{ij}&#x3D;\frac{\partial^2 \ell(\theta)}{\partial \theta_i \partial \theta_j}$</p><p>由于二阶方法需要计算Hessian矩阵，在参数数目较多的情况下计算复杂，目前主要仍采用一阶方法</p><h3 id="Gradient-checking"><a href="#Gradient-checking" class="headerlink" title="Gradient checking"></a>Gradient checking</h3><p>$$<br>\frac{\partial J(\theta)}{\partial \theta} \approx \frac{J(\theta+\epsilon)-J(\theta-\epsilon)}{2\epsilon}<br>$$</p><p><img src="/imgs/ml/39.png" alt="image-20231021165426644"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>不能zero initialization，否则训练出全部相同的神经元</p><p>Random initialization (Gaussian with zero mean and 1e-2 standard deviation)，Works ~okay for small networks, but problems with deeper networks</p><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p><img src="/imgs/ml/40.png" alt="image-20231021165926172"></p><h3 id="网格结构选择与设计"><a href="#网格结构选择与设计" class="headerlink" title="网格结构选择与设计"></a>网格结构选择与设计</h3><p>前一层的输出与后一层的输入需要一致</p><h3 id="训练网络"><a href="#训练网络" class="headerlink" title="训练网络"></a>训练网络</h3><ul><li>Initialize weights</li><li>Implement forward propagation</li><li>Implement code to compute cost function</li><li>Implement backpropagation code to compute gradient</li><li>Implement numerical gradient check (disable your gradient checking code before training)</li><li>Double check that the loss is reasonable</li><li>Make sure that you can overfit very small portion of the training data</li><li>Start with small regularization and find learning rate that makes the loss go down</li></ul><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>体系结构课外思考题0905</title>
      <link href="/2023/09/07/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%980905/"/>
      <url>/2023/09/07/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%980905/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>调研学习Memory wall、Reliability wall、Programmability wall 以及相应的处理策略</p><h2 id="Memory-Wall"><a href="#Memory-Wall" class="headerlink" title="Memory Wall"></a>Memory Wall</h2><blockquote><p>在过去的20多年中，处理器的性能以每年大约55%速度快速提升，而内存性能的提升速度则只有每年10%左右。</p></blockquote><p>从上面的引用中，可以看出在计算机体系结构中存在着<strong>性能日益优越的处理器同落后内存性能之间的矛盾</strong>。长期积累下来，不均衡的发展速度造成了当前内存的存取速度严重滞后于处理器的计算速度，内存瓶颈导致高性能处理器难以发挥出应有的功效。</p><p>由此引出定义：将严重阻碍处理器性能发挥的内存瓶颈命名为“Memory Wall”（内存墙）</p><h3 id="本质问题"><a href="#本质问题" class="headerlink" title="本质问题"></a>本质问题</h3><p>Memory wall的本质问题在于，<strong>CPU的计算速度远远快于内存的读写速度</strong>。CPU可以在一个时钟周期内执行多个指令，而内存操作通常需要数倍或数十倍的时钟周期才能完成。这就导致了CPU在<strong>等待从内存中读取数据或将数据写入内存时</strong>浪费了大量的时间。</p><h3 id="造成后果"><a href="#造成后果" class="headerlink" title="造成后果"></a>造成后果</h3><ol><li><strong>性能下降</strong>：当CPU需要访问内存中的数据时，它必须等待数据从内存传输到CPU寄存器或高速缓存中。这种等待会导致CPU停滞，无法执行其他计算任务，从而降低了计算机系统的整体性能。内存墙通常被认为是计算机系统中的瓶颈之一。</li><li><strong>多核加剧问题</strong>：随着多核处理器的广泛应用，内存墙问题变得更加显著。多个CPU核心可能需要同时访问内存，导致竞争内存带宽，进一步加剧了Memory wall的效应。</li><li><strong>应用范围</strong>：Memory wall问题对于需要大量内存访问的应用程序尤为重要，如大规模数据处理、科学计算、图像和视频处理等。这些应用需要频繁地读写大量的数据，因此更容易受到内存墙的限制。</li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>克服Memory Wall的方法可以在硬件层面和软件层面展开</p><ul><li><p>硬件层面</p><ul><li><p><strong>高速缓存层次结构</strong>：使用高速缓存是一种有效的方法，可减少对主内存的访问次数。现代计算机通常包含多层次的高速缓存（如L1、L2和L3缓存），这些缓存存储着最常用的数据。CPU首先查找高速缓存以获取所需的数据，只有当数据不在缓存中时才会访问主内存</p><p><img src="/imgs/kewaisikao0905/1.png" alt="image-20230907111806245"></p><p>如上图所示，笔者的笔记本电脑设置了三级缓存分别是L1 256KB、L2 1.0MB、L3 8.0MB</p></li><li><p><strong>分布式内存系统</strong>：在集群或分布式计算环境中，使用分布式内存系统来将数据分布在多台计算机上，以提高整体内存带宽和容量。</p></li><li><p><strong>内存带宽增加</strong>：采用更高带宽的内存技术，如DDR4、DDR5等，以提高内存访问速度。</p></li><li><p><strong>内存层次结构优化</strong>：设计更高效的内存层次结构，包括更大的高速缓存和更高带宽的内存通道，以满足多核处理器的需求。</p></li></ul></li><li><p>软件层面</p><ul><li><strong>局部性优化</strong>：设计算法和数据结构以利用局部性原则，包括时间局部性和空间局部性。时间局部性是指在不久的将来可能再次访问相同的数据，而空间局部性是指在接近的内存位置上访问数据。通过利用这些局部性，可以减少内存访问的频率。</li><li><strong>算法优化</strong>：优化算法以减少不必要的内存访问。这包括减少数据移动、使用更紧凑的数据表示和选择更适合内存访问模式的数据结构。</li><li><strong>大页表</strong>：使用大页表（大页面）来减少内存管理开销，从而提高内存访问效率。</li></ul></li></ul><h2 id="Reliability-Wall"><a href="#Reliability-Wall" class="headerlink" title="Reliability Wall"></a>Reliability Wall</h2><p><strong>可靠性墙</strong>指的是在追求更高可靠性的过程中，遇到的性能、成本或其他方面的限制</p><p>也就是说，在计算机体系结构中，<strong>存在着日益增长的可靠性需求同性能、成本之间的矛盾</strong></p><h3 id="本质问题-1"><a href="#本质问题-1" class="headerlink" title="本质问题"></a>本质问题</h3><p>可靠性墙（Reliability Wall）的本质问题在于<strong>追求更高的系统可靠性会引入一系列挑战和限制，这些挑战和限制可能会对性能、成本、复杂性和其他因素产生影响</strong>。</p><h3 id="造成后果-1"><a href="#造成后果-1" class="headerlink" title="造成后果"></a>造成后果</h3><ul><li><p><strong>拖累性能</strong></p><p>提高系统的可靠性通常需要引入冗余组件、监控和恢复机制，以确保系统在故障情况下继续运行。然而，这些额外的措施可能会对系统性能产生负面影响</p></li><li><p><strong>拉高成本</strong></p><p>提高可靠性通常伴随着更高的成本。例如，<strong>引入冗余硬件、备用电源、数据备份和定期维护</strong>都需要额外的<del>money</del></p></li><li><p><strong>复杂性拉满</strong></p><p>增强系统的可靠性通常需要<strong>增加系统的复杂性</strong>，包括引入额外的监控、故障检测和自动恢复机制；复杂性的增加可能会增加系统的管理和维护难度，也可能引入新的故障点。</p></li><li><p><strong>可扩展性降低</strong></p><p>随着系统规模的增加，可靠性的维护和管理变得更加复杂，相应的，可扩展性也就降低了</p></li></ul><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>克服Reliability Wall的根本在于<strong>拿捏不同的应用场景中平衡点</strong>，既满足可靠性需求，又兼顾性能、成本、复杂性，做到可靠性强、最小化性能损失、降低成本和管理复杂性。</p><p>其实首先需要考虑的是<strong>目前所设计的系统的可靠性要求</strong>。</p><p>不同领域对于可靠性的需求不同。例如，在医疗设备和航空航天领域，可靠性至关重要，因为故障可能导致严重的风险；然而在其他领域，如消费电子产品，可靠性需求可能较低。</p><p>针对上述可靠性的不同，在医疗设备、航空航天领域，就需要不计成本的提高可靠性；而对于消费级电子产品，从经济学的角度来说，可靠性甚至只需要达到及格水平（<del>旧的不坏新的不来</del>）</p><p>在提高可靠性方面有下面一些解决方法：</p><ul><li><strong>冗余设计</strong><ul><li><strong>硬件冗余</strong>：引入冗余组件，如冗余电源、硬盘、网络连接等，以在主要组件故障时提供备用。例如，采用热插拔硬件和热备份设备可以确保系统持续可用。</li><li><strong>软件冗余</strong>：使用冗余软件模块或备份系统，以在软件故障时提供备用。这包括主备份服务器、容错算法等。</li></ul></li><li><strong>监控和自动恢复</strong><ul><li>部署监控系统来实时监测硬件和软件的状态，以及系统的性能。</li><li>自动化故障检测和恢复机制，使系统能够在发生故障时自动切换到备用组件或执行恢复操作。</li></ul></li><li><strong>数据备份和复原</strong><ul><li>建立定期备份数据的策略，确保关键数据的完整性和可用性。</li><li>测试和验证数据恢复过程，以确保在数据丢失或损坏时能够迅速进行恢复。</li></ul></li><li><strong>容错技术</strong><ul><li>使用容错技术，如纠错码（ECC）和磁盘阵列（RAID），以检测和纠正硬件错误或数据损坏。</li><li>使用容错集群或系统，使系统在某些组件发生故障时能够继续运行。</li></ul></li><li><strong>定期维护</strong><ul><li>定期维护硬件和软件组件，以预防潜在问题和故障。这包括更新操作系统、补丁管理、硬件维护等。</li></ul></li><li><strong>故障模拟和测试</strong><ul><li>定期进行故障模拟和测试，以评估系统在不同故障情况下的表现，并发现潜在的可靠性问题。</li><li>使用负载测试来模拟系统在高负载情况下的性能和可靠性。</li></ul></li><li><strong>可扩展性</strong><ul><li>在系统设计中考虑可扩展性，以便能够轻松地添加更多的冗余和监控组件，以满足未来的需求。</li></ul></li><li><strong>故障分析和持续改进</strong><ul><li>进行故障分析，以了解导致故障的根本原因，并采取措施以防止未来发生类似问题。</li><li>持续改进可靠性策略和流程，以适应不断变化的威胁和需求。</li></ul></li></ul><p>当然，上面这些方法肯定各有利弊，而且成本不同、造成的性能损失不同，在上述方法中选择合适的进行组合，得到一个最优方案，是克服可靠性墙的一个可行解。</p><h2 id="Programmability-Wall"><a href="#Programmability-Wall" class="headerlink" title="Programmability Wall"></a>Programmability Wall</h2><p>在计算机系统中，尤其是在高性能计算领域，软件开发的复杂性会导致性能提升受到限制。随着计算机硬件不断演进和复杂化，编写能够充分利用硬件性能的软件变得更加困难，这成为了性能瓶颈。</p><p>在计算机体系结构中，存在着<strong>日益提升的硬件性能同落后的软件开发</strong>之间的矛盾。</p><h3 id="本质问题-2"><a href="#本质问题-2" class="headerlink" title="本质问题"></a>本质问题</h3><p>可编程性墙（Programmability Wall）的本质问题在于<strong>软件开发的复杂性与硬件性能的不断提升之间存在不平衡</strong>，这导致了性能的瓶颈。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><ol><li><p><strong>硬件性能迅速提升</strong></p><p>计算机硬件性能（包括CPU速度、内存容量、核心数量等）在不断提高，但软件开发的速度和复杂性也在不断增加。硬件性能的快速提升意味着计算机系统具有更多的计算能力，但软件开发没有同样的速度提高。</p></li><li><p><strong>并行性和多核挑战</strong></p><p>多核处理器和分布式系统的广泛采用意味着开发人员必须编写并行化的软件来充分利用这些硬件资源。然而，并行编程比传统的串行编程更复杂，需要考虑任务划分、同步、通信等问题。</p></li><li><p><strong>性能优化困难</strong></p><p>为了实现最佳性能，开发人员需要深入了解硬件架构，并进行复杂的性能优化。这包括任务调度、数据布局、负载平衡等方面的优化，这些优化往往需要大量的时间和经验。</p></li><li><p><strong>编程语言和工具限制</strong></p><p>目前可用的编程语言和开发工具可能不足以充分支持高度并行化的计算。这迫使开发人员使用底层编程模型，或者编写复杂的自定义代码，增加了错误和开发成本。</p></li><li><p><strong>人才需求</strong></p><p>高效的并行编程需要特定的技能和经验，这意味着寻找合格的并行编程开发人员变得更加困难，而且培训新人员需要时间。</p></li><li><p><strong>可移植性问题</strong></p><p>编写并行软件时，通常会依赖于特定的硬件架构或编程模型。这可能会导致软件不易移植到其他硬件平台，限制了其可扩展性和灵活性。</p></li><li><p><strong>调试和维护复杂性</strong></p><p>并行软件的调试和维护比串行软件更加复杂，因为问题可能涉及多个并发执行的线程或进程。这增加了故障排除的难度。</p></li></ol><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>要克服Programmability Wall（可编程性墙）问题，需要采取一系列策略和方法，以提高软件开发的效率和性能，并确保软件能够充分利用现代计算机硬件的性能潜力。</p><ol><li><strong>高级编程语言和框架</strong><ul><li>开发更高级的编程语言和框架，使开发人员能够更容易地表达并行性和分布式计算。</li><li>提供抽象层次，以隐藏底层硬件细节，使开发人员可以专注于算法和业务逻辑。</li></ul></li><li><strong>自动化工具</strong><ul><li>研究和开发自动化工具，可以帮助开发人员自动并行化和优化程序，减轻手动性能优化的负担。</li><li>自动化工具可以执行任务调度、数据分布和负载均衡等优化，提高了开发效率。</li></ul></li><li><strong>性能分析工具</strong><ul><li>提供性能分析工具，帮助开发人员识别程序性能瓶颈和瓶颈的根本原因。</li><li>这些工具可以帮助开发人员重点优化对性能影响最大的部分。</li></ul></li><li><strong>并行编程模型</strong><ul><li>推广使用适合特定应用的并行编程模型，如MPI、OpenMP、CUDA、OpenCL等。</li><li>提供培训和教育资源，以帮助开发人员掌握并行编程技能。</li></ul></li><li><strong>培训和教育</strong><ul><li>提供广泛的教育和培训资源，以培养具备并行编程技能的开发人员。</li><li>通过学术课程和行业认证来提高开发人员的并行编程能力。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存墙 </tag>
            
            <tag> 可靠性墙 </tag>
            
            <tag> 可编程性墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CV的第一个项目</title>
      <link href="/2023/08/18/CV%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/08/18/CV%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>友情链接：<a href="https://datawhaler.feishu.cn/docx/Ur24daYfaoxz11xPJTxcj4JQnPh?from=space_home_recent&pre_pathname=/drive/home/">Datawhale-CV实践</a></p><p>GitHub项目地址：<a href="https://github.com/JIANG-Wu-19/CV_Project">CV_Project</a></p><h2 id="题目回顾"><a href="#题目回顾" class="headerlink" title="题目回顾"></a>题目回顾</h2><p>为研究基于脑PET图像的疾病预测，本次大赛提供了海量脑PET数据集作为脑PET图像检测数据库的训练样本，参赛者需根据提供的样本构建模型，对轻度认知障碍进行分析和预测。</p><p>脑PET图像检测数据库，记录了老年人受试志愿者的脑PET影像资料，其中包括确诊为轻度认知障碍（MCI）患者的脑部影像数据和健康人（NC）的脑部影像数据。</p><p>被试者按医学诊断分为两类：</p><p>NC：健康</p><p>MCI：轻度认知障碍</p><p>本次大赛所用脑PET图像检测数据库，图像格式为nii。</p><p>表1.大赛数据库</p><p><img src="/imgs/cvdiyi/1.png" alt="img"></p><p><del>在此之前，对于cv仅限于知道</del></p><p>首先来认识一下nii格式文件</p><h3 id="nii文件"><a href="#nii文件" class="headerlink" title=".nii文件"></a>.nii文件</h3><blockquote><p>NII 格式是一种常用于医学影像数据的文件格式，它通常用于存储神经影像数据，如MRI（磁共振成像）和CT（计算机断层扫描）图像。NII 的全称是 Neuroimaging Informatics Technology Initiative，它是一种基于文件扩展名 “.nii” 或 “.nii.gz” 的文件格式。这些文件包含了图像数据和相关的元数据，如图像尺寸、像素分辨率、采集参数等。</p><p>以下是一些关键的信息，有助于了解 NII 文件格式：</p><ol><li><p><strong>图像数据</strong>: NII 文件包含了图像的原始像素数据。这些数据可以表示为多维数组，其中每个维度对应于图像的不同方向（例如 X、Y 和 Z 轴），以及可能的时间维度。</p></li><li><p><strong>头部信息</strong>: NII 文件的开头部分包含了关于图像数据的元数据，如图像尺寸、像素分辨率、采集参数（如重复时间、TR）、图像类型（例如 T1 加权还是 T2 加权）等信息。这些元数据通常以一种被称为 “NIfTI-1 头部” 的结构进行组织。</p></li><li><p><strong>文件扩展名</strong>: NII 文件可以具有 “.nii” 或 “.nii.gz” 的文件扩展名。”.nii” 文件是未经压缩的原始图像数据，而 “.nii.gz” 文件是经过 gzip 压缩的版本，占用更小的存储空间。</p></li><li><p><strong>工具和库</strong>: 有许多开源的工具和库可以用来读取、处理和分析 NII 格式的文件。其中一些工具包括 FSL（FMRIB Software Library）、ANTs（Advanced Normalization Tools）和 MRIcron 等。</p></li></ol><p>如果您需要处理或分析 NII 格式的文件，您可以使用这些工具来读取文件内容、进行图像处理、进行数据分析等。常见的操作包括图像配准、脑部分割、病变定位等。请注意，NII 文件在医学影像研究和临床诊断中发挥着重要作用，因此在处理这些文件时需要谨慎并遵循相关的法律和伦理规定。</p></blockquote><p>也就是说，可以把nii文件理解为一张三维的照片，可以从三个方向进行切片</p><p>那么这也就引出了baseline</p><h2 id="baseline的实现"><a href="#baseline的实现" class="headerlink" title="baseline的实现"></a>baseline的实现</h2><p>Baseline，基于Logistic Regression</p><h3 id="导入相关库"><a href="#导入相关库" class="headerlink" title="导入相关库"></a>导入相关库</h3><p>使用<code>glob</code>库来获取文件路径，<code>numpy</code>用于数值计算，<code>panda</code>s用于数据处理，<code>nibabel</code>用于加载和处理医学图像数据，<code>OrthoSlicer3D</code>用于图像可视化，<code>Counter</code>用于计数统计</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> glob                <span class="token comment"># 获取文件路径</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> nibabel <span class="token keyword">as</span> nib      <span class="token comment"># 处理医学图像数据</span><span class="token keyword">from</span> nibabel<span class="token punctuation">.</span>viewers <span class="token keyword">import</span> OrthoSlicer3D    <span class="token comment"># 图像可视化</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter              <span class="token comment"># 计数统计</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取训练集文件路径</span>train_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'脑PET图像分析和疾病预测挑战赛公开数据/Train/*/*'</span><span class="token punctuation">)</span>test_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'脑PET图像分析和疾病预测挑战赛公开数据/Test/*'</span><span class="token punctuation">)</span><span class="token comment"># 打乱训练集和测试集的顺序</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>test_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>定义了一个函数<code>extract_feature</code>，用于从脑PET图像中提取特征。</p><p><code>extract_feature</code>函数从文件路径加载PET图像数据，并从中随机选择10个通道。然后，它计算了一系列统计特征，如非零像素数量、零像素数量、平均值、标准差等。最后，函数根据文件路径判断样本类别，并将提取到的特征和类别作为返回值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_feature</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 加载PET图像数据</span>    img <span class="token operator">=</span> nib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 获取第一个通道的数据</span>    img <span class="token operator">=</span> img<span class="token punctuation">.</span>dataobj<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 随机筛选其中的10个通道提取特征</span>    random_img <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 对图片计算统计值</span>    feat <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span>random_img <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment"># 非零像素的数量</span>        <span class="token punctuation">(</span>random_img <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment"># 零像素的数量</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token comment"># 平均值</span>        random_img<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token comment"># 标准差</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 在列方向上平均值不为零的数量</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 在行方向上平均值不为零的数量</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment"># 列方向上的最大平均值</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 行方向上的最大平均值</span>    <span class="token punctuation">]</span>        <span class="token comment"># 根据路径判断样本类别（'NC'表示正常，'MCI'表示异常）</span>    <span class="token keyword">if</span> <span class="token string">'NC'</span> <span class="token keyword">in</span> path<span class="token punctuation">:</span>        <span class="token keyword">return</span> feat <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'NC'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> feat <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'MCI'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>利用<code>extract_feature</code>函数提取训练集和测试集的特征，并使用逻辑回归模型对训练集进行训练。</p><p>在这里，我们通过循环将特征提取过程重复进行30次，这是为了增加训练样本的多样性。然后，我们使用逻辑回归模型<code>LogisticRegression</code>来训练数据。在训练完成后，模型已经学习到了从特征到类别的映射关系</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对训练集进行30次特征提取，每次提取后的特征以及类别（'NC'表示正常，'MCI'表示异常）被添加到train_feat列表中。</span>train_feat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> train_path<span class="token punctuation">:</span>        train_feat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>extract_feature<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 对测试集进行30次特征提取   </span>test_feat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> test_path<span class="token punctuation">:</span>        test_feat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>extract_feature<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 使用训练集的特征作为输入，训练集的类别作为输出，对逻辑回归模型进行训练。</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegressionm <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 特征</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                       <span class="token comment"># 类别</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\50.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\43.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\60.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\81.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\24.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\54.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\18.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\45.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\52.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\76.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\65.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\96.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\11.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\4.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\7.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\84.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\82.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\55.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\35.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\13.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\47.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\27.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\80.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\15.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\30.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\53.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\41.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\95.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\62.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\51.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\72.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\39.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\28.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\33.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\98.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\97.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\19.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\57.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\58.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\25.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\14.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\74.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\66.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\67.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\2.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\44.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\63.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\70.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\90.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\49.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\61.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\83.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\17.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\87.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\34.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\92.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\5.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\71.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\36.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\23.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\79.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\59.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\29.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\1.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\32.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\64.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\16.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\94.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\21.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\3.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\73.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\89.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\93.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\40.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\12.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\99.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\91.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\31.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\77.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\42.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\56.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\86.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\20.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\75.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\9.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\68.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\100.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\10.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\46.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\26.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\78.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\48.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\22.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\8.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\6.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\37.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\69.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\38.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\85.nii&#39;, &#39;脑PET图像分析和疾病预测挑战赛公开数据/Test\\88.nii&#39;]</code></pre><h3 id="预测与结果输出"><a href="#预测与结果输出" class="headerlink" title="预测与结果输出"></a>预测与结果输出</h3><p>使用训练好的逻辑回归模型对测试集进行预测，并将预测结果进行投票，选出最多的类别作为该样本的最终预测类别。最后，将预测结果存储在CSV文件中并提交结果。</p><p>具体来说，使用了<code>Counter</code>来统计每个样本的30次预测结果中最多的类别，并将结果存储在<code>test_pred_label</code>列表中。然后，将样本ID和对应的预测类别存储在一个DataFrame中，并将其按照ID排序后保存为CSV文件，这样就得到了最终的结果提交文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对测试集进行预测并进行转置操作，使得每个样本有30次预测结果。</span>test_pred <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>test_pred <span class="token operator">=</span> test_pred<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment"># 对每个样本的30次预测结果进行投票，选出最多的类别作为该样本的最终预测类别，存储在test_pred_label列表中。</span>test_pred_label <span class="token operator">=</span> <span class="token punctuation">[</span>Counter<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_pred<span class="token punctuation">]</span><span class="token comment"># 生成提交结果的DataFrame，其中包括样本ID和预测类别。</span>submit <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'uuid'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_path<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 提取测试集文件名中的ID</span>        <span class="token string">'label'</span><span class="token punctuation">:</span> test_pred_label                                  <span class="token comment"># 预测的类别</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 按照ID对结果排序并保存为CSV文件</span>submit <span class="token operator">=</span> submit<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'uuid'</span><span class="token punctuation">)</span>submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑出来的分数是0.48485，不愧是Baseline！</p><h3 id="在实现baseline中的一些困惑，还有debug"><a href="#在实现baseline中的一些困惑，还有debug" class="headerlink" title="在实现baseline中的一些困惑，还有debug"></a>在实现baseline中的一些困惑，还有debug</h3><ul><li>特征提取中<strong>随机</strong>选择10个通道进行提取，然后计算的统计特征都是<strong>人为规定</strong>，故存在偶然性，这一次可能抽样抽的好就成绩好，抽的运气差点那就成绩也难看</li><li>关于split，对<code>\\</code>进行划分会更好一点</li></ul><h2 id="初次尝试CNN"><a href="#初次尝试CNN" class="headerlink" title="初次尝试CNN"></a>初次尝试CNN</h2><h3 id="认识CNN"><a href="#认识CNN" class="headerlink" title="认识CNN"></a>认识CNN</h3><p>卷积神经网络（Convolutional Neural Network，CNN）是一种在计算机视觉和图像处理领域广泛应用的深度学习模型。它专门用于处理具有网格结构数据的任务，例如图像和语音等。CNN 在图像分类、目标检测、图像生成等领域取得了显著的成功，因其在处理图像等数据时的特殊设计。</p><p>以下是 CNN 的一些重要概念和组成部分：</p><ol><li><p><strong>卷积层（Convolutional Layer）</strong>：卷积是 CNN 的核心操作之一。它通过滑动一个小的窗口（卷积核或过滤器）在输入数据（如图像）上，对局部区域进行特征提取。卷积操作可以捕捉到不同位置的特征，从而实现平移不变性。多个卷积核可以提取不同的特征。</p></li><li><p><strong>池化层（Pooling Layer）</strong>：池化操作用于降低特征图的尺寸，减少计算量，并保留重要的特征。最大池化和平均池化是常见的池化操作，它们分别取区域内最大值或平均值作为输出。</p></li><li><p><strong>激活函数（Activation Function）</strong>：激活函数引入非线性性质，使得网络能够学习复杂的模式。常用的激活函数包括ReLU（Rectified Linear Unit）、Sigmoid 和 Tanh。</p></li><li><p><strong>全连接层（Fully Connected Layer）</strong>：在卷积和池化层之后，一般会连接若干全连接层，用于将提取的特征映射到最终的输出类别。全连接层的神经元与上一层的所有神经元相连。</p></li><li><p><strong>批归一化（Batch Normalization）</strong>：用于在训练过程中对每一层的输出进行标准化，以加速网络的训练并提高稳定性。</p></li><li><p><strong>Dropout</strong>：在训练过程中，随机将某些神经元置零，有助于防止过拟合。</p></li></ol><p>CNN 的典型架构通常由一系列的卷积层、池化层、激活函数、全连接层等组成，最后通过一个适当的激活函数得到分类结果。深度卷积网络的层数可以很深，例如，VGG、ResNet 和 Inception 等网络。</p><p>在计算机视觉领域，CNN 以其在图像特征提取方面的强大能力而闻名，通过多次堆叠卷积层和池化层，网络可以逐渐学习到越来越抽象和高级的特征表示，从而在图像分类、物体检测、分割等任务中取得卓越表现。</p><h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><p>这段代码是一个深度学习项目的实现，主要用于处理脑PET图像数据，进行分类任务（识别脑PET图像是否为正常状态NC或认知障碍状态MCI）。以下是代码的详细解释：</p><ol><li><p><strong>导入库</strong>：首先导入了一系列需要用到的Python库，包括处理数据和图像的库（如NumPy、Pandas、PIL、OpenCV、albumentations等），PyTorch库，以及其他辅助库。</p></li><li><p><strong>设置随机种子和GPU设置</strong>：通过设置随机种子确保实验的可重现性，以及设置PyTorch在GPU上运行的一些参数。</p></li><li><p><strong>定义文件路径</strong>：指定训练和测试数据的文件路径。<code>train_path</code> 是训练图像的路径，<code>test_path</code> 是测试图像的路径。</p></li><li><p><strong>数据缓存定义</strong>：<code>DATA_CACHE</code> 是一个用于存储图像数据的缓存字典，以避免在每次访问时都加载图像数据。</p></li><li><p><strong>自定义数据集类 XunFeiDataset</strong>：这个类用于创建一个自定义的数据集，用于加载和处理图像数据。</p><ul><li><code>__init__</code> 方法初始化数据集，接收图像路径和一个可选的图像变换（transforms）。</li><li><code>__getitem__</code> 方法负责加载和处理数据。首先，它从缓存中加载图像数据，如果缓存中没有，就从NIfTI文件加载数据。然后，它从加载的图像中随机选择一些通道（层数），对图像进行变换（如果有的话），最后返回处理后的图像和标签。</li><li><code>__len__</code> 方法返回数据集的长度。</li></ul></li><li><p><strong>数据加载器定义</strong>：创建训练、验证和测试数据加载器，用于加载批量的图像数据。这里使用了 <code>torch.utils.data.DataLoader</code> 来实现。</p></li><li><p><strong>定义神经网络模型 XunFeiNet</strong>：这个类定义了一个基于预训练的ResNet-18模型的自定义模型。</p><ul><li>在构造函数 <code>__init__</code> 中，加载了预训练的ResNet-18模型，并对其进行修改，以适应数据。首先，修改了第一个卷积层的输入通道数，使其适应输入数据的通道数（这里是50通道）。然后，修改了全连接层的输出大小，以适应分类任务（2个类别：NC和MCI）。</li><li>在 <code>forward</code> 方法中，将输入数据传递给修改后的ResNet-18模型，并返回模型输出。</li></ul></li><li><p><strong>模型、损失函数和优化器定义</strong>：创建了一个 XunFeiNet 模型的实例，将其放置在GPU上运行。定义交叉熵损失函数和AdamW优化器。</p></li><li><p><strong>训练函数 train</strong>：定义了一个训练函数，用于在训练集上训练模型。</p><ul><li>在训练循环中，迭代训练数据加载器中的每个批次。</li><li>将输入数据和目标标签移到GPU上。</li><li>通过模型前向传播获取预测输出，计算损失。</li><li>清零优化器的梯度，进行反向传播和参数更新。</li><li>打印每20个批次的损失。</li><li>返回平均训练损失。</li></ul></li><li><p><strong>验证函数 validate</strong>：定义了一个验证函数，用于在验证集上评估模型性能。</p><ul><li>在验证循环中，迭代验证数据加载器中的每个批次。</li><li>将输入数据和目标标签移到GPU上。</li><li>通过模型前向传播获取预测输出，计算损失。</li><li>统计预测正确的数量，用于计算准确率。</li><li>返回验证集上的准确率。</li></ul></li><li><p><strong>训练循环</strong>：使用训练函数和验证函数进行训练。</p><ul><li>在循环内，迭代指定次数（这里是40次）进行训练和验证。</li><li>调用训练函数进行模型训练，获取训练损失。</li><li>调用验证函数计算验证集上的准确率以及训练集上的准确率。</li><li>打印每轮训练和验证的结果。</li></ul></li><li><p><strong>预测函数 predict</strong>：定义了一个预测函数，用于在测试集上进行预测。</p><ul><li>在预测循环中，迭代测试数据加载器中的每个批次。</li><li>将输入数据移到GPU上，通过模型前向传播获取预测输出。</li><li>将预测输出存储在一个列表中。</li><li>返回预测结果的NumPy数组。</li></ul></li><li><p><strong>测试集预测循环</strong>：使用预测函数进行测试集上的多次预测，并将结果累加。</p><ul><li>迭代指定次数（这里是10次）进行测试集预测。</li><li>第一次预测时，将预测结果存储在 <code>pred</code> 变量中。</li><li>从第二次预测开始，将后续预测结果累加到 <code>pred</code> 变量中。</li></ul></li><li><p><strong>结果生成和提交</strong>：使用预测结果生成一个DataFrame，将结果存储为CSV文件。</p><ul><li>将测试图像路径中的UUID解析为DataFrame的 ‘uuid’ 列。</li><li>将预测结果中的类别转换为 ‘NC’ 和 ‘MCI’，存储为 ‘label’ 列。</li><li>将DataFrame按UUID排序。</li><li>将DataFrame保存为名为 ‘submit2.csv’ 的CSV文件，以便进行结果提交。</li></ul></li></ol><p>这段代码通过自定义数据集类、模型定义、训练和验证循环等组件，实现了对脑PET图像</p><p>进行分类的深度学习流程，并最终生成一个用于提交的CSV文件，其中包含了对测试图像的分类结果。</p><h3 id="针对源码的修改"><a href="#针对源码的修改" class="headerlink" title="针对源码的修改"></a>针对源码的修改</h3><ul><li><code>num_workers</code> 设置为0，防止并发出问题</li><li><code>target</code> 改为 <code>target.long()</code>，防止调用API出现value error</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Baseline-py"><a href="#Baseline-py" class="headerlink" title="Baseline.py"></a>Baseline.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> glob                <span class="token comment"># 获取文件路径</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> nibabel <span class="token keyword">as</span> nib      <span class="token comment"># 处理医学图像数据</span><span class="token keyword">from</span> nibabel<span class="token punctuation">.</span>viewers <span class="token keyword">import</span> OrthoSlicer3D    <span class="token comment"># 图像可视化</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter              <span class="token comment"># 计数统计</span><span class="token comment"># 读取训练集文件路径</span>train_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./脑PET图像分析和疾病预测挑战赛公开数据/Train/*/*'</span><span class="token punctuation">)</span>test_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./脑PET图像分析和疾病预测挑战赛公开数据/Test/*'</span><span class="token punctuation">)</span><span class="token comment"># 打乱训练集和测试集的顺序</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>test_path<span class="token punctuation">)</span><span class="token comment"># 对PET文件提取特征</span><span class="token keyword">def</span> <span class="token function">extract_feature</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 加载PET图像数据</span>    img <span class="token operator">=</span> nib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 获取第一个通道的数据</span>    img <span class="token operator">=</span> img<span class="token punctuation">.</span>dataobj<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 随机筛选其中的10个通道提取特征</span>    random_img <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 对图片计算统计值</span>    feat <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span>random_img <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment"># 非零像素的数量</span>        <span class="token punctuation">(</span>random_img <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token comment"># 零像素的数量</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token comment"># 平均值</span>        random_img<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token comment"># 标准差</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 在列方向上平均值不为零的数量</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 在行方向上平均值不为零的数量</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment"># 列方向上的最大平均值</span>        random_img<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 行方向上的最大平均值</span>    <span class="token punctuation">]</span>        <span class="token comment"># 根据路径判断样本类别（'NC'表示正常，'MCI'表示异常）</span>    <span class="token keyword">if</span> <span class="token string">'NC'</span> <span class="token keyword">in</span> path<span class="token punctuation">:</span>        <span class="token keyword">return</span> feat <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'NC'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> feat <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'MCI'</span><span class="token punctuation">]</span><span class="token comment"># 对训练集进行30次特征提取，每次提取后的特征以及类别（'NC'表示正常，'MCI'表示异常）被添加到train_feat列表中。</span>train_feat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> train_path<span class="token punctuation">:</span>        train_feat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>extract_feature<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 对测试集进行30次特征提取   </span>test_feat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> test_path<span class="token punctuation">:</span>        test_feat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>extract_feature<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 使用训练集的特征作为输入，训练集的类别作为输出，对逻辑回归模型进行训练。</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegressionm <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 特征</span>    np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                       <span class="token comment"># 类别</span><span class="token punctuation">)</span><span class="token comment"># 对测试集进行预测并进行转置操作，使得每个样本有30次预测结果。</span>test_pred <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_feat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>test_pred <span class="token operator">=</span> test_pred<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment"># 对每个样本的30次预测结果进行投票，选出最多的类别作为该样本的最终预测类别，存储在test_pred_label列表中。</span>test_pred_label <span class="token operator">=</span> <span class="token punctuation">[</span>Counter<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_pred<span class="token punctuation">]</span><span class="token comment"># 生成提交结果的DataFrame，其中包括样本ID和预测类别。</span>submit <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'uuid'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_path<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 提取测试集文件名中的ID</span>        <span class="token string">'label'</span><span class="token punctuation">:</span> test_pred_label                                  <span class="token comment"># 预测的类别</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 按照ID对结果排序并保存为CSV文件</span>submit <span class="token operator">=</span> submit<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'uuid'</span><span class="token punctuation">)</span>submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="torch-version-py"><a href="#torch-version-py" class="headerlink" title="torch_version.py"></a>torch_version.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> glob<span class="token punctuation">,</span> argparse<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> cv2<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> StratifiedKFold<span class="token punctuation">,</span> KFold<span class="token keyword">import</span> torchtorch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">False</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>models <span class="token keyword">as</span> models<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> datasets<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dataset <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> nibabel <span class="token keyword">as</span> nib<span class="token keyword">from</span> nibabel<span class="token punctuation">.</span>viewers <span class="token keyword">import</span> OrthoSlicer3Dtrain_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./脑PET图像分析和疾病预测挑战赛公开数据/Train/*/*'</span><span class="token punctuation">)</span>test_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'./脑PET图像分析和疾病预测挑战赛公开数据/Test/*'</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>test_path<span class="token punctuation">)</span>DATA_CACHE <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">XunFeiDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_path<span class="token punctuation">,</span> transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>img_path <span class="token operator">=</span> img_path        <span class="token keyword">if</span> transform <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">in</span> DATA_CACHE<span class="token punctuation">:</span>            img <span class="token operator">=</span> DATA_CACHE<span class="token punctuation">[</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> nib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>dataobj<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>            DATA_CACHE<span class="token punctuation">[</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> img        <span class="token comment"># 随机选择一些通道</span>        idx <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> idx<span class="token punctuation">]</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>image<span class="token operator">=</span>img<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> img<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'NC'</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">)</span><span class="token keyword">import</span> albumentations <span class="token keyword">as</span> Atrain_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    XunFeiDataset<span class="token punctuation">(</span>train_path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  A<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                      A<span class="token punctuation">.</span>RandomRotate90<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>HorizontalFlip<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>RandomContrast<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>RandomBrightnessContrast<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>val_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    XunFeiDataset<span class="token punctuation">(</span>train_path<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  A<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                      A<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    XunFeiDataset<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span>                  A<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                      A<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>HorizontalFlip<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      A<span class="token punctuation">.</span>RandomContrast<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XunFeiNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>XunFeiNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet18<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resnet <span class="token operator">=</span> model    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>resnet<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token keyword">return</span> outmodel <span class="token operator">=</span> XunFeiNet<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_loss <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span>non_blocking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        target <span class="token operator">=</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span>non_blocking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val_acc <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>val_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># compute output</span>            output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            val_acc <span class="token operator">+=</span> <span class="token punctuation">(</span>output<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> val_acc <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>val_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_loss <span class="token operator">=</span> train<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">)</span>    val_acc <span class="token operator">=</span> validate<span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>    train_acc <span class="token operator">=</span> validate<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>    <span class="token comment"># print(train_loss, train_acc, val_acc)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:d&#125; epoch"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train loss:&#123;:.5f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train_acc:&#123;:.5f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"val_acc:&#123;:.5f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>val_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>test_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val_acc <span class="token operator">=</span> <span class="token number">0.0</span>    test_pred <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>test_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            test_pred<span class="token punctuation">.</span>append<span class="token punctuation">(</span>output<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>test_pred<span class="token punctuation">)</span>pred <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pred <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        pred <span class="token operator">=</span> predict<span class="token punctuation">(</span>test_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        pred <span class="token operator">+=</span> predict<span class="token punctuation">(</span>test_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>submit <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'uuid'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> test_path<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'label'</span><span class="token punctuation">:</span> pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>submit<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> submit<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'NC'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'MCI'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>submit <span class="token operator">=</span> submit<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'uuid'</span><span class="token punctuation">)</span>submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit2.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>2023年8月16日：跑通基于Logistic Regression的baseline，分数难看</p><p>2023年8月17日：跑通基于CNN的baseline，拿到一个还过得去的分数</p>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题十三</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%B8%89/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>W先生每天驾车去公司上班。W先生的住所位于A，公司位于F，图中的直线段代表公路，交叉点代表路口，直线段上的数字代表两路口之间的平均行驶时间。现在W先生的问题是要确定一条最省时的上班路线。</p><p><img src="/imgs/sikao13/1.png"></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这道题目需要计算的是两点之间的最短路径，可以采用两种思想，一种是贪心的思想，另一种就是动态规划的思想，就两种思想展开，阐述具体方法</p><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><h4 id="贪心算法（Dijkstra算法）"><a href="#贪心算法（Dijkstra算法）" class="headerlink" title="贪心算法（Dijkstra算法）"></a>贪心算法（Dijkstra算法）</h4><h5 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h5><p>通过<strong>迪杰斯特拉算法求最短路径</strong>的方法确定上班路线。迪杰斯特拉算法的一般步骤是：</p><p>算法求<strong>单个源点到其余各顶点</strong>的最短路径，计算思路是<strong>离源点最低路径长度的开序</strong>，运用到的思想是<strong>贪心</strong>（每次取离源点最近的点）。设<code>C</code>数组为<strong>蓝点集</strong>，起点为红点。当红点集合加入值时，关联的蓝点将更新最短路径。</p><p>我们通过在更新最短路径时对路径经过的点进行记录，可以得到最后的上班路线。</p><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 510;struct graph&#123;int n, m;int g[N][N];&#125;;void dijkstra(struct graph &amp;graph)&#123;bool st[N] &#x3D; &#123; 0 &#125;;int path[N] &#x3D; &#123; 0 &#125;, res[N] &#x3D; &#123; 0 &#125;, dist[N] &#x3D; &#123; 0 &#125;;memset(dist, 0x3f, sizeof dist);dist[1] &#x3D; 0;&#x2F;&#x2F;初始化for (int i &#x3D; 0; i &lt; graph.n; i++)&#123;int t &#x3D; -1;&#x2F;&#x2F;t为-1表示还未选择一个点for (int j &#x3D; 1; j &lt;&#x3D; graph.n; j++)&#123;if (!st[j] &amp;&amp; (t &#x3D;&#x3D; -1 || dist[t] &gt; dist[j]))t &#x3D; j;&#x2F;&#x2F;选取还未被选择的且距离最近的点&#125;st[t] &#x3D; true;for (int j &#x3D; 1; j &lt;&#x3D; graph.n; j++)&#123;if (dist[j] &gt; dist[t] + graph.g[t][j])&#123;dist[j] &#x3D; min(dist[j], dist[t] + graph.g[t][j]);path[j] &#x3D; t;&#125;&#125;&#125;cout &lt;&lt; &quot;需要的时间最短为:&quot; &lt;&lt; dist[graph.n] &lt;&lt; endl &lt;&lt; &quot;路径依次是:&quot;;int j &#x3D; graph.n, i &#x3D; 0;res[i] &#x3D; graph.n;&#x2F;&#x2F; 记录终点while (path[j] !&#x3D; 0)&#x2F;&#x2F; 将路径存放到结果数组中&#123;res[++i] &#x3D; path[j];j &#x3D; path[j];&#125;for (int m &#x3D; i; m &gt;&#x3D; 0; m--)&#x2F;&#x2F; 逆序输出&#123;cout &lt;&lt; res[m] &lt;&lt; &quot; &quot;;&#125;&#125;int main()&#123;struct graph graph;cin &gt;&gt; graph.n &gt;&gt; graph.m;memset(graph.g, 0x3f, sizeof graph.g);while (graph.m--)&#123;int a, b, c;cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;graph.g[a][b] &#x3D; min(graph.g[a][b], c);&#125;dijkstra(graph);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现结果：</p><p><img src="/imgs/sikao13/2.png"></p><p>算法的时间复杂度是$O(n^2)$</p><h4 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h4><h5 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h5><p>通过观察发现<strong>每个数都是由其左边&#x2F;下面的数的最短路径和其左边&#x2F;下面的数到该数的距离的加和</strong>得到。我们可以采用动态规划思想，从上到下、从左到右遍历各点，当遍历到最后一个点时，即得需要的最短时间。每次更新最短距离时，可以记录路径，从而确定上班路线。</p><p>设置状态函数$dist[i]$，得到公式<br>$$<br>dist[i]&#x3D;min \lbrace dist[i-1]+g[i-1][i],dist[i-m]+g[i-m][i] \rbrace<br>$$<br>$dist[i-m]$表示起点到该数下一行数的最短路径</p><h5 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;utility&gt;using namespace std;const int N &#x3D; 20;void dp(int n, int m)&#123;int g[N][N] &#x3D; &#123; 0 &#125;, dist[N];int path[N] &#x3D; &#123; 0 &#125;, res[N];memset(dist, 0x3f, sizeof dist);dist[1] &#x3D; 0;&#x2F;&#x2F; 读入数据for (int i &#x3D; 1; i &lt; m * n; i++)&#123;if (i % m &#x3D;&#x3D; 0)continue;cin &gt;&gt; g[i][i + 1];&#125;for (int i &#x3D; 1; i &lt;&#x3D; m * (n - 1); i++)&#123;cin &gt;&gt; g[i][i + m];&#125;&#x2F;&#x2F; 动态规划for (int i &#x3D; 2; i &lt;&#x3D; m; i++)&#123;dist[i] &#x3D; dist[i - 1] + g[i - 1][i];&#125;for (int i &#x3D; m + 1; i &lt;&#x3D; n * m; i++)&#123;if ((i - 1) % m !&#x3D; 0 &amp;&amp; dist[i - 1] + g[i - 1][i] &lt;&#x3D; dist[i - m] + g[i - m][i])&#123;dist[i] &#x3D; dist[i - 1] + g[i - 1][i];path[i] &#x3D; i - 1;&#125;else&#123;dist[i] &#x3D; dist[i - m] + g[i - m][i];path[i] &#x3D; i - m;&#125;&#125;    &#x2F;&#x2F; 输出答案cout &lt;&lt; &quot;需要的时间最短为:&quot; &lt;&lt; dist[n * m] &lt;&lt; endl &lt;&lt; &quot;路径依次是:&quot;;int j &#x3D; n * m, i &#x3D; 0;res[i] &#x3D; n * m;&#x2F;&#x2F; 记录终点while (path[j] !&#x3D; 0)&#x2F;&#x2F; 将路径存放到结果数组中&#123;res[++i] &#x3D; path[j];j &#x3D; path[j];&#125;for (int m &#x3D; i; m &gt;&#x3D; 0; m--)&#x2F;&#x2F; 逆序输出&#123;cout &lt;&lt; res[m] &lt;&lt; &quot; &quot;;&#125;&#125;int main()&#123;int n, m;&#x2F;&#x2F; n代表行数, m代表列数cout &lt;&lt; &quot;请输入公路矩阵行列的点数&quot; &lt;&lt; endl;cin &gt;&gt; n &gt;&gt; m;cout &lt;&lt; &quot;请输入各条边&quot; &lt;&lt; endl;dp(n, m);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法实现：</p><p><img src="/imgs/sikao13/3.png" alt="image-20230528141034425"></p><p>算法需要遍历所有节点，时间复杂度是$O(n)$</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>在芯片设计中，经常要考虑输入与输出端之间的连接关系，假设输入与输出端分别有若干端口，并且用一组数字进行标注（可能有重复），当且仅当输入端与输出端数字相等并且不与其他连接线相交的情况下，可以建立输入与输出之间的连接。设计算法策略，计算可能得到的最大连接数。</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>这是一道图论的题目，抽象来说，就是在二部图中寻找一个最大的没有交叉连线的匹配，本题的难点在于判断是否存在交叉连线</p><h3 id="算法设计-1"><a href="#算法设计-1" class="headerlink" title="算法设计"></a>算法设计</h3><p>使用递归的深度优先搜索函数dfs用于搜索可能的连接</p><p>递归调用中首先检查是否已经遍历完了所有的输出端口，如果是，则更新最大连接数并返回</p><p>对于当前输入端口和输出端口集合中的每个输出端口，判断它们的数字是否相等。如果相等，继续判断该连接与已建立的连接是否交叉。若没有交叉，则将该连接添加到当前的连接路径和已建立的连接集合中。</p><p>利用dfs的递归性质，穷举所有可能的连接方式，并通过剪枝条件来确保连线不交叉。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 连接关系结构体struct Connection &#123;    int input;    int output;&#125;;&#x2F;&#x2F; 深度优先搜索函数void dfs(int inputPort, const unordered_set&lt;int&gt;&amp; outputPorts,         const vector&lt;Connection&gt;&amp; path, int&amp; maxConnections,         unordered_set&lt;Connection&gt;&amp; connections) &#123;    if (outputPorts.empty()) &#123;        maxConnections &#x3D; max(maxConnections, static_cast&lt;int&gt;(path.size()));        return;    &#125;    for (int outputPort : outputPorts) &#123;        if (inputPort &#x3D;&#x3D; outputPort) &#123;            bool intersects &#x3D; false;            for (const Connection&amp; conn : connections) &#123;                if ((conn.input &lt; inputPort &amp;&amp; inputPort &lt; conn.output) ||                    (conn.input &lt; outputPort &amp;&amp; outputPort &lt; conn.output)) &#123;                    intersects &#x3D; true;                    break;                &#125;            &#125;            if (!intersects) &#123;                vector&lt;Connection&gt; newPath &#x3D; path;                newPath.push_back(&#123;inputPort, outputPort&#125;);                connections.insert(&#123;inputPort, outputPort&#125;);                unordered_set&lt;int&gt; newOutputPorts &#x3D; outputPorts;                newOutputPorts.erase(outputPort);                dfs(inputPort, newOutputPorts, newPath, maxConnections, connections);                connections.erase(&#123;inputPort, outputPort&#125;);            &#125;        &#125;    &#125;&#125;&#x2F;&#x2F; 计算最大连接数函数int calculateMaxConnections(const vector&lt;int&gt;&amp; inputs, const vector&lt;int&gt;&amp; outputs) &#123;    unordered_set&lt;Connection&gt; connections;    int maxConnections &#x3D; 0;    for (int inputPort : inputs) &#123;        dfs(inputPort, unordered_set&lt;int&gt;(outputs.begin(), outputs.end()), &#123;&#125;,            maxConnections, connections);    &#125;    return maxConnections;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 最短路径 </tag>
            
            <tag> 二部图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题十二</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%BA%8C/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Given a tree T &#x3D; (V,E), find the maximum independent set of the tree. For example, maximum independent set of the tree of following tree has size 7.</p><p><img src="/imgs/sikao12/1.png"></p><p>The green vertices shows that the maximum indpendent set of thetree has size 7.</p><p>(1) Design an efficient greedy algorithm to solve the problem. </p><p>(2) If each vertex has a weight such as benefit,whether can you use a Greedy algorithm to get a maximum benefit where if one vertex has been selected then its adjacent verticex can not be selected.</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这道思考题考察的是求树中的最大独立集的问题</p><p>独立集概念：</p><p>对于树$T&#x3D;(V,E)$，若$V^{‘} \subseteq V$且$V^{‘}$中任意两点都不相邻，则$V^{‘}$是树T的一个独立集</p><p>在这个问题中，可以采用贪心算法求取树中的最大独立集</p><p>贪心算法通过一系列的局部选择来得到一个问题的解，每一次贪心选择都将所有问题简化为规模更小的子问题。</p><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><ol><li>初始化一个空的最大独立集</li><li>从树的叶子节点出发，逐层向上处理。对于每个节点，有两种情况：<ul><li>如果该节点的父结点已经被选中作为最大独立集的一部分，则跳过该节点</li><li>如果该节点的父结点没有被选中作为最大独立集的一部分，则将该节点添加到最大独立集中，并将其所有子节点标记为已访问</li></ul></li><li>当该节点处理完后，向上处理，直到处理完所有节点</li></ol><p>使用深度优先搜索遍历树的节点</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;unordered_set&gt;using namespace std;struct TreeNode &#123;    int val;    vector&lt;TreeNode*&gt; children;    TreeNode* parent &#x3D; nullptr;    TreeNode(int value) : val(value) &#123;&#125;&#125;;unordered_set&lt;TreeNode*&gt; max_independent_set;unordered_set&lt;TreeNode*&gt; visited;void dfs(TreeNode* node) &#123;    for (TreeNode* child : node-&gt;children) &#123;            dfs(child);    &#125;    if (node-&gt;parent &amp;&amp; max_independent_set.find(node-&gt;parent) &#x3D;&#x3D; max_independent_set.end() &amp;&amp; visited.find(node) &#x3D;&#x3D; visited.end()) &#123;        max_independent_set.insert(node);        visited.insert(node);        visited.insert(node-&gt;parent);    &#125;&#125;unordered_set&lt;TreeNode*&gt; findMaxIndependentSet(TreeNode* root) &#123;    max_independent_set.clear();    visited.clear();    dfs(root);    return max_independent_set;&#125;int main() &#123;    &#x2F;&#x2F; 构建树的示例    TreeNode* root &#x3D; new TreeNode(1);    TreeNode* node2 &#x3D; new TreeNode(2);    TreeNode* node3 &#x3D; new TreeNode(3);    TreeNode* node4 &#x3D; new TreeNode(4);    TreeNode* node5 &#x3D; new TreeNode(5);    TreeNode* node6 &#x3D; new TreeNode(6);    TreeNode* node7 &#x3D; new TreeNode(7);    TreeNode* node8 &#x3D; new TreeNode(8);    TreeNode* node9 &#x3D; new TreeNode(9);    root-&gt;children.push_back(node2);    root-&gt;children.push_back(node3);    root-&gt;children.push_back(node4);    node2-&gt;parent &#x3D; root;    node3-&gt;parent &#x3D; root;    node4-&gt;parent &#x3D; root;    node2-&gt;children.push_back(node5);    node2-&gt;children.push_back(node6);    node5-&gt;parent &#x3D; node2;    node6-&gt;parent &#x3D; node2;    node4-&gt;children.push_back(node7);    node4-&gt;children.push_back(node8);    node4-&gt;children.push_back(node9);    node7-&gt;parent &#x3D; node4;    node8-&gt;parent &#x3D; node4;    node9-&gt;parent &#x3D; node4;    unordered_set&lt;TreeNode*&gt; result &#x3D; findMaxIndependentSet(root);    &#x2F;&#x2F; 输出最大独立集中的节点值    for (TreeNode* node : result) &#123;        cout &lt;&lt; node-&gt;val &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用深度优先搜索（DFS）来遍历树的节点。首先，找到所有叶子节点，并从它们的父节点开始逐层向上处理。对于每个节点，如果它的父节点已经被选择，则跳过该节点；否则，将该节点添加到最大独立集中，并将其所有子节点标记为已访问。</p><p>这是一个基于贪心算法的近似解法，不一定能够得到最优解。但是，在树结构中，这种贪心算法通常能够得到较好的结果。</p><p>算法遍历了整棵树，因此时间复杂度是$O(n)$。</p><p>如果在每个顶点都有一个权重时，贪心算法无法保证通过选择顶点使得相邻顶点不能被选择的方式获得最大的收益</p><p>贪心算法在每一步都做出局部最优的选择，但是在MWIS问题中，局部最优的选择未必能够得到全局最优解。选择一个顶点意味着排除其相邻的顶点，这种依赖关系使得设计一个能够保证最大收益的贪心算法变得困难。</p><p>为了在不能选择相邻顶点的情况下找到最大收益，通常需要其他方法，如动态规划或分支界限算法，这些方法可以探索所有可能的顶点组合以确定最优解。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>Scheduling to Minimize Weighted Completion Time</p><p>Input: A set of n jobs [n] :&#x3D; {1, 2, 3, · · · , n}, each job j has a weight wj and processing time $t_j$</p><p>Output: an ordering of jobs so as to minimize the total weighted completion time of jobs</p><p><img src="/imgs/sikao12/2.png"></p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>解决这道题目可以使用贪心算法，依照某种原则确定执行顺序，在规划工作集的最小权重完成时间时，采用单位时间权重确定优先级</p><h3 id="算法设计-1"><a href="#算法设计-1" class="headerlink" title="算法设计"></a>算法设计</h3><p>要使用贪心算法规划工作集的最小权重完成时间，可以按照以下步骤进行：</p><ol><li><p>定义工作集：给定一组工作，每个工作有一个处理时间和一个权重</p></li><li><p>排序工作：根据贪心原则，按照某种标准对工作进行排序。一种常见的排序方式是按照权重除以处理时间的比值进行非递增排序（即权重-处理时间比值越大，优先级越高）</p></li><li><p>创建工作计划：按照排序后的顺序，依次将工作分配给可用的时间槽或机器。可以使用一个变量来记录每个时间槽或机器的当前时间</p></li><li><p>计算加权完成时间：对于每个已安排的工作，计算其加权完成时间，即该工作的处理时间乘以其权重</p></li><li><p>计算总加权完成时间：将所有工作的加权完成时间相加，得到最终的总加权完成时间</p></li></ol><p>贪心算法的关键在于选择适当的排序标准，以便每次选择具有最高优先级的工作。然而，需要注意的是，贪心算法并不能保证获得最优解，但可以提供较好的近似解。对于更精确的解，可能需要使用其他算法，如动态规划或整数规划。</p><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*Scheduling to Minimize Weighted Completion TimeInput: A set of n jobs [n] :&#x3D; &#123;1, 2, 3, · · · , n&#125;, each job j has a weight wj and processing time tjOutput: an ordering of jobs so as to minimize the total weighted completion time of jobs*&#x2F;#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;struct Job &#123;    int id;    int weight;    int time;&#125;;void swap(Job&amp; a, Job&amp; b) &#123;    Job temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;void printjobs(vector&lt;Job&gt;&amp; jobs) &#123;    for (int i &#x3D; 0; i &lt; jobs.size(); i++) &#123;        cout &lt;&lt; jobs[i].id &lt;&lt; &quot; &quot; &lt;&lt; jobs[i].weight &lt;&lt; &quot; &quot; &lt;&lt; jobs[i].time &lt;&lt; endl;    &#125;&#125;void sortjobs(vector&lt;Job&gt;&amp; jobs) &#123;    for (int i &#x3D; 0; i &lt; jobs.size(); i++) &#123;        for (int j &#x3D; i + 1; j &lt; jobs.size(); j++) &#123;            if (jobs[i].weight &#x2F; jobs[i].time &lt; jobs[j].weight &#x2F; jobs[j].time) &#123;                swap(jobs[i], jobs[j]);            &#125;        &#125;    &#125;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    vector&lt;Job&gt; jobs(n);    for (int i &#x3D; 0; i &lt; n; i++) &#123;        cin &gt;&gt; jobs[i].weight &gt;&gt; jobs[i].time;        jobs[i].id &#x3D; i + 1;    &#125;    sortjobs(jobs);    printjobs(jobs);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本算法的时间复杂度是$O(n^2)$，改进优先级排序可以做到$O(nlog~n)$的时间复杂度</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 最大独立集 </tag>
            
            <tag> 最短完成时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题十一</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%B8%80/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>证明：图G中顶点$v_i$到顶点$v_j$之间长度为k的路径数量等于$A^k$的第(i,j)个元素，其中A是图G的邻接矩阵。</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><h3 id="证明k-x3D-1时成立"><a href="#证明k-x3D-1时成立" class="headerlink" title="证明k&#x3D;1时成立"></a>证明k&#x3D;1时成立</h3><p>取k&#x3D;1，显然图G中顶点$v_i$到顶点$v_j$之间长度为1的路径数量等于$A$的第(i,j)个元素，A为邻接矩阵</p><h3 id="假设k-x3D-m的时候成立"><a href="#假设k-x3D-m的时候成立" class="headerlink" title="假设k&#x3D;m的时候成立"></a>假设k&#x3D;m的时候成立</h3><p>假设k&#x3D;m时成立，即<br>$$<br>A^m&#x3D;(a^{m}<em>{ij})</em>{n*n}(i&#x3D;1-n,j&#x3D;1-n)<br>$$<br>矩阵中$a^{m}_{ij}$值等于图G中顶点$v_i$到顶点$v_j$之间长度为m的路径数量成立</p><h3 id="证明k-x3D-m-1时成立"><a href="#证明k-x3D-m-1时成立" class="headerlink" title="证明k&#x3D;m+1时成立"></a>证明k&#x3D;m+1时成立</h3><p>$$<br>A^{m+1}&#x3D;(a^{m+1}<em>{ij})</em>{n*n}(i&#x3D;1-n,j&#x3D;1-n)<br>$$</p><p>其中$a^{m+1}<em>{ij}&#x3D;\sum</em>{p&#x3D;1}^n(a^{m}<em>{ip}*a</em>{pj})$</p><p>已知$a^{m}<em>{ip}$数值等于顶点$v_i$到顶点$v_p$之间长度为m的路径数量，$a</em>{pj}$为顶点$v_p$到顶点$v_j$之间长度为1的路径数量，两者乘积为顶点$v_i$经顶点$v_p$到顶点$v_j$长度为m+1的路径数量，求和即为顶点$v_i$到顶点$v_j$之间长度为m+1的所有路径数量，因此k&#x3D;m+1时结论成立</p><p>至此，结论得证</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 邻接矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题十</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%8D%81/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><strong>调研学习并给出矩阵的LU分解方法</strong></p><h3 id="矩阵的LU分解方法"><a href="#矩阵的LU分解方法" class="headerlink" title="矩阵的LU分解方法"></a>矩阵的LU分解方法</h3><h4 id="Doolittle分解"><a href="#Doolittle分解" class="headerlink" title="Doolittle分解"></a>Doolittle分解</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>数值分析中得到：</p><p>设<strong>A</strong>为$n*n$阶矩阵，如果<strong>A</strong>的顺序主子式$A_i$满足$det(A_i)\neq 0(i&#x3D;1,2,…,n-1)$，则<strong>A</strong>可分解为一个单位下三角矩阵<strong>L</strong>与一个上三角矩阵<strong>U</strong>的乘积，即<strong>A&#x3D;LU</strong>，且分解是唯一的</p><p>即<br>$$<br>\left(\begin{array}{cccc}<br>a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1 n} \<br>a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2 n} \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>a_{n 1} &amp; a_{n 2} &amp; \cdots &amp; a_{n n}<br>\end{array}\right)&#x3D;\left(\begin{array}{cccc}<br>1 &amp; &amp; &amp; \<br>l_{21} &amp; 1 &amp; &amp; \<br>\vdots &amp; \vdots &amp; \ddots &amp; \<br>l_{n 1} &amp; l_{n 2} &amp; \cdots &amp; 1<br>\end{array}\right)\left(\begin{array}{cccc}<br>u_{11} &amp; u_{12} &amp; \cdots &amp; u_{1 n} \<br>&amp; u_{22} &amp; \cdots &amp; u_{2 n} \<br>&amp; &amp; \ddots &amp; \vdots \<br>&amp; &amp; &amp; u_{n n}<br>\end{array}\right)<br>$$<br>由矩阵乘法可以得到u、l关系：<br>$$<br>\left{\begin{array}{l}<br>\boldsymbol{u}<em>{i j}&#x3D;\boldsymbol{a}</em>{i j}-\sum_{k&#x3D;1}^{i-1} \boldsymbol{l}<em>{i k} \boldsymbol{u}</em>{k j} \quad j&#x3D;\boldsymbol{i}: \boldsymbol{n} \<br>\boldsymbol{l}<em>{i j}&#x3D;\left(\boldsymbol{a}</em>{i j}-\sum_{k&#x3D;1}^{j-1} \boldsymbol{l}<em>{i k} \boldsymbol{u}</em>{k j}\right) &#x2F; \boldsymbol{u}<em>{j j} \quad \boldsymbol{i}&#x3D;\boldsymbol{j}+\mathbf{1}: \boldsymbol{n}<br>\end{array}\right.<br>$$<br>在计算机运算程序中，可以将两个三角矩阵按照紧凑格式存放在同一个矩阵中，节省存储空间（注意：主对角线上存储的是<strong>U</strong>矩阵上主对角线的元素，而<strong>L</strong>矩阵主对角线元素都为1，只要在运算中体现即可）：<br>$$<br>\left(\begin{array}{cccc}<br>\boldsymbol{u}</em>{11} &amp; \boldsymbol{u}<em>{12} &amp; \ldots &amp; \boldsymbol{u}</em>{1 n} \<br>\boldsymbol{l}<em>{21} &amp; \boldsymbol{u}</em>{22} &amp; \cdots &amp; \boldsymbol{u}<em>{2 n} \<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>\boldsymbol{l}</em>{n 1} &amp; \boldsymbol{l}<em>{n 2} &amp; \cdots &amp; \boldsymbol{u}</em>{n n}<br>\end{array}\right)<br>$$</p><h5 id="Doolittle分解算法实现"><a href="#Doolittle分解算法实现" class="headerlink" title="Doolittle分解算法实现"></a>Doolittle分解算法实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Doolittle(double** a,int n,double** res)&#123;    for (int k &#x3D; 1; k &lt; n + 1; k++)&#123;for (int j &#x3D; k, i &#x3D; k + 1; j &lt; n + 1, i &lt; n + 1; j++, i++)&#123;double sum_1 &#x3D; 0;for (int t &#x3D; 1; t &lt; k; t++)&#123;sum_1 +&#x3D; res[k - 1][t - 1] * res[t - 1][j - 1];&#125;res[k - 1][j - 1] &#x3D; a[k - 1][j - 1] - sum_1;double sum_2 &#x3D; 0;for (int t &#x3D; 1; t &lt; k; t++)&#123;sum_2 +&#x3D; res[i - 1][t - 1] * res[t - 1][k - 1];&#125;res[i - 1][k - 1] &#x3D; (a[i - 1][k - 1] - sum_2) &#x2F; res[k - 1][k - 1];&#125;double sum_1 &#x3D; 0;for (int t &#x3D; 1; t &lt; k; t++)&#123;sum_1 +&#x3D; res[k - 1][t - 1] * res[t - 1][n - 1];&#125;res[k - 1][n - 1] &#x3D; a[k - 1][n - 1] - sum_1;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Crout分解"><a href="#Crout分解" class="headerlink" title="Crout分解"></a>Crout分解</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>与Doolittle分解类似的，将单位下三角矩阵<strong>L</strong>与一个上三角矩阵<strong>U</strong>的乘积替换成下三角矩阵<strong>L</strong>与一个单位上三角矩阵<strong>U</strong>的乘积，其实质上，是将<strong>U</strong>进一步分解为：</p><p><img src="/imgs/sikao10/1.png" alt="image-20230422212257389"></p><p>也被称为$LDL^T$分解</p><h5 id="Crout分解算法实现"><a href="#Crout分解算法实现" class="headerlink" title="Crout分解算法实现"></a>Crout分解算法实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Cout(double** a,int n,double** res)&#123;    for(int k&#x3D;0;k&lt;n;k++)      &#123;        &#x2F;&#x2F;同时计算L的第1到K列元素          for(int i&#x3D;k;i&lt;n;i++)          &#123;             res[i][k]&#x3D;a[i][k];             for(int j&#x3D;0;j&lt;&#x3D;k-1;j++)             res[i][k]-&#x3D;(res[i][j]*res[j][k]);          &#125;          &#x2F;&#x2F;同时计算U的第1到K行元素            for(int j&#x3D;k+1;j&lt;n;j++)          &#123;              res[k][j]&#x3D;a[k][j];              for(int i&#x3D;0;i&lt;&#x3D;k-1;i++)              res[k][j]-&#x3D;(res[k][i]*res[i][j]);              res[k][j]&#x2F;&#x3D;res[k][k];          &#125;      &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出方案计算可逆矩阵的逆</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="方法一：Gauss-Jordan消元法"><a href="#方法一：Gauss-Jordan消元法" class="headerlink" title="方法一：Gauss-Jordan消元法"></a>方法一：Gauss-Jordan消元法</h4><p>构造一个n*2n的增广矩阵$(A,I_n)$</p><p>然后使用高斯消元法，将增广矩阵的左半部分化为单位矩阵，得到的增广矩阵右半部分即为$(I_n,A^{-1})$</p><p>高斯消元法：</p><ul><li>对于一个矩阵A，我们从第1行到第n行不断选取第i列不为0的行，然后做一个行变换（交换两行，使得当前的第i行的第i列不为0）</li><li>然后将当前的第i行做一个初等变换，也就是都除以$A[i][i]$这样的话就能让第i行第i列变为1</li><li>将第i行下面的所有行的第i列全部消掉，此时就构成了一个上三角矩阵</li><li>此时已经构成了一个阶梯型矩阵，我们再从下往上不断将上半矩阵同理消掉即可</li></ul><p>算法：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void gauss()&#123;for(ll i &#x3D; 1;i &lt;&#x3D; n; ++i) &#123;&#x2F;&#x2F;枚举当前处理到第几列for(ll j &#x3D; i;j &lt;&#x3D; n; ++j) &#123;&#x2F;&#x2F;找到一个第i列不为空的行if(fabs(a[i][i]) &gt; EPS) &#123;for(ll k &#x3D; i;k &lt;&#x3D; n; ++k) &#x2F;&#x2F;交换i,j行swap(a[i][k],a[j][k]);break;&#125;&#125;if(fabs(a[i][i]) &lt; EPS) &#123;cout&lt;&lt;&quot;不存在逆矩阵&quot;&lt;&lt;endl;return ;&#125;&#x2F;&#x2F;这里就是将第i行下面所有行的第i列清空，变成一个阶梯型的矩阵double aii_inv &#x3D; 1.0&#x2F;a[i][i];&#x2F;&#x2F;将第i行都乘上a[i][i]的逆a[i][i] &#x3D; 1.0;for(ll j &#x3D; i + 1;j &lt;&#x3D; n ; ++j) &#123;a[i][j] &#x3D; a[i][j] * aii_inv;&#125;for(ll j &#x3D; 1;j &lt;&#x3D; n; ++j) &#123;b[i][j] &#x3D; b[i][j] * aii_inv;&#125;&#x2F;&#x2F;将第i行下面的所有第i列的元素值清空for(ll j &#x3D; i + 1;j &lt;&#x3D; n; ++j) &#123;for(ll k &#x3D; i + 1;k &lt;&#x3D; n; ++k) &#123;a[j][k] &#x3D; a[j][k] - a[i][k] * a[j][i];&#125;for(ll k &#x3D; 1;k &lt;&#x3D; n; ++k) &#123;b[j][k] &#x3D; b[j][k] - b[i][k] * a[j][i];&#125;a[j][i] &#x3D; 0.0;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>演示：</p><p><img src="/imgs/sikao10/2.png" alt="image-20230422221117595"></p><h4 id="方法二：LU分解法"><a href="#方法二：LU分解法" class="headerlink" title="方法二：LU分解法"></a>方法二：LU分解法</h4><p>LU分解法是高斯消元法的一种变种算法，根据上述定义，将矩阵<strong>A</strong>分解成一个下三角矩阵与一个上三角矩阵：<br>$$<br>A&#x3D;LU<br>\<br>A^{-1}&#x3D;U^{-1}L^{-1}<br>$$</p><h4 id="方法三：SVD分解法"><a href="#方法三：SVD分解法" class="headerlink" title="方法三：SVD分解法"></a>方法三：SVD分解法</h4><p>奇异值分解，将矩阵<strong>A</strong>分解为三个矩阵的乘积分别为：正交矩阵<strong>U</strong>、对角矩阵<strong>W</strong>、另一正交矩阵<strong>V</strong>的转置**$V^T$**<br>$$<br>A&#x3D;UWV^T<br>\<br>A^{-1}&#x3D;VW^{-1}U^T<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 矩阵LU分解 </tag>
            
            <tag> 矩阵的逆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题九</title>
      <link href="/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B9%9D/"/>
      <url>/2023/08/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B9%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>对比分析折半查找与斐波那契查找的性能与应用场景</p><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><h4 id="折半查找介绍"><a href="#折半查找介绍" class="headerlink" title="折半查找介绍"></a>折半查找介绍</h4><p>本算法使用前提是静态查找表中的数据必须是有序的，定义两个指针low和high指向查找表的第一个元素和最后一个元素，指针mid指向处于low和high指针中间位置的元素，在查找过程中，每次都同mid指向的元素进行比较，在比较之后确定下一次比较的区间，重置low和high其中一个指针，在下一区间进行比较。</p><h4 id="折半查找算法的实现"><a href="#折半查找算法的实现" class="headerlink" title="折半查找算法的实现"></a>折半查找算法的实现</h4><h5 id="循环实现"><a href="#循环实现" class="headerlink" title="循环实现"></a>循环实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int BinarySearch_c(int array[], int n, int key) &#123;int low &#x3D; 0, high &#x3D; n;int mid;while (low &lt;&#x3D; high) &#123;mid &#x3D; (low + high) &gt;&gt; 1;if (key &lt; array[mid]) &#123;high &#x3D; mid - 1;&#125;else if (key &gt; array[mid]) &#123;low &#x3D; mid + 1;&#125;else &#123;return mid;&#125;&#125;return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int BinarySearch_r(int array[], int low, int high,int key) &#123;int mid &#x3D; (low + high) &gt;&gt; 1;if (key &lt; array[mid]) &#123;return BinarySearch_r(array, low, mid - 1, key);&#125;else if (key &gt; array[mid]) &#123;return BinarySearch_r(array, mid + 1, high, key);&#125;else &#123;return mid;&#125;return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="折半查找的性能及应用场景"><a href="#折半查找的性能及应用场景" class="headerlink" title="折半查找的性能及应用场景"></a>折半查找的性能及应用场景</h4><p>在有序表中，折半查找的效率比较高，折半查找每进行依次比较就能拍出表长度的一半，时间复杂度是$O(log_2n)$，如果查找表是无序的，先要将表进行排序，排序本身耗费的时间会比查找时间多，因此二分查找适用于一经建立就很少改动的线性表或者是静态有序数据集，二分查找不适合数据量太大或者太小的场景，数据量太大消耗太多的连续内存，数据量太小，其表现不如顺序查找。</p><h3 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h3><h4 id="斐波那契查找介绍"><a href="#斐波那契查找介绍" class="headerlink" title="斐波那契查找介绍"></a>斐波那契查找介绍</h4><p>斐波那契查找原理和二分查找相似，仅仅改变了中间结点的位置，在斐波那契查找算法中，mid位于黄金分割点附近，在斐波那契数列($F(k)&#x3D;F(k-1)+F(k-2),F(1)&#x3D;1,F(2)&#x3D;1$)中有结论：<br>$$<br>\lim\limits_{k\rightarrow\infty}F(k-1)&#x2F;F(k)&#x3D;\frac{\sqrt{5}-1}{2}<br>$$<br>本查找算法关键是找到mid的位置，在n&#x3D;F(k)情况下，mid&#x3D;low+F(k-1)-1，进行完一次查找后，排除其中一个区间，确定新的low和high区间。</p><h4 id="斐波那契查找算法实现"><a href="#斐波那契查找算法实现" class="headerlink" title="斐波那契查找算法实现"></a>斐波那契查找算法实现</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int FibSearch(int arr[], int key,int n) &#123;int low &#x3D; 0, high &#x3D; n - 1;int mid;int k &#x3D; 0;while (n &gt; Fibonacci(k) - 1)k++;while (low &lt;&#x3D; high) &#123;mid &#x3D; low + Fibonacci(k - 1) - 1;if (key &lt; arr[mid]) &#123;high &#x3D; mid - 1;k--;&#125;else if (key &gt; arr[mid]) &#123;low &#x3D; mid + 1;k -&#x3D; 2;&#125;else &#123;if (mid &lt;&#x3D; n - 1)return mid;elsereturn n - 1;&#125;&#125;return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="斐波那契查找算法性能及应用场景"><a href="#斐波那契查找算法性能及应用场景" class="headerlink" title="斐波那契查找算法性能及应用场景"></a>斐波那契查找算法性能及应用场景</h4><p>斐波那契查找算法是二分查找的一种改进算法，运用黄金比例的概念提高查询速率，但同样也是一种有序表查找算法，它的平均性能比折半查找好，但最坏情况下查找时间比折半查找长，虽然时间复杂度仍是$O(log~n)$，但是在斐波那契查找中，分割只需要用到加减法而不需要用到除法，虽然折半查找的除2可以用移位运算代替，对于大样本查找效率更高。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>调研学习Bloom过滤器的原理</p><h3 id="Bloom过滤器"><a href="#Bloom过滤器" class="headerlink" title="Bloom过滤器"></a>Bloom过滤器</h3><h4 id="Bloom-Filter介绍"><a href="#Bloom-Filter介绍" class="headerlink" title="Bloom Filter介绍"></a>Bloom Filter介绍</h4><p>Bloom Filter是1970年Bloom提出的一种数据结构，实际上是一个很长的二进制向量和一系列随机映射函数。Bloom过滤器可以用于检索一个元素是否在一个集合中。</p><h5 id="Bloom-Filter优点"><a href="#Bloom-Filter优点" class="headerlink" title="Bloom Filter优点"></a>Bloom Filter优点</h5><ul><li>时间复杂度低，增加、查询元素的时间复杂度为$O(N)$(N为哈希函数的个数)</li><li>保密性强，过滤器不存储元素本身</li><li>存储空间小</li></ul><h5 id="Bloom-Filter缺点"><a href="#Bloom-Filter缺点" class="headerlink" title="Bloom Filter缺点"></a>Bloom Filter缺点</h5><ul><li>存在一定的误判率</li><li>无法获取元素本身</li><li>很难删除元素</li></ul><h4 id="Bloom-Filter的使用场景"><a href="#Bloom-Filter的使用场景" class="headerlink" title="Bloom Filter的使用场景"></a>Bloom Filter的使用场景</h4><p>过滤器可以告知<strong>元素一定不存在或者可能存在</strong>，也就是说如果过滤器告知某元素可能存在，实际会有两种可能性，通过查阅资料查找到过滤器的使用场景</p><ul><li>解决Redis缓存穿透问题</li><li>邮件过滤</li><li>对爬虫网址进行过滤</li><li>解决重复出现元素问题</li></ul><h4 id="Bloom-Filter过滤器的原理"><a href="#Bloom-Filter过滤器的原理" class="headerlink" title="Bloom Filter过滤器的原理"></a>Bloom Filter过滤器的原理</h4><h5 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h5><p>一个很长的二进制向量+一系列随机映射函数</p><p>以Redis中的布隆过滤器实现为例：</p><p>一个大型位数组+多个无偏hash函数</p><h5 id="空间计算"><a href="#空间计算" class="headerlink" title="空间计算"></a>空间计算</h5><p>在布隆过滤器增加元素之前，首先需要初始化布隆过滤器的空间，也就是上面说的二进制数组，除此之外还需要计算无偏hash函数的个数。布隆过滤器提供了两个参数，分别是预计加入元素的大小n，运行的错误率f。布隆过滤器中有算法根据这两个参数会计算出二进制数组的大小l，以及无偏hash函数的个数k。<br>它们之间的关系比较简单：</p><ul><li>错误率越低，位数组越长，控件占用较大</li><li>错误率越低，无偏hash函数越多，计算耗时较长</li></ul><h5 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h5><p>往布隆过滤器增加元素，添加的key需要根据k个无偏hash函数计算得到多个hash值，然后对数组长度进行取模得到数组下标的位置，然后将对应数组下标的位置的值置为1</p><ul><li>通过k个无偏hash函数计算得到k个hash值</li><li>依次取模数组长度，得到数组索引</li><li>将计算得到的数组索引下标位置数据修改为1</li></ul><h5 id="查询元素"><a href="#查询元素" class="headerlink" title="查询元素"></a>查询元素</h5><p>布隆过滤器最大的用处就在于判断某样东西一定不存在或者可能存在，而这个就是查询元素的结果。其查询元素的过程如下：</p><ul><li>通过k个无偏hash函数计算得到k个hash值</li><li>依次取模数组长度，得到数组索引</li><li>判断索引处的值是否全部为1，如果全部为1则存在（这种存在可能是误判），如果存在一个0则必定不存在</li></ul>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 查找算法 </tag>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生指南</title>
      <link href="/2023/08/12/%E6%96%B0%E7%94%9F%E6%8C%87%E5%8D%97/"/>
      <url>/2023/08/12/%E6%96%B0%E7%94%9F%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="入学の准备"><a href="#入学の准备" class="headerlink" title="入学の准备"></a>入学の准备</h2><p>计算机学院的同学要在南校区度过三年，大四搬到校本部</p><h3 id="杂物篇"><a href="#杂物篇" class="headerlink" title="杂物篇"></a>杂物篇</h3><ol><li>携带录取通知书及告知需要的各项资料，可以直接装在通知书邮件信封里；</li><li>准备专用文件袋（卡包）装各种证件、银行卡；</li><li>各底色的证件照纸质版和电子版；</li><li>防晒霜（21级的学长学姐军训时长沙位于全国气温前列）和雨伞（笔者建议大伞和小伞都可以准备，小伞随身携带应急，大伞固定公寓预备）及常备药物；</li><li>尽量准备能够装入电脑的大背包（笔者是身背游戏本的勇士）以及只能装基本书籍的小背包，能够根据学习需求切换，毕竟中南的通勤时间有目共睹。</li></ol><h3 id="军训篇"><a href="#军训篇" class="headerlink" title="军训篇"></a>军训篇</h3><p>军训原则上来说是国庆过完开始军训，时长为三周，国庆过完之后气温已经不会很高了，但是还是需要做好防晒。</p><p>军训期间听从教官（教官是部队退役或自训营的<strong>学长学姐</strong>）指令，一般来说教官不会为难同学，但是<strong>出现出格行为不要因为成绩而忍耐，及时向辅导员反映</strong>！</p><p><del>听说隔壁兄弟学校曾经曝光过教官打人，涉事教官被处分</del></p><p><strong>军训也是算在加权成绩内的</strong>，所以军训也要好好表现，军训中间会有一次理论考试（区别于正常上课时的军事理论）需要好好准备；</p><blockquote><p>此外，军训成绩的方式不再是等级制 (即优、良等)，而是以具体成绩呈现，一般不会出现满分。<a href="%E3%80%8A%E6%96%B0%E7%94%9F%E5%BB%BA%E8%AE%AE%EF%BC%882023%E7%BA%A7%E5%AD%A6%E7%94%9F%E8%87%AA%E7%BC%96%E7%89%88%EF%BC%89%E3%80%8B%EF%BC%8C%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%8D%8F%E4%BC%9A%E5%B9%B2%E4%BA%8B%E5%9B%A2%E9%98%9F">^1</a></p></blockquote><p>由于军训在开学一个月以后，班委集体已经建立起来了，不出意外，军训负责人应该就是班长和团支书了。</p><h2 id="日常生活"><a href="#日常生活" class="headerlink" title="日常生活"></a>日常生活</h2><h3 id="衣"><a href="#衣" class="headerlink" title="衣"></a>衣</h3><p>行李中装上较多的夏装，由于长沙的春秋比较短，不用装过多的秋装，冬装准备应急用的就可以了，即将入冬的时候从老家邮寄过去就行了（快递点将在后文进行介绍），以上操作不会造成衣物占据行李箱的较大容积的情况（仅为笔者建议，笔者的开学行李包括一大一小两只行李箱+一个包，以上建议依据个人需求选择）；</p><p>到了冬天一定要<strong>备足过冬衣物</strong>，长沙的冬天在体感上会比气温冷亿点点</p><p>此外如果有帽子记得带上（长沙的阳光格外的灿烂），要把运动鞋（体育课及课外跑步打卡）休闲鞋带上，拖鞋视情况而定（长沙阴晴不定，笔者已经在通勤路上湿身多次了），根据个人的需求及行李箱空间选配；</p><p>当然，长沙的天气较潮湿，所以笔者的建议是<strong>到校后买衣架将衣服挂起来，然后在横杆上挂上除湿袋，</strong>笔者亲测：衣柜里的除湿袋在两周左右就会失去吸湿效果。</p><h3 id="食"><a href="#食" class="headerlink" title="食"></a>食</h3><p>来到星城，少不了的是美食，整个长沙市的美食在此就不过多赘述，等待自己去探索。</p><p>本文基于中南大学及整个岳麓大学城周边进行描述。</p><p>中南大学的食堂是挺多的，在南校区就有三座食堂：二食堂、七食堂和八食堂。</p><ul><li><p>二食堂共有四层，一楼为小吃层，二楼三楼就是基本的饭菜，四楼有自选餐厅和清真餐厅，还有几个笔者不曾尝试、很少有人问津的小餐厅。至于七食堂和八食堂，笔者探访的比较少，大概知道八食堂的选择可能更加丰富，七食堂也是基本的饭菜。此外，还有校本部的三五食堂、教工食堂（均比较远），味道尚可，可以尝试。总的来说<strong>不会太辣，但是挺油</strong>。</p></li><li><p>中南大学的教学区与生活区较远，所以在平时上课期间，有可能会来不及赶回南校吃饭，就在新校区对付对付，选择有 B座架空层食堂、BC座之间盒饭售卖点、图书馆侧方盒饭售卖点，以及在图书馆背侧的二十四食餐厅，<strong>感觉一般</strong></p><p><del>据说新校已经在修新食堂了，但是不知道什么时候能够吃上新食堂的饭菜</del></p></li><li><p>以上部分皆是学校后勤部门提供的餐食，其二选择就是<strong>后湖小区</strong>（从新校A座大门出门左转）。后湖小区的店在广大中南学子的检验下卫生能够保证，价格公道。后湖小区里的店还挺多的，后湖的店等着各位自己去探！</p></li></ul><h3 id="住"><a href="#住" class="headerlink" title="住"></a>住</h3><p>不出意外，大一新生应该都是住在南校区（升华学生公寓）</p><p><img src="/imgs/xinshengjianyi/2.jpg" alt="img"></p><p> 升华的配置是四人一间，两寝共用一个阳台，上床下桌，独卫（无热水），每层有大淋浴间（独立单间，热水，<strong>17：30-24：00供应</strong>），24小时水电网（但是可能不定时停水，及时关注宿舍群），有空调（需要另外租赁)，宿舍门有校园卡刷卡门锁，宿舍大门有门禁，23：30准时关门。需要注意的是宿舍电费需要宿舍四人承担，及时充值，线上充值时间为<strong>5：00-23：00</strong></p><p><img src="/imgs/xinshengjianyi/1.jpg" alt="img"></p><p>床位的分配应当是先到先得。床铺尺寸2*0.9（单位：米)，笔者建议<strong>自备寝具</strong>，学校售卖的寝具质量不佳。</p><p>图为笔者选择的床位（②）</p><p>床上建议配上<strong>带有床帘的蚊帐</strong>，一方面能够遮挡外部光源（有一部分同学喜欢熬大夜学习或者…），另一方面能够给自己创造一部分隐私空间。</p><p>在与天南海北的室友见面后，要及时地建立寝室公约：</p><ol><li><strong>约定一个DDL，到了那个时间一定要关掉所有灯光，准备休息</strong>（尽量不晚于24：00，笔者认为深夜学习效率不高，充足的休息能够提高学习效率）；</li><li><strong>及时打扫寝室卫生</strong>（这点非常重要！！！笔者大一的宿舍卫生状况极好，但是在分流搬宿舍之后，搬到的那个寝室简直是…俄乌战场都没那惨烈，我们四个同学都还爱干净，搞了两天卫生才清理干净）；</li><li><strong>注意个人卫生，及时清洗个人衣物</strong>（宿舍一楼有公共洗衣机，但是不推荐使用，尤其是私人直接接触皮肤衣物，一定使用建议<strong>加入消毒液一起清洗</strong>；另宿舍条约规定<em><strong>禁止使用大功率电器</strong></em>，21级开始查洗衣机比较严，所以四人合购洗衣机的事情还要开学后再观望观望）</li></ol><h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><p>新生出站应该就有中南大学志愿者手持引导牌接站，只需跟着他们就可以做中南大学的班车抵达中南大学新校区报道点，然后就有相应公寓楼栋志愿者分流引导新生到各自宿舍。</p><p>生活区与教学区相去甚远，因此需要代步工具（除非有强身健体的需求），具体有以下选择：</p><ol><li><strong>电瓶车</strong>，速度快，但是行车风险较大，且外出<strong>骑车必须佩戴头盔</strong>，路上会有交警叔叔检查，同时充电不方便，学校有效充电桩数量较少（切记：<strong>禁止携带电瓶车电瓶进入宿舍充电</strong>，在2021学年春季学期曾经有一位同学将电池带入宿舍充电，然后电瓶起火了，所以<strong>如果看到有同学将电瓶带入宿舍，及时点点举报</strong>）；</li><li><strong>自行车</strong>，这个为笔者的选择，节能环保，速度不慢且安全性更高，是性价比较高的选择；</li><li><strong>共享单车</strong>，学校共享电瓶车较少，自行车居多，而且需要拼手速抢车，建议月卡；</li><li><strong>公交车或学校班车</strong>；</li></ol><p><strong>学校原则上是禁摩的</strong>，22学年春季学期在新校区就出过事故，有一位优秀的学长不幸去世，所以防护措施要做好</p><p>平时出去游玩可以靠导航，在此就不作赘述。</p><h3 id="快递点"><a href="#快递点" class="headerlink" title="快递点"></a>快递点</h3><ol><li>南校区菜鸟驿站（分东西两区）分别位于十二栋底层东侧和西侧；</li><li>南校区顺丰收件处位于十二栋底层东侧（东菜鸟背面）；</li><li>南校区京东代收点位于教工16栋小蜜蜂智慧服务中心；</li><li>南校区中国邮政驿站位于七栋底层南侧；</li></ol><p>南校区寄件地址：<strong>湖南省长沙市岳麓区清水路中南大学升华学生公寓XX栋。</strong></p><h3 id="校园网"><a href="#校园网" class="headerlink" title="校园网"></a>校园网</h3><ol><li>南校区升华学生公寓内WiFi信号全网全覆盖，同一学工号最多同时在线3台设备，但是需要绑定校园网电话卡号（？存疑），属于长沙号码，校园电话卡移动电信联通各有优劣，可以联系同院学长学姐了解（<em><strong>敲门进入公寓推销电话卡的一定要提高警惕，可能会是诈骗，会存在学长学姐代理电话卡业务的现象，并且相比于营业厅会有一定优惠，但一定要仔细鉴别，若想认购一定要知根知底，并保存好聊天证据</strong></em>）</li><li>新校区教室、图书馆覆盖名为CSU-WiFi、CSU-Student的无线网络用学工号和信息门户登录密码登录即可，免费使用，同一学工号最多同时在线两台设备，在该IP（包括宿舍无线网）下能够通过校内登录使用“中国知网”“万方”“维普”等期刊论文数据库（亦可通过校外登录）</li></ol><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="学习前的准备"><a href="#学习前的准备" class="headerlink" title="学习前的准备"></a>学习前的准备</h3><p>关于设备方面的配置我不做推荐，需要自己衡量利弊</p><p>但是需要一些有用的链接：</p><ol><li><p><a href="http://libdb.csu.edu.cn/reslist">中南大学图书馆-数据库导航系统 (csu.edu.cn)</a></p><p>中南大学购买过相关的文献库，登陆账号是用内网就可以进行使用</p></li><li><p><a href="http://csujwc.its.csu.edu.cn/">中南大学教务系统 (csu.edu.cn)</a></p><p>这个不必多说</p></li><li><p><a href="https://ms.csu.edu.cn/">中南大学正版软件管理与服务平台 (csu.edu.cn)</a></p></li></ol><h3 id="课内学习"><a href="#课内学习" class="headerlink" title="课内学习"></a>课内学习</h3><p>声明：本文将不会对具体课程给出相关建议</p><p>大学一门课最终修读成绩与高中完全不一样，其包括<strong>期末成绩和平时成绩</strong>，在大学生圈子里流传很广的“老师 菜菜 捞捞”中的“捞”基本上就是老师在平时成绩上拉你一把。大学的计分方式要求<strong>大学生不仅要认真准备期末考试，还要注重平时的考勤、上课表现、作业提交</strong>。关于平时分的具体问题，将在后文展开讲解。</p><p>与一些高校的绩点制不同，中南大学直接采用加权制体现学生成绩：</p><blockquote><ol><li><strong>加权平均分&#x3D;$\Sigma$(课程成绩X课程学分)$&#x2F;\Sigma$课程学分</strong><a href="%E3%80%8A%E5%85%B3%E4%BA%8E%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8A%A0%E6%9D%83%E5%B9%B3%E5%9D%87%E6%88%90%E7%BB%A9%E8%AE%A1%E7%AE%97%E7%9A%84%E8%AF%B4%E6%98%8E%E3%80%8B">^2</a></li><li>课程初修成绩合格，取初修成绩计算（不同课目期末成绩和平时成绩占比不同）；</li><li>课程初修成绩不合格，有效成绩&gt;&#x3D;60，按60分计算；</li><li>课程初修成绩不合格，有效成绩不合格，取最高成绩计算；</li><li>各种政策加分不计算；</li><li>课程初修缓考，后一学期无成绩该课程比计算，录入成绩按初修计算；</li><li>课程考核成绩采用五级制的折算办法：</li></ol><table><thead><tr><th align="center">五级制</th><th align="center">优秀</th><th align="center">良好</th><th align="center">中等</th><th align="center">及格</th><th align="center">不及格</th></tr></thead><tbody><tr><td align="center">折算分</td><td align="center">95</td><td align="center">85</td><td align="center">75</td><td align="center">65</td><td align="center">0</td></tr></tbody></table></blockquote><p>不同课目的不同标准要求学生不仅要争取更高的期末成绩，还要在平时与老师搞好关系，尽量<strong>给老师留下深刻（良好）的印象</strong>，不然老师只会给你一个平庸的平时分，对于一些有更高追求的同学这显然是不够的。当然对于一些能在期末拿到满分的课目来说，这一点不一定，只要在期末拿到相当高的分数，老师就会拉满平时分。</p><p>此外，不能把希望完全寄托在平时分上，关于总评还有一条不成文规定：存在一条斩杀线（<strong>比及格线低</strong>），如果期末成绩未达到，那么老师也不会“海底捞”，如高等数学、大学英语的“斩杀线”就是45分。</p><h3 id="自习场所"><a href="#自习场所" class="headerlink" title="自习场所"></a>自习场所</h3><p>众所周知，所谓大学（<del>大不了自学</del>），其精髓在于“自学”。</p><ol><li><p>图书馆；</p><p>从22年春季学期开始，图书馆恢复疫情之前的双排座椅，因此图书馆的座位变多了，但是变得拥挤了，同时学习的时候对面还有人（社恐犯了）</p></li><li><p>教学楼；</p><p>教学楼教室只要在没有课的情况下就可以自习，当然在教学楼也会有每日的自习教室公布在黑板上；不推荐D座教室，因为D座比较偏僻，又靠近情人坡人比较少，所以<del>在那边自习可能会遇见一些奇奇怪怪的事情</del>；A座东侧教室基本上都是工程制图教室，一般在里面画图；教室自习的缺点是有人可能会不太守规矩讲话，会有情侣放飞自我，而且在没有课的时间空调是不开放的，所以夏天的教室就像蒸笼一样，学习效率不高；</p></li><li><p>知新馆</p><p>这一自习场所笔者基本没有去过，笔者不太了解，据笔者所知，该馆的座位是先到先得，且位置不多，但环境尚可；</p></li><li><p>校外自习室</p><p>校外自习室好像是可以通宵学习（？），但是<em><strong>夜不归宿一定要向寝室长报备且报告辅导员</strong></em>，而且笔者不推荐通宵学习，笔者认为该种学习方式效率低下，充足的睡眠能够更专注的学习（仅为个人观点，不喜勿喷）；</p></li><li><p>宿舍</p><p>此为笔者最不推荐的自习场所，因为宿舍环境过于安逸，目光可及之处就有分心之物，不利于专注学习。</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新生建议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT生成内容鉴别的实现</title>
      <link href="/2023/08/06/ChatGPT%E7%94%9F%E6%88%90%E5%86%85%E5%AE%B9%E9%89%B4%E5%88%AB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/06/ChatGPT%E7%94%9F%E6%88%90%E5%86%85%E5%AE%B9%E9%89%B4%E5%88%AB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://challenge.xfyun.cn/topic/info?type=text-detector&option=phb">ChatGPT生成文本检测器</a></p><p>友情链接：<a href="https://datawhaler.feishu.cn/docx/OQjWdEuAZo2nTSxHmT6crhZ2nmf">Datawhale-NLP实践</a></p><p>项目地址：<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project</a></p><h2 id="跑通一个baseline"><a href="#跑通一个baseline" class="headerlink" title="跑通一个baseline"></a>跑通一个baseline</h2><p>这次的baseline使用<strong>手工确定提取文本特征</strong>，在第四点中有体现</p><ol><li><p><strong>导入库</strong>：开始时导入必要的库，包括numpy、pandas和scikit-learn的LogisticRegression。</p></li><li><p><strong>加载数据</strong>：加载两个CSV文件——‘train.csv’和’test.csv’，并分别存储在pandas的DataFrame ‘train_data’和’test_data’中。</p></li><li><p><strong>数据预处理</strong>：对’train_data’和’test_data’的’content’列应用了一些预处理步骤。它使用lambda函数从’content’列中的每个字符串中移除第一个和最后一个字符，也就是移除“[”和“]”</p></li><li><p><strong>特征工程</strong>：定义一个名为’simple_feature(s)’的函数，它接受一个字符串’s’作为输入，并基于输入字符串的特性返回一个numpy数组作为特征，特征都是人为的选取所以效果并不是特别好这些特征包括：</p><ul><li>原始字符串的长度。</li><li>字符串中字符的数量。</li><li>字符串中唯一字符的数量。</li><li>字符串中重复字符的数量。</li><li>唯一字符数占总字符数的比例。</li><li>字符串中字符频率的最大值。</li><li>字符串中字符频率的最小值。</li><li>字符串中字符频率的平均值。</li><li>字符串中字符频率的标准差。</li><li>字符串中字符频率的极差（最大值与最小值之间的差值）。</li></ul></li><li><p><strong>生成训练和测试特征</strong>：使用<code>apply</code>方法将’simple_feature’函数应用于’train_data’和’test_data’的’content’列中的每个字符串。得到的特征被垂直堆叠以创建numpy数组’train_feature’和’test_feature’。</p></li><li><p><strong>模型训练</strong>：通过调用scikit-learn的<code>LogisticRegression()</code>来初始化一个逻辑回归模型’m’。然后，使用<code>fit</code>方法将训练特征’train_feature’和’train_data’中对应的’label’列用于训练模型。</p></li><li><p><strong>进行预测</strong>：训练好的模型使用<code>predict</code>方法对测试数据进行预测，得到测试集的标签。</p></li><li><p><strong>将结果保存为CSV</strong>：将预测的标签添加到’test_data’的’label’列中，然后创建一个只包含’name’和’label’列的新DataFrame。最后，将这个DataFrame保存为名为’simple.csv’的CSV文件，可以用于提交或进一步分析。</p></li></ol><p>baseline跑出来的分数中规中矩，只有0.85+，还需要进行调整</p><p>详细见附录</p><h2 id="冲榜尝试，upper的产生"><a href="#冲榜尝试，upper的产生" class="headerlink" title="冲榜尝试，upper的产生"></a>冲榜尝试，upper的产生</h2><p>upper基于TF-IDF，简单了解一下TF-IDF</p><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>TF-IDF (Term Frequency-Inverse Document Frequency) 是一种在文本挖掘和信息检索中常用的特征表示方法，用于衡量一个词语对于一个文档集合中某个文档的重要程度。</p><p>TF-IDF 特征由两部分组成：Term Frequency (TF) 和 Inverse Document Frequency (IDF)。</p><ol><li><p>**Term Frequency (TF)**：指定词语在文档中出现的频率。它表示一个词在文档中的重要程度。一般情况下，一个词在文档中出现的次数越多，它对文档的内容表达越重要。</p><p>TF &#x3D; (词语在文档中出现的次数) &#x2F; (文档中总词语数)</p></li><li><p>**Inverse Document Frequency (IDF)**：指定词语在整个文档集合中的重要程度。它是通过对所有文档计算某个词的出现频率，然后取其倒数来计算的。IDF 的目的是降低在多个文档中频繁出现的常见词的权重，增加对于少数文档中出现但对于整个文档集合较为重要的词的权重。</p><p>IDF &#x3D; log(文档集合中的文档总数 &#x2F; 含有该词的文档数 + 1)</p></li></ol><p>最终的 TF-IDF 特征是将 TF 和 IDF 相乘得到的。TF-IDF 特征考虑了一个词在当前文档中的重要性（TF），以及它在整个文档集合中的全局重要性（IDF）。因此，TF-IDF 特征能够在文本分类和信息检索任务中更好地捕捉每个词在文档中的信息价值，从而在构建特征表示时更好地区分不同的文档。</p><h3 id="upper的思路"><a href="#upper的思路" class="headerlink" title="upper的思路"></a>upper的思路</h3><ol><li><p><strong>导入库</strong>：开始时导入所需的库，包括pandas、sklearn的LogisticRegression类、TfidfVectorizer类以及一些评估指标相关的库。</p></li><li><p><strong>加载数据</strong>：加载两个CSV文件——‘train.csv’和’test.csv’，并将它们分别存储在pandas的DataFrame ‘train_data’和’test_data’中。</p></li><li><p><strong>数据预处理</strong>：对’train_data’和’test_data’的’content’列应用了一些预处理步骤。它使用lambda函数从’content’列中的每个字符串中移除第一个和最后一个字符。</p></li><li><p><strong>TF-IDF特征提取</strong>：</p><ul><li>使用TfidfVectorizer类来将文本内容转换为TF-IDF向量表示。</li><li>尝试了三种不同的TF-IDF参数设置：<ul><li>第1种参数：token_pattern&#x3D;r’\w{1}’，max_features&#x3D;2000。token_pattern指定了用于提取词语的正则表达式，r’\w{1}’表示提取长度为1的单词。max_features设置为2000表示最多选择2000个最重要的特征词。</li><li>第2种参数：token_pattern&#x3D;r’\w{1}’，max_features&#x3D;5000。max_features设置为5000表示最多选择5000个最重要的特征词。</li><li>第3种参数：token_pattern&#x3D;r’\w{1}’，max_features&#x3D;5000，ngram_range&#x3D;(1,2)。ngram_range&#x3D;(1,2)表示同时提取单个词和二元（两个词）的组合作为特征。</li></ul></li><li>对于每种参数设置，分别将训练集和测试集的文本内容转换为TF-IDF向量表示。</li></ul></li><li><p><strong>模型训练和评估</strong>：</p><ul><li>对于每种TF-IDF参数设置，使用交叉验证（cross_val_predict）对逻辑回归模型进行评估，以得到更稳定的性能评估结果。</li><li>使用<code>cross_val_predict</code>方法对训练集的TF-IDF向量和对应的标签进行交叉验证预测，然后通过classification_report函数输出分类结果的评估报告，包括精确度、召回率、F1-score等指标。</li></ul></li><li><p><strong>模型训练和预测</strong>：</p><ul><li>选择其中一种TF-IDF参数设置（这里使用第3种参数）来训练逻辑回归模型。</li><li>使用训练好的模型对测试集的TF-IDF向量进行预测，并将预测结果保存在’test_data’的’label’列中。</li></ul></li><li><p><strong>保存结果为CSV文件</strong>：</p><ul><li>将测试集的’name’和’label’列保存为名为’tfidf.csv’的CSV文件，用于后续的提交或分析。</li></ul></li></ol><p>总体来说，使用TF-IDF特征提取方法和逻辑回归模型进行文本分类任务，并通过交叉验证来评估模型的性能。通过尝试不同的TF-IDF参数设置，可以找到最佳的特征提取策略，以获得更好的分类结果。</p><p>对于upper，冲榜的分数能够达到0.91+，但是这还不够，可以考虑之前使用过的BERT模型进行分类</p><p>详细代码见附录</p><p>后续尝试方向：</p><ul><li>调用BERT模型进行鉴别</li><li>调用大模型进行鉴别</li></ul><h2 id="使用BERT模型进行分类"><a href="#使用BERT模型进行分类" class="headerlink" title="使用BERT模型进行分类"></a>使用BERT模型进行分类</h2><p>简单了解一下BERT模型</p><h3 id="BERT模型"><a href="#BERT模型" class="headerlink" title="BERT模型"></a>BERT模型</h3><p>BERT（Bidirectional Encoder Representations from Transformers） 是一种预训练的自然语言处理模型，由Google研发并于2018年发布。BERT采用了<strong>Transformer网络结构</strong>，通过大规模无监督训练从而学习到单词或字符级别的语言表示。相比于传统的基于循环神经网络的模型，BERT采用了双向编码器（Bidirectional Encoder）的思想，可以同时利用上下文中的信息来理解单词的语义和含义。</p><p>BERT的预训练过程分为两个阶段：<strong>Masked Language Model（MLM）</strong>和<strong>Next Sentence Prediction（NSP）</strong>。在MLM阶段，BERT会随机遮盖输入文本中的部分单词，并尝试预测这些遮盖的单词是什么。在NSP阶段，BERT会输入两个句子，并预测这两个句子是否是连续的。</p><p>预训练后，BERT可以通过微调（Fine-tuning）的方式在特定任务上进行训练，例如文本分类、命名实体识别等。通过微调，BERT可以根据不同任务的数据进行适应性学习，提取有关任务的上下文相关特征，从而更好地完成特定的自然语言处理任务。</p><p>BERT的出现填补了自然语言处理领域在预训练模型上的空白，它在多个基准数据集上取得了显著的性能提升，并且对于多种自然语言处理任务都具有泛化能力。BERT的成功也促进了许多后续的预训练模型的发展，为自然语言处理的研究和应用提供了重要的推动力。</p><p>BERT模型的结构主要由Transformer网络组成，它由多个编码器层叠加而成。每个编码器层由两个子层组成，分别是多头自注意力机制（Multi-Head Self-Attention）和前馈神经网络（Feed-Forward Neural Network）。下面我们逐步解释BERT模型的结构和各个组件的作用。</p><ol><li><p>输入表示：BERT的输入表示采用了词嵌入和位置编码的结合。首先，对输入的文本进行分词处理，然后将每个分词映射为一个固定维度的词向量。位置编码会为每个词向量附加一个位置信息，以捕捉单词在句子中的相对位置关系。</p></li><li><p>编码器层：BERT模型通常包含多个相同结构的编码器层，每个编码器层都由两个子层组成。</p><ul><li>多头自注意力机制（Multi-Head Self-Attention）：在这个子层中，输入的序列经过一系列的自注意力计算，从而学习到每个单词与其他单词之间的相互作用和关联。通过引入多个注意力头，可以并行地学习多个表示，增加模型的泛化能力。</li><li>前馈神经网络（Feed-Forward Neural Network）：在这个子层中，每个位置的隐藏表示会经过两层全连接网络进行非线性变换，增强模型的表示能力。前馈神经网络采用了激活函数（如ReLU）来引入非线性。</li></ul></li><li><p>预训练目标：</p><ul><li>遮盖语言模型（Masked Language Model，MLM）：BERT采用遮盖部分输入单词的方式，然后通过预测被遮盖单词的方式进行训练。这使得模型能够学习到单词之间的上下文信息，从而更好地理解句子。</li><li>下一句预测（Next Sentence Prediction，NSP）：BERT的预训练还包括判断两个句子之间是否连续的任务。通过这个任务，模型可以学习到句子之间的语义关系和连接方式。</li></ul></li></ol><p>BERT模型的核心思想是通过大规模的无监督预训练，学习到通用的句子表示，然后通过微调的方式在具体任务上进行训练。预训练过程使得BERT模型具备了更好的语义理解能力和句子关系建模能力，从而在各种自然语言处理任务中取得了显著的性能提升。</p><h3 id="BERT的思路"><a href="#BERT的思路" class="headerlink" title="BERT的思路"></a>BERT的思路</h3><p>关于使用BERT模型，之前的<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project: Text classification and keyword extraction based on abstracts</a>已经实现过，基于BERT模型判断文本是否属于医学论文，也就是说可以依靠原有代码，在原有代码的基础上进行相关改动就可以实现了，关于BERT模型进行文本分类脚本的实现，可以在《<a href="https://jiang-wu-19.github.io/2023/07/30/upper%E7%9A%84%E5%AE%9E%E7%8E%B0/">upper的实现 | J&amp;Ocean BLOG</a>》这篇blog中进一步了解</p><p>BERT模型的训练可以在本地实现，考虑到笔者的配置有限，将batch_size设置为10，运行时只需要使用3.8G的显存。</p><p>BERT跑出来的结果还不错，高于原有的进阶分数，达到0.93+</p><h2 id="不死心，仍要使用大模型的API"><a href="#不死心，仍要使用大模型的API" class="headerlink" title="不死心，仍要使用大模型的API"></a>不死心，仍要使用大模型的API</h2><p>事实证明，API最多只能回答一些生成式的问题，也许是API背后的模型是综合类型的，并没有经过二分类的fine-tune，代码确实写好了，但是由于鉴别的文本相当冗长，每进行一次request耗费大量的tokens还有时间</p><p><del>对API的调用感兴趣的可以看一看失败的的代码</del></p><h2 id="选择ernie模型，取得阶段性小胜利"><a href="#选择ernie模型，取得阶段性小胜利" class="headerlink" title="选择ernie模型，取得阶段性小胜利"></a>选择ernie模型，取得阶段性小胜利</h2><p>使用paddle框架和ernie模型</p><h3 id="paddlepaddle和"><a href="#paddlepaddle和" class="headerlink" title="paddlepaddle和"></a>paddlepaddle和</h3><p>PaddlePaddle（百度飞桨）是百度开发的开源深度学习框架，旨在为科研人员和工程师提供高效、灵活、全面的深度学习平台。它在深度学习领域具有广泛的应用，特别在自然语言处理、计算机视觉、语音识别等领域表现出色。以下是PaddlePaddle框架的一些关键特点和组成部分的简要介绍：</p><ol><li><p><strong>动态图和静态图支持</strong>：PaddlePaddle支持动态图和静态图两种计算模式。动态图适用于快速原型设计和交互式调试，而静态图则可以优化计算图以提高性能和效率。</p></li><li><p><strong>高性能优化</strong>：PaddlePaddle针对多种硬件和平台进行了高性能优化，包括CPU、GPU、FPGA等。它采用了诸如自动混合精度、异步数据加载等技术，以提高训练和推理的速度。</p></li><li><p><strong>多样的模型库和工具</strong>：PaddlePaddle提供了丰富的预训练模型和模型库，涵盖自然语言处理、计算机视觉、推荐系统等多个领域。同时，它还提供了数据处理、模型评估、可视化等一系列工具，方便用户进行全面的深度学习任务。</p></li><li><p><strong>易用性和灵活性</strong>：PaddlePaddle设计了简单易用的API，使得初学者可以快速上手。同时，它也提供了灵活的自定义功能，以满足高级用户的需求。</p></li><li><p><strong>分布式训练和部署</strong>：PaddlePaddle支持分布式训练，可以在多个机器和设备上并行进行训练。此外，它还提供了模型转换和部署工具，使模型部署更加便捷。</p></li><li><p><strong>自然语言处理工具包</strong>：PaddlePaddle自然语言处理工具包（PaddleNLP）为处理文本数据提供了丰富的功能，包括预训练模型、分词、命名实体识别、文本分类等。</p></li><li><p><strong>社区支持和文档</strong>：PaddlePaddle有活跃的社区，提供了丰富的教程、文档和示例代码，帮助用户更好地了解和使用框架。</p></li></ol><h3 id="paddleNLP"><a href="#paddleNLP" class="headerlink" title="paddleNLP"></a>paddleNLP</h3><p>PaddleNLP是百度飞桨（PaddlePaddle）深度学习框架的自然语言处理（NLP）工具包，专门为处理文本数据和解决自然语言处理问题而设计。它提供了丰富的预训练模型、数据处理工具和任务特定的API，使得NLP任务的开发和研究更加便捷和高效。以下是PaddleNLP的一些主要特点和组成部分的简要介绍：</p><ol><li><p><strong>预训练模型库</strong>：PaddleNLP提供了丰富的预训练模型，包括BERT、ERNIE、RoBERTa、GPT等。这些模型在大规模文本数据上进行预训练，可以用于多种NLP任务的迁移学习和微调。</p></li><li><p><strong>任务特定API</strong>：PaddleNLP为常见的NLP任务（如文本分类、序列标注、句子对匹配等）提供了专门的API接口，使得模型的训练和评估变得更加简单。开发者可以直接使用这些API来完成各种任务，无需从头开始构建模型。</p></li><li><p><strong>分词和数据处理工具</strong>：PaddleNLP提供了强大的分词和数据处理工具，用于将原始文本数据转换为模型可以处理的格式。这些工具支持中文、英文等多种语言，帮助用户有效地准备数据集。</p></li><li><p><strong>模型可解释性工具</strong>：PaddleNLP还提供了模型可解释性工具，可以帮助用户理解模型的预测结果，分析哪些部分影响了模型的决策。</p></li><li><p><strong>多语言支持</strong>：PaddleNLP支持多种语言，包括中文和英文，使其适用于全球范围的NLP研究和应用。</p></li><li><p><strong>与PaddlePaddle集成</strong>：PaddleNLP与PaddlePaddle深度学习框架无缝集成，用户可以直接将PaddleNLP的模型和功能与PaddlePaddle的其他组件结合使用。</p></li></ol><h3 id="Ernie模型"><a href="#Ernie模型" class="headerlink" title="Ernie模型"></a>Ernie模型</h3><p>ERNIE（Enhanced Representation through kNowledge IntEgration）是一种基于Transformer架构的预训练语言模型，由百度研究团队开发。ERNIE的网络架构与Transformer的基本结构类似，但在细节上进行了一些创新和改进，以适应多领域、多语种的知识融合。以下是ERNIE模型的网络架构的简要介绍：</p><ol><li><p><strong>Transformer基本结构</strong>：ERNIE模型采用了Transformer架构，它由多个编码器层和解码器层组成。每个编码器和解码器层包含自注意力机制和前馈神经网络。自注意力机制有助于模型捕捉输入序列中不同位置之间的依赖关系。</p></li><li><p><strong>多头注意力</strong>：类似于Transformer，ERNIE的注意力机制也采用了多头注意力。这使得模型可以在不同的注意力头上并行学习不同的信息，从而更好地捕捉序列中的各种关系。</p></li><li><p><strong>连续字词表示</strong>：ERNIE引入了连续字词表示，对于中文等没有明确分词边界的语言尤为重要。它通过将字母、音节等形式进行建模，以更好地捕获复杂的语言结构。</p></li><li><p><strong>双向语言模型预训练</strong>：ERNIE使用了双向语言模型（Bidirectional Language Model，BiLM）进行预训练。这意味着模型在预测当前词语时，可以利用前面和后面的词语信息，从而获得更好的上下文表示。</p></li><li><p><strong>多领域、多语种知识融合</strong>：ERNIE的创新之一是将多领域、多语种的知识融合到预训练中。它通过同时在多个领域和多种语言的数据上进行预训练，使模型能够学习丰富的知识和表示。</p></li><li><p><strong>多任务学习</strong>：ERNIE在预训练和微调阶段使用了多任务学习。这意味着模型在同一时间可以同时学习多个任务，从而增强模型的泛化能力和效果。</p></li></ol><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>使用PaddlePaddle深度学习框架和PaddleNLP自然语言处理工具包构建文本分类模型。该模型用于将文本分类为两个类别，并通过训练数据进行模型训练和验证，然后使用该模型对测试数据进行分类，并生成一个提交文件。</p><p>以下是代码的详细分析：</p><ol><li><p><strong>导入库</strong>：首先，导入了必要的库，包括NumPy（用于数值计算）、Pandas（用于数据分析）、tqdm（用于显示进度条）、PaddlePaddle（深度学习框架）、PaddleNLP（用于自然语言处理）、以及其他用于数据加载、模型训练等的库。</p></li><li><p><strong>加载数据</strong>：使用Pandas库从CSV文件中加载训练数据和测试数据。</p></li><li><p><strong>载入模型与分词器</strong>：使用<code>AutoModelForSequenceClassification</code>从预训练的ernie-3.0-mini-zh模型中加载序列分类模型，并设置分类类别数为2。同样，使用<code>AutoTokenizer</code>加载相应的分词器。</p></li><li><p><strong>定义优化器和损失函数</strong>：定义AdamW优化器和交叉熵损失函数。</p></li><li><p><strong>划分训练集和验证集</strong>：使用<code>train_test_split</code>将训练数据划分为训练集和验证集。</p></li><li><p><strong>数据处理与加载</strong>：将数据转换为适合数据加载器的格式，并创建数据加载器。训练数据可以随机打乱，以便模型更好地学习。注意，这里的数据加载器用的是PaddlePaddle的<code>DataLoader</code>，可以在训练过程中并行加载数据，提高训练效率。</p></li><li><p><strong>模型训练循环</strong>：使用循环进行模型训练，训练多个epochs。在每个epoch内，模型会被切换到训练模式，然后遍历训练数据批次进行训练。具体步骤包括：</p><ul><li>将文本数据转换为模型可以处理的格式，包括使用分词器进行分词并填充到固定长度。</li><li>将数据输入模型，得到预测结果。</li><li>计算预测结果与真实标签之间的交叉熵损失。</li><li>执行反向传播以计算梯度。</li><li>使用优化器更新模型参数。</li></ul></li><li><p><strong>验证过程</strong>：在每个epoch结束后，切换模型为验证模式，并使用验证数据集计算验证损失。同样，将数据转换为模型可以处理的格式，进行前向传播计算，并计算验证损失。</p></li><li><p><strong>保存最佳模型</strong>：如果当前epoch的准确率优于之前的最佳准确率，将模型和优化器参数保存为检查点文件。</p></li><li><p><strong>模型保存</strong>：在所有epoch训练完成后，将最终模型和优化器参数保存。</p></li><li><p><strong>模型推理</strong>：定义了一个用于对输入文本进行预测的函数<code>infer</code>，该函数将输入文本转换为模型可以处理的格式，然后使用训练好的模型进行预测，并返回预测结果。</p></li><li><p><strong>对测试数据进行预测</strong>：使用上述<code>infer</code>函数将测试数据的文本送入模型，得到预测结果。然后创建一个包含预测结果的新数据表，准备生成提交文件。</p></li><li><p><strong>生成提交文件</strong>：将包含预测结果的测试数据表保存为CSV文件，用于提交到竞赛平台。</p></li></ol><p>在使用Ernie模型的时候，为了加快速度，放弃了本地环境，使用了百度AI Studio云环境进行训练，每一轮训练时间为60s，验证时间为6s</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="baseline-py"><a href="#baseline-py" class="headerlink" title="baseline.py"></a>baseline.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># Load data</span>train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Get the feature</span><span class="token keyword">def</span> <span class="token function">simple_feature</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'123 123'</span>    w <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 统计字符出现次数</span>    w_count <span class="token operator">=</span> np<span class="token punctuation">.</span>bincount<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    w_count <span class="token operator">=</span> w_count<span class="token punctuation">[</span>w_count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 原始字符长度</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符个数</span>        <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 不重复字符个数</span>        <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符个数 - 不重复字符个数</span>        <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 不重复字符个数占比</span>        np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的最大值</span>        np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的最小值</span>        np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的平均值</span>        np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的方差</span>        np<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>w_count<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 字符的频率的极差</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>train_feature <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>simple_feature<span class="token punctuation">)</span>test_feature <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>simple_feature<span class="token punctuation">)</span>train_feature <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>train_feature<span class="token punctuation">.</span>values<span class="token punctuation">)</span>test_feature <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>test_feature<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token comment"># 模型训练</span>m <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_feature<span class="token punctuation">,</span> train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 生成测试集提交结果</span>test_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_feature<span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'simple.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="upper-py"><a href="#upper-py" class="headerlink" title="upper.py"></a>upper.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_predict<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_reporttrain_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 第1种tfidf参数</span>tfidf <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">r'\w&#123;1&#125;'</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span>train_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>    cross_val_predict<span class="token punctuation">(</span>        LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        train_tfidf<span class="token punctuation">,</span>        train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    digits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 第2种tfidf参数</span>tfidf <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">r'\w&#123;1&#125;'</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>train_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>    cross_val_predict<span class="token punctuation">(</span>        LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        train_tfidf<span class="token punctuation">,</span>        train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    digits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 第3种tfidf参数</span>tfidf <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>token_pattern<span class="token operator">=</span><span class="token string">r'\w&#123;1&#125;'</span><span class="token punctuation">,</span> max_features<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> ngram_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_tfidf <span class="token operator">=</span> tfidf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>    cross_val_predict<span class="token punctuation">(</span>        LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        train_tfidf<span class="token punctuation">,</span>        train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    digits<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>    train_tfidf<span class="token punctuation">,</span>    train_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_tfidf<span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'tfidf.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bert-py"><a href="#bert-py" class="headerlink" title="bert.py"></a>bert.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入前置依赖</span><span class="token keyword">import</span> os<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token comment"># 用于加载bert模型的分词器</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token comment"># 用于加载bert模型</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertModel<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathbatch_size <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 文本的最大长度</span>text_max_length <span class="token operator">=</span> <span class="token number">128</span><span class="token comment"># 总训练的epochs数，我只是随便定义了个数</span>epochs <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 学习率</span>lr <span class="token operator">=</span> <span class="token number">3e-5</span><span class="token comment"># 取多少训练集的数据作为验证集</span>validation_ratio <span class="token operator">=</span> <span class="token number">0.1</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token comment"># 每多少步，打印一次loss</span>log_per_step <span class="token operator">=</span> <span class="token number">50</span><span class="token comment"># 数据集所在位置</span>dataset_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./ChatGPT生成文本检测器"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token comment"># 模型存储路径</span>model_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./model/bert_checkpoints"</span><span class="token punctuation">)</span><span class="token comment"># 如果模型目录不存在，则创建一个</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Device:"</span><span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token comment"># 读取数据集，进行数据处理</span>pd_train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token operator">=</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token operator">=</span>test_data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 从训练集中随机采样测试集</span>validation_data <span class="token operator">=</span> pd_train_data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span>validation_ratio<span class="token punctuation">)</span>train_data <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token operator">~</span>pd_train_data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>isin<span class="token punctuation">(</span>validation_data<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 构建Dataset</span><span class="token keyword">class</span> <span class="token class-name">MyDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MyDataset<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode        <span class="token comment"># 拿到对应的数据</span>        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> train_data        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'validation'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> validation_data        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果是测试模式，则返回内容和uuid。拿uuid做target主要是方便后面写入结果。</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> test_data        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Unknown mode &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 取第index条</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment"># 取其内容</span>        text <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>        <span class="token comment"># 根据状态返回内容</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果是test，将uuid做为target</span>            label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        <span class="token comment"># 返回内容和label</span>        <span class="token keyword">return</span> text<span class="token punctuation">,</span> label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>train_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span><span class="token string">'train'</span><span class="token punctuation">)</span>validation_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span><span class="token string">'validation'</span><span class="token punctuation">)</span>train_dataset<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 获取Bert预训练模型</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"bert-base-uncased"</span><span class="token punctuation">)</span><span class="token comment"># 接着构造我们的Dataloader。</span><span class="token comment"># 我们需要定义一下collate_fn，在其中完成对句子进行编码、填充、组装batch等动作：</span><span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将一个batch的文本句子转成tensor，并组成batch。    :param batch: 一个batch的句子，例如: [('推文', target), ('推文', target), ...]    :return: 处理后的结果，例如：             src: &#123;'input_ids': tensor([[ 101, ..., 102, 0, 0, ...], ...]), 'attention_mask': tensor([[1, ..., 1, 0, ...], ...])&#125;             target：[1, 1, 0, ...]    """</span>    text<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span>    text<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>    <span class="token comment"># src是要送给bert的，所以不需要特殊处理，直接用tokenizer的结果即可</span>    <span class="token comment"># padding='max_length' 不够长度的进行填充</span>    <span class="token comment"># truncation=True 长度过长的进行裁剪</span>    src <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>text<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'max_length'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span>text_max_length<span class="token punctuation">,</span> return_tensors<span class="token operator">=</span><span class="token string">'pt'</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> src<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>label<span class="token punctuation">)</span>train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>validation_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>validation_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"inputs:"</span><span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"targets:"</span><span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token comment"># 定义预测模型，该模型由bert模型加上最后的预测层组成</span><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MyModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 加载bert模型</span>        self<span class="token punctuation">.</span>bert <span class="token operator">=</span> BertModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'bert-base-uncased'</span><span class="token punctuation">,</span> mirror<span class="token operator">=</span><span class="token string">'tuna'</span><span class="token punctuation">)</span>        <span class="token comment"># 最后的预测层</span>        self<span class="token punctuation">.</span>predictor <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">768</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param src: 分词后的推文数据        """</span>        <span class="token comment"># 将src直接序列解包传入bert，因为bert和tokenizer是一套的，所以可以这么做。</span>        <span class="token comment"># 得到encoder的输出，用最前面[CLS]的输出作为最终线性层的输入</span>        outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>bert<span class="token punctuation">(</span><span class="token operator">**</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span>last_hidden_state<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># 使用线性层来做最终的预测</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>predictor<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span>model <span class="token operator">=</span> MyModel<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 定义出损失函数和优化器。这里使用Binary Cross Entropy：</span>criteria <span class="token operator">=</span> nn<span class="token punctuation">.</span>BCELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span><span class="token comment"># 由于inputs是字典类型的，定义一个辅助函数帮助to(device)</span><span class="token keyword">def</span> <span class="token function">to_device</span><span class="token punctuation">(</span>dict_tensors<span class="token punctuation">)</span><span class="token punctuation">:</span>    result_tensors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dict_tensors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result_tensors<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token keyword">return</span> result_tensors<span class="token comment"># 定义一个验证方法，获取到验证集的精准率和loss</span><span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_loss <span class="token operator">=</span> <span class="token number">0.</span>    total_correct <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> targets <span class="token keyword">in</span> validation_loader<span class="token punctuation">:</span>        inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> to_device<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criteria<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        total_loss <span class="token operator">+=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        correct_num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>outputs <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        total_correct <span class="token operator">+=</span> correct_num    <span class="token keyword">return</span> total_correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataset<span class="token punctuation">)</span><span class="token punctuation">,</span> total_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataset<span class="token punctuation">)</span><span class="token comment"># 首先将模型调成训练模式</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 清空一下cuda缓存</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>empty_cache<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 定义几个变量，帮助打印loss</span>total_loss <span class="token operator">=</span> <span class="token number">0.</span><span class="token comment"># 记录步数</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 记录在验证集上最好的准确率</span>best_accuracy <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 开始训练</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 从batch中拿到训练数据</span>        inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> to_device<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token comment"># 传入模型进行前向传递</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        <span class="token comment"># 计算损失</span>        loss <span class="token operator">=</span> criteria<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_loss <span class="token operator">+=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        step <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> step <span class="token operator">%</span> log_per_step <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Epoch &#123;&#125;/&#123;&#125;, Step: &#123;&#125;/&#123;&#125;, total loss:&#123;:.4f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> epochs<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                       total_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            total_loss <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">del</span> inputs<span class="token punctuation">,</span> targets    <span class="token comment"># 一个epoch后，使用过验证集进行验证</span>    accuracy<span class="token punctuation">,</span> validation_loss <span class="token operator">=</span> validate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Epoch &#123;&#125;, accuracy: &#123;:.4f&#125;, validation loss: &#123;:.4f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">,</span> validation_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span> model_dir <span class="token operator">/</span> <span class="token string-interpolation"><span class="token string">f"model_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch<span class="token punctuation">&#125;</span></span><span class="token string">.pt"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 保存最好的模型</span>    <span class="token keyword">if</span> accuracy <span class="token operator">></span> best_accuracy<span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span> model_dir <span class="token operator">/</span> <span class="token string-interpolation"><span class="token string">f"model_best.pt"</span></span><span class="token punctuation">)</span>        best_accuracy <span class="token operator">=</span> accuracy<span class="token comment"># 加载最好的模型，然后进行测试集的预测</span>model <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_dir <span class="token operator">/</span> <span class="token string-interpolation"><span class="token string">f"model_best.pt"</span></span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> inputs<span class="token punctuation">,</span> ids <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>    outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>    outputs <span class="token operator">=</span> <span class="token punctuation">(</span>outputs <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    ids <span class="token operator">=</span> ids<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    results <span class="token operator">=</span> results <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token keyword">for</span> result<span class="token punctuation">,</span> <span class="token builtin">id</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">]</span>test_label <span class="token operator">=</span> <span class="token punctuation">[</span>pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> pair <span class="token keyword">in</span> results<span class="token punctuation">]</span>test_data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_labeltest_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'result.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="api-py"><a href="#api-py" class="headerlink" title="api.py"></a>api.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> copy<span class="token keyword">import</span> zhipuai<span class="token keyword">import</span> time<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmtrain <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>zhipuai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> <span class="token string">"YOUR_API_KEY"</span>n <span class="token operator">=</span> <span class="token number">5</span>prompt_data <span class="token operator">=</span> train<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span>n<span class="token punctuation">)</span>prompt_data <span class="token operator">=</span> prompt_data<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>prompt_data<span class="token punctuation">)</span>tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>prompt_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> prompt_data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    instruction <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"将给定的文本分成两类，并给出标签0或1，给定文本如下：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    answer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span>        <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>instruction<span class="token punctuation">)</span>    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>test_item <span class="token operator">=</span> test<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>test_item<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    test_instruction <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"将给定的文本分成两类，并给出标签0或1，给定文本如下：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>test_item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    prompt<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_instruction<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>    <span class="token comment"># response = zhipuai.model_api.invoke(</span>    <span class="token comment">#     model="chatglm_pro",</span>    <span class="token comment">#     prompt=prompt</span>    <span class="token comment"># )</span>    <span class="token comment"># print(response)</span>predict<span class="token punctuation">(</span>test_item<span class="token operator">=</span>test_item<span class="token punctuation">,</span> tmp<span class="token operator">=</span>tmp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ernie-py"><a href="#ernie-py" class="headerlink" title="ernie.py"></a>ernie.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment"># 数值计算</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token comment"># 数据分析</span><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm <span class="token comment"># 进度条显示</span><span class="token keyword">import</span> paddle <span class="token comment"># PaddlePaddle 深度学习框架</span><span class="token keyword">from</span> paddlenlp<span class="token punctuation">.</span>transformers <span class="token keyword">import</span> AutoModelForSequenceClassification<span class="token punctuation">,</span> AutoTokenizer <span class="token comment"># 飞桨自然语言处理工具包（模型、分词器）</span><span class="token keyword">from</span> paddle<span class="token punctuation">.</span>io <span class="token keyword">import</span> DataLoader <span class="token comment"># 数据加载器</span><span class="token keyword">from</span> paddlenlp<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> MapDataset <span class="token comment"># 数据集转换</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token comment"># 训练集与验证集拆分</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token comment"># 绘图</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"/home/aistudio/data/ChatGPT生成文本检测器公开数据-更新/train.csv"</span><span class="token punctuation">)</span> <span class="token comment"># 加载赛事提供的训练数据</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"/home/aistudio/data/ChatGPT生成文本检测器公开数据-更新/test.csv"</span><span class="token punctuation">)</span> <span class="token comment"># 加载赛事所需提交的测试数据</span>data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 随机查看 5 行训练数据中的内容</span><span class="token comment"># 载入模型与分词器</span><span class="token comment"># 使用 ernie-3.0-mini-zh 序列分类模型，并将分类类别数设置为 2</span>model <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"ernie-3.0-mini-zh"</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 使用 ernie-3.0-mini-zh 分词器</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"ernie-3.0-mini-zh"</span><span class="token punctuation">)</span><span class="token comment"># 定义 AdamW 优化器，学习率为 0.000001</span>optimizer <span class="token operator">=</span> paddle<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span><span class="token number">1e-5</span><span class="token punctuation">,</span> parameters<span class="token operator">=</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义损失函数为交叉熵函数，计算每个 mini batch 的均值</span>loss_fn <span class="token operator">=</span> paddle<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>loss<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token comment"># 按照 10% 的比例划分训练集与验证集</span>train_data<span class="token punctuation">,</span> valid_data <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment"># 下面就是一堆操作，把数据变成数据加载器可以识别的格式，自定义数据集类也是同样的效果</span>train_dict <span class="token operator">=</span> train_data<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'records'</span><span class="token punctuation">)</span>valid_dict <span class="token operator">=</span> valid_data<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'records'</span><span class="token punctuation">)</span>train_ds <span class="token operator">=</span> MapDataset<span class="token punctuation">(</span>train_dict<span class="token punctuation">)</span>valid_ds <span class="token operator">=</span> MapDataset<span class="token punctuation">(</span>valid_dict<span class="token punctuation">)</span><span class="token comment"># 将整体数据拆分为 30 份，放入数据加载器，就是一次性会有 &lt;总样本数 / 30> 份数据同时并行计算，份数越多，并行越多，显存占用越大，需要根据需求来选择</span>train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dict<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 训练数据可以随机打乱，让模型更好地学习，减轻学习到无关特征的问题</span>valid_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>valid_dict<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment"># 这里用的是 V100 32G，如果是显存更小的卡，需要调小一点，不然会炸显存</span>epochs<span class="token operator">=</span><span class="token number">200</span>best_accuracy<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 训练 30 轮</span>    <span class="token comment"># 训练过程</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 切换模型为训练模式</span>    <span class="token keyword">for</span> batch_x <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 每次从数据加载器读入一批(batch)数据</span>        X <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>batch_x<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">1015</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 将数据转换为模块可处理的数据形式</span>        input_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span> <span class="token comment"># 将 input_ids 变为张量，方便并行计算</span>        token_type_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'token_type_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span> <span class="token comment"># 将 token_type_ids 变为张量</span>        pred <span class="token operator">=</span> model<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> token_type_ids<span class="token punctuation">)</span> <span class="token comment"># 将数据读入模型，并得到计算后的结果</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>batch_x<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对比预测结果与真实结果，计算损失函数的值</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 反向传播，计算梯度</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 优化器根据梯度与学习率调整模型参数</span>        optimizer<span class="token punctuation">.</span>clear_gradients<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 清空梯度，避免下次梯度计算时累加</span>    <span class="token comment"># 验证过程</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 切换模型为验证模式</span>    val_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 验证集数据的损失函数合集</span>    <span class="token keyword">with</span> paddle<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 在模型验证时，只做前向计算，因此不需要保存梯度信息</span>        <span class="token keyword">for</span> batch_x <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>valid_loader<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 下面的操作与训练过程相同</span>            X <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>batch_x<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">1015</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            input_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span>            token_type_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'token_type_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> token_type_ids<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>batch_x<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            val_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将计算出的损失函数值存入合集</span>                <span class="token comment"># 打印本轮训练的验证集损失函数值，与预测正确率</span>    accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> batch_x<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch &#123;0&#125;, Val loss &#123;1:3f&#125;, Val Accuracy &#123;2:3f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>    epoch<span class="token punctuation">,</span>    np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>val_loss<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> batch_x<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> accuracy<span class="token operator">></span>best_accuracy<span class="token punctuation">:</span>        paddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/home/aistudio/work/model_best.pdparams"</span><span class="token punctuation">)</span>        paddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/home/aistudio/work/optimizer_best.pdopt"</span><span class="token punctuation">)</span>        best_accuracy<span class="token operator">=</span>accuracypaddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/home/aistudio/work/model.pdparams"</span><span class="token punctuation">)</span>paddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/home/aistudio/work/optimizer.pdopt"</span><span class="token punctuation">)</span><span class="token comment"># 如果你拿到了模型参数（在 AIStudio 中提供），你可以运行这行代码，如果直接运行模型，则没有必要运行</span><span class="token comment"># 载入模型参数、优化器参数的最后一个epoch保存的检查点</span>layer_state_dict <span class="token operator">=</span> paddle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"/home/aistudio/work/model_best.pdparams"</span><span class="token punctuation">)</span>opt_state_dict <span class="token operator">=</span> paddle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"/home/aistudio/work/optimizer_best.pdopt"</span><span class="token punctuation">)</span><span class="token comment"># 将加载后的参数与模型关联起来</span>model<span class="token punctuation">.</span>set_state_dict<span class="token punctuation">(</span>layer_state_dict<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>set_state_dict<span class="token punctuation">(</span>opt_state_dict<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">infer</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将文本传入模型并返回预测结果        输入：        - string: str            待预测的文本内容        输出:        - result: int            模型的预测结果    """</span>    X <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span><span class="token punctuation">[</span>string<span class="token punctuation">]</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">1015</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    input_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span>    token_type_ids <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">'token_type_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"int32"</span><span class="token punctuation">)</span>    pred <span class="token operator">=</span> model<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> token_type_ids<span class="token punctuation">)</span>    result <span class="token operator">=</span> pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取预测概率最大的那个类别</span>    <span class="token keyword">return</span> resulttest_data<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>infer<span class="token punctuation">)</span> <span class="token comment"># 将测试集的每个文本送入模型返回结果</span>submit <span class="token operator">=</span> test_data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 生成提交数据（就是把带结果的测试集丢掉内容，复制一份）</span>submit<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"submit3.csv"</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 保存 CSV 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>2023年8月4日：跑通baseline并进行微调，收效甚微甚至不如baseline，仅提交了baseline，获得分数0.85+</p><p>2023年8月5日：跑通upper，获得分数0.91+</p><p>2023年8月6日：尝试使用BERT模型进行鉴别，效果比较好，获得分数0.93+</p><p>2023年8月7日：尝试使用大模型API进行分类，效果相当不理想；尝试使用ernie模型进行分类，分类效果随着训练轮数的增加而有一定程度的提升，得到0.98+、0.99+分数</p><blockquote><p>To Be Continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upper的实现</title>
      <link href="/2023/07/30/upper%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/07/30/upper%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>友情连接：<a href="https://datawhaler.feishu.cn/docx/WirRd4oB5oMe2ixw1rxcTnHFnHh">Datawhale-NLP实践</a></p><p>GitHub项目地址：<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project</a></p><p>NLP进阶冲榜使用了BERT模型进行文本分类和关键词提取</p><h2 id="BERT模型"><a href="#BERT模型" class="headerlink" title="BERT模型"></a>BERT模型</h2><p><a href="https://arxiv.org/pdf/1810.04805">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a></p><p>BERT模型由Google,stands for Bidirectional Encoder Representations from<br>Transformers.</p><blockquote><p>BERT’s model architecture is a multi-layer bidirectional Transformer encoder based on the original implementation described in Vaswani et al.</p></blockquote><p>BERT模型架构是一个多层的Transformer Encoder堆叠，也就是为人们所熟知的《<a href="https://arxiv.org/pdf/1706.03762">Attention Is All You Need</a>》中提出的多层Transformer结构，抛弃了传统的RNN和CNN，通过Attention机制将任意位置的两个单词的距离转换成1。</p><p>具体BERT原理在此不再赘述，值得关注的是BERT模型的训练包含pre-training和fine-tuning两个阶段，在这里用到的是BERT预训练的模型，使用训练集对BERT模型进行微调。</p><h2 id="导入前置依赖"><a href="#导入前置依赖" class="headerlink" title="导入前置依赖"></a>导入前置依赖</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导入前置依赖</span><span class="token keyword">import</span> os<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token comment"># 用于加载bert模型的分词器</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token comment"># 用于加载bert模型</span><span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertModel<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>os</code>: 用于操作文件路径和目录。</li><li><code>pandas (pd)</code>: 用于数据处理，读取CSV文件和处理DataFrame。</li><li><code>torch</code>: PyTorch库，用于构建深度学习模型。</li><li><code>torch.nn</code>: PyTorch中的神经网络模块。</li><li><code>torch.utils.data</code>: PyTorch中的数据加载和处理工具。</li><li><code>transformers</code>: Hugging Face的transformers库，用于加载和使用BERT等预训练模型。</li><li><code>pathlib.Path</code>: 用于处理文件路径。</li><li><code>TfidfVectorizer</code>: sklearn库中的TF-IDF向量化器，用于文本特征提取。</li><li><code>SentenceTransformer</code>: 用于获取句子的嵌入表示。</li><li><code>cosine_similarity</code>: 计算余弦相似度的函数。</li><li><code>nltk.word_tokenize</code>: 用于对文本进行分词。</li><li><code>nltk.corpus.stopwords</code>: NLTK中包含的英文停用词集合，用于文本预处理。</li></ul><h2 id="定义训练参数"><a href="#定义训练参数" class="headerlink" title="定义训练参数"></a>定义训练参数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 文本的最大长度</span>text_max_length <span class="token operator">=</span> <span class="token number">128</span><span class="token comment"># 总训练的epochs数，我只是随便定义了个数</span>epochs <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 学习率</span>lr <span class="token operator">=</span> <span class="token number">3e-5</span><span class="token comment"># 取多少训练集的数据作为验证集</span>validation_ratio <span class="token operator">=</span> <span class="token number">0.1</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token comment"># 每多少步，打印一次loss</span>log_per_step <span class="token operator">=</span> <span class="token number">50</span><span class="token comment"># 数据集所在位置</span>dataset_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./基于论文摘要的文本分类与关键词抽取挑战赛公开数据"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token comment"># 模型存储路径</span>model_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./model/bert_checkpoints"</span><span class="token punctuation">)</span><span class="token comment"># 如果模型目录不存在，则创建一个</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Device:"</span><span class="token punctuation">,</span> device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了各种常量，如批量大小(<code>batch_size</code>)、文本最大长度(<code>text_max_length</code>)、学习率(<code>lr</code>)、训练轮数(<code>epochs</code>)等。它还设定了设备类型(<code>device</code>)，如果有GPU，则设为’cuda’，否则设为’cpu’。</p><p><code>log_per_step</code>表示每经过多少个步骤（batch）打印一次损失。</p><p><code>dataset_dir</code>和<code>model_dir</code>分别定义了数据集和模型存储路径。<code>os.makedirs</code>用于创建这些目录。</p><p>在这里由于使用了anaconda的虚拟环境，也就是之前安装好的pytorch环境，内部已经配置好pytorch、transformer等，而且硬件方面有独显，所以device是cuda。</p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd_train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'testB.csv'</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>pd_train_data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> \                        pd_train_data<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test_data<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test_data<span class="token punctuation">[</span>    <span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> pd_train_data<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>pandas</code>库从两个CSV文件（<code>train.csv</code>和<code>testB.csv</code>）中读取数据。然后，使用<code>fillna</code>方法填充缺失的标题（’title’）和摘要（’abstract’）字段，并将它们拼接成新的文本内容（’text’）。</p><p>然后从训练集中随机抽样，sample to train</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从训练集中随机采样测试集</span>validation_data <span class="token operator">=</span> pd_train_data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span>validation_ratio<span class="token punctuation">)</span>train_data <span class="token operator">=</span> pd_train_data<span class="token punctuation">[</span><span class="token operator">~</span>pd_train_data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>isin<span class="token punctuation">(</span>validation_data<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="构建自定义数据集类"><a href="#构建自定义数据集类" class="headerlink" title="构建自定义数据集类"></a>构建自定义数据集类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MyDataset<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode        <span class="token comment"># 拿到对应的数据</span>        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> train_data        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'validation'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> validation_data        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果是测试模式，则返回内容和uuid。拿uuid做target主要是方便后面写入结果。</span>            self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> test_data        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Unknown mode &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 取第index条</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment"># 取其内容</span>        text <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span>        <span class="token comment"># 根据状态返回内容</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果是test，将uuid做为target</span>            label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span>        <span class="token comment"># 返回内容和label</span>        <span class="token keyword">return</span> text<span class="token punctuation">,</span> label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义数据集类 <code>MyDataset</code> 的定义。在深度学习中，通常需要将数据封装成一个可迭代的数据集，以便于模型的训练和验证。PyTorch提供了<code>Dataset</code>和<code>DataLoader</code>这两个类来实现数据集的处理和加载。</p><p><code>upper</code>中定义了一个自定义的数据集类 <code>MyDataset</code>，继承自PyTorch的<code>Dataset</code>类。这个类用于处理文本分类和关键词抽取的数据集，并根据传入的模式（’train’、’validation’、’test’）选择对应的数据子集。</p><p>在<code>MyDataset</code>类中，实现了以下几个重要的方法：</p><ol><li><code>__init__(self, mode=&#39;train&#39;)</code>: 这个方法是类的初始化方法，用于创建数据集对象时执行。<code>mode</code>参数用于指定数据集的模式，可以是’train’、’validation’或者’test’。根据不同的模式，选择对应的数据子集。</li><li><code>__getitem__(self, index)</code>: 这个方法是数据集类的核心方法之一，用于返回指定索引<code>index</code>处的数据样本。在这里，根据索引取出对应的文本内容和标签。如果是测试模式，则将uuid作为标签，否则将标签取出。</li><li><code>__len__(self)</code>: 这个方法返回数据集的大小，即样本的总数。</li></ol><p>数据集类 <code>MyDataset</code> 的主要功能是根据不同的模式选择对应的数据子集，并根据索引取出对应的数据样本。当使用<code>DataLoader</code>加载数据时，它会调用<code>__getitem__</code>方法来获取每个批次的数据样本，并调用<code>__len__</code>方法获取数据集的大小。这样，就可以通过<code>DataLoader</code>来迭代地遍历整个数据集，方便地用于模型的训练和验证。</p><h2 id="获取BERT预训练模型的tokenizer"><a href="#获取BERT预训练模型的tokenizer" class="headerlink" title="获取BERT预训练模型的tokenizer"></a>获取BERT预训练模型的tokenizer</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"bert-base-uncased"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用Hugging Face的<code>AutoTokenizer</code>类从预训练的BERT模型（’bert-base-uncased’）中获取对应的分词器。这个分词器将原始文本内容转换成BERT模型所需的输入格式</p><h2 id="函数加载器的定义和使用"><a href="#函数加载器的定义和使用" class="headerlink" title="函数加载器的定义和使用"></a>函数加载器的定义和使用</h2><p>在深度学习中，数据集通常包含大量的样本，每个样本都有其对应的特征和标签。数据加载器是一个迭代器，它能够按照指定的批量大小（<code>batch_size</code>）将数据集划分成小批量进行加载和处理。</p><p>通常使用PyTorch的<code>DataLoader</code>来加载训练数据集和验证数据集，从而方便地将数据输入到模型中进行训练和验证。</p><h3 id="数据加载器的定义"><a href="#数据加载器的定义" class="headerlink" title="数据加载器的定义"></a>数据加载器的定义</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span>validation_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>validation_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>train_dataset</code> 和 <code>validation_dataset</code>: 这两个参数分别是之前定义的自定义数据集类 <code>MyDataset</code> 的实例，用于加载训练数据集和验证数据集。</p></li><li><p><code>batch_size</code>: 这个参数指定每个批次的样本数。数据加载器会将数据集按照这个大小进行划分，每次返回一个小批量的样本。</p></li><li><p><code>shuffle</code>: 这个参数用于控制数据是否在每个epoch（训练周期）开始时随机打乱顺序。在训练时，通常会将数据打乱，以增加数据的随机性，有助于模型学习到更广泛的特征。但在验证时，不需要打乱数据，以保持数据的顺序。</p></li><li><p><code>collate_fn</code>: 这个参数用于定义如何将样本组合成一个批次。在这里，使用了之前定义的<code>collate_fn</code>函数。这个函数的作用是将每个样本中的文本数据（<code>text</code>）进行编码、填充，并组装成一个批次。具体地，它将样本的文本输入传递给BERT模型，得到BERT模型的输入，然后将输入和标签组装成一个字典形式的数据，用于模型的输入和训练。</p></li></ul><p>其中的大部分参数都已经定义好了，比较重要的是<code>collate_fn</code>函数并没有定义</p><h3 id="collate-fn函数的定义"><a href="#collate-fn函数的定义" class="headerlink" title="collate_fn函数的定义"></a>collate_fn函数的定义</h3><p><code>collate_fn</code> 函数是在数据加载器（<code>DataLoader</code>）中使用的一个函数，用于对每个样本进行处理并组合成一个批次。在项目中，自定义了<code>collate_fn</code>函数，用于将每个样本中的文本数据进行编码、填充，并组装成一个批次，以便于模型的输入和训练。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将一个batch的文本句子转成tensor，并组成batch。    :param batch: 一个batch的句子，例如: [('推文', target), ('推文', target), ...]    :return: 处理后的结果，例如：             src: &#123;'input_ids': tensor([[ 101, ..., 102, 0, 0, ...], ...]), 'attention_mask': tensor([[1, ..., 1, 0, ...], ...])&#125;             target：[1, 1, 0, ...]    """</span>    text<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span>    text<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>    <span class="token comment"># src是要送给bert的，所以不需要特殊处理，直接用tokenizer的结果即可</span>    <span class="token comment"># padding='max_length' 不够长度的进行填充</span>    <span class="token comment"># truncation=True 长度过长的进行裁剪</span>    src <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>text<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'max_length'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span>text_max_length<span class="token punctuation">,</span> return_tensors<span class="token operator">=</span><span class="token string">'pt'</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> src<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>将文本列表转换为文本张量：使用 <code>tokenizer</code> 对文本进行编码，将文本转换为BERT模型需要的输入格式。<code>tokenizer</code> 是之前引入的一个来自 <code>transformers</code> 库的分词器（tokenizer），它可以将文本句子转换成BERT输入的 <code>input_ids</code> 和 <code>attention_mask</code> 张量。</p></li><li><p>padding和truncation：由于BERT模型的输入要求每个样本长度相同，因此需要对文本进行填充（padding）或截断（truncation）操作，使得所有文本都有相同的长度。在这里，将文本长度填充到 <code>text_max_length</code>，超过这个长度的部分会被截断。</p></li><li><p>组装为字典形式：将编码后的文本张量 <code>input_ids</code> 和 <code>attention_mask</code> 组装成一个字典 <code>src</code>，它是模型的输入数据。<code>src</code> 的结构如下：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#39;input_ids&#39;: tensor([[ 101, ..., 102, 0, 0, ...], ...]), &#39;attention_mask&#39;: tensor([[1, ..., 1, 0, ...], ...])&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，<code>input_ids</code> 是文本的编码表示，<code>attention_mask</code> 是用于告诉BERT哪些部分是真实输入，哪些部分是填充的掩码。</p></li><li><p>处理标签：将标签列表 <code>label</code> 转换为PyTorch的Long型张量 <code>torch.LongTensor(label)</code>。标签是用于文本分类的二分类问题，所以需要将标签转换成数值型数据。</p></li></ol><p>最终，<code>collate_fn</code> 函数返回处理后的结果，包含了一个批次的输入数据 <code>src</code> 和对应的标签 <code>label</code>。这样，在使用 <code>DataLoader</code> 加载数据时，每次迭代返回的就是一个批次的数据，可以直接输入到模型中进行训练</p><h2 id="定义预测模型"><a href="#定义预测模型" class="headerlink" title="定义预测模型"></a>定义预测模型</h2><p>当训练深度学习模型时，需要定义一个模型结构，并确定用于评估模型性能的损失函数（loss function）。在这个代码中，定义了一个自定义的预测模型 <code>MyModel</code>，它由预训练的BERT模型和最后的预测层组成。在这个模型中，使用BCELoss作为损失函数，用于进行二分类任务的训练。</p><h3 id="定义预测模型（MyModel）"><a href="#定义预测模型（MyModel）" class="headerlink" title="定义预测模型（MyModel）"></a>定义预测模型（MyModel）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MyModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 加载bert模型</span>        self<span class="token punctuation">.</span>bert <span class="token operator">=</span> BertModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'bert-base-uncased'</span><span class="token punctuation">,</span> mirror<span class="token operator">=</span><span class="token string">'tuna'</span><span class="token punctuation">)</span>        <span class="token comment"># 最后的预测层</span>        self<span class="token punctuation">.</span>predictor <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">768</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param src: 分词后的推文数据        """</span>        <span class="token comment"># 将src直接序列解包传入bert，因为bert和tokenizer是一套的，所以可以这么做。</span>        <span class="token comment"># 得到encoder的输出，用最前面[CLS]的输出作为最终线性层的输入</span>        outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>bert<span class="token punctuation">(</span><span class="token operator">**</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span>last_hidden_state<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># 使用线性层来做最终的预测</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>predictor<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>MyModel</code>中，首先定义了模型的初始化方法（<code>__init__</code>）。在这个方法中，做了以下几个事情：</p><ol><li><p>加载BERT模型：使用<code>BertModel.from_pretrained</code>方法加载了预训练的BERT模型。<code>&#39;bert-base-uncased&#39;</code>表示加载了小写字母的BERT模型，<code>mirror=&#39;tuna&#39;</code>是为了使用TUNA（清华大学开源软件镜像站）的镜像下载预训练的权重。</p></li><li><p>定义最后的预测层：通过<code>nn.Sequential</code>定义了一个包含多个线性层和激活函数的预测层。这个预测层用于将BERT模型的输出特征映射到一个单一的数值，用于进行二分类预测。在这里，使用了两个线性层，大小为768到256，再到1，以及一个ReLU激活函数和一个Sigmoid激活函数。</p></li></ol><p>在神经网络中，最后的Sigmoid激活函数会将输出值压缩到0到1之间，用于表示概率。输出接近0表示负类（Negative Class），输出接近1表示正类（Positive Class）。的任务是根据文本内容对样本进行二分类，所以这个输出值可以表示样本属于正类的概率。</p><h3 id="forward-方法"><a href="#forward-方法" class="headerlink" title="forward()方法"></a>forward()方法</h3><p>在PyTorch中，每个自定义模型都需要定义<code>forward</code>方法。这个方法是模型的前向传递过程，用于定义数据从输入到输出的流动。在<code>MyModel</code>中，定义了<code>forward</code>方法，将输入的分词后的文本数据 <code>src</code> 传递给BERT模型，并通过最后的预测层获取模型的预测结果。</p><ol><li><p>将<code>src</code>输入BERT模型：将分词后的文本数据 <code>src</code> 传递给BERT模型。在这里，使用了双星号（<code>**</code>）将字典中的键值对拆分为参数形式，相当于<code>self.bert(input_ids=src[&#39;input_ids&#39;], attention_mask=src[&#39;attention_mask&#39;])</code>。<code>input_ids</code> 是分词后的句子的索引，<code>attention_mask</code> 是告诉BERT哪些部分是真实的输入，哪些部分是填充的。</p></li><li><p>得到BERT输出：BERT模型的输出是一个包含多个隐藏层的元组，只需要最后一个隐藏层的输出。通过<code>last_hidden_state</code>选取最后一个隐藏层。</p></li><li><p>使用线性层进行预测：最后，将BERT模型的输出传递给预测层 <code>self.predictor</code>，用于获得模型的预测结果。在这里，选取BERT输出中 <code>[CLS]</code> 符号对应的位置作为整个句子的表示，并通过预测层将其映射到一个单一的数值。</p></li></ol><p>该方法的返回值就是模型的预测结果，即样本属于正类的概率。根据这个概率值，可以进行二分类预测。如果输出值接近0，则判定为负类；如果输出值接近1，则判定为正类。</p><p>总的来说，定义预测模型 <code>MyModel</code> 的过程是将预训练的BERT模型与一个预测层组合在一起，使得模型能够对输入文本进行二分类预测。预测层将BERT输出特征映射到一个数值，表示样本属</p><h2 id="定义转移函数"><a href="#定义转移函数" class="headerlink" title="定义转移函数"></a>定义转移函数</h2><p>定义了一个辅助函数<code>to_device</code>，用于将数据移动到指定的设备（CPU或GPU），以便在GPU上进行加速计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">to_device</span><span class="token punctuation">(</span>dict_tensors<span class="token punctuation">)</span><span class="token punctuation">:</span>    result_tensors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dict_tensors<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result_tensors<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token keyword">return</span> result_tensors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_loss <span class="token operator">=</span> <span class="token number">0.</span>    total_correct <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> targets <span class="token keyword">in</span> validation_loader<span class="token punctuation">:</span>        inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> to_device<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criteria<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targets<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        total_loss <span class="token operator">+=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        correct_num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>outputs <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        total_correct <span class="token operator">+=</span> correct_num    <span class="token keyword">return</span> total_correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataset<span class="token punctuation">)</span><span class="token punctuation">,</span> total_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataset<span class="token punctuation">)</span><span class="token comment"># 首先将模型调成训练模式</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 清空一下cuda缓存</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>empty_cache<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 定义几个变量，帮助打印loss</span>total_loss <span class="token operator">=</span> <span class="token number">0.</span><span class="token comment"># 记录步数</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 记录在验证集上最好的准确率</span>best_accuracy <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 开始训练</span><span class="token comment"># for epoch in range(epochs):</span><span class="token comment">#     model.train()</span><span class="token comment">#     for i, (inputs, targets) in enumerate(train_loader):</span><span class="token comment">#         # 从batch中拿到训练数据</span><span class="token comment">#         inputs, targets = to_device(inputs), targets.to(device)</span><span class="token comment">#         # 传入模型进行前向传递</span><span class="token comment">#         outputs = model(inputs)</span><span class="token comment">#         # 计算损失</span><span class="token comment">#         loss = criteria(outputs.view(-1), targets.float())</span><span class="token comment">#         loss.backward()</span><span class="token comment">#         optimizer.step()</span><span class="token comment">#         optimizer.zero_grad()</span><span class="token comment">#</span><span class="token comment">#         total_loss += float(loss)</span><span class="token comment">#         step += 1</span><span class="token comment">#</span><span class="token comment">#         if step % log_per_step == 0:</span><span class="token comment">#             print("Epoch &#123;&#125;/&#123;&#125;, Step: &#123;&#125;/&#123;&#125;, total loss:&#123;:.4f&#125;".format(epoch + 1, epochs, i, len(train_loader),</span><span class="token comment">#                                                                        total_loss))</span><span class="token comment">#             total_loss = 0</span><span class="token comment">#</span><span class="token comment">#         del inputs, targets</span><span class="token comment">#</span><span class="token comment">#     # 一个epoch后，使用过验证集进行验证</span><span class="token comment">#     accuracy, validation_loss = validate()</span><span class="token comment">#     print("Epoch &#123;&#125;, accuracy: &#123;:.4f&#125;, validation loss: &#123;:.4f&#125;".format(epoch + 1, accuracy, validation_loss))</span><span class="token comment">#     torch.save(model, model_dir / f"model_&#123;epoch&#125;.pt")</span><span class="token comment">#</span><span class="token comment">#     # 保存最好的模型</span><span class="token comment">#     if accuracy > best_accuracy:</span><span class="token comment">#         torch.save(model, model_dir / f"model_best.pt")</span><span class="token comment">#         best_accuracy = accuracy</span><span class="token comment"># 加载最好的模型，然后进行测试集的预测</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>开始训练：</strong> 在未被注释的代码部分，我们可以看到关于模型训练的代码。在这部分代码中，使用了一个外层的<code>for</code>循环来遍历训练的多个epoch（训练周期）。每个epoch内部使用一个<code>for</code>循环遍历训练数据加载器<code>train_loader</code>中的每个小批量数据。</li><li><strong>模型训练：</strong> 在内部的循环中，首先从数据加载器中获取一个批次的数据。然后，将这些数据传入模型进行前向传递得到预测输出，并计算预测输出与真实标签之间的损失（loss）。接着，调用反向传播（backpropagation）计算梯度，并利用优化器（<code>optimizer</code>）来更新模型的参数。</li><li><strong>打印loss：</strong> 在内部循环的每一步（<code>step</code>）之后，代码会根据预先定义的<code>log_per_step</code>来打印当前的总损失（<code>total_loss</code>）。这样可以帮助我们监控训练的进展。</li><li><strong>验证：</strong> 在每个epoch结束后，使用验证集数据来验证当前模型在验证集上的性能。调用<code>validate()</code>函数来实现验证。在<code>validate()</code>函数中，模型会切换到评估模式（<code>model.eval()</code>），然后对验证集的每个批次数据进行前向传递，并计算损失和正确预测的数量。最后，返回验证集上的准确率和平均损失。</li><li><strong>保存模型：</strong> 在每个epoch结束后，将当前的模型保存到文件系统中，使用<code>torch.save()</code>函数。模型文件名包含epoch的编号，用于后续选择最佳模型进行测试。</li><li><strong>记录最佳模型：</strong> 在每个epoch结束后，检查当前epoch的验证集准确率是否优于之前的最佳准确率（<code>best_accuracy</code>）。如果是，则将当前模型保存为最佳模型，并更新<code>best_accuracy</code>的值。</li></ol><h2 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 加载最好的模型，然后进行测试集的预测</span>model <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_dir <span class="token operator">/</span> <span class="token string-interpolation"><span class="token string">f"model_best.pt"</span></span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> MyDataset<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> collate_fn<span class="token operator">=</span>collate_fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载最佳模型，加载测试集数据并进行文本分类预测，完成任务一</p><h2 id="提取关键词"><a href="#提取关键词" class="headerlink" title="提取关键词"></a>提取关键词</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test_data<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test_data<span class="token punctuation">[</span>    <span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>stops<span class="token operator">=</span> stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token string">'english'</span><span class="token punctuation">)</span>model<span class="token operator">=</span>SentenceTransformer<span class="token punctuation">(</span><span class="token string">r'xlm-r-distilroberta-base-paraphrase-v1'</span><span class="token punctuation">)</span>test_words<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> test_data<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取第每一行数据的标题与摘要并提取关键词</span>    <span class="token comment"># 修改n_gram_range来改变结果候选词的词长大小。例如，如果我们将它设置为(3，3)，那么产生的候选词将是包含3个关键词的短语。</span>    n_gram_range <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># 这里我们使用TF-IDF算法来获取候选关键词</span>    count <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>ngram_range<span class="token operator">=</span>n_gram_range<span class="token punctuation">,</span> stop_words<span class="token operator">=</span>stops<span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span>    candidates <span class="token operator">=</span> count<span class="token punctuation">.</span>get_feature_names_out<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将文本标题以及候选关键词/关键短语转换为数值型数据（numerical data）。我们使用BERT来实现这一目的</span>    title_embedding <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">]</span><span class="token punctuation">)</span>    candidate_embeddings <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>    <span class="token comment"># 通过修改这个参数来更改关键词数量</span>    top_n <span class="token operator">=</span> <span class="token number">15</span>    <span class="token comment"># 利用文章标题进一步提取关键词</span>    distances <span class="token operator">=</span> cosine_similarity<span class="token punctuation">(</span>title_embedding<span class="token punctuation">,</span> candidate_embeddings<span class="token punctuation">)</span>    keywords <span class="token operator">=</span> <span class="token punctuation">[</span>candidates<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">for</span> index <span class="token keyword">in</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span>top_n<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>    test_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>keywords<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'success </span><span class="token interpolation"><span class="token punctuation">&#123;</span>row<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_wordstest_data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span><span class="token string">'Keywords'</span><span class="token punctuation">,</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'result.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本预处理和关键词抽取，并将提取的关键词结果保存到<code>result.csv</code>文件中。</p><p>让我们逐步解释代码的功能：</p><ol><li><p><strong>文本预处理：</strong> 首先，通过<code>test_data[&#39;title&#39;].fillna(&#39;&#39;)</code>，<code>test_data[&#39;author&#39;].fillna(&#39;&#39;)</code> 和 <code>test_data[&#39;abstract&#39;].fillna(&#39;&#39;)</code> 分别对标题、作者和摘要列进行NaN值填充。这样可以确保所有文本数据都是字符串类型，并填充缺失的部分为空字符串。然后，通过拼接这三列的文本数据，并将结果存储在新的<code>text</code>列中，<code>test_data[&#39;text&#39;] = ...</code>。</p></li><li><p><strong>停用词处理：</strong> 使用NLTK库中的<code>stopwords.words(&#39;english&#39;)</code>函数获取英文停用词列表，存储在<code>stops</code>变量中。停用词是在信息检索中被忽略的常见词汇，这些词汇通常不携带太多实际意义，例如”the”、”a”、”and”等。</p></li><li><p><strong>关键词抽取：</strong> 通过迭代<code>test_data</code>数据表中的每一行数据（样本），对每个样本的标题和摘要进行关键词抽取。其中，<code>test_data.iterrows()</code>是一个迭代器，用于遍历数据表的每一行。</p></li><li><p><strong>TF-IDF特征提取：</strong> 对于每个样本，首先根据设置的<code>n_gram_range</code>，使用TF-IDF算法从文本中提取候选关键词。<code>TfidfVectorizer</code>是scikit-learn库中的一个工具，用于计算TF-IDF特征。</p></li><li><p><strong>BERT嵌入：</strong> 使用预训练的<code>xlm-r-distilroberta-base-paraphrase-v1</code>模型，即<code>SentenceTransformer</code>，对样本的标题进行BERT嵌入编码。这样，每个样本的标题都被转换为一个向量表示。</p></li><li><p><strong>计算相似度：</strong> 计算候选关键词的嵌入向量与标题嵌入向量之间的余弦相似度。相似度计算后，根据相似度的大小，选择相似度最高的前<code>top_n</code>个关键词作为最终的关键词。</p></li><li><p><strong>处理提取结果：</strong> 如果从标题中没有提取到关键词（即<code>len(keywords) == 0</code>），则设置默认的关键词为 <code>[&#39;A&#39;, &#39;B&#39;]</code>。将提取到的关键词转换成一个用分号分隔的字符串，并将该字符串添加到<code>test_words</code>列表中。</p></li><li><p><strong>保存结果：</strong> 将提取的关键词列表 <code>test_words</code> 添加到<code>test_data</code>数据表的<code>Keywords</code>列中。然后从<code>test_data</code>数据表中选取<code>uuid</code>、<code>Keywords</code>和<code>label</code>列，并将结果保存为<code>result.csv</code>文件，用于后续的提交和分析。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>upper</code>完全体跑出来的分数相当可观，能够达到0.41792。</p><p>对于任务二，抽取式关键词应该已经到达极限了，再要提分就需要通过理解语义概括得到关键词，这也就转向了生成式关键词，也就是再进阶就需要用到LLM来冲榜了。</p>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenaiAPI的调用</title>
      <link href="/2023/07/28/OpenaiAPI%E7%9A%84%E8%B0%83%E7%94%A8/"/>
      <url>/2023/07/28/OpenaiAPI%E7%9A%84%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/JIANG-Wu-19/OpenAIAPI">OpenAIAPI</a></p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><ul><li>输入文本，返回API对文本的分类操作</li><li>在本地使用chain of thought，进行文本清洗、特征提取</li><li>调用API对文本进行分类</li><li>断点重爬</li><li>多线程</li></ul><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="启动画面"><a href="#启动画面" class="headerlink" title="启动画面"></a>启动画面</h3><p><img src="/imgs/openaiapi/1.png" alt="启动画面"></p><h3 id="情感分析界面"><a href="#情感分析界面" class="headerlink" title="情感分析界面"></a>情感分析界面</h3><p><img src="/imgs/openaiapi/2.png" alt="情感分析界面"></p><h3 id="断点重爬"><a href="#断点重爬" class="headerlink" title="断点重爬"></a>断点重爬</h3><p>清空当前输入界面</p><p><img src="/imgs/openaiapi/3.png" alt="清空输入界面"></p><p>点击Load Breakpoint</p><p><img src="/imgs/openaiapi/4.png" alt="断点重爬"></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p><img src="/imgs/openaiapi/5.png" alt="多线程"></p><h2 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h2><ul><li>使用Python作为主要编程语言</li></ul><h3 id="wxPython"><a href="#wxPython" class="headerlink" title="wxPython"></a>wxPython</h3><p>使用wxPython用于构建GUI</p><h3 id="OpenAI-API"><a href="#OpenAI-API" class="headerlink" title="OpenAI API"></a>OpenAI API</h3><p>用于进行实现情感分析等文本分类问题</p><h3 id="NLTK"><a href="#NLTK" class="headerlink" title="NLTK"></a>NLTK</h3><p>Natural Language Toolkit，主要在实现chain of thought中使用</p><ul><li>首先进行文本清洗，全部转化成小写字母、去除标点符号、去除停用词</li><li>然后进行特征提取</li></ul><h3 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h3><p>用于断点数据的序列化和反序列化</p><h2 id="难点和解决方法"><a href="#难点和解决方法" class="headerlink" title="难点和解决方法"></a>难点和解决方法</h2><h3 id="多步处理文本"><a href="#多步处理文本" class="headerlink" title="多步处理文本"></a>多步处理文本</h3><p>通过定义多个函数，将处理逻辑模块化，按照顺序组合调用。</p><p>在实现中分别定义了不同文本处理函数，然后按照顺序依次进行处理一和处理二</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def process_step1(text):    # 文本清洗    cleaned_text &#x3D; text.lower()  # 将文本转换为小写    cleaned_text &#x3D; remove_punctuation(cleaned_text)  # 去除标点符号    cleaned_text &#x3D; remove_stopwords(cleaned_text)  # 去除停用词    return cleaned_textdef process_step2(text):    # 特征提取    features &#x3D; extract_features(text)  # 提取文本特征    print(features)    feature_text &#x3D; &quot;&quot;    while len(features) !&#x3D; 0:        key &#x3D; max(features)        feature_text &#x3D; feature_text + key + &#39; &#39;        del features[key]    return feature_text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理文本时文本清洗"><a href="#处理文本时文本清洗" class="headerlink" title="处理文本时文本清洗"></a>处理文本时文本清洗</h3><p>大小写转换、去除标点符号和停用词</p><blockquote><p>使用Python的<code>string</code>中的大小写转换</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">cleaned_text &#x3D; text.lower()  # 将文本转换为小写<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>使用Python的<code>string</code>模块中的<code>punctuation</code>字符串，利用<code>str.translate()</code>方法去除标点符号。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def remove_punctuation(text): # 去除标点符号 cleaned_text &#x3D; text.translate(str.maketrans(&quot;&quot;, &quot;&quot;, string.punctuation)) return cleaned_text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>对于停用词，使用NLTK中的<code>stopwords</code>语料库，结合<code>word_tokenize()</code>方法对文本进行分词，然后通过列表推导式去除停用词。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def remove_stopwords(text): # 去除停用词 stop_words &#x3D; set(stopwords.words(&quot;english&quot;)) word_tokens &#x3D; word_tokenize(text) filtered_text &#x3D; [word for word in word_tokens if word.lower() not in stop_words] cleaned_text &#x3D; &quot; &quot;.join(filtered_text) return cleaned_text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="断点重爬-1"><a href="#断点重爬-1" class="headerlink" title="断点重爬"></a>断点重爬</h3><p>在断点功能中，使用Pickle模块将断点数据保存为二进制文件，并在需要时加载和恢复数据，将加载按钮在图形化界面显示</p><h3 id="OpenAI-API的调用"><a href="#OpenAI-API的调用" class="headerlink" title="OpenAI API的调用"></a>OpenAI API的调用</h3><p>使用OpenAI官方提供的Python SDK，通过创建API对象并设置API密钥，调用相应的API方法实现文本分类</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>由于需要在GitHub中设置public，API密钥并未在源代码给出，需要修改API密钥</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
            <tag> OpenAI API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题八</title>
      <link href="/2023/07/27/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%85%AB/"/>
      <url>/2023/07/27/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%85%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出策略打印旋转矩阵</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>$\left[\begin{array}{cccc}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1 n} \ a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2 n} \ a_{31} &amp; a_{32} &amp; \cdots &amp; a_{3 n} \ \cdots &amp; \cdots &amp; &amp; \cdots \ a_{m 1} &amp; a_{m 2} &amp; \cdots &amp; a_{m n}\end{array}\right]$</p><p>对于上述矩阵，假定采用顺时针进行旋转打印</p><p>对打印顺序进行分析，顺时针旋转一圈，打印的是在外面的一层元素</p><p>因此对矩阵进行分层，从外向内划分依次得到以下分层：</p><p>$[1,1,1,1,1,1,1]$<br>$[1,2,2,2,2,2,1]$<br>$[1,2,3,3,3,2,1]$<br>$[1,2,2,2,2,2,1]$<br>$[1,1,1,1,1,1,1]$</p><p>采用左上$(top,left)$、左下$(bottom,left)$、右上$(top,right)$、右下$(top,right)$四个点定位各层的位置，将打印层分为上下左右四个片区分别进行打印，遍历完当前层的元素后<em>left</em>++、<em>top</em>++、<em>right</em>–、<em>bottom</em>–，进入下一层开始遍历，最终得到整个旋转矩阵。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;void PrintMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;int r &#x3D; matrix.size();int c &#x3D; matrix[0].size();int top &#x3D; 0, bottom &#x3D; r - 1, left &#x3D; 0, right &#x3D; c - 1;while (left &lt;&#x3D; right &amp;&amp; top &lt;&#x3D; bottom) &#123;for (int i &#x3D; left; i &lt;&#x3D; right; i++) &#123;cout &lt;&lt; matrix[top][i] &lt;&lt; &quot; &quot;;&#125;for (int i &#x3D; top + 1; i &lt;&#x3D; bottom; i++) &#123;cout &lt;&lt; matrix[i][right] &lt;&lt; &quot; &quot;;&#125;if (left &lt; right &amp;&amp; top &lt; bottom) &#123;for (int i &#x3D; right - 1; i &gt; left; i--) &#123;cout &lt;&lt; matrix[bottom][i] &lt;&lt; &quot; &quot;;&#125;for (int i &#x3D; bottom; i &gt; top; i--) &#123;cout &lt;&lt; matrix[i][left] &lt;&lt; &quot; &quot;;&#125;&#125;top++;left++;right--;bottom--;&#125;cout &lt;&lt; endl;&#125;int main() &#123;vector&lt;vector&lt;int&gt;&gt; matrix &#x3D; &#123; &#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125; &#125;;vector&lt;vector&lt;int&gt;&gt; matrix1 &#x3D; &#123; &#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;,&#123;13,14,15,16&#125; &#125;;PrintMatrix(matrix);PrintMatrix(matrix1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个问题中，每一元素都要被遍历一次，因此算法的时间复杂度是$O(r*c)$，r为矩阵行数，c为矩阵列数，本算法并不需要开辟额外的空间，故空间复杂度为$O(1)$。</p><h3 id="附加思考"><a href="#附加思考" class="headerlink" title="附加思考"></a>附加思考</h3><h4 id="顺时针旋转矩阵-90°"><a href="#顺时针旋转矩阵-90°" class="headerlink" title="顺时针旋转矩阵$90°$"></a>顺时针旋转矩阵$90°$</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;int&gt;&gt; RotateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;vector&lt;vector&lt;int&gt; &gt; rotate;vector&lt;int&gt; temp;int r &#x3D; matrix.size(), c &#x3D; matrix[0].size();for (int j &#x3D; 0; j &lt; c; j++) &#123;for (int i &#x3D; r - 1; i &gt;&#x3D; 0; i--) &#123;temp.push_back(matrix[i][j]);&#125;rotate.push_back(temp);temp.clear();&#125;return rotate;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="“之”字形打印矩阵"><a href="#“之”字形打印矩阵" class="headerlink" title="“之”字形打印矩阵"></a>“之”字形打印矩阵</h4><p>使用两个指针分别从00位置开始，一个指针沿右下的路线抵达矩阵右下角元素，另一个沿下右的路线抵达矩阵右下角，两指针确定的直线上再根据奇偶性判断打印方向</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void ZhiPrint(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;int r &#x3D; matrix.size();int c &#x3D; matrix[0].size();int ar &#x3D; 0, ac &#x3D; 0;int br &#x3D; 0, bc &#x3D; 0;int n;do &#123;n &#x3D; ar + ac;if ( n % 2 &#x3D;&#x3D; 0) &#123;for (int i &#x3D; ar; i &lt;&#x3D; br; i++) &#123;cout &lt;&lt; matrix[i][n - i] &lt;&lt; &quot; &quot;;&#125;&#125;else &#123;for (int i &#x3D; br; i &gt;&#x3D; ar; i--) &#123;cout &lt;&lt; matrix[i][n - i] &lt;&lt; &quot; &quot;;&#125;&#125;if (br &lt; r) &#123;br++;&#125;else &#123;bc++;&#125;if (ac &lt; c) &#123;ac++;&#125;else &#123;ar++;&#125;&#125; while (ar !&#x3D; br &amp;&amp; ac !&#x3D; bc);cout &lt;&lt; matrix[r - 1][c - 1] &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出策略返回一个m*n矩阵中从[1,1]到[m,n]的和最小的一条路径。</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>已知在某一点时想要确定路径下一个元素的位置，路径方向只能是向下&#x2F;向右，因此网格的第一行&#x2F;第一列上的元素下一位置只能是该元素的右边&#x2F;左边，然后确定剩下路径</p><p>对于每一待定元素可由其左边&#x2F;上边的元素到达，比较两数的大小，确定更小的那一个，然后依次得到不同路径，直至抵达[m,n]，再通过回溯得到最小路径。</p><ul><li>当 $i&gt;0$ 且 $j&#x3D;0$ 时， $d p[i][0]&#x3D;d p[i-1][0]+\operatorname{grid}[i][0]$ </li><li>当 $i&#x3D;0$ 且 $j&gt;0$ 时， $d p[0][j]&#x3D;d p[0][j-1]+\operatorname{grid}[0][j]$ </li><li>当 $i&gt;0$ 且 $j&gt;0$ 时， $d p[i][j]&#x3D;\min (d p[i-1][j], d p[i][j-1])+\operatorname{grid}[i][j]$</li></ul><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;int MinPath(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;int r &#x3D; matrix.size(), c &#x3D; matrix.size();auto dp &#x3D; vector&lt;vector&lt;int&gt; &gt;(r, vector&lt;int&gt;(c));dp[0][0] &#x3D; matrix[0][0];for (int i &#x3D; 1; i &lt; r; i++) &#123;dp[i][0] &#x3D; dp[i - 1][0] + matrix[i][0];&#125;for (int i &#x3D; 1; i &lt; c; i++) &#123;dp[0][i] &#x3D; dp[0][i - 1] + matrix[0][i];&#125;for (int i &#x3D; 1; i &lt; r; i++) &#123;for (int j &#x3D; 1; j &lt; c; j++) &#123;dp[i][j] &#x3D; min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j];&#125;&#125;return dp[r - 1][c - 1];&#125;int main() &#123;vector&lt;vector&lt;int&gt; &gt; matrix &#x3D; &#123; &#123;1,3,1&#125;,&#123;1,5,1&#125;,&#123;4,2,1&#125; &#125;;cout &lt;&lt; MinPath(matrix) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要遍历整个数组，时间复杂度是$O(mn)$</p><p>重新开辟了一个大小相同的向量空间，空间复杂度是$O(mn)$，在空间方面可以进行优化，直接在原矩阵上进行dp操作，不使用额外空间，改进到$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 旋转矩阵 </tag>
            
            <tag> 二维最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Baseline实现</title>
      <link href="/2023/07/27/Baseline%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/07/27/Baseline%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>友情连接：<a href="https://datawhaler.feishu.cn/docx/WirRd4oB5oMe2ixw1rxcTnHFnHh">Datawhale-NLP实践</a></p><p>GitHub项目地址：<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project</a></p><h2 id="import库"><a href="#import库" class="headerlink" title="import库"></a>import库</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入LogisticRegression回归模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarning<span class="token comment"># 引入分词器</span><span class="token keyword">from</span> nltk <span class="token keyword">import</span> word_tokenize<span class="token punctuation">,</span> ngramssimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中比较重要的几个库：<code>pandas</code>,<code>sklearn</code>,<code>nltk</code>。上述三个库进行分开讲解。</p><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><ul><li>pandas是一个第三方的库，因此需要先下载</li></ul><pre class="line-numbers language-none"><code class="language-none">pip install pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pandas的功能非常强大，早在学习的时候便能窥见一二。</p><p>pandas的主要数据结构<code>Series</code>和<code>DataFrame</code>，分别对应一维数据和二维数据</p><p>Pandas 就像一把万能瑞士军刀，下面仅列出了它的部分优势 ：</p><ul><li>处理浮点与非浮点数据里的<strong>缺失数据</strong>，表示为 <code>NaN</code>；</li><li>大小可变：<strong>插入或删除</strong> DataFrame 等多维对象的列；</li><li>自动、显式<strong>数据对齐</strong>：显式地将对象与一组标签对齐，也可以忽略标签，在 Series、DataFrame 计算时自动与数据对齐；</li><li>强大、灵活的<strong>分组</strong>（group by）功能：<strong>拆分-应用-组合</strong>数据集，聚合、转换数据；</li><li>把 Python 和 NumPy 数据结构里不规则、不同索引的数据<strong>轻松</strong>地转换为 DataFrame 对象；</li><li>基于智能标签，对大型数据集进行<strong>切片</strong>、<strong>花式索引</strong>、<strong>子集分解</strong>等操作；</li><li>直观地<strong>合并（merge）</strong>、<strong>连接（join）</strong>数据集；</li><li>灵活地<strong>重塑（reshape）</strong>、<strong>透视（pivot）</strong>数据集；</li><li><strong>轴</strong>支持结构化标签：一个刻度支持多个标签；</li><li>成熟的 IO 工具：读取<strong>文本文件</strong>（CSV 等支持分隔符的文件）、Excel 文件、数据库等来源的数据，利用超快的 <strong>HDF5</strong> 格式保存 &#x2F; 加载数据；</li><li><strong>时间序列</strong>：支持日期范围生成、频率转换、移动窗口统计、移动窗口线性回归、日期位移等时间序列功能。</li></ul><p>在这里，我们主要用到的就是读取csv文件，然后对读取到的数据进行行操作、列操作。</p><h3 id="sklearn"><a href="#sklearn" class="headerlink" title="sklearn"></a>sklearn</h3><p>scikit-learn，又写作sklearn，是一个开源的基于python语言的机器学习工具包。它通过NumPy, SciPy和Matplotlib等python数值计算的库实现高效的算法应用，并且涵盖了几乎所有主流机器学习算法。</p><p>在这里baseline使用的是Logistic Regression，当然对于分类而言，还可以使用random forest、SVM等等，也是sklearn库中的模块，可以在baseline的基础上进行操作。</p><h3 id="nltk"><a href="#nltk" class="headerlink" title="nltk"></a>nltk</h3><p>nltk全称Natural Language Toolkit，自然语言处理工具包，在NLP领域中，最常使用的一个Python库。</p><p>在baseline中，使用了nltk库，对文本进行一系列操作如单词切分、去除停用词、抽取关键词等等操作</p><h2 id="实现任务一"><a href="#实现任务一" class="headerlink" title="实现任务一"></a>实现任务一</h2><ul><li>task 1：判断是否是医学论文</li></ul><p>官方给出的A集中已经含有Keywords一项，也就是说在前期工作中并不需要完成任务二。</p><p>对于任务一来说，是一个简单的文本分类问题，官方给出了训练集，那么可以采用Logistic Regression来做分类的预测，实际上random forest和SVM也可以，在后文会略微提到一点，因为没有得到显著的提升效果。</p><h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><p>逻辑回归（Logistic Regression）与线性回归（Linear Regression）都是一种广义线性模型（generalized linear model）。逻辑回归假设因变量 y 服从伯努利分布，而线性回归假设因变量 y 服从高斯分布。 因此与线性回归有很多相同之处，去除Sigmoid映射函数的话，逻辑回归算法就是一个线性回归。可以说，逻辑回归是以线性回归为理论支持的，但是逻辑回归通过Sigmoid函数引入了非线性因素，因此可以轻松处理0&#x2F;1分类问题。</p><p>首先引入Sigmoid函数，称逻辑函数：<br>$$<br>g(z)&#x3D; \frac {1}{1+e^{-z}}<br>$$<br>上述函数对于解决二分类问题十分重要</p><p>逻辑回归的假设函数形式如下：<br>$$<br>h_\theta(x)&#x3D;g\left(\theta^T x\right), g(z)&#x3D;\frac{1}{1+e^{-z}}<br>$$<br>得到：<br>$$<br>h_\theta(x)&#x3D;\frac{1}{1+e^{-\theta^T x}}<br>$$<br>$x$是输入数据，$\theta$是求取参数</p><p>逻辑回归就是计算在给定上述两个参数的条件下$y&#x3D;1$的概率。</p><p>做假设：<br>$$<br>P(y&#x3D;1 \mid x ; \theta)&#x3D;g\left(\theta^T x\right)&#x3D;\frac{1}{1+e^{-\theta^T}}<br>$$<br>决策函数就是：<br>$$<br>P(y&#x3D;1|x)&gt;0.5 \Rightarrow y^*&#x3D;1<br>$$</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>上一节中都是Logistic Regression的原理，在这里一笔带过，如果单纯的手撕逻辑回归代码会相当耗时，sklearn库已经为我们封装好了模型，只要将训练集的相关列组成文本向量然后进行训练就可以得到预测结果。</p><p>首先使用pandas提供的IO操作进行数据集的读取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行训练集、测试集的文本拼接：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上都是数据的预处理，接下来才是重点</p><ul><li><p>将文本向量化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>将数据集输入模型进行训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token operator">**</span>param_dist<span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，Logistic Regression模型中的超参数在另一个程序中通过交叉验证得到，以下是程序运行后得到的一个优解</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">param_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">2.8496190796154743</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token string">'l2'</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体程序不在这里赘述，感兴趣的见附录。</p></li><li><p>对测试机label进行预测</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成csv文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>最终，在笔者使用了一点trick的情况下，跑出来的分数还是比较可观的</p><p><img src="/imgs/baseline/2.png" alt="image-20230727173735393"></p><p>但是，如果是关键词未给出的B集，Logistic Regression的表现就会比较糟糕</p><h2 id="任务一模型的选择"><a href="#任务一模型的选择" class="headerlink" title="任务一模型的选择"></a>任务一模型的选择</h2><p>在超参数缺省的情况下，random forest的表现最好，随后依次是Logistic Regression、SVM；</p><p>如果分别对模型的参数进行交叉验证得到一组优化的参数，Logistic Regression的表现最好，随后依次是random forest、SVM；</p><p>也就是说，SVM在本分类中并不适合。</p><p>Logistic Regression和random forest两者的差距不大，都可以选择</p><h2 id="实现任务二"><a href="#实现任务二" class="headerlink" title="实现任务二"></a>实现任务二</h2><ul><li>task 2：关键词抽取</li></ul><p>官方更新的B集中，去除了Keywords一列，因此需要进行提取</p><p>baseline中的实现过程是对文本进行关键词的抽取</p><p>相关库已经import，在上述任务一的基础上进行后续操作</p><ul><li><p>停用词的设置，这里直接使用nltk自带的停用词库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">stops <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定义筛选函数</p><p>从给定文档的标题和摘要中提取关键词吗，遵循特定的过程来识别频繁出现的词组（二元组），作为潜在的关键词。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_keywords_by_freq</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> abstract<span class="token punctuation">)</span><span class="token punctuation">:</span>    ngrams_count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>title<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>abstract<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>ngrams_count<span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams_count<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ngrams_count = list(ngrams(word_tokenize(title.lower()), 2)) + list(ngrams(word_tokenize(abstract.lower()), 2))</code>：首先，将<code>title</code>和<code>abstract</code>拆分成小写单词，并从标题和摘要中创建二元组（两个连续的单词序列）。这些二元组存储在<code>ngrams_count</code>列表中</li><li><code>ngrams_count = pd.DataFrame(ngrams_count)</code>：将<code>ngrams_count</code>列表中的二元组转换为pandas DataFrame，以便更容易地进行数据处理</li><li><code>ngrams_count = ngrams_count[~ngrams_count[0].isin(stops)]</code> 和 <code>ngrams_count = ngrams_count[~ngrams_count[1].isin(stops)]</code>：在这里，函数过滤掉包含停用词的二元组。停用词是常用词，在文本分析中通常被忽略，因为它们没有很重要的意义</li><li><code>ngrams_count = ngrams_count[ngrams_count[0].apply(len) &gt; 3]</code> 和 <code>ngrams_count = ngrams_count[ngrams_count[1].apply(len) &gt; 3]</code>：函数过滤掉第一个和第二个单词长度小于等于3个字符的二元组。这样做是为了去除非常短和不太有信息量的短语</li><li><code>ngrams_count[&#39;phrase&#39;] = ngrams_count[0] + &#39; &#39; + ngrams_count[1]</code>：将每个二元组的第一个单词和第二个单词连接起来，创建一个名为’phrase’的新列</li><li><code>ngrams_count = ngrams_count[&#39;phrase&#39;].value_counts()</code>：然后，函数计算每个唯一二元组短语的出现次数</li><li><code>ngrams_count = ngrams_count[ngrams_count &gt; 1]</code>：它过滤掉仅出现一次的二元组短语，因为它们可能作为关键词的相关性较低</li><li><code>return list(ngrams_count.index)[:6]</code>：最后，函数返回出现频率最高的前6个二元组短语作为提取的关键词</li></ul></li><li><p>对测试集提取关键词</p><p>使用之前定义的<code>extract_keywords_by_freq</code>函数从给定的测试数据中提取关键词，并将提取到的关键词拼接成一个字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> test<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取第每一行数据的标题与摘要并提取关键词</span>    prediction_keywords <span class="token operator">=</span> extract_keywords_by_freq<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>abstract<span class="token punctuation">)</span>    <span class="token comment"># 利用文章标题进一步提取关键词</span>    prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> prediction_keywords<span class="token punctuation">]</span>    <span class="token comment"># 如果未能提取到关键词</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>    test_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>prediction_keywords = extract_keywords_by_freq(row[1].title, row[1].abstract)</code>: 从当前行的标题和摘要中调用<code>extract_keywords_by_freq</code>函数提取关键词，并将结果存储在<code>prediction_keywords</code>变量中。</p></li><li><p><code>prediction_keywords = [x.title() for x in prediction_keywords]</code>: 将<code>prediction_keywords</code>中的每个关键词的首字母大写，形成一个新的列表，这是为了统一关键词的格式。</p></li><li><p><code>if len(prediction_keywords) == 0: prediction_keywords = [&#39;A&#39;, &#39;B&#39;]</code>: 如果未能提取到关键词（即<code>prediction_keywords</code>为空列表），则将默认关键词<code>[&#39;A&#39;, &#39;B&#39;]</code>赋值给<code>prediction_keywords</code>。</p></li><li><p><code>test_words.append(&#39;; &#39;.join(prediction_keywords))</code>: 将处理后的关键词列表转换为以分号为分隔符的字符串，并将这个字符串添加到<code>test_words</code>列表中。</p></li></ul></li><li><p>将得到的test_words存入Series中，并生成csv文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_wordstest<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task2.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>抽取式关键字存在比较大的缺陷，文献的标题、摘要中不一定会出现关键字，因此造成的准确率不高，跑出来的分数也不是很好看。</p><h2 id="任务顺序的变换"><a href="#任务顺序的变换" class="headerlink" title="任务顺序的变换"></a>任务顺序的变换</h2><p>由于任务二是提取关键字，而任务一的准确率又和关键字挂钩，有没有可能通过调整任务的顺序，先提取关键字，然后将关键字加入进行训练以得到更准确的分类。</p><p>这种idea很容易实现，因为代码都是现成的，只需要稍加改动就可以了，原理在前面两节都已经提及，实现代码见附录。</p><p>虽然分数都不是很好看，但是有那么一丢丢进步。</p><p><img src="/imgs/baseline/3.png" alt="image-20230727173918592"></p><p><img src="/imgs/baseline/4.png" alt="image-20230727174658234"></p><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>上述都只是一个baseline的实现过程，也就是说都还有进步空间，对于传统机器学习，已经到达极限。</p><p>后续笔者冲榜的时候对任务一的实现进行改进，使用了BERT模型，对于文本分类的准确度，有较大的提升。</p><p>对于任务二，笔者没有进行改动，但是看了群友的思路后，觉得抽取式关键词的准确率也就那样了，可能要转向生成式关键词，也就是使用LLM，笔者困于时间，在deadline前没有足够时间完成</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="baseline-tuning-py"><a href="#baseline-tuning-py" class="headerlink" title="baseline_tuning.py"></a>baseline_tuning.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> RandomizedSearchCV<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> uniform<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 定义参数搜索空间</span>param_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> uniform<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'l1'</span><span class="token punctuation">,</span> <span class="token string">'l2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">]</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span class="token comment"># 创建CountVectorizer</span>vectorizer <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 转换文本数据为特征向量</span>train_vector <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 创建LogisticRegression分类器</span>logreg <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 初始化RandomizedSearchCV，传入模型、参数搜索空间、交叉验证的折数等</span>random_search <span class="token operator">=</span> RandomizedSearchCV<span class="token punctuation">(</span>estimator<span class="token operator">=</span>logreg<span class="token punctuation">,</span> param_distributions<span class="token operator">=</span>param_dist<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> n_jobs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_iter<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 开始参数搜索与交叉验证</span>random_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 输出最佳参数组合</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best parameters: "</span><span class="token punctuation">,</span> random_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="baseline1-py"><a href="#baseline1-py" class="headerlink" title="baseline1.py"></a>baseline1.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入LogisticRegression回归模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarningsimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>param_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">2.8496190796154743</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token string">'l2'</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token operator">**</span>param_dist<span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="baseline2-py"><a href="#baseline2-py" class="headerlink" title="baseline2.py"></a>baseline2.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入LogisticRegression回归模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarning<span class="token comment"># 引入分词器</span><span class="token keyword">from</span> nltk <span class="token keyword">import</span> word_tokenize<span class="token punctuation">,</span> ngramssimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwordsparam_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">2.8496190796154743</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token string">'l2'</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'testB.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token operator">**</span>param_dist<span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 定义停用词，去掉出现较多，但对文章不关键的词语</span>stops <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义方法按照词频筛选关键词</span><span class="token keyword">def</span> <span class="token function">extract_keywords_by_freq</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> abstract<span class="token punctuation">)</span><span class="token punctuation">:</span>    ngrams_count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>title<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>abstract<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>ngrams_count<span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams_count<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">## 对测试集提取关键词</span>test_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> test<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取第每一行数据的标题与摘要并提取关键词</span>    prediction_keywords <span class="token operator">=</span> extract_keywords_by_freq<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>abstract<span class="token punctuation">)</span>    <span class="token comment"># 利用文章标题进一步提取关键词</span>    prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> prediction_keywords<span class="token punctuation">]</span>    <span class="token comment"># 如果未能提取到关键词</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>    test_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_wordstest<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task2.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="baseline3-py"><a href="#baseline3-py" class="headerlink" title="baseline3.py"></a>baseline3.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入LogisticRegression回归模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarning<span class="token comment"># 引入分词器</span><span class="token keyword">from</span> nltk <span class="token keyword">import</span> word_tokenize<span class="token punctuation">,</span> ngramssimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwordsparam_dist <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">2.8496190796154743</span><span class="token punctuation">,</span>       <span class="token comment"># LogisticRegression的惩罚参数C在0.1~10之间均匀分布</span>    <span class="token string">'penalty'</span><span class="token punctuation">:</span> <span class="token string">'l2'</span><span class="token punctuation">,</span>     <span class="token comment"># 正则化类型：L1正则化或L2正则化</span>    <span class="token string">'max_iter'</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 最大迭代次数</span><span class="token punctuation">&#125;</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'testB.csv'</span><span class="token punctuation">)</span><span class="token comment"># fillna()函数用于填充缺失数据，这里将标题和摘要的缺失值填充为空字符串</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 定义停用词，去掉出现较多，但对文章不关键的词语</span>stops <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义方法按照词频筛选关键词</span><span class="token keyword">def</span> <span class="token function">extract_keywords_by_freq</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> abstract<span class="token punctuation">)</span><span class="token punctuation">:</span>    ngrams_count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>title<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams<span class="token punctuation">(</span>word_tokenize<span class="token punctuation">(</span>abstract<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>ngrams_count<span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token operator">~</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span>    ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> ngrams_count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span><span class="token string">'phrase'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>    ngrams_count <span class="token operator">=</span> ngrams_count<span class="token punctuation">[</span>ngrams_count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ngrams_count<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment"># 对测试集提取关键词</span>test_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> test<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取第每一行数据的标题与摘要并提取关键词</span>    prediction_keywords <span class="token operator">=</span> extract_keywords_by_freq<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>abstract<span class="token punctuation">)</span>    <span class="token comment"># 利用文章标题进一步提取关键词</span>    prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> prediction_keywords<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span>    <span class="token comment"># 如果未能提取到关键词</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        prediction_keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>    test_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>prediction_keywords<span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_words<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>test<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token operator">**</span>param_dist<span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'submit_task2.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="svm-test-py"><a href="#svm-test-py" class="headerlink" title="svm_test.py"></a>svm_test.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC<span class="token comment"># 过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarningsimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入模型</span>model <span class="token operator">=</span> SVC<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 开始训练，这里可以考虑修改默认的batch_size与epoch来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'svm.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="randomforest-test-py"><a href="#randomforest-test-py" class="headerlink" title="randomforest_test.py"></a>randomforest_test.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入pandas用于读取表格数据</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 导入BOW（词袋模型），可以选择将CountVectorizer替换为TfidfVectorizer（TF-IDF（词频-逆文档频率）），注意上下文要同时修改，亲测后者效果更佳</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment"># 导入随机森林分类器</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token comment"># 导入warnings库，过滤警告消息</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> simplefilter<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConvergenceWarningsimplefilter<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>ConvergenceWarning<span class="token punctuation">)</span><span class="token comment"># 读取数据集</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 提取文本特征，生成训练集与测试集</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>    <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> test<span class="token punctuation">[</span><span class="token string">'abstract'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> \               train<span class="token punctuation">[</span><span class="token string">'Keywords'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>vector <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_vector <span class="token operator">=</span> vector<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 引入随机森林分类器</span>model <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 开始训练，可以考虑修改n_estimators（树的数量）和其他超参数来取得更好的效果</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_vector<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 利用模型对测试集label标签进行预测</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_vector<span class="token punctuation">)</span><span class="token comment"># 生成任务一推测结果</span>test<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'uuid'</span><span class="token punctuation">,</span> <span class="token string">'Keywords'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'randomforest.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP实践的一点点笔记</title>
      <link href="/2023/07/26/NLP%E5%AE%9E%E8%B7%B5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/26/NLP%E5%AE%9E%E8%B7%B5%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>友情链接：<a href="https://datawhaler.feishu.cn/docx/WirRd4oB5oMe2ixw1rxcTnHFnHh">Datawhale-NLP实践</a></p><p>GitHub项目地址：<a href="https://github.com/JIANG-Wu-19/NLP_project">NLP_project</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>miniconda的安装，本人选择了anaconda的安装，本质上来说miniconda是anaconda的轻量版，anaconda完整性更好</li><li>对于镜像源，本人并没有进行替换，增加了清华源</li></ul><h3 id="pytorch环境的搭建"><a href="#pytorch环境的搭建" class="headerlink" title="pytorch环境的搭建"></a>pytorch环境的搭建</h3><ul><li><p>创建conda环境</p><pre class="line-numbers language-none"><code class="language-none">conda create -n pytorch python&#x3D;3.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>环境名称：pytorch</p><p>python版本：3.10</p></li><li><p>激活pytorch环境</p><pre class="line-numbers language-none"><code class="language-none">conda activate pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从base-&gt;pytorch</p></li><li><p>安装pytorch</p><p>先在<strong>Anaconda Powershell Prompt</strong>中输入：</p><pre class="line-numbers language-none"><code class="language-none">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到如下图片：</p><p><img src="/imgs/nlpproject/1.png" alt="image-20230721163031733"></p><p>CUDA Version&#x3D;12.0，因此我的pytorch-cuda版本最高不能超过12.0，在这里安装了11.8版本：</p><pre class="line-numbers language-none"><code class="language-none">conda install pytorch torchvision torchaudio pytorch-cuda&#x3D;11.8 -c pytorch -c nvidia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证pytorch是否安装成功</p><p>进入pytorch环境，键入python进入python编译器，输入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchtorch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回<code>True</code>则安装成功</p></li></ul><h2 id="读题"><a href="#读题" class="headerlink" title="读题"></a>读题</h2><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p><a href="https://challenge.xfyun.cn/topic/info?type=abstract-of-the-paper&ch=ZuoaKcY">基于论文摘要的文本分类与关键词抽取挑战赛</a></p><ul><li><p>task 1</p><p>判断是否是医学论文</p></li><li><p>task 2</p><p>关键词抽取</p></li></ul><h3 id="baseline"><a href="#baseline" class="headerlink" title="baseline"></a>baseline</h3><ol><li>传统方法</li><li>BERT预训练模型</li><li>微调chatGLM2-6B</li></ol><h2 id="跑通baseline"><a href="#跑通baseline" class="headerlink" title="跑通baseline"></a>跑通baseline</h2><p>首先fork了其中一个<a href="https://aistudio.baidu.com/aistudio/projectdetail/6522950?sUid=377372&shared=1&ts=1689827255213">baseline</a>，运行在百度AI Studio上，选择<code>V100 16G</code>运行</p><p>运行完之后，提交<code>submit_task1.csv</code>，获得分数0.99384</p><p><del>对于第二段代码生成的<code>submit_task2.csv</code>，结果存在一定问题，还需要进行相关debug</del></p><h2 id="对baseline进行fine-tune"><a href="#对baseline进行fine-tune" class="headerlink" title="对baseline进行fine-tune"></a>对baseline进行fine-tune</h2><p>将baseline下载到本地，对于Logistic回归模型进行替换，替换模型有：SVM（支持向量机）、随机森林模型，对baseline进行相关代码替换</p><p>结果显示，在default参数的情况下，Logistic回归模型表现更好，Random Forest次之，SVM表现最差，因此这条选择不同分类器的优化路径行不通。</p><p>仍然基于baseline，对LogisticRegression模型的超参数进行调参优化，使用交叉验证技术来找到最佳的参数组合，将得到的参数组合重新应用于baseline，得到的结果略微优于原结果</p><h2 id="使用BERT模型进行分类"><a href="#使用BERT模型进行分类" class="headerlink" title="使用BERT模型进行分类"></a>使用BERT模型进行分类</h2><p>使用了BERT模型进行预训练</p><p>相关参数进行调整：</p><ul><li>考虑到本地的硬件配置（4GB显存），采用batch_xize&#x3D;16，在第二轮训练中就会爆显存；设置batch_size&#x3D;10</li><li>为了防止数据过拟合，设置epoch&#x3D;10</li></ul><p>训练过程如下：</p><pre class="line-numbers language-none"><code class="language-none">Device: cudainputs: &#123;&#39;input_ids&#39;: tensor([[  101,  2470,  2006,  ...,  6742,  4118,   102],        [  101,  2070,  2047,  ...,  2951,  4106,   102],        [  101, 12509,  1011,  ...,  3728,  2764,   102],        ...,        [  101, 11968,  6767,  ...,  1998,  3707,   102],        [  101,  3935,  8360,  ...,  2256,  9896,   102],        [  101, 11742,  6047,  ...,  1006, 24529,   102]]), &#39;token_type_ids&#39;: tensor([[0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        ...,        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0]]), &#39;attention_mask&#39;: tensor([[1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        ...,        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1]])&#125;targets: tensor([0, 1, 1, 0, 0, 1, 1, 1, 0, 0])Epoch 1&#x2F;10, Step: 49&#x2F;540, total loss:15.7107Epoch 1&#x2F;10, Step: 99&#x2F;540, total loss:7.6416Epoch 1&#x2F;10, Step: 149&#x2F;540, total loss:6.4683Epoch 1&#x2F;10, Step: 199&#x2F;540, total loss:7.7938Epoch 1&#x2F;10, Step: 249&#x2F;540, total loss:6.7497Epoch 1&#x2F;10, Step: 299&#x2F;540, total loss:6.3569Epoch 1&#x2F;10, Step: 349&#x2F;540, total loss:5.7305Epoch 1&#x2F;10, Step: 399&#x2F;540, total loss:7.5373Epoch 1&#x2F;10, Step: 449&#x2F;540, total loss:3.2843Epoch 1&#x2F;10, Step: 499&#x2F;540, total loss:5.0083Epoch 1, accuracy: 0.9567, validation loss: 0.0112Epoch 2&#x2F;10, Step: 9&#x2F;540, total loss:6.4998Epoch 2&#x2F;10, Step: 59&#x2F;540, total loss:3.8504Epoch 2&#x2F;10, Step: 109&#x2F;540, total loss:4.3037Epoch 2&#x2F;10, Step: 159&#x2F;540, total loss:3.7314Epoch 2&#x2F;10, Step: 209&#x2F;540, total loss:2.8143Epoch 2&#x2F;10, Step: 259&#x2F;540, total loss:2.6459Epoch 2&#x2F;10, Step: 309&#x2F;540, total loss:4.2030Epoch 2&#x2F;10, Step: 359&#x2F;540, total loss:4.3778Epoch 2&#x2F;10, Step: 409&#x2F;540, total loss:3.6712Epoch 2&#x2F;10, Step: 459&#x2F;540, total loss:3.7527Epoch 2&#x2F;10, Step: 509&#x2F;540, total loss:4.8828Epoch 2, accuracy: 0.9717, validation loss: 0.0076Epoch 3&#x2F;10, Step: 19&#x2F;540, total loss:4.3283Epoch 3&#x2F;10, Step: 69&#x2F;540, total loss:1.9251Epoch 3&#x2F;10, Step: 119&#x2F;540, total loss:3.9258Epoch 3&#x2F;10, Step: 169&#x2F;540, total loss:3.9836Epoch 3&#x2F;10, Step: 219&#x2F;540, total loss:2.5203Epoch 3&#x2F;10, Step: 269&#x2F;540, total loss:3.0695Epoch 3&#x2F;10, Step: 319&#x2F;540, total loss:3.0718Epoch 3&#x2F;10, Step: 369&#x2F;540, total loss:2.8674Epoch 3&#x2F;10, Step: 419&#x2F;540, total loss:1.6683Epoch 3&#x2F;10, Step: 469&#x2F;540, total loss:3.6798Epoch 3&#x2F;10, Step: 519&#x2F;540, total loss:2.5205Epoch 3, accuracy: 0.9667, validation loss: 0.0095Epoch 4&#x2F;10, Step: 29&#x2F;540, total loss:1.2602Epoch 4&#x2F;10, Step: 79&#x2F;540, total loss:1.7367Epoch 4&#x2F;10, Step: 129&#x2F;540, total loss:1.7730Epoch 4&#x2F;10, Step: 179&#x2F;540, total loss:2.7801Epoch 4&#x2F;10, Step: 229&#x2F;540, total loss:2.7113Epoch 4&#x2F;10, Step: 279&#x2F;540, total loss:2.2387Epoch 4&#x2F;10, Step: 329&#x2F;540, total loss:1.8035Epoch 4&#x2F;10, Step: 379&#x2F;540, total loss:3.1783Epoch 4&#x2F;10, Step: 429&#x2F;540, total loss:2.4875Epoch 4&#x2F;10, Step: 479&#x2F;540, total loss:1.0889Epoch 4&#x2F;10, Step: 529&#x2F;540, total loss:1.8472Epoch 4, accuracy: 0.9717, validation loss: 0.0093Epoch 5&#x2F;10, Step: 39&#x2F;540, total loss:1.4521Epoch 5&#x2F;10, Step: 89&#x2F;540, total loss:2.7088Epoch 5&#x2F;10, Step: 139&#x2F;540, total loss:1.3743Epoch 5&#x2F;10, Step: 189&#x2F;540, total loss:0.9969Epoch 5&#x2F;10, Step: 239&#x2F;540, total loss:3.5632Epoch 5&#x2F;10, Step: 289&#x2F;540, total loss:1.6101Epoch 5&#x2F;10, Step: 339&#x2F;540, total loss:0.6479Epoch 5&#x2F;10, Step: 389&#x2F;540, total loss:1.6050Epoch 5&#x2F;10, Step: 439&#x2F;540, total loss:1.4850Epoch 5&#x2F;10, Step: 489&#x2F;540, total loss:1.8811Epoch 5&#x2F;10, Step: 539&#x2F;540, total loss:1.7147Epoch 5, accuracy: 0.9800, validation loss: 0.0079Epoch 6&#x2F;10, Step: 49&#x2F;540, total loss:0.9615Epoch 6&#x2F;10, Step: 99&#x2F;540, total loss:0.7971Epoch 6&#x2F;10, Step: 149&#x2F;540, total loss:1.5873Epoch 6&#x2F;10, Step: 199&#x2F;540, total loss:4.3790Epoch 6&#x2F;10, Step: 249&#x2F;540, total loss:1.6141Epoch 6&#x2F;10, Step: 299&#x2F;540, total loss:2.8523Epoch 6&#x2F;10, Step: 349&#x2F;540, total loss:2.9342Epoch 6&#x2F;10, Step: 399&#x2F;540, total loss:1.8583Epoch 6&#x2F;10, Step: 449&#x2F;540, total loss:1.2382Epoch 6&#x2F;10, Step: 499&#x2F;540, total loss:2.0442Epoch 6, accuracy: 0.9633, validation loss: 0.0106Epoch 7&#x2F;10, Step: 9&#x2F;540, total loss:1.9456Epoch 7&#x2F;10, Step: 59&#x2F;540, total loss:0.3481Epoch 7&#x2F;10, Step: 109&#x2F;540, total loss:0.7371Epoch 7&#x2F;10, Step: 159&#x2F;540, total loss:1.0779Epoch 7&#x2F;10, Step: 209&#x2F;540, total loss:0.5513Epoch 7&#x2F;10, Step: 259&#x2F;540, total loss:0.6267Epoch 7&#x2F;10, Step: 309&#x2F;540, total loss:0.6717Epoch 7&#x2F;10, Step: 359&#x2F;540, total loss:0.0804Epoch 7&#x2F;10, Step: 409&#x2F;540, total loss:0.7880Epoch 7&#x2F;10, Step: 459&#x2F;540, total loss:1.2405Epoch 7&#x2F;10, Step: 509&#x2F;540, total loss:0.3852Epoch 7, accuracy: 0.9717, validation loss: 0.0113Epoch 8&#x2F;10, Step: 19&#x2F;540, total loss:0.0597Epoch 8&#x2F;10, Step: 69&#x2F;540, total loss:0.1654Epoch 8&#x2F;10, Step: 119&#x2F;540, total loss:0.0882Epoch 8&#x2F;10, Step: 169&#x2F;540, total loss:0.0558Epoch 8&#x2F;10, Step: 219&#x2F;540, total loss:2.7450Epoch 8&#x2F;10, Step: 269&#x2F;540, total loss:2.9093Epoch 8&#x2F;10, Step: 319&#x2F;540, total loss:0.2964Epoch 8&#x2F;10, Step: 369&#x2F;540, total loss:2.9049Epoch 8&#x2F;10, Step: 419&#x2F;540, total loss:0.8974Epoch 8&#x2F;10, Step: 469&#x2F;540, total loss:0.8773Epoch 8&#x2F;10, Step: 519&#x2F;540, total loss:0.8961Epoch 8, accuracy: 0.9783, validation loss: 0.0136Epoch 9&#x2F;10, Step: 29&#x2F;540, total loss:0.6021Epoch 9&#x2F;10, Step: 79&#x2F;540, total loss:0.2185Epoch 9&#x2F;10, Step: 129&#x2F;540, total loss:0.0978Epoch 9&#x2F;10, Step: 179&#x2F;540, total loss:0.8829Epoch 9&#x2F;10, Step: 229&#x2F;540, total loss:0.9440Epoch 9&#x2F;10, Step: 279&#x2F;540, total loss:0.4725Epoch 9&#x2F;10, Step: 329&#x2F;540, total loss:0.8252Epoch 9&#x2F;10, Step: 379&#x2F;540, total loss:0.2206Epoch 9&#x2F;10, Step: 429&#x2F;540, total loss:0.2055Epoch 9&#x2F;10, Step: 479&#x2F;540, total loss:1.2238Epoch 9&#x2F;10, Step: 529&#x2F;540, total loss:0.3699Epoch 9, accuracy: 0.9767, validation loss: 0.0137Epoch 10&#x2F;10, Step: 39&#x2F;540, total loss:0.1256Epoch 10&#x2F;10, Step: 89&#x2F;540, total loss:0.0799Epoch 10&#x2F;10, Step: 139&#x2F;540, total loss:0.0696Epoch 10&#x2F;10, Step: 189&#x2F;540, total loss:0.0255Epoch 10&#x2F;10, Step: 239&#x2F;540, total loss:0.2567Epoch 10&#x2F;10, Step: 289&#x2F;540, total loss:0.0501Epoch 10&#x2F;10, Step: 339&#x2F;540, total loss:1.4652Epoch 10&#x2F;10, Step: 389&#x2F;540, total loss:2.1342Epoch 10&#x2F;10, Step: 439&#x2F;540, total loss:0.2545Epoch 10&#x2F;10, Step: 489&#x2F;540, total loss:0.0748Epoch 10&#x2F;10, Step: 539&#x2F;540, total loss:0.2158Epoch 10, accuracy: 0.9633, validation loss: 0.0198<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出，第五轮训练的模型最好，跑了测试集之后，得到的分数是0.99425，有所提升。</p><h2 id="更新了B集"><a href="#更新了B集" class="headerlink" title="更新了B集"></a>更新了B集</h2><p>7月24日0时，官方更新了数据集B，与原始测试集不同的是取消了Keywords那一列，因此需要对baseline进行调整。</p><p>然而，仅仅使用baseline的适应版本会出大问题，先不说Keywords是否能够提取到，最要命的是连文本分类都错误频出，分数仅有0.27164。</p><p>所以选择转换思路，选用BERT模型重新进行训练，本次训练过程如下：</p><pre class="line-numbers language-none"><code class="language-none">Device: cudainputs: &#123;&#39;input_ids&#39;: tensor([[  101, 24655,  4997,  ...,  2057, 16599,   102],        [  101,  2943,  4487,  ...,  4725,  2000,   102],        [  101,  5090,  1998,  ...,  2050,  1010,   102],        ...,        [  101,  1996,  2110,  ...,  2192,  1010,   102],        [  101, 11643,  2986,  ..., 11650,  4819,   102],        [  101,  4254,  1997,  ...,  2426,  3633,   102]]), &#39;token_type_ids&#39;: tensor([[0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        ...,        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0],        [0, 0, 0,  ..., 0, 0, 0]]), &#39;attention_mask&#39;: tensor([[1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        ...,        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1],        [1, 1, 1,  ..., 1, 1, 1]])&#125;targets: tensor([0, 0, 1, 0, 1, 0, 1, 0, 1, 1])Epoch 1&#x2F;10, Step: 49&#x2F;540, total loss:17.4060Epoch 1&#x2F;10, Step: 99&#x2F;540, total loss:8.2182Epoch 1&#x2F;10, Step: 149&#x2F;540, total loss:4.8785Epoch 1&#x2F;10, Step: 199&#x2F;540, total loss:4.3230Epoch 1&#x2F;10, Step: 249&#x2F;540, total loss:6.6983Epoch 1&#x2F;10, Step: 299&#x2F;540, total loss:5.8578Epoch 1&#x2F;10, Step: 349&#x2F;540, total loss:6.6283Epoch 1&#x2F;10, Step: 399&#x2F;540, total loss:6.4032Epoch 1&#x2F;10, Step: 449&#x2F;540, total loss:5.9323Epoch 1&#x2F;10, Step: 499&#x2F;540, total loss:7.5971Epoch 1, accuracy: 0.9850, validation loss: 0.0058Epoch 2&#x2F;10, Step: 9&#x2F;540, total loss:5.0577Epoch 2&#x2F;10, Step: 59&#x2F;540, total loss:3.1802Epoch 2&#x2F;10, Step: 109&#x2F;540, total loss:3.2457Epoch 2&#x2F;10, Step: 159&#x2F;540, total loss:2.3691Epoch 2&#x2F;10, Step: 209&#x2F;540, total loss:5.8829Epoch 2&#x2F;10, Step: 259&#x2F;540, total loss:4.4065Epoch 2&#x2F;10, Step: 309&#x2F;540, total loss:3.9642Epoch 2&#x2F;10, Step: 359&#x2F;540, total loss:3.4601Epoch 2&#x2F;10, Step: 409&#x2F;540, total loss:3.7005Epoch 2&#x2F;10, Step: 459&#x2F;540, total loss:2.4082Epoch 2&#x2F;10, Step: 509&#x2F;540, total loss:4.9357Epoch 2, accuracy: 0.9817, validation loss: 0.0051Epoch 3&#x2F;10, Step: 19&#x2F;540, total loss:3.0975Epoch 3&#x2F;10, Step: 69&#x2F;540, total loss:3.5217Epoch 3&#x2F;10, Step: 119&#x2F;540, total loss:2.2069Epoch 3&#x2F;10, Step: 169&#x2F;540, total loss:2.1020Epoch 3&#x2F;10, Step: 219&#x2F;540, total loss:2.2251Epoch 3&#x2F;10, Step: 269&#x2F;540, total loss:1.9019Epoch 3&#x2F;10, Step: 319&#x2F;540, total loss:5.7179Epoch 3&#x2F;10, Step: 369&#x2F;540, total loss:2.3129Epoch 3&#x2F;10, Step: 419&#x2F;540, total loss:2.5967Epoch 3&#x2F;10, Step: 469&#x2F;540, total loss:3.6328Epoch 3&#x2F;10, Step: 519&#x2F;540, total loss:3.5887Epoch 3, accuracy: 0.9783, validation loss: 0.0083Epoch 4&#x2F;10, Step: 29&#x2F;540, total loss:2.9215Epoch 4&#x2F;10, Step: 79&#x2F;540, total loss:2.5634Epoch 4&#x2F;10, Step: 129&#x2F;540, total loss:2.2718Epoch 4&#x2F;10, Step: 179&#x2F;540, total loss:2.1903Epoch 4&#x2F;10, Step: 229&#x2F;540, total loss:3.9422Epoch 4&#x2F;10, Step: 279&#x2F;540, total loss:4.1438Epoch 4&#x2F;10, Step: 329&#x2F;540, total loss:2.5862Epoch 4&#x2F;10, Step: 379&#x2F;540, total loss:2.5173Epoch 4&#x2F;10, Step: 429&#x2F;540, total loss:2.3017Epoch 4&#x2F;10, Step: 479&#x2F;540, total loss:2.8343Epoch 4&#x2F;10, Step: 529&#x2F;540, total loss:2.1349Epoch 4, accuracy: 0.9817, validation loss: 0.0047Epoch 5&#x2F;10, Step: 39&#x2F;540, total loss:1.4322Epoch 5&#x2F;10, Step: 89&#x2F;540, total loss:0.5360Epoch 5&#x2F;10, Step: 139&#x2F;540, total loss:1.1301Epoch 5&#x2F;10, Step: 189&#x2F;540, total loss:1.0405Epoch 5&#x2F;10, Step: 239&#x2F;540, total loss:1.5703Epoch 5&#x2F;10, Step: 289&#x2F;540, total loss:1.2585Epoch 5&#x2F;10, Step: 339&#x2F;540, total loss:2.3381Epoch 5&#x2F;10, Step: 389&#x2F;540, total loss:1.5830Epoch 5&#x2F;10, Step: 439&#x2F;540, total loss:1.9213Epoch 5&#x2F;10, Step: 489&#x2F;540, total loss:2.2533Epoch 5&#x2F;10, Step: 539&#x2F;540, total loss:2.3482Epoch 5, accuracy: 0.9700, validation loss: 0.0080Epoch 6&#x2F;10, Step: 49&#x2F;540, total loss:0.6322Epoch 6&#x2F;10, Step: 99&#x2F;540, total loss:1.8027Epoch 6&#x2F;10, Step: 149&#x2F;540, total loss:0.9355Epoch 6&#x2F;10, Step: 199&#x2F;540, total loss:0.7137Epoch 6&#x2F;10, Step: 249&#x2F;540, total loss:0.2431Epoch 6&#x2F;10, Step: 299&#x2F;540, total loss:0.7320Epoch 6&#x2F;10, Step: 349&#x2F;540, total loss:1.9910Epoch 6&#x2F;10, Step: 399&#x2F;540, total loss:0.5313Epoch 6&#x2F;10, Step: 449&#x2F;540, total loss:2.3987Epoch 6&#x2F;10, Step: 499&#x2F;540, total loss:1.3163Epoch 6, accuracy: 0.9767, validation loss: 0.0059Epoch 7&#x2F;10, Step: 9&#x2F;540, total loss:2.2099Epoch 7&#x2F;10, Step: 59&#x2F;540, total loss:1.0356Epoch 7&#x2F;10, Step: 109&#x2F;540, total loss:0.3613Epoch 7&#x2F;10, Step: 159&#x2F;540, total loss:0.3013Epoch 7&#x2F;10, Step: 209&#x2F;540, total loss:0.9905Epoch 7&#x2F;10, Step: 259&#x2F;540, total loss:0.9220Epoch 7&#x2F;10, Step: 309&#x2F;540, total loss:1.8809Epoch 7&#x2F;10, Step: 359&#x2F;540, total loss:0.6842Epoch 7&#x2F;10, Step: 409&#x2F;540, total loss:0.8110Epoch 7&#x2F;10, Step: 459&#x2F;540, total loss:0.5501Epoch 7&#x2F;10, Step: 509&#x2F;540, total loss:0.1008Epoch 7, accuracy: 0.9783, validation loss: 0.0114Epoch 8&#x2F;10, Step: 19&#x2F;540, total loss:0.1257Epoch 8&#x2F;10, Step: 69&#x2F;540, total loss:0.6099Epoch 8&#x2F;10, Step: 119&#x2F;540, total loss:0.0731Epoch 8&#x2F;10, Step: 169&#x2F;540, total loss:0.0690Epoch 8&#x2F;10, Step: 219&#x2F;540, total loss:0.0463Epoch 8&#x2F;10, Step: 269&#x2F;540, total loss:0.7255Epoch 8&#x2F;10, Step: 319&#x2F;540, total loss:1.3453Epoch 8&#x2F;10, Step: 369&#x2F;540, total loss:0.9634Epoch 8&#x2F;10, Step: 419&#x2F;540, total loss:2.3351Epoch 8&#x2F;10, Step: 469&#x2F;540, total loss:1.0744Epoch 8&#x2F;10, Step: 519&#x2F;540, total loss:0.9177Epoch 8, accuracy: 0.9833, validation loss: 0.0094Epoch 9&#x2F;10, Step: 29&#x2F;540, total loss:0.0825Epoch 9&#x2F;10, Step: 79&#x2F;540, total loss:0.5531Epoch 9&#x2F;10, Step: 129&#x2F;540, total loss:0.1029Epoch 9&#x2F;10, Step: 179&#x2F;540, total loss:1.6060Epoch 9&#x2F;10, Step: 229&#x2F;540, total loss:1.4814Epoch 9&#x2F;10, Step: 279&#x2F;540, total loss:0.2794Epoch 9&#x2F;10, Step: 329&#x2F;540, total loss:0.8993Epoch 9&#x2F;10, Step: 379&#x2F;540, total loss:0.2361Epoch 9&#x2F;10, Step: 429&#x2F;540, total loss:0.8100Epoch 9&#x2F;10, Step: 479&#x2F;540, total loss:1.0517Epoch 9&#x2F;10, Step: 529&#x2F;540, total loss:1.9690Epoch 9, accuracy: 0.9800, validation loss: 0.0081Epoch 10&#x2F;10, Step: 39&#x2F;540, total loss:0.3611Epoch 10&#x2F;10, Step: 89&#x2F;540, total loss:1.1712Epoch 10&#x2F;10, Step: 139&#x2F;540, total loss:1.2629Epoch 10&#x2F;10, Step: 189&#x2F;540, total loss:0.4406Epoch 10&#x2F;10, Step: 239&#x2F;540, total loss:0.7798Epoch 10&#x2F;10, Step: 289&#x2F;540, total loss:0.7707Epoch 10&#x2F;10, Step: 339&#x2F;540, total loss:0.9512Epoch 10&#x2F;10, Step: 389&#x2F;540, total loss:0.1460Epoch 10&#x2F;10, Step: 439&#x2F;540, total loss:0.4900Epoch 10&#x2F;10, Step: 489&#x2F;540, total loss:1.2117Epoch 10&#x2F;10, Step: 539&#x2F;540, total loss:0.6272Epoch 10, accuracy: 0.9783, validation loss: 0.0093<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，第一轮的模型就是最优，准确率达到0.9850，使用该模型得到的分数是0.39905</p><h2 id="调用ChatGLM的API的一点点尝试"><a href="#调用ChatGLM的API的一点点尝试" class="headerlink" title="调用ChatGLM的API的一点点尝试"></a>调用ChatGLM的API的一点点尝试</h2><p>看了群友的发言，感觉单纯采用从text中提取keywords已经无法提高准确率，于是转向使用生成式，that’s to say，微调大模型</p><p><del>在deadline前，才想起来尝试使用大模型</del></p><p>困于本地环境不足，尝试调用API，这里为了保持稳定性选用了国产ChatGLM-std的API，代码也敲好了（属于是第一个完完整整自己敲下来的东西），<del>创业未半而中道崩殂</del>，跑到第9个被官方ban掉了，原因是里面有敏感词，验证可行（<strong>请不要输入易生成敏感用语的话题</strong>）</p><blockquote><p>To be continued</p></blockquote><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>2023年7月21日：跑通了baseline</p><p>2023年7月22日：对baseline进行了fine-tune，实际结果略微优于baseline；尝试使用BERT模型，但是从运行中输出的部分参数来看，结果不尽如人意，同时显存爆了，建议上云</p><p>2023年7月23日：使用BERT模型进行训练，epoch&#x3D;10，训练出的最优模型的准确率是0.9800，实际获得分数也优于22日的fine-tuned baseline</p><p>2023年7月24日：官方更新了B集，砍掉了Keywords，准确率下降不少，选用BERT模型的分数稍微高一点点</p><p>2023年7月26日：调用ChatGLM的API，但是由于触碰敏感词被ban掉了，所以可能需要本地的Chat GLM模型，但是huggingface上下载下来的是原始模型，自己无法完成训练，有训练完的模型可以使用，之后再进行尝试</p>]]></content>
      
      
      <categories>
          
          <category> 暑期实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程设计的index</title>
      <link href="/2023/07/22/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E7%9A%84index/"/>
      <url>/2023/07/22/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E7%9A%84index/</url>
      
        <content type="html"><![CDATA[<ul><li>高级程序设计实践：联系J&amp;Ocean，联系方式在本页底部</li><li>计算机原理与汇编语言课程设计：<a href="https://github.com/JIANG-Wu-19/AssenblyLanguage_Practice">AssenblyLanguage_Practice</a></li><li>应用基础实践一（网络+Java）：<a href="https://github.com/JIANG-Wu-19/JavaNetworks">JavaNetworks</a></li></ul><blockquote><p>To be continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> index </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课内实验的index</title>
      <link href="/2023/07/22/%E8%AF%BE%E5%86%85%E5%AE%9E%E9%AA%8C%E7%9A%84index/"/>
      <url>/2023/07/22/%E8%AF%BE%E5%86%85%E5%AE%9E%E9%AA%8C%E7%9A%84index/</url>
      
        <content type="html"><![CDATA[<h2 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h2><ul><li>数据结构：<a href="https://gitee.com/wu-jiang-nineteen/dsexperiment">DSExperiment</a></li></ul><h2 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h2><ul><li><p>汇编实验：<a href="https://github.com/JIANG-Wu-19/Assembly_experiments">Assembly_experiments</a></p></li><li><p>Java实验：<a href="https://github.com/JIANG-Wu-19/Java_experiments">Java_experiments</a></p></li><li><p>数据库实验：<a href="https://github.com/JIANG-Wu-19/database_experiments">database_experiments</a></p></li><li><p>计算机网络实验：<a href="https://github.com/JIANG-Wu-19/ComputerNetworks_experiment">ComputerNetworks_experiment</a></p></li><li><p>Python数据处理实验：<a href="https://github.com/JIANG-Wu-19/python_dataprocess">python_dataprocess</a></p></li><li><p>算法实验：<a href="https://github.com/JIANG-Wu-19/Algorithms_experiments">Algorithms_experiments</a></p></li><li><p>操作系统实验：<a href="https://github.com/JIANG-Wu-19/OS_Experiment">OS_Experiment</a></p></li></ul><blockquote><p>To be continued</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> index </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课内实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法实验</title>
      <link href="/2023/07/22/%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/07/22/%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>项目GitHub地址：<a href="https://github.com/JIANG-Wu-19/Algorithms_experiments">Algorithms_experiments</a></p><h1 id="实验一：递归与分治"><a href="#实验一：递归与分治" class="headerlink" title="实验一：递归与分治"></a>实验一：递归与分治</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>理解递归算法的思想和递归程序的执行过程，并能熟练编写递归程序。</p><p>掌握分治算法的思想，对给定的问题能设计出分治算法予以解决。</p><h2 id="实验预习内容"><a href="#实验预习内容" class="headerlink" title="实验预习内容"></a>实验预习内容</h2><p>编程实现讲过的例题：二分搜索、合并排序、快速排序。</p><p>对本实验中的问题，设计出算法并编程实现。</p><h2 id="实验内容和步骤"><a href="#实验内容和步骤" class="headerlink" title="实验内容和步骤"></a>实验内容和步骤</h2><h3 id="快速排序及第k小数"><a href="#快速排序及第k小数" class="headerlink" title="快速排序及第k小数"></a>快速排序及第k小数</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="问题分析及算法思路"><a href="#问题分析及算法思路" class="headerlink" title="问题分析及算法思路"></a>问题分析及算法思路</h5><p>快速排序的基本思想：</p><ul><li>通过一趟排序将待排序列分割成<strong>独立的两部分</strong>，其中一部分的值比另一部分的小，则分别对两部分序列继续进行排序，达到整个序列有序</li></ul><p>实现逻辑：</p><p>使用分治法将序列分成两个子序列</p><blockquote><ol><li>从序列中选出一个元素，称为基准值（pivot），即<strong>确定分界点</strong>，可以选取$q[1]$,$q[(1+r)&#x2F;2]$,$q[r]$或者随机</li><li>重新排序序列，所有元素小于基准值的放在基准值前面，所有元素比基准值大的摆在基准的后面（相同的数规定放到确定的某一边）。分区推出之后，基准处于中间位置，这一步称为<strong>调整区间</strong></li><li>对于分出的两个子序列继续进行上述操作，<strong>递归处理左右两段</strong></li></ol></blockquote><p>对于<strong>调整区间</strong>可实现的方法有：</p><blockquote><blockquote><ul><li>开辟额外的数组a[]、b[]</li><li>扫描$q[1:r]$<ul><li>当$q[i] \le x$时，将x插入到a[]</li><li>当$q[i] \ge x$时，将x插入到b[]</li></ul></li><li>分别将a[],b[]中的数放在q中</li></ul></blockquote><blockquote><p>双指针法，设置i、j指针分别指向第一个和末尾一个，分别向左向右移动，知道重合</p></blockquote></blockquote><p>在本实验中，使用双指针法进行快排</p><h5 id="算法设计与代码实现"><a href="#算法设计与代码实现" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quicksort(int q[], int l, int r)&#123;    if (l &gt;&#x3D; r) return;&#x2F;&#x2F;判边界    int x &#x3D; q[l], i &#x3D; l - 1, j &#x3D; r + 1;    while (i &lt; j)    &#123;        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        if (i &lt; j) swap(q[i], q[j]);    &#125;    quicksort(q, l, j), quicksort(q, j + 1, r);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="算法演示"><a href="#算法演示" class="headerlink" title="算法演示"></a>算法演示</h5><p><img src="/imgs/suanfashiyan/1.png" alt="image-20230604152213930"></p><p>经过多次测试，算法的运行结果均正确，符合题意。</p><p>快速排序的算法时间复杂度是$O(N*logN)$</p><h4 id="第k小数"><a href="#第k小数" class="headerlink" title="第k小数"></a>第k小数</h4><p>这道题目是课外思考题<code>top_k</code>的一个变式，找到序列中第k小的数</p><h5 id="问题分析及算法思路-1"><a href="#问题分析及算法思路-1" class="headerlink" title="问题分析及算法思路"></a>问题分析及算法思路</h5><h6 id="基于快速排序的减治法"><a href="#基于快速排序的减治法" class="headerlink" title="基于快速排序的减治法"></a>基于快速排序的减治法</h6><p>借用“快速排序”的思想，对整个序列进行<strong>划分</strong>(取序列第一个元素作为枢轴，也可采用随机法、三数取中法等方法)，并返回<strong>划分后的位置</strong>，若等于<code>k</code>则得到答案；若大于<code>k</code>，则说明该元素左边的元素都小于<code>k</code>，递归求解该位置前面序列第<code>k</code>小的元素即可；若小于<code>k</code>，则递归求解该位置后面序列第<code>k - count</code>(<code>count</code>为该序列中<code>[l,j]</code>的元素数量，其中<code>j</code>为划分后的元素位置)小的元素即可。由此，每次仅需求解大问题的一个子问题，最后即可得到第<code>k</code>小的数。</p><h6 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h6><p>使用冒泡排序的思想，每次冒泡都是找到了序列中的第i小的数（i为冒泡次数），i&#x3D;k时找到第k小数</p><h6 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h6><p>堆排序中，每次弹出一个最小的值，只需要执行k次弹数操作就可以得到第k小数</p><p>堆</p><blockquote><p>是一个完全二叉树</p><p>每个节点的值都大于或等于其叶子的值，为最大堆；反之为最小堆</p></blockquote><p>堆排序</p><blockquote><ol><li>将待排序的序列构造成一个最大堆，此时序列的最大值为根节点</li><li>依次将根节点与待排序序列的最后一个元素交换</li><li>再维护从根节点到该元素的前一个节点为最大堆，如此往复，得到一个递增序列</li></ol></blockquote><h5 id="算法设计与代码实现-1"><a href="#算法设计与代码实现-1" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h5><h6 id="减治法"><a href="#减治法" class="headerlink" title="减治法"></a>减治法</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int quicksort(int a[], int l, int r)&#123;int pivot &#x3D; a[l];int i &#x3D; l - 1, j &#x3D; r + 1;do&#123;do &#123; i++; &#125; while (a[i] &lt; pivot);do &#123; j--; &#125; while (a[j] &gt; pivot);if (i &lt; j)  swap(a[i], a[j]);&#125; while (i &lt; j);return j;&#125;void Top_k(int a[], int l, int r, int k)&#123;if (l &gt;&#x3D; r) return;int j &#x3D; quicksort(a, l, r);int count &#x3D; j - l + 1;if (count &#x3D;&#x3D; k)&#123;return;&#125;else if(count &gt; k)&#123;Top_k(a, l, j, k);&#125;else&#123;Top_k(a, j + 1, r, k - count);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/suanfashiyan/2.png" alt="image-20230604163142845"></p><h6 id="冒泡排序-1"><a href="#冒泡排序-1" class="headerlink" title="冒泡排序"></a>冒泡排序</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void bubblesort(int a[], int k, int n)&#123;for (int i &#x3D; 0; i &lt; k; i++)&#123;for (int j &#x3D; n - 2; j &gt;&#x3D; i; j--) &#123;if (a[j + 1] &lt; a[j])&#123;int temp &#x3D; a[j];a[j] &#x3D; a[j + 1];a[j + 1] &#x3D; temp;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/suanfashiyan/3.png" alt="image-20230604164023408"></p><h6 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h6><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void down(int u)&#123;    int t &#x3D; u;&#x2F;&#x2F; t为点、左孩子、右孩子三个点中最小的一个点    if (u * 2 &lt;&#x3D; cnt &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;    if (u * 2 + 1 &lt;&#x3D; cnt &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;    if (u !&#x3D; t)&#x2F;&#x2F; 根节点不是最小的    &#123;        &#x2F;&#x2F; 与最小的点交换        swap(h[u], h[t]);        down(t);&#x2F;&#x2F; 递归处理    &#125;&#125;void up(int u)&#123;    while (u &#x2F; 2 &amp;&amp; h[u] &lt; h[u &#x2F; 2])    &#123;        swap(h[u &#x2F; 2], h[u]);        u &gt;&gt;&#x3D; 1;&#x2F;&#x2F; u &#x2F;&#x3D; 2换上去    &#125;&#125;void HeapSort(int h[], int k, int n)&#123;    for (int i &#x3D; n &#x2F; 2; i; i--) down(i);&#x2F;&#x2F; O(n)的时间复杂度建堆    while (m--)    &#123;        if(m &#x3D;&#x3D; 0)&#123;        cout&lt;&lt;h[1]&lt;&lt;endl;&#125;        h[1] &#x3D; h[cnt--];        down(1);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/suanfashiyan/4.png" alt="image-20230604165037548"></p><p>经过测试，上述方法均能实现查找第k小数的功能</p><h5 id="关于上述方法的时间复杂度分析"><a href="#关于上述方法的时间复杂度分析" class="headerlink" title="关于上述方法的时间复杂度分析"></a>关于上述方法的时间复杂度分析</h5><ul><li>对于减治法，时间复杂度是$O(n)$</li><li>对于冒泡排序，时间复杂度是$O(kn)$</li><li>对于堆排序，由于需要构建完整堆，时间复杂度是$O(n*logn)$</li></ul><blockquote><p>对于减治法，设每次划分的pivot恰好是序列的中值，可以保证每一次减治去掉一半的区间，由于一次划分耗费$O(n)$的时间，因此只需要处理剩下的一半大小的子序列，得到递推公式<br>$$<br>T(n)&#x3D;T(n&#x2F;2)+O(n)\<br>T(n)&#x3D;O(n)<br>$$</p></blockquote><h3 id="棋盘覆盖问题"><a href="#棋盘覆盖问题" class="headerlink" title="棋盘覆盖问题"></a>棋盘覆盖问题</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在一个$2^k*2^k$方格组成的棋盘中，恰有一个方格与其它方格不同，称该方格为一特殊方格，且称该棋盘为一特殊棋盘。在棋盘覆盖问题中，要用图示的4种不同形态的L型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖；</p><p><img src="/imgs/suanfashiyan/5.png" alt="image-20221126115310770"></p><h4 id="问题分析与算法思路"><a href="#问题分析与算法思路" class="headerlink" title="问题分析与算法思路"></a>问题分析与算法思路</h4><p>采用<strong>分治</strong>的思想，首先将棋盘进行划分：</p><blockquote><ol><li>当k&#x3D;0时，是一个**$1*1$的棋盘**，棋盘中的骨牌数是0</li><li>当k&gt;0时，将$2^k*2^k$分割成4个$2^{k-1}*2^{k-1}$的子棋盘，特殊方格必定位于4个子棋盘注意，其余3个子棋盘中没有特殊方格</li></ol></blockquote><p>对于划分出来的四个子棋盘，用一个L型骨牌覆盖3个没有特殊方格的子棋盘的连接处</p><p><img src="/imgs/suanfashiyan/6.png" alt="6"></p><p>至此，对每个棋盘按照左上、右上、右下、左下的顺时针顺序铺满棋盘；每次都对分割后的四个小方块进行特殊方格判断：</p><blockquote><ul><li>如果特殊方块在里面，递归</li><li>不在，根据分割的不同位置，把三个角落的方格标记为特殊方块，递归、</li></ul></blockquote><h4 id="算法设计与代码实现-2"><a href="#算法设计与代码实现-2" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 函数：棋盘覆盖void chessboardCover(int tr, int tc, int dr, int dc, int size) &#123;    if (size &#x3D;&#x3D; 1)        return;    int t &#x3D; tileID++;    int s &#x3D; size &#x2F; 2;    &#x2F;&#x2F; 左上角子棋盘    if (dr &lt; tr + s &amp;&amp; dc &lt; tc + s)        chessboardCover(tr, tc, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在左上角，用t号骨牌覆盖右下角        board[tr + s - 1][tc + s - 1] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr, tc, tr + s - 1, tc + s - 1, s);    &#125;    &#x2F;&#x2F; 右上角子棋盘    if (dr &lt; tr + s &amp;&amp; dc &gt;&#x3D; tc + s)        chessboardCover(tr, tc + s, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在右上角，用t号骨牌覆盖左下角        board[tr + s - 1][tc + s] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr, tc + s, tr + s - 1, tc + s, s);    &#125;    &#x2F;&#x2F; 左下角子棋盘    if (dr &gt;&#x3D; tr + s &amp;&amp; dc &lt; tc + s)        chessboardCover(tr + s, tc, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在左下角，用t号骨牌覆盖右上角        board[tr + s][tc + s - 1] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr + s, tc, tr + s, tc + s - 1, s);    &#125;    &#x2F;&#x2F; 右下角子棋盘    if (dr &gt;&#x3D; tr + s &amp;&amp; dc &gt;&#x3D; tc + s)        chessboardCover(tr + s, tc + s, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在右下角，用t号骨牌覆盖左上角        board[tr + s][tc + s] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr + s, tc + s, tr + s, tc + s, s);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法演示-1"><a href="#算法演示-1" class="headerlink" title="算法演示"></a>算法演示</h4><p><img src="/imgs/suanfashiyan/7.png" alt="image-20230604174723961"></p><p>经过多组测试，算法运行正确</p><h5 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h5><p>分析时间复杂度：</p><p>递推式<br>$$<br>T(k)&#x3D;\left{\begin{array}{cc}<br>O(1) &amp; k&#x3D;0 \<br>4 T(k-1)+O(1) &amp; k&gt;0<br>\end{array}\right.<br>$$<br>解得<br>$$<br>T(k)&#x3D;O(4^k)<br>$$<br>设$n&#x3D;2^k$，得到时间复杂度是$O(n^2)$</p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>分治即“<strong>分而治之</strong>”，一个规模很大的问题若要直接求解起来是非常困难的，将一个复杂的问题分解为若干个规模较小但是类似于原问题的子问题，子问题可以再分为更小的子问题，最终达到子问题可以简单的直接求解的目的，那么原问题的解即子问题的解的并集。分治算法可以缩小问题的规模，使得问题的求解变得十分容易。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="快速排序源代码"><a href="#快速排序源代码" class="headerlink" title="快速排序源代码"></a>快速排序源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#define N 20using namespace std;void quicksort(int q[], int l, int r)&#123;    if (l &gt;&#x3D; r) return;&#x2F;&#x2F;判边界    int x &#x3D; q[l], i &#x3D; l - 1, j &#x3D; r + 1;    while (i &lt; j)    &#123;        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        if (i &lt; j) swap(q[i], q[j]);    &#125;    quicksort(q, l, j), quicksort(q, j + 1, r);&#125;int main()&#123; int n,q[N];cout&lt;&lt;&quot;请输入元素个数与序列：&quot;&lt;&lt;endl;cin&gt;&gt;n;for(int i&#x3D;0;i&lt;n;i++)&#123;cin&gt;&gt;q[i];&#125;quicksort(q,0,n-1);for(int i&#x3D;0;i&lt;n;i++)&#123;cout&lt;&lt;q[i]&lt;&lt;&quot; &quot;;&#125;cout&lt;&lt;endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第k小数源代码"><a href="#第k小数源代码" class="headerlink" title="第k小数源代码"></a>第k小数源代码</h3><h4 id="减治法-1"><a href="#减治法-1" class="headerlink" title="减治法"></a>减治法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 20;int quicksort(int a[], int l, int r)&#123;int pivot &#x3D; a[l];int i &#x3D; l - 1, j &#x3D; r + 1;do&#123;do &#123; i++; &#125; while (a[i] &lt; pivot);do &#123; j--; &#125; while (a[j] &gt; pivot);if (i &lt; j)  swap(a[i], a[j]);&#125; while (i &lt; j);return j;&#125;void Top_k(int a[], int l, int r, int k)&#123;if (l &gt;&#x3D; r) return;int j &#x3D; quicksort(a, l, r);int count &#x3D; j - l + 1;if (count &#x3D;&#x3D; k)&#123;return;&#125;else if(count &gt; k)&#123;Top_k(a, l, j, k);&#125;else&#123;Top_k(a, j + 1, r, k - count);&#125;&#125;int main()&#123;int a[N], k, n;cout &lt;&lt; &quot;请输入元素个数与序列:&quot; &lt;&lt; endl;cin &gt;&gt; n;for (int i &#x3D; 0; i &lt; n; i++)&#123;cin &gt;&gt; a[i];&#125;cout &lt;&lt; &quot;请输入要获得的第k小数&quot; &lt;&lt; endl;cin &gt;&gt; k;Top_k(a, 0, n - 1, k);    cout &lt;&lt; &quot;第&quot; &lt;&lt; k &lt;&lt; &quot;小数是&quot; &lt;&lt; a[k - 1] &lt;&lt; endl;cout &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="冒泡排序-2"><a href="#冒泡排序-2" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 20;void bubblesort(int a[], int k, int n)&#123;for (int i &#x3D; 0; i &lt; k; i++)&#123;for (int j &#x3D; n - 2; j &gt;&#x3D; i; j--) &#123;if (a[j + 1] &lt; a[j])&#123;int temp &#x3D; a[j];a[j] &#x3D; a[j + 1];a[j + 1] &#x3D; temp;&#125;&#125;&#125;&#125;int main()&#123;int a[N], k, n;cout &lt;&lt; &quot;请输入元素个数与序列:&quot; &lt;&lt; endl;cin &gt;&gt; n;for (int i &#x3D; 0; i &lt; n; i++)&#123;cin &gt;&gt; a[i];&#125;cout &lt;&lt; &quot;请输入要获得的第k小数&quot; &lt;&lt; endl;cin &gt;&gt; k;bubblesort(a, k, n);cout &lt;&lt; a[k - 1] &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排序-2"><a href="#堆排序-2" class="headerlink" title="堆排序"></a>堆排序</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int n, m;int h[N], cnt;void down(int u)&#123;    int t &#x3D; u;&#x2F;&#x2F; t为点、左孩子、右孩子三个点中最小的一个点    if (u * 2 &lt;&#x3D; cnt &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;    if (u * 2 + 1 &lt;&#x3D; cnt &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;    if (u !&#x3D; t)&#x2F;&#x2F; 根节点不是最小的    &#123;        &#x2F;&#x2F; 与最小的点交换        swap(h[u], h[t]);        down(t);&#x2F;&#x2F; 递归处理    &#125;&#125;void up(int u)&#123;    while (u &#x2F; 2 &amp;&amp; h[u] &lt; h[u &#x2F; 2])    &#123;        swap(h[u &#x2F; 2], h[u]);        u &gt;&gt;&#x3D; 1;&#x2F;&#x2F; u &#x2F;&#x3D; 2换上去    &#125;&#125;void HeapSort(int h[], int k, int n)&#123;    for (int i &#x3D; n &#x2F; 2; i; i--) down(i);&#x2F;&#x2F; O(n)的时间复杂度建堆    while (m--)    &#123;        if(m &#x3D;&#x3D; 0)&#123;        cout&lt;&lt;h[1]&lt;&lt;endl;&#125;        h[1] &#x3D; h[cnt--];        down(1);    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) cin&gt;&gt;h[i];    cnt &#x3D; n;    HeapSort(h, m, n);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="棋盘覆盖问题源代码"><a href="#棋盘覆盖问题源代码" class="headerlink" title="棋盘覆盖问题源代码"></a>棋盘覆盖问题源代码</h3> <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS 1#include&lt;iostream&gt;  using namespace std;int num &#x3D; 1;                   &#x2F;&#x2F;L型骨牌的编号(递增)  int board[100][100];  &#x2F;&#x2F;棋盘  &#x2F;****************************************************** tr--当前棋盘左上角的行号* tc--当前棋盘左上角的列号* dr--当前特殊方格所在的行号* dc--当前特殊方格所在的列号* size：当前棋盘的:2^k*****************************************************&#x2F;void chessboardCover(int tr, int tc, int dr, int dc, int size) &#123;    if (size &#x3D;&#x3D; 1)        return;    int t &#x3D; num++;    int s &#x3D; size &#x2F; 2;    &#x2F;&#x2F; 左上角子棋盘    if (dr &lt; tr + s &amp;&amp; dc &lt; tc + s)        chessboardCover(tr, tc, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在左上角，用t号骨牌覆盖右下角        board[tr + s - 1][tc + s - 1] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr, tc, tr + s - 1, tc + s - 1, s);    &#125;    &#x2F;&#x2F; 右上角子棋盘    if (dr &lt; tr + s &amp;&amp; dc &gt;&#x3D; tc + s)        chessboardCover(tr, tc + s, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在右上角，用t号骨牌覆盖左下角        board[tr + s - 1][tc + s] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr, tc + s, tr + s - 1, tc + s, s);    &#125;    &#x2F;&#x2F; 左下角子棋盘    if (dr &gt;&#x3D; tr + s &amp;&amp; dc &lt; tc + s)        chessboardCover(tr + s, tc, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在左下角，用t号骨牌覆盖右上角        board[tr + s][tc + s - 1] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr + s, tc, tr + s, tc + s - 1, s);    &#125;    &#x2F;&#x2F; 右下角子棋盘    if (dr &gt;&#x3D; tr + s &amp;&amp; dc &gt;&#x3D; tc + s)        chessboardCover(tr + s, tc + s, dr, dc, s);    else &#123;        &#x2F;&#x2F; 不在右下角，用t号骨牌覆盖左上角        board[tr + s][tc + s] &#x3D; t;        &#x2F;&#x2F; 覆盖其他方格        chessboardCover(tr + s, tc + s, tr + s, tc + s, s);    &#125;&#125;int main()&#123;    int size;    cout &lt;&lt; &quot;输入棋盘的size(大小必须是2的n次幂): &quot;;    cin &gt;&gt; size;    int index_x, index_y;    cout &lt;&lt; &quot;输入特殊方格位置的坐标: &quot;;    getchar();    cin&gt;&gt;index_x&gt;&gt;index_y;    chessboardCover(0, 0, index_x - 1, index_y - 1, size);    for (int i &#x3D; 0; i &lt; size; i++)    &#123;        for (int j &#x3D; 0; j &lt; size; j++)            cout &lt;&lt; board[i][j] &lt;&lt; &quot;\t&quot;;        cout &lt;&lt; endl;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验四：动态规划"><a href="#实验四：动态规划" class="headerlink" title="实验四：动态规划"></a>实验四：动态规划</h1><h2 id="计算矩阵连乘积"><a href="#计算矩阵连乘积" class="headerlink" title="计算矩阵连乘积"></a>计算矩阵连乘积</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>在科学计算中经常要计算矩阵的乘积。矩阵A和B可乘的条件是矩阵A的列数等于矩阵B的行数。若A是一个$p×q$的矩阵，B是一个$q×r$的矩阵，则其乘积C&#x3D;AB是一个$p×r$的矩阵。由该公式知计算C&#x3D;AB总共需要<strong>pqr</strong>次的数乘。其标准计算公式为：<br>$$<br>C_{ij}&#x3D;\sum_{k&#x3D;1}^qA_{ik}B_{kj}(1\le i\le p,1\le j \le r)<br>$$<br>现在问题是现在的问题是，给定n个矩阵$\lbrace A1,A2,…,An \rbrace$。其中Ai与Ai+1是可乘的，i&#x3D;1,2,…,n-1。要求计算出这n个矩阵的连乘积A1A2…An。</p><h3 id="问题分析与算法思想"><a href="#问题分析与算法思想" class="headerlink" title="问题分析与算法思想"></a>问题分析与算法思想</h3><p>设二维数组$m[N][N]$表示当前矩阵的连乘次数，一维数组$p[N]$表示各矩阵的维度（其中$p[0]$表示第一个矩阵的行数，$p[i]$表示第i个矩阵的列数），则得到以下递推公式：</p><p>$$<br>m[i][j]&#x3D;\left{\begin{array}{cc}<br>0 &amp; i&#x3D;j \<br>\min <em>{i \leq k&lt;j}\left{m[i][k]+m[k+1][j]+p</em>{i-1} p_k p_j\right} &amp; i&lt;j<br>\end{array}\right.<br>$$<br>将m数组的对角线初始化为0，然后依次计算第i个矩阵与第i+r-1个矩阵到最后一个矩阵连乘的最优解情况：依次在r-1个分隔位置中依次检测最优分隔点：对于每个分隔点，变换依次分隔位置，再进行逐一测试，如果有更有的分隔点，就替换掉当前的分隔点。</p><p>由此，输出$m[1][n]$，得到最少的连乘计算次数；记录间隔位置，可以输出计算连乘的顺序，即最佳添加括号的方式</p><h3 id="算法设计与代码实现-3"><a href="#算法设计与代码实现-3" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void MatrixChain(int n)&#123;int r, i, j, k;for (i &#x3D; 0; i &lt;&#x3D; n; i++)&#x2F;&#x2F; 初始化对角线&#123;m[i][i] &#x3D; 0;&#125;for (r &#x3D; 2; r &lt;&#x3D; n; r++)&#x2F;&#x2F; r 个矩阵连乘&#123;for (i &#x3D; 1; i &lt;&#x3D; n - r + 1; i++)&#x2F;&#x2F; 依次计算每r个矩阵相连乘的最优解情况&#123;j &#x3D; i + r - 1;m[i][j] &#x3D; m[i][i] + m[i + 1][j] + p[i - 1] * p[i] * p[j];s[i][j] &#x3D; i;&#x2F;&#x2F; 分隔位置for (k &#x3D; i + 1; k &lt; j; k++) &#x2F;&#x2F; 变换分隔位置，逐一测试&#123;int t &#x3D; m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];if (t &lt; m[i][j])&#x2F;&#x2F; 如果变换后的位置更优，则替换原来的分隔方法&#123;m[i][j] &#x3D; t;s[i][j] &#x3D; k;&#125;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="/imgs/suanfashiyan/8.png" alt="image-20230605122639394"></p><p><img src="/imgs/suanfashiyan/9.png" alt="image-20230605122812755"></p><h3 id="算法讨论"><a href="#算法讨论" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>通过动态规划来确定矩阵连乘顺序的时间复杂度是$O(n^3)$，在大规模矩阵连乘是，选择最优的连乘顺序，可以大幅度减少计算量，提高计算效率</p><h2 id="防卫导弹"><a href="#防卫导弹" class="headerlink" title="防卫导弹"></a>防卫导弹</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>一种新型的防卫导弹可截击多个攻击导弹。它可以向前飞行，也可以用很快的速度向下飞行，可以毫无损伤地截击进攻导弹，但不可以向后或向上飞行。但有一个缺点，尽管它发射时可以达到任意高度，但它只能截击比它上次截击导弹时所处高度低或者高度相同的导弹。现对这种新型防卫导弹进行测试，在每一次测试中，发射一系列的测试导弹（这些导弹发射的间隔时间固定，飞行速度相同），该防卫导弹所能获得的信息包括各进攻导弹的高度，以及它们发射次序。现要求编一程序，求在每次测试中，该防卫导弹最多能截击的进攻导弹数量，一个导弹能被截击应满足下列两个条件之一：</p><ol><li>它是该次测试中第一个被防卫导弹截击的导弹</li><li>它是在上一次被截击导弹的发射后发射，且高度不大于上一次被截击导弹的高度的导弹</li></ol><p>输入数据：第一行是一个整数n，以后的n各有一个整数表示导弹的高度</p><p>输出数据：截击导弹的最大数目</p><h3 id="问题分析与算法思想-1"><a href="#问题分析与算法思想-1" class="headerlink" title="问题分析与算法思想"></a>问题分析与算法思想</h3><p>对于本题的拦截导弹问题，因为一个导弹能被截击应满足高度不大于上一次被截击导弹的高度的导弹可以将其抽象成求一个最长不上升子序列的问题。</p><p>以下是最长不上升子序列的一个算法分析：</p><ol><li>定义状态：我们可以使用一个数组<code>dp</code>来表示最长不上升子序列的长度。dp[i]表示以第i个元素为结尾的最长不上升子序列的长度。</li><li>初始化：将<code>dp</code>数组的所有元素初始化为1，因为每个单独的元素都可以视为一个长度为1的非递增子序列。</li><li>状态转移：对于每个位置i（从1到n-1），我们需要考虑所有在i之前的位置j（从0到i-1）。如果$nums[i] \le nums[j]$，则可以将元素i添加到以j为结尾的非递增子序列中，从而得到以i为结尾的非递增子序列。因此，我们可以更新$dp[i] &#x3D; max(dp[i], dp[j] + 1)$。</li><li>找到最大值：遍历整个dp数组，找到其中的最大值，即为最长不上升子序列的长度。</li></ol><p>算法中的一些细节：</p><ul><li>状态表示$f[i]$：<ul><li>集合：所有以第$i$个数结尾的不升子序列；</li><li>属性：$Max$</li></ul></li><li>状态计算：集合划分——$f[i]$<ul><li>划分依据：最后一个不同的点</li><li>以上一个数的位置进行划分</li><li>若$a_i \le a_j$，则$f[i]&#x3D;max \lbrace f[j]+1 \rbrace(j&#x3D;0,1,2,···i-1)$</li></ul></li></ul><h3 id="算法设计与代码实现-4"><a href="#算法设计与代码实现-4" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void FindMissileNum(int n)&#123;    int res &#x3D; 0, cnt &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++ )    &#123;        f[i] &#x3D; 1;        for (int j &#x3D; 0; j &lt; i; j ++ )            if (h[i] &lt;&#x3D; h[j])                f[i] &#x3D; max(f[i], f[j] + 1);        res &#x3D; max(res, f[i]);    &#125;    cout&lt;&lt;res&lt;&lt;endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="/imgs/suanfashiyan/11" alt="image-20230606220038621"></p><h3 id="算法讨论-1"><a href="#算法讨论-1" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>算法的时间复杂度是$O(n^2)$，可以对遍历进行优化，进行树状数组优化或者二分优化，可以将时间复杂度优化到$O(n logn)$。</p><h2 id="皇宫看守"><a href="#皇宫看守" class="headerlink" title="皇宫看守"></a>皇宫看守</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>太平王世子事件后，陆小凤成了皇上特聘的御前一品侍卫。皇宫以午门为起点，直到后宫嫔妃们的寝宫，呈一棵树的形状；某些宫殿间可以互相望见。大内保卫森严，三步一岗，五步一哨，每个宫殿都要有人全天候看守，在不同的宫殿安排看守所需的费用不同。可是陆小凤手上的经费不足，无论如何也没法在每个宫殿都安置留守侍卫。</p><p>请你编程计算帮助陆小凤布置侍卫，在看守全部宫殿的前提下，使得花费的经费最少。</p><p>输入数据：数据表示一棵树，描述如下：</p><p>第1行 n，表示树中结点的数目。</p><p>第2行至第n+1行，每行描述每个宫殿结点信息，依次为：该宫殿结点标号i（0&lt;i&lt;&#x3D;n），在该宫殿安置侍卫所需的经费k，该边的儿子数m，接下来m个数，分别是这个节点的m个儿子的标号r1，r2，…，rm。</p><p>对于一个n（0 &lt; n &lt;&#x3D; 1500）个结点的树，结点标号在1到n之间，且标号不重复。</p><p>输出数据：输出到output.txt文件中。输出文件仅包含一个数，为所求的最少的经费。</p><p>如下示例：</p><p><img src="/imgs/suanfashiyan/10.png" alt="image-20230605174537453"></p><blockquote><p>sample input</p><pre class="line-numbers language-none"><code class="language-none">&gt;6 &gt;1 30 3 2 3 4&gt;2 16 2 5 6&gt;3 5 0&gt;4 4 0&gt;5 11 0&gt;6 5 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sample output</p><pre class="line-numbers language-none"><code class="language-none">&gt;25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="问题分析与算法思想-2"><a href="#问题分析与算法思想-2" class="headerlink" title="问题分析与算法思想"></a>问题分析与算法思想</h3><p>这道题目是求权值最小的点支配集，要求图中<strong>每个点都能被观察到</strong>，因此有下列情况：</p><ul><li>父节点<strong>放置</strong>哨兵，所有子节点的哨兵都<strong>可放可不放</strong></li><li>父节点<strong>不设置</strong>哨兵，<strong>至少有一个</strong>子节点需要放置哨兵</li><li>父结点<strong>不设置</strong>哨兵，但其<strong>父节点</strong>设置哨兵观察，则子节点哨兵<strong>可放可不放</strong></li></ul><p>总结上述情况可以得到每个节点总共有三种情况：</p><ul><li>被父节点看守</li><li>被子节点看守</li><li>被节点自身看守</li></ul><p>将上述三种情况分别编为0，1，2</p><p>建立<strong>状态转移函数</strong>$f[i][3]$，其中：</p><ol><li>$f[i][0]$表示第i个节点由父节点看守下的最小代价</li><li>$f[i][1]$表示第i个节点由子节点看守下的最小代价</li><li>$f[i][2]$表示第i个节点由自身看守下的最小代价</li></ol><p>转移关系：</p><ol><li>$f[i][0] +&#x3D;min \lbrace f[j][1],f[j][2] \rbrace$</li><li>$f[i][1]&#x3D;min \lbrace f[i][1],sum-min(f[j][1],f[j][2])+f[j][2] \rbrace$</li><li>$f[i][2]+&#x3D;min \lbrace min(f[j][0],f[j][1]),f[j][2] \rbrace$</li></ol><p>从根节点开始DFS，然后遍历所有当前节点的所有子节点，进行递归。</p><h3 id="算法设计与代码实现-5"><a href="#算法设计与代码实现-5" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void dfs(int u)&#123;    f[u][2] &#x3D; w[u];    for (int i &#x3D; h[u]; ~i; i &#x3D; ne[i])    &#123;        int j &#x3D; e[i];&#x2F;&#x2F; 遍历所有子节点        dfs(j);        f[u][0] +&#x3D; min(f[j][1], f[j][2]);        f[u][2] +&#x3D; min(min(f[j][0], f[j][1]), f[j][2]);    &#125;    f[u][1] &#x3D; 1e9;    for (int i &#x3D; h[u]; ~i; i &#x3D; ne[i])    &#123;        int j &#x3D; e[i];        &#x2F;&#x2F; f[u][0]为所有子节点的摆放方案代价之和, 减去 min(f[j][1], f[j][2]) 即是除了j节点其余节点的代价之和        f[u][1] &#x3D; min(f[u][1], f[j][2] + f[u][0]- min(f[j][1], f[j][2]));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="/imgs/suanfashiyan/12.png" alt="image-20230607004451288"></p><h3 id="算法讨论-2"><a href="#算法讨论-2" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>本题是树形DP的应用，涉及到了父节点、子节点的邻接关系。算法遍历了树中的所有节点，时间复杂度是$O(n)$</p><h2 id="附录-1"><a href="#附录-1" class="headerlink" title="附录"></a>附录</h2><h3 id="计算矩阵连乘积源代码"><a href="#计算矩阵连乘积源代码" class="headerlink" title="计算矩阵连乘积源代码"></a>计算矩阵连乘积源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 100;int p[N];&#x2F;&#x2F; 矩阵规模int m[N][N];&#x2F;&#x2F; 最优解int s[N][N];void MatrixChain(int n)&#123;int r, i, j, k;for (i &#x3D; 0; i &lt;&#x3D; n; i++)&#x2F;&#x2F; 初始化对角线&#123;m[i][i] &#x3D; 0;&#125;for (r &#x3D; 2; r &lt;&#x3D; n; r++)&#x2F;&#x2F; r 个矩阵连乘&#123;for (i &#x3D; 1; i &lt;&#x3D; n - r + 1; i++)&#x2F;&#x2F; 依次计算每r个矩阵相连乘的最优解情况&#123;j &#x3D; i + r - 1;m[i][j] &#x3D; m[i][i] + m[i + 1][j] + p[i - 1] * p[i] * p[j];s[i][j] &#x3D; i;&#x2F;&#x2F; 分隔位置for (k &#x3D; i + 1; k &lt; j; k++) &#x2F;&#x2F; 变换分隔位置，逐一测试&#123;int t &#x3D; m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];if (t &lt; m[i][j])&#x2F;&#x2F; 如果变换后的位置更优，则替换原来的分隔方法&#123;m[i][j] &#x3D; t;s[i][j] &#x3D; k;&#125;&#125;&#125;&#125;&#125;void print(int i, int j)&#x2F;&#x2F; 输出连乘顺序&#123;if (i &#x3D;&#x3D; j)&#123;cout &lt;&lt; &quot;p[&quot; &lt;&lt; i &lt;&lt; &quot;]&quot;;return;&#125;cout &lt;&lt; &quot;(&quot;;print(i, s[i][j]);print(s[i][j] + 1, j);cout &lt;&lt; &quot;)&quot;;&#125;int main()&#123;int n;&#x2F;&#x2F; n个矩阵cout &lt;&lt; &quot;请输入矩阵的数目：&quot;;cin &gt;&gt; n;int i, j;cout &lt;&lt; &quot;请输入各个矩阵的维度(相邻维度只需输入一个即可):&quot;;for (i &#x3D; 0; i &lt;&#x3D; n; i++)&#123;cin &gt;&gt; p[i];&#125;MatrixChain(n);cout &lt;&lt; &quot;最佳添加括号的方式为：&quot;;print(1, n);cout &lt;&lt; &quot;\n最小计算量的值为：&quot; &lt;&lt; m[1][n] &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防卫导弹源代码"><a href="#防卫导弹源代码" class="headerlink" title="防卫导弹源代码"></a>防卫导弹源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;sstream&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1000;int h[N], f[N], q[N];&#x2F;&#x2F; q数组记录开好的子序列结尾的数void FindMissileNum(int n)&#123;    int res &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; i ++ )    &#123;        f[i] &#x3D; 1;        for (int j &#x3D; 0; j &lt; i; j ++ )            if (h[i] &lt;&#x3D; h[j])                f[i] &#x3D; max(f[i], f[j] + 1);        res &#x3D; max(res, f[i]);    &#125;    cout&lt;&lt;res&lt;&lt;endl;&#125;int main()&#123;    int n&#x3D;0;    while (cin &gt;&gt; h[n])  n ++ ;    FindMissileNum(n);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="皇宫看守源代码"><a href="#皇宫看守源代码" class="headerlink" title="皇宫看守源代码"></a>皇宫看守源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1510;int n;int h[N], w[N], e[N], ne[N], idx;int f[N][3];bool st[N];void add(int a, int b)&#123;    e[idx] &#x3D; b, ne[idx] &#x3D; h[a], h[a] &#x3D; idx ++ ;&#125;void dfs(int u)&#123;    f[u][2] &#x3D; w[u];    for (int i &#x3D; h[u]; ~i; i &#x3D; ne[i])    &#123;        int j &#x3D; e[i];&#x2F;&#x2F; 遍历所有子节点        dfs(j);        f[u][0] +&#x3D; min(f[j][1], f[j][2]);        f[u][2] +&#x3D; min(min(f[j][0], f[j][1]), f[j][2]);    &#125;    f[u][1] &#x3D; 1e9;    for (int i &#x3D; h[u]; ~i; i &#x3D; ne[i])    &#123;        int j &#x3D; e[i];        &#x2F;&#x2F; f[u][0]为所有子节点的摆放方案代价之和, 减去 min(f[j][1], f[j][2]) 即是除了j节点其余节点的代价之和        f[u][1] &#x3D; min(f[u][1], f[j][2] + f[u][0]- min(f[j][1], f[j][2]));    &#125;&#125;int main()&#123;    cin &gt;&gt; n;    memset(h, -1, sizeof h);    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )    &#123;        int id, cost, cnt;        cin &gt;&gt; id &gt;&gt; cost &gt;&gt; cnt;        w[id] &#x3D; cost;           &#x2F;&#x2F; 在点上记录花费        while (cnt -- )        &#123;            int ver;            cin &gt;&gt; ver;            add(id, ver);            st[ver] &#x3D; true;     &#x2F;&#x2F; 标记不是根节点        &#125;    &#125;    int root &#x3D; 1;    while (st[root]) root ++ ;  &#x2F;&#x2F; 找到根节点    dfs(root);    cout &lt;&lt; min(f[root][1], f[root][2]) &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验五：贪心算法和随机算法"><a href="#实验五：贪心算法和随机算法" class="headerlink" title="实验五：贪心算法和随机算法"></a>实验五：贪心算法和随机算法</h1><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>有一个背包，背包容量是M&#x3D;150。有7个物品，物品可以分割成任意大小。要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。</p><table><thead><tr><th>物品</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th></tr></thead><tbody><tr><td>重量</td><td>35</td><td>30</td><td>60</td><td>50</td><td>40</td><td>10</td><td>25</td></tr><tr><td>价值</td><td>10</td><td>40</td><td>30</td><td>50</td><td>35</td><td>40</td><td>30</td></tr></tbody></table><h3 id="问题分析及算法思路-2"><a href="#问题分析及算法思路-2" class="headerlink" title="问题分析及算法思路"></a>问题分析及算法思路</h3><p>首先计算每种物品单位重量的价值，然后依照贪心策略，将<strong>尽可能多的单位重量价值最高的物品</strong>装入背包。将某种物品全部装入背包，背包内的物品总重量未超过C，则选择单位重量价值次高的物品并尽可能地多装入背包</p><p>使用贪心算法解决背包问题的思路如下：</p><ol><li><p>计算每个物品的单位价值：对于每个物品，计算其单位重量的价值（即价值除以重量），并将其降序排序。</p></li><li><p>初始化结果变量：创建一个结果变量，用于记录当前已选择的物品的总重量和总价值，初始值为0。</p></li><li><p>遍历物品：按照单位价值降序的顺序，依次遍历每个物品。</p></li><li><p>判断是否可以放入背包：对于当前遍历到的物品，判断是否可以放入背包中。如果当前物品的重量小于等于背包剩余容量，则将该物品放入背包，并将其重量和价值加到结果变量中。否则，跳过该物品。</p></li><li><p>返回结果：遍历完所有物品后，返回结果变量中记录的总重量和总价值。</p></li></ol><p>贪心算法的核心思想是每次选择当前最优的解决方案，即单位价值最高的物品放入背包。若某次不按照最大单位重量价值的物品进行放置，所得到的总价值一定不是最大的，则可以确定<strong>贪心解就是最优解</strong>，保证了贪心策略的正确性。</p><h3 id="算法设计与代码实现-6"><a href="#算法设计与代码实现-6" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Obj&#123;int id;&#x2F;&#x2F; 物品序号int w;&#x2F;&#x2F; w为各物品的重量int v;&#x2F;&#x2F; v为各物品的价值float unit;&#x2F;&#x2F; 单位重量的价值bool operator&lt; (const Obj&amp; W)const&#123;return unit &lt; W.unit;&#125;&#125;obj[N];void FindMaxValue(int n, int m)&#123;float value &#x3D; 0;sort(obj, obj + n);&#x2F;&#x2F; 按照单位重量的价值对物品进行升序排序for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i--)&#123;if (m - obj[i].w &gt;&#x3D; 0)&#x2F;&#x2F; 存在剩余容量&#123;m -&#x3D; obj[i].w;&#x2F;&#x2F; 去掉这部分的背包容量value +&#x3D; obj[i].v;&#x2F;&#x2F; 加入这部分的价值cout &lt;&lt; &quot;装入整个第&quot; &lt;&lt; l[obj[i].id] &lt;&lt; &quot;个物品&quot; &lt;&lt; endl;if (m &#x3D;&#x3D; 0) break;&#125;else&#123;float ratio &#x3D; (float) m &#x2F; obj[i].w;cout &lt;&lt; &quot;装入&quot; &lt;&lt; ratio * 100 &lt;&lt; &quot;%第&quot; &lt;&lt; l[obj[i].id] &lt;&lt; &quot;个物品&quot; &lt;&lt; endl;value +&#x3D; ratio * obj[i].v;break;&#125;&#125;cout &lt;&lt; &quot;装入背包中的物品的总价值最大为&quot; &lt;&lt; value &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="E:/xiazai/img/13.png" alt="image-20230607101048438"></p><h3 id="算法讨论-3"><a href="#算法讨论-3" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>背包问题有多个不同的变体，其中一些常见的种类包括：</p><ol><li><p>0&#x2F;1背包问题（0&#x2F;1 Knapsack Problem）：在这种问题中，每个物品要么完全放入背包，要么完全不放入背包，不能进行分割。即每个物品只有两种选择：放入背包或不放入背包。</p></li><li><p>分数背包问题（Fractional Knapsack Problem）：这个问题允许物品被分割放入背包，即可以选择物品的一部分放入背包。每个物品有一个对应的重量和价值，目标是找到使总价值最大化的物品组合。</p></li><li><p>多重背包问题（Multiple Knapsack Problem）：多重背包问题与0&#x2F;1背包问题类似，但是每个物品有多个可用的实例（数量不限），可以选择将多个相同的物品放入背包中。</p></li><li><p>无限背包问题（Unbounded Knapsack Problem）：在这个问题中，每个物品有无限个可用实例，可以无限次地选择物品放入背包。</p></li><li><p>有限背包问题（Bounded Knapsack Problem）：这个问题介于0&#x2F;1背包问题和无限背包问题之间，每个物品有一定数量的可用实例，可以选择将物品放入背包的次数受限。</p></li><li><p>值约束背包问题（Knapsack Problem with Value Constraints）：在这个问题中，除了背包的容量限制外，还有对总价值的限制。目标是找到在满足总重量不超过背包容量的前提下，使总价值最大化的物品组合。</p></li></ol><p>通常来说，背包问题使用动态规划来解决，但是在本题中，物品可以分割成任意大小，故可以通过贪心策略，从最大单位重量价值的物品开始装入背包，是背包的纵价值最大，算法的时间复杂度主要消耗在排序上，使用了C++自带的sort排序，时间复杂度是$O(nlogn)$</p><h2 id="照亮的山景"><a href="#照亮的山景" class="headerlink" title="照亮的山景"></a>照亮的山景</h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>在一片山的上空，高度为T处有N个处于不同位置的灯泡，如图。如果山的边界上某一点于某灯i的连线不经过山的其它点，我们称灯i可以照亮该点。开尽量少的灯，使得整个山景都被照亮。山被表示成有m个转折点的折线。</p><p>提示：照亮整个山景相当于照亮每一个转折点。</p><p><img src="E:/xiazai/img/1.gif" alt="img"></p><h3 id="问题分析及算法思路-3"><a href="#问题分析及算法思路-3" class="headerlink" title="问题分析及算法思路"></a>问题分析及算法思路</h3><p>一座山想要能被照亮，那么把这座山的两侧分别延长，与灯所在的高度相交于两个点，在这个区间内如果有一盏灯，就可以照亮这座山，如果没有，就必须在区间两侧各有一盏灯。那么我们把每座山的区间放到一个集合中，遍历所有的灯，每次贪心的寻找覆盖区间最多的灯，同时将已经照亮的山移出集合，标记灯为已使用，直到集合为空，所求的灯的数量就是最小的灯的数量。</p><p>这是在笔算时的解决方案，在计算时应该将其数据化。</p><p>首先找到<strong>每个顶点能被灯照到的左端点和右端点</strong>，可以采用遍历每个灯的做法，计算灯到顶点的直线的斜率 $k$ 和截距 $b$，然后计算该灯到顶点这段距离区间内<strong>所有顶点的横坐标投影到该直线的纵坐标</strong>是否小于<strong>该顶点的纵坐标</strong>：</p><ul><li>若成立，则认为该灯是无法照射到该顶点的，转而判断下一个灯；</li><li>若这段距离区间中所有顶点都存在以上条件，则认为该灯可以照射到该顶点，由该灯在顶点处的左右关系对顶点能被灯照到的左、右端点进行更新，并判断下一个灯。</li></ul><p>若判断的灯已经在该顶点的右侧且该灯无法照到该顶点，则无需继续判断后续灯是否能照射到该顶点。</p><p>经过上述过程，我们得到了每个顶点被哪些灯照到, 记录到$l$和$r$中，接着根据<strong>贪心策略</strong>获得开灯最少的数量：</p><p>依次计算区间内每个数出现的次数，找出区间中出现次数最多的数，由贪心策略可知，其是我们要找的灯的序号。点亮该灯后，将能照射到的顶点删除，然后对剩余顶点重复上述过程，直到顶点被全部照亮。</p><p>若贪心策略不是最优解，我们可以通过换部分灯的开关情况使其变为最优解，且不增加要亮灯的数目，则该贪心策略是正确的。</p><h3 id="算法设计与代码实现-7"><a href="#算法设计与代码实现-7" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Mou&#123;int x;int y;int l;&#x2F;&#x2F; l 为顶点能被灯照到的左端点int r;&#x2F;&#x2F; r 为顶点能被灯照到的右端点&#125;;vector&lt;Mou&gt; mou;void FindLightRegion(int m, int n, int t)&#123;for (int i &#x3D; 0; i &lt; m; i++)&#x2F;&#x2F; 遍历每个顶点&#123;for (int j &#x3D; 0; j &lt; n; j++)&#x2F;&#x2F; 遍历每个灯&#123;bool flag &#x3D; true;if (l[j] !&#x3D; mou[i].x)&#123;&#x2F;&#x2F; 计算直线的斜率k和截距bfloat k &#x3D; (float)(t - mou[i].y) &#x2F; (l[j] - mou[i].x);float b &#x3D; t - k * l[j];int s &#x3D; i;while ((l[j] &lt; mou[i].x &amp;&amp; --s &amp;&amp; l[j] &lt; mou[s].x)|| (l[j] &gt; mou[i].x &amp;&amp; ++s &amp;&amp; l[j] &gt; mou[s].x))&#x2F;&#x2F; 遍历灯到该点区间内的所有点&#123;if (k * mou[s].x + b &lt; mou[s].y)&#123;flag &#x3D; false;break;&#125;&#125;&#125;if (flag)&#123;if (mou[i].l &#x3D;&#x3D; -1)&#123;mou[i].l &#x3D; mou[i].r &#x3D; j;&#125;else&#123;mou[i].r++;&#125;&#125;else&#123;if (l[j] &gt; mou[i].x)break;&#x2F;&#x2F; 无需继续遍历&#125;&#125;&#125;&#125;int FindMinLight(int m, int n, int t)&#123;int res &#x3D; 0;FindLightRegion(m, n, t);&#x2F;&#x2F; 得到每个顶点被哪些灯照到, 记录到 l 和 r 中while (mou.size() !&#x3D; 0)&#123;&#x2F;&#x2F; 统计区间每个数出现的次数int max &#x3D; 0, cishu &#x3D; 0;for (auto t : mou)&#123;map&lt;int, int&gt; nums;for (int i &#x3D; t.l; i &lt;&#x3D; t.r; i++)&#123;nums[i]++;&#125;&#x2F;&#x2F; 找出区间中出现次数最多的数for (auto num : nums)&#123;if (num.second &gt; cishu)&#123;max &#x3D; num.first;cishu &#x3D; num.second;&#125;&#125;&#125;&#x2F;&#x2F; 将出现次数最多的数设为当前需要的灯, 然后删除所有有关的顶点res++;for (auto it &#x3D; mou.begin(); it !&#x3D; mou.end();)&#123;if (it[0].l &lt;&#x3D; max &amp;&amp; it[0].r &gt;&#x3D; max)it &#x3D; mou.erase(it);else++it;&#125;&#125;return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="E:/xiazai/img/14.png" alt="image-20230607105633359"></p><h3 id="算法讨论-4"><a href="#算法讨论-4" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>在本题的求解中通过求解每个顶点能被灯照到的左端点和右端点，然后运用贪心策略依次计算区间内每个数出现的次数，找出区间中出现次数最多的数，开相应序号的灯，从而求解开灯最少的数量，算法的时间复杂度是$O(m*n^2)$。</p><h2 id="搬桌子问题"><a href="#搬桌子问题" class="headerlink" title="搬桌子问题"></a>搬桌子问题</h2><h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><p>某教学大楼一层有n个教室，从左到右依次编号为1、2、…、n。现在要把一些课桌从某些教室搬到另外一些教室，每张桌子都是从编号较小的教室搬到编号较大的教室，每一趟，都是从左到右走，搬完一张课桌后，可以继续从当前位置或往右走搬另一张桌子。</p><p>输入数据：先输入n、m，然后紧接着m行输入这m张要搬课桌的起始教室和目标教室。</p><p>输出数据：最少需要跑几趟。</p><blockquote><p><strong>sample input</strong></p><pre class="line-numbers language-none"><code class="language-none">10  51  33  94  66  107  8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>sample output</strong></p><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="问题分析及算法实现"><a href="#问题分析及算法实现" class="headerlink" title="问题分析及算法实现"></a>问题分析及算法实现</h3><p>使用贪心策略，尽可能在一趟从左向右的移动中移动尽可能多的桌子。</p><p>将每一次移动桌子的起始教室和目的教室作为一个区间，对剩余卓子的区间进行比较</p><ul><li>如果存在剩余桌子的左界限大于上一张桌子的右界限，则可以进行下一张桌子的移动，进行上一步操作</li><li>反之，则结束这一趟移动，返回下一张桌子的左界限，重复上一个操作</li></ul><h3 id="算法设计与代码实现-8"><a href="#算法设计与代码实现-8" class="headerlink" title="算法设计与代码实现"></a>算法设计与代码实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Move &#123;int start;int end;bool use;bool operator&lt; (const Move&amp; W)const&#123;return start &lt; W.start;&#125;&#125;mov[N];int runnum(int n, int m)&#123;sort(mov, mov + m);&#x2F;&#x2F; 按照任务起始教室的编号排序int res &#x3D; 0, num &#x3D; 0, work &#x3D; 0; &#x2F;&#x2F; res为趟数while (work &lt; m)&#123;int num &#x3D; 0;&#x2F;&#x2F; num为当前到的教室编号for (int i &#x3D; 0; i &lt; m; i++)&#123;if (mov[i].use &#x3D;&#x3D; false &amp;&amp; mov[i].start &gt;&#x3D; num)&#123;mov[i].use &#x3D; true;work++;num &#x3D; mov[i].end;if (num &#x3D;&#x3D; n) break;&#125;&#125;res++;&#125;return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算法演示：</p><p><img src="E:/xiazai/img/15.png" alt="image-20230607111611389"></p><h3 id="算法讨论-5"><a href="#算法讨论-5" class="headerlink" title="算法讨论"></a>算法讨论</h3><p>本算法需要进行遍历m张桌子的移动区间，消耗的时间复杂度$O(m^2)$，贪心的策略可以让单趟遍历到的教室属于任务范围内的比例最大，从而使得整个算法性能达到最优。</p><h2 id="附录-2"><a href="#附录-2" class="headerlink" title="附录"></a>附录</h2><h3 id="背包问题源代码"><a href="#背包问题源代码" class="headerlink" title="背包问题源代码"></a>背包问题源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 20;char l[35] &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;struct Obj&#123;int id;&#x2F;&#x2F; 物品序号int w;&#x2F;&#x2F; w为各物品的重量int v;&#x2F;&#x2F; v为各物品的价值float unit;&#x2F;&#x2F; 单位重量的价值bool operator&lt; (const Obj&amp; W)const&#123;return unit &lt; W.unit;&#125;&#125;obj[N];void FindMaxValue(int n, int m)&#123;float value &#x3D; 0;sort(obj, obj + n);&#x2F;&#x2F; 按照单位重量的价值对物品进行升序排序for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i--)&#123;if (m - obj[i].w &gt;&#x3D; 0)&#x2F;&#x2F; 存在剩余容量&#123;m -&#x3D; obj[i].w;&#x2F;&#x2F; 去掉这部分的背包容量value +&#x3D; obj[i].v;&#x2F;&#x2F; 加入这部分的价值cout &lt;&lt; &quot;装入整个第&quot; &lt;&lt; l[obj[i].id] &lt;&lt; &quot;个物品&quot; &lt;&lt; endl;if (m &#x3D;&#x3D; 0) break;&#125;else&#123;float ratio &#x3D; (float) m &#x2F; obj[i].w;cout &lt;&lt; &quot;装入&quot; &lt;&lt; ratio * 100 &lt;&lt; &quot;%第&quot; &lt;&lt; l[obj[i].id] &lt;&lt; &quot;个物品&quot; &lt;&lt; endl;value +&#x3D; ratio * obj[i].v;break;&#125;&#125;cout &lt;&lt; &quot;装入背包中的物品的总价值最大为&quot; &lt;&lt; value &lt;&lt; endl;&#125;int main()&#123;int n, m;&#x2F;&#x2F; n为物品数, m为背包容量cout &lt;&lt; &quot;请输入物品数和背包容量:&quot;;cin &gt;&gt; n &gt;&gt; m;cout &lt;&lt; &quot;请输入各个物品的重量和价值:\n&quot;;for (int i &#x3D; 0; i &lt; n; i++)&#123;cin &gt;&gt; obj[i].w &gt;&gt; obj[i].v;obj[i].id &#x3D; i;obj[i].unit &#x3D; (float) obj[i].v &#x2F; obj[i].w;&#125;FindMaxValue(n, m);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="照亮的山景源代码"><a href="#照亮的山景源代码" class="headerlink" title="照亮的山景源代码"></a>照亮的山景源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;map&gt;#include&lt;vector&gt;using namespace std;const int N &#x3D; 20;int l[N], top[N];&#x2F;&#x2F; top[N] 表示山峰的编号struct Mou&#123;int x;int y;int l;&#x2F;&#x2F; l 为顶点能被灯照到的左端点int r;&#x2F;&#x2F; r 为顶点能被灯照到的右端点&#125;;vector&lt;Mou&gt; mou;void FindLightRegion(int m, int n, int t)&#123;for (int i &#x3D; 0; i &lt; m; i++)&#x2F;&#x2F; 遍历每个顶点&#123;for (int j &#x3D; 0; j &lt; n; j++)&#x2F;&#x2F; 遍历每个灯&#123;bool flag &#x3D; true;if (l[j] !&#x3D; mou[i].x)&#123;&#x2F;&#x2F; 计算直线的斜率k和截距bfloat k &#x3D; (float)(t - mou[i].y) &#x2F; (l[j] - mou[i].x);float b &#x3D; t - k * l[j];int s &#x3D; i;while ((l[j] &lt; mou[i].x &amp;&amp; --s &amp;&amp; l[j] &lt; mou[s].x)|| (l[j] &gt; mou[i].x &amp;&amp; ++s &amp;&amp; l[j] &gt; mou[s].x))&#x2F;&#x2F; 遍历灯到该点区间内的所有点&#123;if (k * mou[s].x + b &lt; mou[s].y)&#123;flag &#x3D; false;break;&#125;&#125;&#125;if (flag)&#123;if (mou[i].l &#x3D;&#x3D; -1)&#123;mou[i].l &#x3D; mou[i].r &#x3D; j;&#125;else&#123;mou[i].r++;&#125;&#125;else&#123;if (l[j] &gt; mou[i].x)break;&#x2F;&#x2F; 无需继续遍历&#125;&#125;&#125;&#125;int FindMinLight(int m, int n, int t)&#123;int res &#x3D; 0;FindLightRegion(m, n, t);&#x2F;&#x2F; 得到每个顶点被哪些灯照到, 记录到 l 和 r 中while (mou.size() !&#x3D; 0)&#123;&#x2F;&#x2F; 统计区间每个数出现的次数int max &#x3D; 0, cishu &#x3D; 0;for (auto t : mou)&#123;map&lt;int, int&gt; nums;for (int i &#x3D; t.l; i &lt;&#x3D; t.r; i++)&#123;nums[i]++;&#125;&#x2F;&#x2F; 找出区间中出现次数最多的数for (auto num : nums)&#123;if (num.second &gt; cishu)&#123;max &#x3D; num.first;cishu &#x3D; num.second;&#125;&#125;&#125;&#x2F;&#x2F; 将出现次数最多的数设为当前需要的灯, 然后删除所有有关的顶点res++;for (auto it &#x3D; mou.begin(); it !&#x3D; mou.end();)&#123;if (it[0].l &lt;&#x3D; max &amp;&amp; it[0].r &gt;&#x3D; max)it &#x3D; mou.erase(it);else++it;&#125;&#125;return res;&#125;int main()&#123;int m, n, t;&#x2F;&#x2F; m为山棱转折点的个数, n为灯泡个数, t为灯泡的高度cin &gt;&gt; m;for (int i &#x3D; 0; i &lt; m; i++)&#123;int x, y;cin &gt;&gt; x &gt;&gt; y;mou.push_back(&#123; x,y,-1,-1 &#125;);&#x2F;&#x2F; 转折点的水平坐标和垂直海拔高度, 并预初始化区间&#125;cin &gt;&gt; n &gt;&gt; t;for (int i &#x3D; 0; i &lt; n; i++)&#123;cin &gt;&gt; l[i];&#125;cout &lt;&lt; &quot;开灯最少的数量是&quot; &lt;&lt; FindMinLight(m, n, t);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搬桌子问题源代码"><a href="#搬桌子问题源代码" class="headerlink" title="搬桌子问题源代码"></a>搬桌子问题源代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 20;struct Move &#123;int start;int end;bool use;bool operator&lt; (const Move&amp; W)const&#123;return start &lt; W.start;&#125;&#125;mov[N];int runnum(int n, int m)&#123;sort(mov, mov + m);&#x2F;&#x2F; 按照任务起始教室的编号排序int res &#x3D; 0, num &#x3D; 0, work &#x3D; 0;&#x2F;&#x2F; res为趟数while (work &lt; m)&#123;int num &#x3D; 0;&#x2F;&#x2F; num为当前到的教室编号for (int i &#x3D; 0; i &lt; m; i++)&#123;if (mov[i].use &#x3D;&#x3D; false &amp;&amp; mov[i].start &gt;&#x3D; num)&#123;mov[i].use &#x3D; true;work++;num &#x3D; mov[i].end;if (num &#x3D;&#x3D; n) break;&#125;&#125;res++;&#125;return res;&#125;int main()&#123;int n, m;&#x2F;&#x2F; n为教室数, m为要搬运的工作数cin &gt;&gt; n &gt;&gt; m;for (int i &#x3D; 0; i &lt; m; i++)&#123;cin &gt;&gt; mov[i].start &gt;&gt; mov[i].end;mov[i].use &#x3D; false;&#125;cout &lt;&lt; runnum(n, m) &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 课内实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题七</title>
      <link href="/2023/07/10/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%83/"/>
      <url>/2023/07/10/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%83/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一-Voronoi图及相关算法的调研报告"><a href="#问题一-Voronoi图及相关算法的调研报告" class="headerlink" title="问题一 Voronoi图及相关算法的调研报告"></a>问题一 Voronoi图及相关算法的调研报告</h2><h3 id="Voronoi图的定义和相关性质"><a href="#Voronoi图的定义和相关性质" class="headerlink" title="Voronoi图的定义和相关性质"></a>Voronoi图的定义和相关性质</h3><p>Voronoi Diagram又称Thiessen Polygon，其数学描述如下：</p><p>设平面区域B上有一组离散点$\left(X_i, Y_j\right)(\mathrm{i}&#x3D;1,2,3, \ldots, \mathrm{k} ; \mathrm{j}&#x3D;1,2,3, \ldots, \mathrm{k}, \mathrm{k}$ 为离散点点数) ，将区域B用一组直线段分成k个互相邻接的多边形，使得：</p><ol><li>每个多边形内含有且仅含有一个离散点；</li><li>若区域B上任意一点$\left(x^1, y^1\right)$位于含离散点$\left(x_i, y_j\right)$的多边形内，不等式$\sqrt{\left(x^1-x_i\right)^2+\left(y^1-y_j\right)^2}&lt;\sqrt{\left(x^1-x_j\right)^2+\left(y^1-y_i\right)^2}$在$i\neq j$时恒成立；</li><li>若点$\left(x^1, y^1\right)$位于含离散点$\left(x_i, y_j\right)$的两个多边形的公共边上，则等式$\sqrt{\left(x^1-x_i\right)^2+\left(y^1-y_j\right)^2}&#x3D;\sqrt{\left(x^1-x_j\right)^2+\left(y^1-y_i\right)^2}$成立</li></ol><p>Voronoi图的特征如下：</p><ol><li>每个泰森多边形内仅含有一个离散点数据</li><li>泰森多边形的点到相应离散点的距离最近</li><li>位于泰森多边形边上的点到其两边的离散点的距离相等</li></ol><h3 id="Voronoi图生成算法"><a href="#Voronoi图生成算法" class="headerlink" title="Voronoi图生成算法"></a>Voronoi图生成算法</h3><h4 id="使用分治法"><a href="#使用分治法" class="headerlink" title="使用分治法"></a>使用分治法</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">VoronoiDiagram* partition(vector&lt;point&gt;&amp; origin,int left,int right)&#123;    if(right-left&lt;3)    &#123;        VoronoiDiagram* result&#x3D;smallVD(origin,left,right);        return result;    &#125;else&#123;        VoronoiDiagram* leftresult&#x3D;partition(origin,left,(left+right)&#x2F;2);        VoronoiDiagram* rightresult&#x3D;partition(origin,(left+right)&#x2F;2+1,right);        return mergeVD(leftresult,rightresult);    &#125;&#125;VoronoiDiagram* mergeVD(VoronoiDiagram* left,VoronoiDiagram* right)&#123;    VoronoiDiagram* result&#x3D;new VoronoiDiagram();    vector&lt;Devidechain&gt; devidechain;    left-&gt;convex hull&#x3D;getConvexHull(left-&gt;sites);        right-&gt;convex hull&#x3D;getConvexHull(right-&gt;sites);    tangentline(left-&gt;convex,right-&gt;convex hull,*leftMax,*leftMin,*rightMax,*rightMin);    bool tobottom&#x3D;false;    do    &#123;        chain&#x3D;bisector(leftMax,rightMax);        leftpoint&#x3D;IntersectionPoint(leftMax,chain);        rightpoint&#x3D;IntersectionPoint(rightMax,chain);        if(leftpoint.y&gt;rightpoint.y)&#123;            updateLeftSite();        &#125;else if(leftpoint.y&lt;rightpoint.y)&#123;            updateRightSite();        &#125;else&#123;            break;        &#125;    &#125;while(!tobottom);    connectchain();    result&#x3D;(*right)+(*left);    return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Lawson算法"><a href="#Lawson算法" class="headerlink" title="Lawson算法"></a>Lawson算法</h4><ol><li>建立一个大三角形，将所有数据点包围起来</li><li>向三角形中插入一点，将该点与三角形三个顶点项链，形成三个新的三角形</li><li>逐个对三角形进行空外接圆测试，用Lawson的局部优化过程进行优化（交换对角线保证Delaunay三角网的形成）</li></ol><h4 id="Bowyer-Watson算法"><a href="#Bowyer-Watson算法" class="headerlink" title="Bowyer-Watson算法"></a>Bowyer-Watson算法</h4><ol><li>构造一个超级三角形，包含所有散点，放入三角形链表</li><li>将散点依次插入，在三角形链表中找出外接圆包含插入点的三角形，删除三角形的公共边，将插入点同三角形的顶点全部连接起来，完成一个点在Delaunay三角形链表中的插入</li><li>对新三角形进行优化，将形成的三角形放入Delaunay三角形链表</li><li>循环2.至所有散点插入完毕</li></ol><h3 id="Voronoi图的应用"><a href="#Voronoi图的应用" class="headerlink" title="Voronoi图的应用"></a>Voronoi图的应用</h3><p>计算最近邻问题</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;CGAL&#x2F;Exact_predicates_exact_constructions_kernel.h&gt;#include &lt;CGAL&#x2F;Voronoi_diagram_2.h&gt;using namespace std;typedef CGAL::Exact_predicates_exact_constructions_kernel Kernel;typedef Kernel::Point_2 Point;typedef CGAL::Voronoi_diagram_2&lt;Kernel&gt; Voronoi_diagram;int main() &#123;  vector&lt;Point&gt; points &#x3D; &#123;&#123;1, 2&#125;, &#123;3, 4&#125;, &#123;5, 6&#125;, &#123;7, 8&#125;&#125;;  Voronoi_diagram voronoi;  voronoi.insert(points.begin(), points.end());  Point query_point(2, 3);  Voronoi_diagram::Locate_result locate_result &#x3D; voronoi.locate(query_point);  if (Voronoi_diagram::Face_handle fh &#x3D; boost::get&lt;Voronoi_diagram::Face_handle&gt;(&amp;*locate_result)) &#123;    Point closest_point &#x3D; fh-&gt;dual()-&gt;point();    cout &lt;&lt; &quot;Closest point: (&quot; &lt;&lt; closest_point.x() &lt;&lt; &quot;, &quot; &lt;&lt; closest_point.y() &lt;&lt; &quot;)&quot; &lt;&lt; endl;  &#125;  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了CGAL库（计算几何算法库）</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>前面已经学习在一维序列中某元素的查找算法，现若查找是在一个二维矩阵中进行，并且矩阵中行列均为升序排列，请给出相应查找算法并进行分析。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>采用逐行逐列的搜索方式，从矩阵的左下角开始搜索，直到找到元素或返回未找到</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>采用减治算法，也就是说采用二维的二分查找算法，找到矩阵的中心位置的元素，执行大小判断，然后在排除掉的剩余矩阵中继续进行查找</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;void searchMatrix1(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123;if (matrix.size() &#x3D;&#x3D; 0 || matrix[0].size() &#x3D;&#x3D; 0) &#123;cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;return;&#125;int r &#x3D; matrix.size();int c &#x3D; matrix[0].size();int x &#x3D; r - 1, y &#x3D; 0;while (x &gt;&#x3D; 0 &amp;&amp; y &lt; c) &#123;if (matrix[x][y] &#x3D;&#x3D; target) &#123;cout &lt;&lt; &quot;matrix[&quot; &lt;&lt; x+1 &lt;&lt; &quot;][&quot; &lt;&lt; y+1 &lt;&lt; &quot;]&quot; &lt;&lt; endl;return;&#125;else if (matrix[x][y] &lt; target) &#123;y++;&#125;else &#123;x--;&#125;&#125;cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;&#125;void search(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target, int x1, int x2, int y1, int y2) &#123;int mx &#x3D; x1 + (x2 - x1) &gt;&gt; 1;int my &#x3D; y1 + (y2 - y1) &gt;&gt; 1;if (matrix[mx][my] &#x3D;&#x3D; target) &#123;cout &lt;&lt; &quot;matrix[&quot; &lt;&lt; mx + 1 &lt;&lt; &quot;][&quot; &lt;&lt; my + 1 &lt;&lt; &quot;]&quot; &lt;&lt; endl;return;&#125;else if (matrix[mx][my] &lt; target) &#123;search(matrix, target, mx + 1, x2, y1, my);search(matrix, target, x1, mx, my + 1, y2);search(matrix, target, mx + 1, x2, my + 1, y2);&#125;else &#123;search(matrix, target, x1, mx - 1, my, y2);search(matrix, target, mx, x2, y1, my - 1);search(matrix, target, x1, mx - 1, y1, my - 1);&#125;cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;&#125;void searchMatrix2(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123;int r &#x3D; matrix.size();int c &#x3D; matrix[0].size();int x1 &#x3D; 0, y1 &#x3D; 0, x2 &#x3D; r - 1, y2 &#x3D; c - 1;search(matrix,target,x1,x2,y1,y2);&#125;int main() &#123;vector&lt;vector&lt;int&gt;&gt; matrix &#x3D; &#123; &#123;1,4,7,11,15&#125;,&#123;2,5,8,12,19&#125;,&#123;3,6,9,16,22&#125;,&#123;10,13,14,17,24&#125;,&#123;18,21,23,26,30&#125; &#125;;searchMatrix1(matrix, 9);searchMatrix2(matrix, 9);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><p><img src="/imgs/sikao7/1.png" alt="image-20230409165251520"></p><p>方法一的时间复杂度是$O(m+n)$，m、n分别为矩阵的行数和列数</p><p>方法二的时间复杂度是$O(mn^{log_43})$</p><p>针对方法二，还有一定的改进空间，如果该矩阵是方阵，则在方阵的主对角线先进行比较，找到大于target的主对角线上的元素，再对该元素所在行和列进行两次二分查找，则该算法的时间复杂度为$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Voronoi图 </tag>
            
            <tag> 二维矩阵查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题六</title>
      <link href="/2023/07/10/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%85%AD/"/>
      <url>/2023/07/10/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出不同策略返回一序列数中的众数（出现次数不小于序列长度的一半），并分析</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>最简单的算法是先对序列进行排序，然后选取$(n&#x2F;2)$和$(n&#x2F;2-1)$位置的元素，分别与序列初值和末尾进行比较，如果有其中一个元素相等，则该元素是众数</p><p>选取其中一个元素作为侯选数，众数是出现次数不小于序列长度的一半的数，根据鸽笼原理得到序列中的其他元素的个数少于众数的个数，依据上述原理，能够判断侯选数是否为众数，这就是<strong>摩尔投票算法</strong>的基本步骤。</p><p>使用$hashtable$来存储</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quickSort(int arr[], int left, int right) &#123;int i &#x3D; left, j &#x3D; right;int temp;int pivot &#x3D; arr[(left + right) &#x2F; 2];while (i &lt;&#x3D; j) &#123;while (arr[i] &lt; pivot)i++;while (arr[j] &gt; pivot)j--;if (i &lt;&#x3D; j) &#123;temp &#x3D; arr[i];arr[i] &#x3D; arr[j];arr[j] &#x3D; temp;i++;j--;&#125;&#125;if (left &lt; j)quickSort(arr, left, j);if (i &lt; right)quickSort(arr, i, right);&#125;int FindMajority1(int arr[], int n) &#123;quickSort(arr, 0, n - 1);if (n % 2 &#x3D;&#x3D; 0) &#123;if (arr[n &#x2F; 2] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2];&#125;if (arr[n &#x2F; 2 - 1] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2 - 1] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2 - 1];&#125;&#125;else &#123;if (arr[n &#x2F; 2] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2];&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="摩尔投票算法"><a href="#摩尔投票算法" class="headerlink" title="摩尔投票算法"></a>摩尔投票算法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int FindMajority1(int array[],int n) &#123;int count &#x3D; 0;int cur;for (int i &#x3D; 0; i &lt; n; i++) &#123;if (count &#x3D;&#x3D; 0) &#123;cur &#x3D; array[i];&#125;if (cur &#x3D;&#x3D; array[i]) &#123;count++;&#125;else &#123;count--;&#125;&#125;if (n !&#x3D; 2 &amp;&amp; cur &#x3D;&#x3D; array[n - 1]) &#123;return INT_MAX;&#125;else &#123;return cur;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hashtable-法"><a href="#hashtable-法" class="headerlink" title="$hashtable$法"></a>$hashtable$法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int FindMajority3(int arr[], int n) &#123;unordered_map&lt;int, int&gt; counts;int maxCount &#x3D; 0;int mode &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;counts[arr[i]]++;if (counts[arr[i]] &gt; maxCount) &#123;maxCount &#x3D; counts[arr[i]];mode &#x3D; arr[i];&#125;&#125;if (maxCount &gt;&#x3D; n &#x2F; 2) &#123;return mode;&#125;return INT_MAX;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;unordered_map&gt;using namespace std;void quickSort(int arr[], int left, int right) &#123;int i &#x3D; left, j &#x3D; right;int temp;int pivot &#x3D; arr[(left + right) &#x2F; 2];while (i &lt;&#x3D; j) &#123;while (arr[i] &lt; pivot)i++;while (arr[j] &gt; pivot)j--;if (i &lt;&#x3D; j) &#123;temp &#x3D; arr[i];arr[i] &#x3D; arr[j];arr[j] &#x3D; temp;i++;j--;&#125;&#125;if (left &lt; j)quickSort(arr, left, j);if (i &lt; right)quickSort(arr, i, right);&#125;int FindMajority1(int arr[], int n) &#123;quickSort(arr, 0, n - 1);if (n % 2 &#x3D;&#x3D; 0) &#123;if (arr[n &#x2F; 2] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2];&#125;if (arr[n &#x2F; 2 - 1] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2 - 1] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2 - 1];&#125;&#125;else &#123;if (arr[n &#x2F; 2] &#x3D;&#x3D; arr[0] || arr[n &#x2F; 2] &#x3D;&#x3D; arr[n - 1]) &#123;return arr[n &#x2F; 2];&#125;&#125;&#125;int FindMajority2(int array[],int n) &#123;int count &#x3D; 0;int cur &#x3D; INT_MAX;for (int i &#x3D; 0; i &lt; n; i++) &#123;if (count &#x3D;&#x3D; 0) &#123;cur &#x3D; array[i];&#125;if (cur &#x3D;&#x3D; array[i]) &#123;count++;&#125;else &#123;count--;&#125;&#125;if (n !&#x3D; 2 &amp;&amp; cur &#x3D;&#x3D; array[n - 1]) &#123;return INT_MAX;&#125;else &#123;return cur;&#125;&#125;int FindMajority3(int arr[], int n) &#123;unordered_map&lt;int, int&gt; counts;int maxCount &#x3D; 0;int mode &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;counts[arr[i]]++;if (counts[arr[i]] &gt; maxCount) &#123;maxCount &#x3D; counts[arr[i]];mode &#x3D; arr[i];&#125;&#125;if (maxCount &gt;&#x3D; n &#x2F; 2) &#123;return mode;&#125;return INT_MAX;&#125;int main() &#123;int array[] &#x3D; &#123; 1,1,1,2,3,4 &#125;;int n &#x3D; sizeof(array) &#x2F; sizeof(array[0]);cout &lt;&lt; FindMajority1(array, n) &lt;&lt; endl;cout &lt;&lt; FindMajority2(array, n) &lt;&lt; endl;cout &lt;&lt; FindMajority3(array, n) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><p><img src="/imgs/sikao6/1.png" alt="image-20230323094831456"></p><p><strong>针对方法一</strong>，使用快速排序，因此时间复杂度是$O(nlogn)$，空间复杂度是$O(logn)$；</p><p><strong>针对方法二</strong>，遍历一次数组，时间复杂度是$O(n)$，空间复杂度是$O(1)$；</p><p><strong>针对方法三</strong>，遍历一次数组，时间复杂度是$O(n)$，空间复杂度是$O(n)$。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出不同策略将偶数个元素形成的序列分成两个子序列$S_1$$、$$S_2$$，要求$$S_1$$、$$S_2$的和差值最大</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>方法一是使用动态规划算法，使用一个二维数组$dp[i][j]$表示前i个元素中是否存在一些元素的和为j，通过动态规划的方式逐步地求出$dp$数组地所有制，在dp数组中找到一个满足条件的最大的j。如果$dp[n][j]$的值为true，S1的和为j，S2为sum-j，两者差为$sum-2j$。</p><p>方法二是使用暴力枚举法，例举出两子序列分别进行求和，比较不同子序列之差</p><h3 id="算法实现与分析-1"><a href="#算法实现与分析-1" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;using namespace std;vector&lt;vector&lt;int&gt;&gt; MaxDifference(vector&lt;int&gt; nums) &#123;int n &#x3D; nums.size();int sum &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;sum +&#x3D; nums[i];&#125;vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;((sum &gt;&gt; 1) + 1, 0));dp[0][0] &#x3D; 1;for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;for (int j &#x3D; 0; j &lt;&#x3D; (sum &gt;&gt; 1); j++) &#123;dp[i][j] &#x3D; dp[i - 1][j];if (j &gt;&#x3D; nums[i - 1]) &#123;dp[i][j] |&#x3D; dp[i - 1][j - nums[i - 1]];&#125;&#125;&#125;int maxdiff &#x3D; 0;int index &#x3D; 0;for (int j &#x3D; (sum &gt;&gt; 1); j &gt;&#x3D; 0; j--) &#123;if (dp[n][j]) &#123;maxdiff &#x3D; sum - 2 * j;index &#x3D; j;break;&#125;&#125;vector&lt;int&gt; S1, S2;int i &#x3D; n;int j &#x3D; index;while (i &gt; 0 &amp;&amp; j &gt; 0) &#123;if (dp[i - 1][j]) &#123;i--;&#125;else &#123;S1.push_back(nums[i - 1]);j -&#x3D; nums[i - 1];i--;&#125;&#125;for (int i &#x3D; 0; i &lt; n; i++) &#123;if (find(S1.begin(), S1.end(), nums[i]) &#x3D;&#x3D; S1.end()) &#123;S2.push_back(nums[i]);&#125;&#125;return &#123; S1,S2 &#125;;&#125;int main() &#123;vector&lt;int&gt; nums &#x3D; &#123; 1,6,5,11,3,2 &#125;;vector&lt;int&gt; S1, S2;int n &#x3D; nums.size();vector&lt;vector&lt;int&gt;&gt; result &#x3D; MaxDifference(nums);S1 &#x3D; result[0];S2 &#x3D; result[1];for (int i &#x3D; 1; i &lt; (n &gt;&gt; 1); i++) &#123;cout &lt;&lt; S1[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;for (int i &#x3D; 1; i &lt; (n &gt;&gt; 1); i++) &#123;cout &lt;&lt; S2[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该算法的时间复杂度是$O(n^2)$，针对元素较多的序列处理能力强</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;vector&lt;int&gt; findMaxDiffSubsequence(const vector&lt;int&gt;&amp; nums) &#123;    int n &#x3D; nums.size();    int maxDiff &#x3D; INT_MIN;    vector&lt;int&gt; maxS1, maxS2;    for (int i &#x3D; 0; i &lt; (1 &lt;&lt; n); i++) &#123;        int s1sum &#x3D; 0, s2sum &#x3D; 0;        vector&lt;int&gt; s1, s2;        for (int j &#x3D; 0; j &lt; n; j++) &#123;            if (i &amp; (1 &lt;&lt; j)) &#123;                s1.push_back(nums[j]);                s1sum +&#x3D; nums[j];            &#125; else &#123;                s2.push_back(nums[j]);                s2sum +&#x3D; nums[j];            &#125;        &#125;        int diff &#x3D; s1sum - s2sum;        if (diff &gt; maxDiff) &#123;            maxDiff &#x3D; diff;            maxS1 &#x3D; s1;            maxS2 &#x3D; s2;        &#125;    &#125;    return maxDiff &gt; 0 ? maxS1 : maxS2;&#125;int main() &#123;    vector&lt;int&gt; nums &#x3D; &#123;1, 2, 3, 4, 5, 6&#125;;    vector&lt;int&gt; subsequence &#x3D; findMaxDiffSubsequence(nums);    for (int i &#x3D; 0; i &lt; subsequence.size(); i++) &#123;        cout &lt;&lt; subsequence[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暴力枚举法的时间复杂度是$O(n2^n)$，处理方法简单，能够保证结果的正确性，但是时间复杂度很高，针对长序列不适用</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 摩尔投票算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题五</title>
      <link href="/2023/07/07/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%BA%94/"/>
      <url>/2023/07/07/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在计算机科学与社会生活中，经常涉及到要求前K个元素即top-k的问题，请给出不同策解决这一问题，并对比分析</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>本题假设取最大的k个元素</p><p>首先最直接的想法就是先进行排序，再取前k个元素，选取快速排序作为本题的排序算法，时间复杂度是$O(nlogn)$，然后选择前k个元素，总时间复杂度是$O(nlogn)$，以下是快速排序的实现。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void quickSort(int arr[], int left, int right) &#123;    int i &#x3D; left, j &#x3D; right;    int tmp;    int pivot &#x3D; arr[(left + right) &gt;&gt; 1];    while (i &lt;&#x3D; j) &#123;        while (arr[i] &gt; pivot) &#123;            i++;        &#125;                    while (arr[j] &lt; pivot) &#123;            j--;        &#125;        if (i &lt;&#x3D; j) &#123;            tmp &#x3D; arr[i];            arr[i] &#x3D; arr[j];            arr[j] &#x3D; tmp;            i++;            j--;        &#125;    &#125;;        if (left &lt; j) &#123;        quickSort(arr, left, j);    &#125;    if (i &lt; right) &#123;        quickSort(arr, i, right);    &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二采用堆的数据结构，采用先进先出的策略，建立一个最小堆存取最大的k个元素，对整个序列进行遍历，将序列中的前k个元素压入堆中，从第k+1个元素开始进行队首元素进行判定，若当前元素大于队首元素，将队首弹出，将当前元素加入队列中；否则不进行任何操作。遍历结束后，反转顺序，打印输出。以下是堆排序的实现</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void MaxKElements(int arr[], int n, int k) &#123;    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; MinHeap;    for (int i &#x3D; 0; i &lt; n; i++) &#123;        if (i &lt; k) &#123;            MinHeap.push(arr[i]);        &#125;        else &#123;            if (arr[i] &gt; MinHeap.top()) &#123;                MinHeap.pop();                MinHeap.push(arr[i]);            &#125;        &#125;    &#125;    vector&lt;int&gt; res;    while (!MinHeap.empty()) &#123;        res.push_back(MinHeap.top());        MinHeap.pop();    &#125;    reverse(res.begin(), res.end());    for (int i &#x3D; 0; i &lt; k; i++) &#123;        cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法三是对方法一的改进，将快速排序改成快速选择算法，找到第k大的元素，然后对整个序列进行遍历，筛选出大于第k大元素的元素组成数组，到这里为止，时间复杂度是$O(n)$，但是还要进行降序输出，因此进行排序，在下列实现中，调用了sort函数，但是排序消耗的时间是$O(klogk)$。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int QuickSelect(vector&lt;int&gt;&amp; nums, int left, int right, int k) &#123;    int pivot &#x3D; nums[left];    int i &#x3D; left, j &#x3D; right;    while (i &lt; j) &#123;        while (i &lt; j &amp;&amp; nums[j] &lt;&#x3D; pivot) &#123;            j--;        &#125;        nums[i] &#x3D; nums[j];        while (i &lt; j &amp;&amp; nums[i] &gt;&#x3D; pivot) &#123;            i++;        &#125;        nums[j] &#x3D; nums[i];    &#125;    nums[i] &#x3D; pivot;    if (i &#x3D;&#x3D; k - 1) &#123;        return pivot;    &#125;    else if (i &lt; k - 1) &#123;        return QuickSelect(nums, i + 1, right, k);    &#125;    else &#123;        return QuickSelect(nums, left, i - 1, k);    &#125;&#125;void MaxKElements(vector&lt;int&gt;&amp; nums, int k) &#123;    int kth &#x3D; QuickSelect(nums, 0, nums.size() - 1, k);    vector&lt;int&gt; res;    for (int i &#x3D; 0; i &lt; nums.size(); ++i) &#123;        if (nums[i] &gt;&#x3D; kth) &#123;            res.push_back(nums[i]);        &#125;    &#125;    sort(res.begin(), res.end(), greater&lt;int&gt;()); &#x2F;&#x2F; 降序排序    res.resize(k); &#x2F;&#x2F; 取前k个元素    for (int i &#x3D; 0; i &lt; k; i++) &#123;        cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;vector&gt;using namespace std;void QuickSort(int arr[], int left, int right) &#123;    int i &#x3D; left, j &#x3D; right;    int tmp;    int pivot &#x3D; arr[(left + right) &gt;&gt; 1];    while (i &lt;&#x3D; j) &#123;        while (arr[i] &gt; pivot) &#123;            i++;        &#125;                    while (arr[j] &lt; pivot) &#123;            j--;        &#125;        if (i &lt;&#x3D; j) &#123;            tmp &#x3D; arr[i];            arr[i] &#x3D; arr[j];            arr[j] &#x3D; tmp;            i++;            j--;        &#125;    &#125;;        if (left &lt; j) &#123;        QuickSort(arr, left, j);    &#125;    if (i &lt; right) &#123;        QuickSort(arr, i, right);    &#125;        &#125;void MaxKElements(int arr[], int n, int k) &#123;    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; MinHeap;    for (int i &#x3D; 0; i &lt; n; i++) &#123;        if (i &lt; k) &#123;            MinHeap.push(arr[i]);        &#125;        else &#123;            if (arr[i] &gt; MinHeap.top()) &#123;                MinHeap.pop();                MinHeap.push(arr[i]);            &#125;        &#125;    &#125;    vector&lt;int&gt; res;    while (!MinHeap.empty()) &#123;        res.push_back(MinHeap.top());        MinHeap.pop();    &#125;    reverse(res.begin(), res.end());    for (int i &#x3D; 0; i &lt; k; i++) &#123;        cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int QuickSelect(vector&lt;int&gt;&amp; nums, int left, int right, int k) &#123;    int pivot &#x3D; nums[left];    int i &#x3D; left, j &#x3D; right;    while (i &lt; j) &#123;        while (i &lt; j &amp;&amp; nums[j] &lt;&#x3D; pivot) &#123;            j--;        &#125;        nums[i] &#x3D; nums[j];        while (i &lt; j &amp;&amp; nums[i] &gt;&#x3D; pivot) &#123;            i++;        &#125;        nums[j] &#x3D; nums[i];    &#125;    nums[i] &#x3D; pivot;    if (i &#x3D;&#x3D; k - 1) &#123;        return pivot;    &#125;    else if (i &lt; k - 1) &#123;        return QuickSelect(nums, i + 1, right, k);    &#125;    else &#123;        return QuickSelect(nums, left, i - 1, k);    &#125;&#125;void MaxKElements(vector&lt;int&gt;&amp; nums, int k) &#123;    int kth &#x3D; QuickSelect(nums, 0, nums.size() - 1, k);    vector&lt;int&gt; res;    for (int i &#x3D; 0; i &lt; nums.size(); ++i) &#123;        if (nums[i] &gt;&#x3D; kth) &#123;            res.push_back(nums[i]);        &#125;    &#125;    sort(res.begin(), res.end(), greater&lt;int&gt;()); &#x2F;&#x2F; 降序排序    res.resize(k); &#x2F;&#x2F; 取前k个元素    for (int i &#x3D; 0; i &lt; k; i++) &#123;        cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;int main() &#123;    int arr[] &#x3D; &#123; 5, 3, 8, 4, 2 &#125;;    int n &#x3D; sizeof(arr) &#x2F; sizeof(arr[0]);    QuickSort(arr, 0, n - 1);    cout &lt;&lt; &quot;前2个元素是&quot;;    for (int i &#x3D; 0; i &lt; 2; i++) &#123;        cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    int arr1[] &#x3D; &#123; 5, 3, 8, 4, 2 &#125;;    MaxKElements(arr1, 5, 2);    vector&lt;int&gt; arr2 &#x3D; &#123; 5, 3, 8, 4, 2 &#125;;    MaxKElements(arr2, 2);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><p><img src="/imgs/sikao5/1.png" alt="image-20230319213101105"></p><p>方法一的时间复杂度是$O(nlogn)$</p><p>方法二的时间复杂度是$O(nlogk)$</p><p>方法三的时间复杂度是$O(n+klogk)$</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>请用递归方式实现堆排序，并进行性能分析</p><h3 id="算法实现与分析-1"><a href="#算法实现与分析-1" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;void heapify(vector&lt;int&gt;&amp; arr, int n, int i) &#123;int largest &#x3D; i;int l &#x3D; 2 * i + 1;int r &#x3D; 2 * i + 2;if (l&lt;n &amp;&amp; arr[l]&gt;arr[largest]) &#123;largest &#x3D; l;&#125;if (r&lt;n &amp;&amp; arr[r]&gt;arr[largest]) &#123;largest &#x3D; r;&#125;if (largest !&#x3D; i) &#123;int temp &#x3D; arr[i];arr[i] &#x3D; arr[largest];arr[largest] &#x3D; temp;heapify(arr, n, largest);&#125;&#125;void HeapSort(vector&lt;int&gt;&amp; arr, int n) &#123;for (int i &#x3D; (n &gt;&gt; 1) - 1; i &gt;&#x3D; 0; i--) &#123;heapify(arr, n, i);&#125;for (int i &#x3D; n - 1; i &gt;&#x3D; 0; i--) &#123;int temp &#x3D; arr[i];arr[i] &#x3D; arr[0];arr[0] &#x3D; temp;heapify(arr, i, 0);&#125;&#125;int main() &#123;vector&lt;int&gt; arr &#x3D; &#123; 5,3,8,4,2 &#125;;HeapSort(arr, 5);for (int i &#x3D; 0; i &lt; 5; i++) &#123;cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><p><img src="/imgs/sikao5/2.png" alt="image-20230319222526781"></p><p>对于递归方式的堆排序，每次对子树进行heapify操作的时间复杂度是$O(logn)$，对于每一棵包含n个结点的完全二叉树，高度为$logn$，因此堆排序的时间复杂度是$O(nlogn)$。</p><p>递归方式的堆排序使用了函数递归调用，每次递归都会将一部分数据压入栈中，栈的深度等于堆的高度，最坏情况下堆的高度是$logn$，空间复杂度是$O(logn)$。</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> top-k </tag>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据处理</title>
      <link href="/2023/07/06/Python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2023/07/06/Python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python">_hello<span class="token operator">=</span><span class="token string">"helloworld"</span>score<span class="token operator">=</span><span class="token number">0</span>y<span class="token operator">=</span><span class="token number">20</span>y<span class="token operator">=</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>python是动态类型语言，不检查数据类型<br>可以接收其他类型的数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>python支持链式赋值语句</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>10</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token comment">#file:chapter4/4.4/hello.py</span>_hello<span class="token operator">=</span><span class="token string">"helloworld"</span>score_for_student<span class="token operator">=</span><span class="token number">10.0</span> <span class="token comment">#没有错误发生</span>y<span class="token operator">=</span><span class="token number">20</span>name1<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">;</span>name2<span class="token operator">=</span><span class="token string">"Tony"</span><span class="token comment">#链式赋值语句</span>a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">if</span> y<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>score_for_student<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2010.0helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token comment">#file:chapter4/4.4/hello.py</span>_hello<span class="token operator">=</span><span class="token string">"helloworld"</span>score_for_student<span class="token operator">=</span><span class="token number">10.0</span> <span class="token comment">#没有错误发生</span>y<span class="token operator">=</span><span class="token number">20</span>name1<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">;</span>name2<span class="token operator">=</span><span class="token string">"Tony"</span><span class="token comment">#链式赋值语句</span>a<span class="token operator">=</span>b<span class="token operator">=</span>c<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">if</span> y<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>score_for_student<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2010.0helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## coding=utf-8</span><span class="token keyword">import</span> module1<span class="token keyword">from</span> module1 <span class="token keyword">import</span> zy<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>20True10.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## coding=utf-8</span><span class="token keyword">import</span> module1<span class="token keyword">from</span> module1 <span class="token keyword">import</span> zy<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>20True10.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> com<span class="token punctuation">.</span>pkg2<span class="token punctuation">.</span>hello <span class="token keyword">as</span> module1<span class="token keyword">from</span> com<span class="token punctuation">.</span>pkg2<span class="token punctuation">.</span>hello <span class="token keyword">import</span> z <span class="token keyword">as</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>y<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10.120True10.0</code></pre><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>包名： 全部小写字母，中间可以由的隔开，不推荐使用下画线。作为命名空间，包名野窍应该具有唯一性，推荐采用公司或组织域名的倒置，如com.apple . quicktime . v2 。</li><li>模块名： 全部小写字母，如果是多个单词构成， 可以用下画线隔开， 如dummy_threading 。</li><li>类名： 采用大驼峰法命名③，如SplitViewController 。</li><li>异常名：异常属于类， 命名同类命名，但应该使用Error 作为后缀。如FileNotFoundError 。</li><li>变量名： 全部小写字母，如果由多个单词构成，可以用下画线隔开。如果变量应用于模块或函数内部，则变量名可以由单下画线开头： 变量类内部私有使用变量名可以双下画线开头。不要命名双下画线开头和结尾的变量，这是Python 保留的。另外，避免使用小写L 、大写0 和大写I 作为变量名。</li><li>函数名和方法名： 命名同变量命名，如balance_account 、<em>push_cm</em> exit 。</li><li>常量名： 全部大写字母，如果是由多个单词构成，可以用下画线隔开，如YEAR 和WEEK OF MONTH 。</li></ul><h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><p>单行注释、多行注释和文档注释</p><h4 id="文件注释"><a href="#文件注释" class="headerlink" title="文件注释"></a>文件注释</h4><p>文件注释就是在每一个文件开头添加注释，采用多行注释。文件注释通常包括如下信息：版权信息、文件名、所在模块、作者信息、历史版本信息、文件内容和作用等。</p><pre class="line-numbers language-none"><code class="language-none">##版权所有2015 北京智捷东方科技有限公司#许可信息查看LICENSE . txt 文件#描述：## 实现日期基本功能#历史版本：## 2015 7 22 ：创建关东升## 2015 - 8 - 20 ： 添加socket 库## 2015 - 8 - 22 ：添加math 库#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述注释只是提供了版权信息、文件内容和历史版本信息等，文件注释要根据实际情况包<br>括内容。</p><h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><h4 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h4><h4 id="使用todo注释"><a href="#使用todo注释" class="headerlink" title="使用todo注释"></a>使用todo注释</h4><h3 id="导入规范"><a href="#导入规范" class="headerlink" title="导入规范"></a>导入规范</h3><p>导入语句应该按照从通用到特殊的顺序分组， 顺序是： 标准库→ 第三方库→ 自己模块。每一组之间有一个空行，而且组中模块是按照英文字母顺序排序的。</p><pre class="line-numbers language-none"><code class="language-none">import ioimport osimport pkgutilimport platformimport reimport sysimport timefrom html import unescapefrom com.pkgl import example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><ul><li>import 语句块前后保留两个空行</li><li>函数声明之前保留两个空行</li><li>类声明之前保留两个空行</li><li>方法声明之前保留一个空行</li><li>两个逻辑代码块之间应该保留一个空行</li></ul><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><ul><li>赋值符号“＝”前后各有一个空格</li><li>所有的二元运算符都应该使用空格与操作数分开</li><li>一元运算符：算法运算符取反“”和运算符取反“ ～ ”</li><li>括号内不要有空格， Python 中括号包括小括号“（）飞中括号“ ［］”和大括号“｛｝”</li><li>不要在逗号、分号、冒号前面有空格，而是要在它们后面有一个空格，除非该符号已经是行尾了</li><li>参数列表、索引或切片的左括号前不应有空格</li></ul><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>4 个空格常被作为缩进排版的一个级别。虽然在开发时程序员可以使用制表符进行缩进，而默认情况下一个制表符等于8 个空格，但是不同的IDE 工具中一个制表符与空格对应个数会有不同，所以不要使用制表符缩进。</p><h4 id="断行"><a href="#断行" class="headerlink" title="断行"></a>断行</h4><p>一行代码中最多79 个字符， 对于文档注释和多行注释时一行最多72 个字符，但是如果注释中包含URL 地址可以不受这个限制。否则，如果超过则需断行，可以依据下面的一般规范断开。</p><ul><li>在逗号后面断开</li><li>在运算符前面断开</li><li>尽量不要使用续行符“ ＼ ” ， 当有括号（包括大括号、中括号和小括号） 则在括号中断开， 这样可以不使用续行符</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>28</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0b11100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>28</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0o34</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>28</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0x1c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>28</code></pre><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">3.36e2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>336.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.56e-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.0156</code></pre><h4 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(1+2j)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(2+4j)</code></pre><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><h3 id="数字类型相互转换"><a href="#数字类型相互转换" class="headerlink" title="数字类型相互转换"></a>数字类型相互转换</h3><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>float</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.0</code></pre><h4 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">19.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>19</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>5.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.0</code></pre><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><h4 id="字符串表示方式"><a href="#字符串表示方式" class="headerlink" title="字符串表示方式"></a>字符串表示方式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"Hello World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'\u0048\u0065\u006c\u006c\u006f\u0020\u0057\u006f\u0072\u006c\u0064'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"\u0048\u0065\u006c\u006c\u006f\u0020\u0057\u006f\u0072\u006c\u0064"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><ul><li>转义符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'Hello\n World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'Hello\t World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Hello World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'Hello \'World'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Hello &#39;World</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"hello'world"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello&#39;world</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'hello"world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello&quot;world</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'hello\\world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello\world</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'hello\u005c world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello\ world</code></pre><ul><li>原始字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'hello\tworld'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">r'hello\tworld'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>hello\tworld</code></pre><ul><li>长字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token triple-quoted-string string">'''helloworld'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>helloworld</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token triple-quoted-string string">'''hello\tworld'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>hello    world</code></pre><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">name<span class="token operator">=</span><span class="token string">'Mary'</span>age<span class="token operator">=</span><span class="token number">18</span>s<span class="token operator">=</span><span class="token string">'她的年龄是&#123;0&#125;岁。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>她的年龄是18岁。</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'&#123;0&#125;芳龄是&#123;1&#125;岁'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Mary芳龄是18岁</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'&#123;1&#125;芳龄是&#123;0&#125;岁'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Mary芳龄是18岁</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'&#123;n&#125;芳龄是&#123;a&#125;岁'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token operator">=</span>name<span class="token punctuation">,</span>a<span class="token operator">=</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Mary芳龄是18岁</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">name<span class="token operator">=</span><span class="token string">'Mary'</span>age<span class="token operator">=</span><span class="token number">18</span>money<span class="token operator">=</span><span class="token number">1234.5678</span><span class="token string">"&#123;0&#125;芳龄是&#123;1:d&#125;岁。"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#39;Mary芳龄是18岁。&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;1&#125;芳龄是&#123;0:5d&#125;岁。"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary芳龄是   18岁。&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:f&#125;元"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1234.567800元&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:.2f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1234.57&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:10.2f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是   1234.57&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:g&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1234.57&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:G&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1234.57&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:e&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1.234568e+03&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"&#123;0&#125;今天收入是&#123;1:E&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;Mary今天收入是1.234568E+03&#39;</code></pre><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token operator">=</span><span class="token string">"there is a string accessing example"</span><span class="token builtin">len</span><span class="token punctuation">(</span>source_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>35</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;g&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>13</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>14</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>24</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>21</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>14</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>24</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>24</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">source_str<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ingg'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>-1</code></pre><h5 id="字符串与数字相互转换"><a href="#字符串与数字相互转换" class="headerlink" title="字符串与数字相互转换"></a>字符串与数字相互转换</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>9</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'9.6'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [24], in &lt;cell line: 1&gt;()----&gt; 1 int(&#39;9.6&#39;)ValueError: invalid literal for int() with base 10: &#39;9.6&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'9.6'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>9.6</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'AB'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [26], in &lt;cell line: 1&gt;()----&gt; 1 int(&#39;AB&#39;)ValueError: invalid literal for int() with base 10: &#39;AB&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;3.24&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;True&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;[]&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;[1, 2, 3]&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;34&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'&#123;0:2f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;3.240000&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'&#123;:.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;3.2&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'&#123;:10.1f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;       3.2&#39;</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">12</span><span class="token operator">-</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>-12</code></pre><h4 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>6</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.5</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">3</span><span class="token operator">%</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">3</span><span class="token operator">//</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token number">3</span><span class="token operator">//</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>-2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">10</span><span class="token operator">**</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>100</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">10.22</span><span class="token operator">+</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>20.22</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">10.0</span><span class="token operator">+</span><span class="token boolean">True</span><span class="token operator">+</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>13.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'hello'</span><span class="token operator">+</span><span class="token string">'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;helloworld&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'hello'</span><span class="token operator">+</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Input In [47], in &lt;cell line: 1&gt;()----&gt; 1 &#39;hello&#39;+2TypeError: can only concatenate str (not &quot;int&quot;) to str</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'hello'</span><span class="token operator">*</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hellohello&#39;</code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span>b<span class="token operator">=</span><span class="token number">2</span>a<span class="token operator">></span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">&lt;</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">>=</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">&lt;=</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.0</span><span class="token operator">!=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'hello'</span>b<span class="token operator">=</span><span class="token string">'hello'</span>a<span class="token operator">==</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'World'</span>a<span class="token operator">></span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">&lt;</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>a<span class="token operator">==</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">&lt;</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>a<span class="token operator">==</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>True</code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token number">0</span>a<span class="token operator">=</span><span class="token number">10</span>b<span class="token operator">=</span><span class="token number">9</span><span class="token keyword">if</span> a<span class="token operator">></span>b <span class="token keyword">or</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"或运算为真"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"或运算为假"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token operator">&lt;</span>b <span class="token keyword">and</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"与运算为真"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"与运算为假"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--f2--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token operator">==</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>或运算为真与运算为假True</code></pre><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">0b10110010</span>b<span class="token operator">=</span><span class="token number">0b01011110</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a|b=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a&amp;b=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a^b=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"~a=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a>>2=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a&lt;&lt;2=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0b1100</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c>>2=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c&lt;&lt;2=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>c<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a|b=254a&amp;b=18a^b=236~a=-179a&gt;&gt;2=44a&lt;&lt;2=712c&gt;&gt;2=-3c&lt;&lt;2=-48</code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span>b<span class="token operator">=</span><span class="token number">2</span>a<span class="token operator">+=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">+=</span>b<span class="token operator">+</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">-=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">*=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">/=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">%=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token number">0b10110010</span>b<span class="token operator">=</span><span class="token number">0b01011110</span>a<span class="token operator">|</span><span class="token operator">=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token operator">^</span><span class="token operator">=</span>b<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>386126.00.0254160</code></pre><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><h4 id="同一性测试运算符"><a href="#同一性测试运算符" class="headerlink" title="同一性测试运算符"></a>同一性测试运算符</h4><h4 id="成员测试运算符"><a href="#成员测试运算符" class="headerlink" title="成员测试运算符"></a>成员测试运算符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        p1<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>p2<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token keyword">is</span> p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">!=</span>p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token keyword">is</span> <span class="token keyword">not</span> p2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseFalseTrueTrue</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>name<span class="token operator">==</span>other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>age<span class="token operator">==</span>other<span class="token punctuation">.</span>age<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>          p1<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>p2<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token keyword">is</span> p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">!=</span>p2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1 <span class="token keyword">is</span> <span class="token keyword">not</span> p2<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>TrueFalseFalseTrue</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">string_a<span class="token operator">=</span><span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e'</span> <span class="token keyword">in</span> string_a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ell'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> string_a<span class="token punctuation">)</span>list_a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">in</span> list_a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> list_a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>TrueFalseTrueFalse</code></pre><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score<span class="token operator">=</span><span class="token number">5</span><span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">85</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'perfect'</span><span class="token punctuation">)</span><span class="token keyword">if</span> score<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hard'</span><span class="token punctuation">)</span><span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">and</span> score<span class="token operator">&lt;</span><span class="token number">85</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'justsoso'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>hard</code></pre><h4 id="if-else结构"><a href="#if-else结构" class="headerlink" title="if-else结构"></a>if-else结构</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score<span class="token operator">=</span><span class="token number">75</span><span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'justsoso'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'perfect'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>justsoso</code></pre><h4 id="elif结构"><a href="#elif结构" class="headerlink" title="elif结构"></a>elif结构</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score<span class="token operator">=</span><span class="token number">80</span><span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'A'</span><span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">80</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'B'</span><span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">70</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'C'</span><span class="token keyword">elif</span> score<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'D'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    grade<span class="token operator">=</span><span class="token string">'F'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>B</code></pre><h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">score<span class="token operator">=</span><span class="token number">85</span>result<span class="token operator">=</span><span class="token string">'justsoso'</span> <span class="token keyword">if</span> score<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">else</span> <span class="token string">'hard'</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>justsoso</code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">*</span>i<span class="token operator">&lt;</span><span class="token number">100_000</span><span class="token punctuation">:</span>    i<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>317100489</code></pre><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----范围----'</span><span class="token punctuation">)</span><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;*&#123;0&#125;=&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num<span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----字符串----'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token string">"hello"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----整数列表----'</span><span class="token punctuation">)</span>numbers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----范围----1*1=12*2=43*3=94*4=165*5=256*6=367*7=498*8=649*9=81----字符串----hello----整数列表----4332535475710</code></pre><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> item<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>012</code></pre><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> item<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>012456789</code></pre><h4 id="while和for中的else语句"><a href="#while和for中的else语句" class="headerlink" title="while和for中的else语句"></a>while和for中的else语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">*</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">:</span>    i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;*&#123;0&#125;=&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num<span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"whileover"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> item<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'forover'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>9*9=819*9=819*9=819*9=81whileover----------012</code></pre><h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><p>range()函数语法：<br>$$<br>range([start,]stop[,step])<br>$$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>13579------------1-2-5-8</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><h5 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;h&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;e&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;l&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;l&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;o&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)Input In [7], in &lt;cell line: 1&gt;()----&gt; 1 a[5]IndexError: string index out of range</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;o&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">min</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;e&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>5</code></pre><h5 id="序列的-和"><a href="#序列的-和" class="headerlink" title="序列的+和*"></a>序列的+和*</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">*</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hellohellohello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>hello</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">+=</span><span class="token string">' '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">+=</span><span class="token string">'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>hello world</code></pre><h5 id="序列分片"><a href="#序列分片" class="headerlink" title="序列分片"></a>序列分片</h5><ul><li>[start:end]：start是开始索引，end是结束索引</li><li>[start:end:step]：start是开始索引，end是结束索引，step是步长，可取正负整数<br>实际切下分片为：[start,end)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;el&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hel&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hel&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;ello worl&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;ello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;el&#39;</code></pre><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">21</span>，<span class="token number">32</span>，<span class="token number">43</span>，<span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>  Input In [26]    21，32，43，45      ^SyntaxError: invalid character &#39;，&#39; (U+FF0C)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(21, 32, 43, 45)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(21, 32, 43, 45)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>hello world</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(21, 32, 43, 45)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(&#39;hello&#39;, &#39;world&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(&#39;hello&#39;, &#39;world&#39;, 1, 2, 3)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(21, 32, 43, 45)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>int</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tuple</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>tuple</code></pre><h4 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(&#39;world&#39;, 1)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(1, 2, 3)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(&#39;hello&#39;, &#39;world&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3<span class="token operator">=</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span><span class="token operator">*</span>n<span class="token operator">=</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;world&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[1, 2, 3]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span class="token punctuation">,</span>_<span class="token punctuation">,</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>_<span class="token operator">=</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;hello&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><h4 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---------------------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125;-&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>21324345---------------------0-211-322-433-45</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表创建"><a href="#列表创建" class="headerlink" title="列表创建"></a>列表创建</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[20, 10, 50, 40, 30]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;hello&#39;, &#39;world&#39;, 1, 2, 3]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>list</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>list</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[20, 10, 50, 40, 30]</code></pre><h4 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h4><pre class="line-numbers language-none"><code class="language-none">list.append(x)list.extend(t)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'董六'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;董六&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">+=</span><span class="token punctuation">[</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token string">'关羽'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;董六&#39;, &#39;刘备&#39;, &#39;关羽&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'张飞'</span><span class="token punctuation">,</span><span class="token string">'赵云'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;张三&#39;, &#39;李四&#39;, &#39;王五&#39;, &#39;董六&#39;, &#39;刘备&#39;, &#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;]</code></pre><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><pre class="line-numbers language-none"><code class="language-none">list.insert(i,x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'liubei'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;liubei&#39;, &#39;wangwu&#39;]</code></pre><h4 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'zhugeliang'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhugeliang&#39;, &#39;lisi&#39;, &#39;wangwu&#39;]</code></pre><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><h5 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h5><p>如果找到多个，只会删除第一个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhangsan&#39;, &#39;lisi&#39;]</code></pre><h5 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h5><pre class="line-numbers language-none"><code class="language-none">item&#x3D;list.pop([i])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>i是指定删除元素的索引</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;wangwu&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;zhangsan&#39;, &#39;lisi&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;zhangsan&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;lisi&#39;]</code></pre><h4 id="其他常用办法"><a href="#其他常用办法" class="headerlink" title="其他常用办法"></a>其他常用办法</h4><ul><li>reverse():倒置列表</li><li>copy():复制列表</li><li>clear():清楚列表中的所有元素</li><li>index(x[,i[,j]]):返回x第一次出现的索引，i为开始查找索引，j是结束查找索引，继承序列</li><li>count(x):返回x出现的次数，方法继承序列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[45, 43, 32, 21]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token operator">=</span>a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[45, 43, 32, 21]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[45, 43, 32, 21]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_tuple<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_tuple<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_tuple<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        n_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[0, 4, 16, 36, 64]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[0, 4, 16, 36, 64]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]</code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="创建可变集合"><a href="#创建可变集合" class="headerlink" title="创建可变集合"></a>创建可变集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;lisi&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;lisi&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;10, 20, 30, 40, 50&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>set</code></pre><h4 id="修改可变集合"><a href="#修改可变集合" class="headerlink" title="修改可变集合"></a>修改可变集合</h4><ul><li>add(elem):添加元素，已存在不能添加</li><li>remove(elem):删除元素，不存在则抛出错误</li><li>discard(elem):删除元素，不存在不抛出</li><li>pop():删除返回集合中任意元素，返回值是删除的元素</li><li>clear():清楚集合</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dongliu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;dongliu&#39;, &#39;lisi&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;dongliu&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------KeyError                                  Traceback (most recent call last)Input In [129], in &lt;cell line: 1&gt;()----&gt; 1 student_set.remove(&#39;lisi&#39;)KeyError: &#39;lisi&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;dongliu&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;dongliu&#39;, &#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;dongliu&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#39;zhangsan&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>set()</code></pre><h4 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> item <span class="token keyword">in</span> student_set<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>student_set<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125;-&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>lisiwangwuzhangsan----------0-lisi1-wangwu2-zhangsan</code></pre><h4 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token operator">=</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>frozenset(&#123;&#39;lisi&#39;, &#39;wangwu&#39;, &#39;zhangsan&#39;&#125;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>student_set<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>frozenset</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dongliu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [142], in &lt;cell line: 1&gt;()----&gt; 1 student_set.add(&#39;dongliu&#39;)AttributeError: &#39;frozenset&#39; object has no attribute &#39;add&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">seta<span class="token operator">=</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">seta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>frozenset(&#123;21, 32, 43, 45&#125;)</code></pre><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">&#123;</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>n_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&#123;0, 70, 40, 10, 80, 50, 20, 90, 60, 30&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>n_set<span class="token operator">=</span><span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> input_list<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[4, 9, 4, 16, 25, 36, 36, 36]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span class="token operator">=</span><span class="token punctuation">&#123;</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> input_list<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;4, 9, 16, 25, 36&#125;</code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">:</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">:</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">t1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">t2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">t3<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">t<span class="token operator">=</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1<span class="token operator">=</span><span class="token punctuation">[</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#123;102: &#39;zhangsan&#39;, 105: &#39;lisi&#39;, 109: &#39;wangwu&#39;&#125;</code></pre><h4 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h4><ul><li>get(key[,default]):通过键返回值，如果键不存在返回默认值</li><li>items()：返回字典的所有键值对</li><li>keys()：返回字典键视图</li><li>values()：返回字典值视图</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">:</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;lisi&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'dongliu'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;dongliu&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict_items([(102, &#39;zhangsan&#39;), (105, &#39;lisi&#39;), (109, &#39;wangwu&#39;)])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict_keys([102, 105, 109])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>dict_values([&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">student_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">:</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">:</span><span class="token string">'wangwu'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">102</span> <span class="token keyword">in</span> student_dict<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>True</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'lisi'</span> <span class="token keyword">in</span> student_dict<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>False</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---bianlijian---'</span><span class="token punctuation">)</span><span class="token keyword">for</span> student_id <span class="token keyword">in</span> student_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuehao:'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>student_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---bianlizhi---'</span><span class="token punctuation">)</span><span class="token keyword">for</span> student_name <span class="token keyword">in</span> student_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuesheng:'</span><span class="token operator">+</span>student_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---bianlijian:zhi---'</span><span class="token punctuation">)</span><span class="token keyword">for</span> student_id<span class="token punctuation">,</span>student_name <span class="token keyword">in</span> student_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xuehao:&#123;0&#125;-xuesheng:&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>student_id<span class="token punctuation">,</span>student_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---bianlijian---xuehao:102xuehao:105xuehao:109---bianlizhi---xuesheng:zhangsanxuesheng:lisixuesheng:wangwu---bianlijian:zhi---xuehao:102-xuesheng:zhangsanxuehao:105-xuesheng:lisixuehao:109-xuesheng:wangwu</code></pre><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'one'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span>output_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span>k<span class="token punctuation">:</span>v <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> input_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">&#125;</span>output_dict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#123;&#39;two&#39;: 2, &#39;four&#39;: 4&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">keys<span class="token operator">=</span><span class="token punctuation">[</span>k <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> input_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;two&#39;, &#39;four&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><pre class="line-numbers language-none"><code class="language-none">def ---:    ---    return ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rectangle_area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    area<span class="token operator">=</span>width<span class="token operator">*</span>height    <span class="token keyword">return</span> arear_area<span class="token operator">=</span>rectangle_area<span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span><span class="token number">420</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"320*420的矩形面积&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>r_area<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>320*420的矩形面积134400</code></pre><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="使用关键字参数调用函数"><a href="#使用关键字参数调用函数" class="headerlink" title="使用关键字参数调用函数"></a>使用关键字参数调用函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    area<span class="token operator">=</span>width<span class="token operator">*</span>height    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;*&#123;1&#125;矩形的面积是：&#123;2&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_area<span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span><span class="token number">420</span><span class="token punctuation">)</span>print_area<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">320</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">420</span><span class="token punctuation">)</span>print_area<span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">420</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>height<span class="token operator">=</span><span class="token number">420</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">320</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>320*420矩形的面积是：134400320*420矩形的面积是：134400320*420矩形的面积是：134400---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Input In [4], in &lt;cell line: 8&gt;()      6 print_area(width=320,height=420)      7 print_area(320,height=420)----&gt; 8 print(height=420,width=320)TypeError: &#39;height&#39; is an invalid keyword argument for print()</code></pre><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_coffee</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Cappuccino"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"制作一杯&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>coffee1<span class="token operator">=</span>make_coffee<span class="token punctuation">(</span><span class="token string">"Latte"</span><span class="token punctuation">)</span>coffee2<span class="token operator">=</span>make_coffee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coffee1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coffee2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>制作一杯Latte制作一杯Cappuccino</code></pre><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><h5 id="可变参数-1"><a href="#可变参数-1" class="headerlink" title="*可变参数"></a>*可变参数</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>numbers<span class="token punctuation">,</span>multiple<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    total<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        total<span class="token operator">+=</span>number    <span class="token keyword">return</span> total<span class="token operator">*</span>multiple<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span><span class="token number">20.0</span><span class="token punctuation">,</span><span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span>multiple<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>double_tuple<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">50.0</span><span class="token punctuation">,</span><span class="token number">60.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token operator">*</span>double_tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>150.0110220220.0</code></pre><h5 id="可变参数-2"><a href="#可变参数-2" class="headerlink" title="**可变参数"></a>**可变参数</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token operator">**</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----info----'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; &#123;2&#125; &#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token string">'->'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'tony'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>student_name<span class="token operator">=</span><span class="token string">'tony'</span><span class="token punctuation">,</span>student_no<span class="token operator">=</span><span class="token string">'1000'</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'='</span><span class="token punctuation">)</span>stu_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span>show<span class="token punctuation">(</span><span class="token operator">**</span>stu_dict<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'='</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----info----name -&gt; tonyage -&gt; 18sex -&gt; True----info----student_name = tonystudent_no = 1000----info----name = tonyage = 18sex = True</code></pre><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><h4 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token operator">**</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----info----'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; &#123;2&#125; &#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> sep<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>result<span class="token operator">=</span>show<span class="token punctuation">(</span><span class="token string">'->'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'tony'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>numbers<span class="token punctuation">,</span>multiple<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    total<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        total<span class="token operator">+=</span>number    <span class="token keyword">return</span> total<span class="token operator">*</span>multiple<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span><span class="token number">20.0</span><span class="token punctuation">,</span><span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----info----name -&gt; tonyage -&gt; 18sex -&gt; TrueNone150.0110</code></pre><h4 id="多返回值函数"><a href="#多返回值函数" class="headerlink" title="多返回值函数"></a>多返回值函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">position</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span>speed<span class="token punctuation">)</span><span class="token punctuation">:</span>    posx<span class="token operator">=</span>speed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>dt    posy<span class="token operator">=</span>speed<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>dt    <span class="token keyword">return</span><span class="token punctuation">(</span>posx<span class="token punctuation">,</span>posy<span class="token punctuation">)</span>move<span class="token operator">=</span>position<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"物体位移：(&#123;0&#125;,&#123;1&#125;)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>move<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>move<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>物体位移：(600,-300)</code></pre><h3 id="函数变量作用域"><a href="#函数变量作用域" class="headerlink" title="函数变量作用域"></a>函数变量作用域</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">def</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数中x=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"全局变量=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>函数中x=20全局变量=20</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">def</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数中x=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"全局变量=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>函数中x=10全局变量=20</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">20</span><span class="token keyword">def</span> <span class="token function">print_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    x<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数中x=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"全局变量=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>函数中x=10全局变量=10</code></pre><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    n_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        n_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span>            <span class="token keyword">return</span> n_list<span class="token keyword">for</span> i <span class="token keyword">in</span> square<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1 4 9 16 25 </code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    n_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token operator">*</span>i            <span class="token keyword">return</span> n_list<span class="token keyword">for</span> i <span class="token keyword">in</span> square<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1 4 9 16 25 </code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token operator">*</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token operator">=</span>square<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>4</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>9</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>16</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_seq<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------StopIteration                             Traceback (most recent call last)Input In [14], in &lt;cell line: 1&gt;()----&gt; 1 n_seq.__next__()StopIteration: </code></pre><h3 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>opr<span class="token punctuation">)</span><span class="token punctuation">:</span>    multiple<span class="token operator">=</span><span class="token number">2</span>        <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">*</span>multiple        <span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">*</span>multiple        <span class="token keyword">if</span> opr<span class="token operator">==</span><span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> add<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> sub<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>calculate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>30</code></pre><h3 id="函数式编程基础"><a href="#函数式编程基础" class="headerlink" title="函数式编程基础"></a>函数式编程基础</h3><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_fun</span><span class="token punctuation">(</span>opr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b        <span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">-</span>b        <span class="token keyword">if</span> opr<span class="token operator">==</span><span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> add    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> subf1<span class="token operator">=</span>calculate_fun<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>calculate_fun<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10+5=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10-5=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;function&#39;&gt;10+5=1510-5=5</code></pre><h4 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_fun</span><span class="token punctuation">(</span>opr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> opr<span class="token operator">==</span><span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span>f1<span class="token operator">=</span>calculate_fun<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>calculate_fun<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10+5=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10-5=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;function&#39;&gt;10+5=1510-5=5</code></pre><h4 id="三大基础函数"><a href="#三大基础函数" class="headerlink" title="三大基础函数"></a>三大基础函数</h4><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'ben'</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">]</span>users_filter<span class="token operator">=</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>users_filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;tony&#39;, &#39;tom&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">number_list<span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>number_filter<span class="token operator">=</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> it<span class="token punctuation">:</span>it<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span>number_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>number_filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[2, 4, 6, 8, 10]</code></pre><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'ben'</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">]</span>users_map<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>users_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;tony&#39;, &#39;tom&#39;, &#39;ben&#39;, &#39;alex&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'ben'</span><span class="token punctuation">,</span><span class="token string">'alex'</span><span class="token punctuation">]</span>users_filter<span class="token operator">=</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span>users_map<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span>u<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>users_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;tony&#39;, &#39;tom&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span>a_reduce<span class="token operator">=</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> acc<span class="token punctuation">,</span>i<span class="token punctuation">:</span>acc<span class="token operator">+</span>i<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a_reduce<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10</code></pre><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="面向对象概述oop"><a href="#面向对象概述oop" class="headerlink" title="面向对象概述oop"></a>面向对象概述oop</h3><h3 id="面向对象三个基本特性"><a href="#面向对象三个基本特性" class="headerlink" title="面向对象三个基本特性"></a>面向对象三个基本特性</h3><h4 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h4><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><pre class="line-numbers language-none"><code class="language-none">class 类名[(父类)]:    类体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">animal<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;__main__.Animal object at 0x00000222D7FA4160&gt;</code></pre><h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>weight<span class="token operator">=</span>weightanimal<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sex:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'female'</span> <span class="token keyword">if</span> animal<span class="token punctuation">.</span>sex<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'weight:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>age:2sex:maleweight:10.0</code></pre><h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    interest_rate<span class="token operator">=</span><span class="token number">0.0668</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner        self<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount        account<span class="token operator">=</span>Account<span class="token punctuation">(</span><span class="token string">'tony'</span><span class="token punctuation">,</span><span class="token number">1_800_000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'account:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>owner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'amount:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'interest_rate:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>interest_rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>account:tonyamount:1800000.0interest_rate:0.0668</code></pre><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>weight<span class="token operator">=</span>weight        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span>a2<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">)</span>a3<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sex:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'female'</span> <span class="token keyword">if</span> a3<span class="token punctuation">.</span>sex<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'weight:&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>age:2sex:femaleweight:5.0</code></pre><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>weight<span class="token operator">=</span>weight    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">+=</span><span class="token number">0.05</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">-=</span><span class="token number">0.01</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span>        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10.0eat10.05run10.040000000000001</code></pre><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    interest_rate<span class="token operator">=</span><span class="token number">0.0668</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner        self<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount            <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">interest_by</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>amt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>interest_rate<span class="token operator">*</span>amt    interest<span class="token operator">=</span>Account<span class="token punctuation">.</span>interest_by<span class="token punctuation">(</span><span class="token number">12000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>interest<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>801.6</code></pre><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">:</span>    interest_rate<span class="token operator">=</span><span class="token number">0.0668</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>owner<span class="token operator">=</span>owner        self<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount            <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">interest_by</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>amt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>interest_rate<span class="token operator">*</span>amt        <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">interest_with</span><span class="token punctuation">(</span>amt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Account<span class="token punctuation">.</span>interest_by<span class="token punctuation">(</span>amt<span class="token punctuation">)</span>    interest1<span class="token operator">=</span>Account<span class="token punctuation">.</span>interest_by<span class="token punctuation">(</span><span class="token number">12000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>interest1<span class="token punctuation">)</span>interest2<span class="token operator">=</span>Account<span class="token punctuation">.</span>interest_with<span class="token punctuation">(</span><span class="token number">12000.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>interest2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>801.6801.6</code></pre><h3 id="封装性-1"><a href="#封装性-1" class="headerlink" title="封装性"></a>封装性</h3><h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">+=</span><span class="token number">0.05</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">-=</span><span class="token number">0.01</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span>        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [4], in &lt;cell line: 14&gt;()     11         print(&#39;run&#39;)     13 a1=Animal(2,0,10.0)---&gt; 14 print(a1.weight)     15 a1.eat()     16 a1.run()AttributeError: &#39;Animal&#39; object has no attribute &#39;weight&#39;</code></pre><h4 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight<span class="token operator">+=</span><span class="token number">0.05</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight<span class="token operator">-=</span><span class="token number">0.01</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span>        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>eat---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [5], in &lt;cell line: 15&gt;()     13 a1=Animal(2,0,10.0)     14 a1.eat()---&gt; 15 a1.run()AttributeError: &#39;Animal&#39; object has no attribute &#39;run&#39;</code></pre><h4 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight            <span class="token keyword">def</span> <span class="token function">set_weight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight    <span class="token keyword">def</span> <span class="token function">get_weight</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__weight    a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>get_weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>set_weight<span class="token punctuation">(</span><span class="token number">123.45</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>get_weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;bound method Animal.get_weight of &lt;__main__.Animal object at 0x000002310CC31CA0&gt;&gt;&lt;bound method Animal.get_weight of &lt;__main__.Animal object at 0x000002310CC31CA0&gt;&gt;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight            <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">weight</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__weight        <span class="token decorator annotation punctuation">@weight<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">weight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__weight<span class="token operator">=</span>weight        a1<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>a1<span class="token punctuation">.</span>weight<span class="token operator">=</span><span class="token number">123.45</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10.0123.45</code></pre><h3 id="继承性-1"><a href="#继承性-1" class="headerlink" title="继承性"></a>继承性</h3><h4 id="继承概念"><a href="#继承概念" class="headerlink" title="继承概念"></a>继承概念</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age            <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        template<span class="token operator">=</span><span class="token string">'Person[name=&#123;0&#125;,age=&#123;1&#125;]'</span>        s<span class="token operator">=</span>template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">return</span> s    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>school<span class="token operator">=</span>school<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex        self<span class="token punctuation">.</span>weight<span class="token operator">=</span>weight            <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">+=</span><span class="token number">0.05</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>weight<span class="token operator">+=</span><span class="token number">0.1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gougouchi...'</span><span class="token punctuation">)</span>        a1<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>gougouchi...</code></pre><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ParentClass1</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ParentClass1 run...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">ParentClass2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ParentClass2 run...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">SubClass1</span><span class="token punctuation">(</span>ParentClass1<span class="token punctuation">,</span>ParentClass2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">SubClass2</span><span class="token punctuation">(</span>ParentClass2<span class="token punctuation">,</span>ParentClass1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">SubClass3</span><span class="token punctuation">(</span>ParentClass1<span class="token punctuation">,</span>ParentClass2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SubClass3 run...'</span><span class="token punctuation">)</span>        sub1<span class="token operator">=</span>SubClass1<span class="token punctuation">(</span><span class="token punctuation">)</span>sub1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>sub2<span class="token operator">=</span>SubClass2<span class="token punctuation">(</span><span class="token punctuation">)</span>sub2<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>sub3<span class="token operator">=</span>SubClass3<span class="token punctuation">(</span><span class="token punctuation">)</span>sub3<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>ParentClass1 run...ParentClass2 run...SubClass3 run...</code></pre><h3 id="多态性-1"><a href="#多态性-1" class="headerlink" title="多态性"></a>多态性</h3><h4 id="多态概念"><a href="#多态概念" class="headerlink" title="多态概念"></a>多态概念</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Figure</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw figure...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Ellipse</span><span class="token punctuation">(</span>Figure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw Ellipse'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span>Figure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw Triangle'</span><span class="token punctuation">)</span>        f1<span class="token operator">=</span>Figure<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>Ellipse<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token operator">=</span>Triangle<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>draw figure...draw Ellipsedraw Triangle</code></pre><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Figure</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw figure...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Ellipse</span><span class="token punctuation">(</span>Figure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw Ellipse'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span>Figure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'draw Triangle'</span><span class="token punctuation">)</span>        f1<span class="token operator">=</span>Figure<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>Ellipse<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token operator">=</span>Triangle<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span>Triangle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span>Triangle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f3<span class="token punctuation">,</span>Triangle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span>Figure<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>draw figure...draw Ellipsedraw TriangleFalseFalseTrueTrue</code></pre><h4 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'animal run'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dog run'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'car run'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    go<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>go<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>go<span class="token punctuation">(</span>Car<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>animal rundog runcar run</code></pre><h3 id="Python根类——object"><a href="#Python根类——object" class="headerlink" title="Python根类——object"></a>Python根类——object</h3><p>两个重要方法</p><ul><li><strong>str</strong>()</li><li><strong>eq</strong>(other)</li></ul><h4 id="str-方法"><a href="#str-方法" class="headerlink" title="str()方法"></a><strong>str</strong>()方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age            <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        template<span class="token operator">=</span><span class="token string">'Person [name=&#123;0&#125;,age=&#123;1&#125;]'</span>        s<span class="token operator">=</span>template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">return</span> sperson<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Person [name=Tony,age=18]</code></pre><h4 id="对象比较方法"><a href="#对象比较方法" class="headerlink" title="对象比较方法"></a>对象比较方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age            <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        template<span class="token operator">=</span><span class="token string">'Person [name=&#123;0&#125;,age=&#123;1&#125;]'</span>        s<span class="token operator">=</span>template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token keyword">return</span> s        <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>name<span class="token operator">==</span>other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>age<span class="token operator">==</span>other<span class="token punctuation">.</span>age<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        p1<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>p2<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token string">'Tony'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>True</code></pre><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><h4 id="定义枚举类"><a href="#定义枚举类" class="headerlink" title="定义枚举类"></a>定义枚举类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> enum<span class="token keyword">class</span> <span class="token class-name">WeekDays</span><span class="token punctuation">(</span>enum<span class="token punctuation">.</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    MONDAY<span class="token operator">=</span><span class="token number">1</span>    TUESDAY<span class="token operator">=</span><span class="token number">2</span>    WEDNESDAY<span class="token operator">=</span><span class="token number">3</span>    THURSDAY<span class="token operator">=</span><span class="token number">4</span>    FRIDAY<span class="token operator">=</span><span class="token number">5</span>    day<span class="token operator">=</span>WeekDays<span class="token punctuation">.</span>FRIDAY<span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>WeekDays.FRIDAY5FRIDAY</code></pre><h4 id="限制枚举类"><a href="#限制枚举类" class="headerlink" title="限制枚举类"></a>限制枚举类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> enum<span class="token decorator annotation punctuation">@enum<span class="token punctuation">.</span>unique</span><span class="token keyword">class</span> <span class="token class-name">WeekDays</span><span class="token punctuation">(</span>enum<span class="token punctuation">.</span>IntEnum<span class="token punctuation">)</span><span class="token punctuation">:</span>    MONDAY<span class="token operator">=</span><span class="token number">1</span>    TUESDAY<span class="token operator">=</span><span class="token number">2</span>    WEDNESDAY<span class="token operator">=</span><span class="token number">3</span>    THURSDAY<span class="token operator">=</span><span class="token number">4</span>    FRIDAY<span class="token operator">=</span><span class="token number">5</span>    day<span class="token operator">=</span>WeekDays<span class="token punctuation">.</span>FRIDAY<span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>WeekDays.FRIDAY5FRIDAY</code></pre><h4 id="使用枚举类"><a href="#使用枚举类" class="headerlink" title="使用枚举类"></a>使用枚举类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> enum<span class="token decorator annotation punctuation">@enum<span class="token punctuation">.</span>unique</span><span class="token keyword">class</span> <span class="token class-name">WeekDays</span><span class="token punctuation">(</span>enum<span class="token punctuation">.</span>IntEnum<span class="token punctuation">)</span><span class="token punctuation">:</span>    MONDAY<span class="token operator">=</span><span class="token number">1</span>    TUESDAY<span class="token operator">=</span><span class="token number">2</span>    WEDNESDAY<span class="token operator">=</span><span class="token number">3</span>    THURSDAY<span class="token operator">=</span><span class="token number">4</span>    FRIDAY<span class="token operator">=</span><span class="token number">5</span>    day<span class="token operator">=</span>WeekDays<span class="token punctuation">.</span>FRIDAY<span class="token keyword">if</span> day<span class="token operator">==</span>WeekDays<span class="token punctuation">.</span>MONDAY<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'work'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> day<span class="token operator">==</span>WeekDays<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'study'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>study</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><h4 id="AttributeError异常"><a href="#AttributeError异常" class="headerlink" title="AttributeError异常"></a>AttributeError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">al<span class="token operator">=</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">al<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [3], in &lt;cell line: 1&gt;()----&gt; 1 al.run()AttributeError: &#39;Animal&#39; object has no attribute &#39;run&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [4], in &lt;cell line: 1&gt;()----&gt; 1 print(al.age)AttributeError: &#39;Animal&#39; object has no attribute &#39;age&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [5], in &lt;cell line: 1&gt;()----&gt; 1 print(Animal.weight)AttributeError: type object &#39;Animal&#39; has no attribute &#39;weight&#39;</code></pre><h4 id="OSError异常"><a href="#OSError异常" class="headerlink" title="OSError异常"></a>OSError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'abc.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------FileNotFoundError                         Traceback (most recent call last)Input In [6], in &lt;cell line: 1&gt;()----&gt; 1 f=open(&#39;abc.txt&#39;)FileNotFoundError: [Errno 2] No such file or directory: &#39;abc.txt&#39;</code></pre><h4 id="IndexError异常"><a href="#IndexError异常" class="headerlink" title="IndexError异常"></a>IndexError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">code_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">]</span>code_list<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)Input In [7], in &lt;cell line: 2&gt;()      1 code_list=[125,56,89,36]----&gt; 2 code_list[4]IndexError: list index out of range</code></pre><h4 id="KeyError异常"><a href="#KeyError异常" class="headerlink" title="KeyError异常"></a>KeyError异常</h4><p>访问字典里不存在的键时引发</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [9], in &lt;cell line: 1&gt;()----&gt; 1 dict1[104]NameError: name &#39;dict1&#39; is not defined</code></pre><h4 id="NameError异常"><a href="#NameError异常" class="headerlink" title="NameError异常"></a>NameError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">value1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [10], in &lt;cell line: 1&gt;()----&gt; 1 value1NameError: name &#39;value1&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span>value1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [11], in &lt;cell line: 1&gt;()----&gt; 1 a=value1NameError: name &#39;value1&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">value1<span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TypeError异常"><a href="#TypeError异常" class="headerlink" title="TypeError异常"></a>TypeError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token string">'2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Input In [14], in &lt;cell line: 1&gt;()----&gt; 1 print(5/i)TypeError: unsupported operand type(s) for /: &#39;int&#39; and &#39;str&#39;</code></pre><h4 id="ValueError异常"><a href="#ValueError异常" class="headerlink" title="ValueError异常"></a>ValueError异常</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token string">'QWE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [16], in &lt;cell line: 1&gt;()----&gt; 1 print(5/int(i))ValueError: invalid literal for int() with base 10: &#39;QWE&#39;</code></pre><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><h4 id="try-except语句"><a href="#try-except语句" class="headerlink" title="try-except语句"></a>try-except语句</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date</span><span class="token punctuation">(</span>in_date<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>str_date<span class="token operator">=</span><span class="token string">'2018-8-18'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>read_date<span class="token punctuation">(</span>str_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>日期=2018-08-18 00:00:00</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">read_date</span><span class="token punctuation">(</span>in_date<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str_date<span class="token operator">=</span><span class="token string">'201B-8-18'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>read_date<span class="token punctuation">(</span>str_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>处理ValueError异常time data &#39;201B-8-18&#39; does not match format &#39;%Y-%m-%d&#39;日期=None</code></pre><h4 id="多except代码块"><a href="#多except代码块" class="headerlink" title="多except代码块"></a>多except代码块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理FileNotFoundError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理FileNotFoundError异常[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理FileNotFoundError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理FileNotFoundError异常[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><h4 id="try-except语句嵌套"><a href="#try-except语句嵌套" class="headerlink" title="try-except语句嵌套"></a>try-except语句嵌套</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            in_date <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            in_date <span class="token operator">=</span> in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            date <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> date        <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理FileNotFoundError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理FileNotFoundError异常[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><h4 id="多重异常捕获"><a href="#多重异常捕获" class="headerlink" title="多重异常捕获"></a>多重异常捕获</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> <span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span>OSError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用---'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>调用---[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><h3 id="异常堆栈跟踪"><a href="#异常堆栈跟踪" class="headerlink" title="异常堆栈跟踪"></a>异常堆栈跟踪</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">import</span> traceback <span class="token keyword">as</span> tb<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> <span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span>OSError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用---'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>调用---[Errno 2] No such file or directory: &#39;read.txt&#39;日期=NoneTraceback (most recent call last):  File &quot;C:\Users\HP\AppData\Local\Temp\ipykernel_8772\538862610.py&quot;, line 5, in read_date_from_file    file=open(filename)FileNotFoundError: [Errno 2] No such file or directory: &#39;read.txt&#39;</code></pre><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><h4 id="finally代码块"><a href="#finally代码块" class="headerlink" title="finally代码块"></a>finally代码块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理FileNotFoundError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理FileNotFoundError异常[Errno 2] No such file or directory: &#39;read.txt&#39;---------------------------------------------------------------------------UnboundLocalError                         Traceback (most recent call last)Input In [7], in &lt;cell line: 21&gt;()     18     finally:     19         file.close()---&gt; 21 date=read_date_from_file(&#39;read.txt&#39;)     22 print(&#39;日期=&#123;0&#125;&#39;.format(date))Input In [7], in read_date_from_file(filename)     17     print(e)     18 finally:---&gt; 19     file.close()UnboundLocalError: local variable &#39;file&#39; referenced before assignment</code></pre><h4 id="else代码块"><a href="#else代码块" class="headerlink" title="else代码块"></a>else代码块</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">import</span> traceback <span class="token keyword">as</span> tb<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开文件失败'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开文件成功'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            in_date <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            in_date <span class="token operator">=</span> in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            date <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> date        <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>打开文件失败日期=None</code></pre><h4 id="with-as-代码块自动资源管理"><a href="#with-as-代码块自动资源管理" class="headerlink" title="with as 代码块自动资源管理"></a>with as 代码块自动资源管理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理ValueError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'处理OSError异常'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>处理OSError异常[Errno 2] No such file or directory: &#39;read.txt&#39;日期=None</code></pre><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="显式抛出异常"><a href="#显式抛出异常" class="headerlink" title="显式抛出异常"></a>显式抛出异常</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">read_date_from_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        in_date<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        in_date<span class="token operator">=</span>in_date<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        date<span class="token operator">=</span>dt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> date    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token string">'不是有效日期'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token string">'文件找不到'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token string">'文件无法打开或无法读取'</span><span class="token punctuation">)</span>date<span class="token operator">=</span>read_date_from_file<span class="token punctuation">(</span><span class="token string">'read.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期=&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------FileNotFoundError                         Traceback (most recent call last)Input In [4], in read_date_from_file(filename)      7 try:----&gt; 8     file=open(filename)      9     in_date=file.read()FileNotFoundError: [Errno 2] No such file or directory: &#39;read.txt&#39;</code></pre><p>​    </p><pre><code>During handling of the above exception, another exception occurred:MyException                               Traceback (most recent call last)Input In [4], in &lt;cell line: 20&gt;()     17     except OSError as e:     18         raise MyException(&#39;文件无法打开或无法读取&#39;)---&gt; 20 date=read_date_from_file(&#39;read.txt&#39;)     21 print(&#39;日期=&#123;0&#125;&#39;.format(date))Input In [4], in read_date_from_file(filename)     14     raise MyException(&#39;不是有效日期&#39;)     15 except FileNotFoundError as e:---&gt; 16     raise MyException(&#39;文件找不到&#39;)     17 except OSError as e:     18     raise MyException(&#39;文件无法打开或无法读取&#39;)MyException: 文件找不到</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h2><h3 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h3><h4 id="舍入函数"><a href="#舍入函数" class="headerlink" title="舍入函数"></a>舍入函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2</code></pre><h4 id="幂和对数函数"><a href="#幂和对数函数" class="headerlink" title="幂和对数函数"></a>幂和对数函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>3.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>8.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.0794415416798357</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.2649110640673518</code></pre><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>90.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>radians<span class="token punctuation">(</span><span class="token number">180</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1.0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span>math<span class="token punctuation">.</span>radians<span class="token punctuation">(</span><span class="token number">45</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.24740395925452294</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>asin<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>asin<span class="token punctuation">(</span><span class="token number">0.2474</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.24999591371483254</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>asin<span class="token punctuation">(</span><span class="token number">0.24740395925452294</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.9689124217106447</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>acos<span class="token punctuation">(</span><span class="token number">0.9689124217106447</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.2500000000000002</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>acos<span class="token punctuation">(</span>math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.2500000000000002</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25534192122103627</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>atan<span class="token punctuation">(</span>math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">math<span class="token punctuation">.</span>atan<span class="token punctuation">(</span><span class="token number">0.25534192122103627</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0.25</code></pre><h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0.0&lt;=x&lt;1.0 random'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0&lt;x&lt;5 random'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'05&lt;=x&lt;10 random'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'05&lt;=x&lt;=10 random'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.0&lt;=x&lt;1.0 random0.39058630379347560.89224076323299420.213520477604615340.52115230154019280.300308704356647470.98629849194903580.211719935601607620.66532801074885340.324880431761971340.35620997733970640&lt;x&lt;5 random004021330405&lt;=x&lt;10 random787685987705&lt;=x&lt;=10 random5587799875</code></pre><h3 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h3><h4 id="datetime、date和time类"><a href="#datetime、date和time类" class="headerlink" title="datetime、date和time类"></a>datetime、date和time类</h4><h5 id="datetime类"><a href="#datetime类" class="headerlink" title="datetime类"></a>datetime类</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [37], in &lt;cell line: 1&gt;()----&gt; 1 dt=datetime.datetime(2018,2,29)ValueError: day is out of range for month</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2018, 2, 28, 0, 0)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [40], in &lt;cell line: 1&gt;()----&gt; 1 dt=datetime.datetime(2018,2,28,23,60,59,10000)ValueError: minute must be in 0..59</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2018, 2, 28, 23, 30, 59, 10000)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2023, 3, 21, 18, 2, 6, 436821)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2023, 3, 21, 18, 2, 32, 837270)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2023, 3, 21, 10, 2, 48, 100681)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">999999999.999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2001, 9, 9, 9, 46, 39, 999000)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcfromtimestamp<span class="token punctuation">(</span><span class="token number">999999999.999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2001, 9, 9, 1, 46, 39, 999000)</code></pre><h5 id="date类"><a href="#date类" class="headerlink" title="date类"></a>date类</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [48], in &lt;cell line: 1&gt;()----&gt; 1 d=datetime.date(2018,2,29)ValueError: day is out of range for month</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2018, 2, 28)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2023, 3, 21)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">999999999.999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2001, 9, 9)</code></pre><h5 id="time类"><a href="#time类" class="headerlink" title="time类"></a>time类</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [53], in &lt;cell line: 1&gt;()----&gt; 1 datetime.time(24,59,58,1999)ValueError: hour must be in 0..23</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.time(23, 59, 58, 1999)</code></pre><h4 id="日期时间计算"><a href="#日期时间计算" class="headerlink" title="日期时间计算"></a>日期时间计算</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2023, 3, 21)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">delta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">+=</span>delta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2023, 3, 31)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">delta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>weeks<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">-=</span>delta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.date(2017, 11, 27)</code></pre><h4 id="日期时间格式化和解析"><a href="#日期时间格式化和解析" class="headerlink" title="日期时间格式化和解析"></a>日期时间格式化和解析</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2023-03-21 18:10:33&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2023-03-21&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str_date<span class="token operator">=</span><span class="token string">'2018-02-29 10:40:26'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>in_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [69], in &lt;cell line: 1&gt;()----&gt; 1 date=datetime.datetime.strptime(in_date,&#39;%Y-%m-%d %H:%M:%S&#39;)NameError: name &#39;in_date&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">str_date<span class="token operator">=</span><span class="token string">'2018-02-28 10:40:26'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2018, 2, 28, 10, 40, 26)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Input In [74], in &lt;cell line: 1&gt;()----&gt; 1 date=datetime.datetime.strptime(str_date,&#39;%Y-%m-%d&#39;)File E:\anaconda\lib\_strptime.py:568, in _strptime_datetime(cls, data_string, format)    565 def _strptime_datetime(cls, data_string, format=&quot;%a %b %d %H:%M:%S %Y&quot;):    566     &quot;&quot;&quot;Return a class cls instance based on the input string and the    567     format string.&quot;&quot;&quot;--&gt; 568     tt, fraction, gmtoff_fraction = _strptime(data_string, format)    569     tzname, gmtoff = tt[-2:]    570     args = tt[:6] + (fraction,)File E:\anaconda\lib\_strptime.py:352, in _strptime(data_string, format)    349     raise ValueError(&quot;time data %r does not match format %r&quot; %    350                      (data_string, format))    351 if len(data_string) != found.end():--&gt; 352     raise ValueError(&quot;unconverted data remains: %s&quot; %    353                       data_string[found.end():])    355 iso_year = year = None    356 month = day = 1ValueError: unconverted data remains:  10:40:26</code></pre><h4 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span>timezone<span class="token punctuation">,</span>timedelta<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">utc_dt<span class="token operator">=</span>datetime<span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span>tzinfo<span class="token operator">=</span>timezone<span class="token punctuation">.</span>utc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">utc_dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2008, 8, 19, 23, 59, 59, tzinfo=datetime.timezone.utc)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">utc_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-19 23:59:59&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">utc_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S %z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-19 23:59:59 +0000&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_tz<span class="token operator">=</span>timezone<span class="token punctuation">(</span>offset<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Asia/Beijing'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_tz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.timezone(datetime.timedelta(seconds=28800), &#39;Asia/Beijing&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token operator">=</span>utc_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>bj_tz<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>datetime.datetime(2008, 8, 20, 7, 59, 59, tzinfo=datetime.timezone(datetime.timedelta(seconds=28800), &#39;Asia/Beijing&#39;))</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S %Z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-20 07:59:59 Asia/Beijing&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S %z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-20 07:59:59 +0800&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_tz<span class="token operator">=</span>timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token operator">=</span>utc_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>bj_tz<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bj_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S %z'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&#39;2008-08-20 07:59:59 +0800&#39;</code></pre><h3 id="logging日志模块"><a href="#logging日志模块" class="headerlink" title="logging日志模块"></a>logging日志模块</h3><h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-03-21 20:15:10,230-MainThread-root-&lt;cell line: 5&gt;-INFO-this is info2023-03-21 20:15:10,246-MainThread-root-&lt;cell line: 6&gt;-WARNING-this is warning2023-03-21 20:15:10,247-MainThread-root-&lt;cell line: 7&gt;-ERROR-this is error2023-03-21 20:15:10,248-MainThread-root-&lt;cell line: 8&gt;-CRITICAL-this is critical</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-03-21 20:14:59,694-MainThread-__main__-&lt;cell line: 6&gt;-INFO-this is info2023-03-21 20:14:59,694-MainThread-__main__-&lt;cell line: 7&gt;-WARNING-this is warning2023-03-21 20:14:59,698-MainThread-__main__-&lt;cell line: 8&gt;-ERROR-this is error2023-03-21 20:14:59,700-MainThread-__main__-&lt;cell line: 9&gt;-CRITICAL-this is critical</code></pre><h4 id="日志信息格式化"><a href="#日志信息格式化" class="headerlink" title="日志信息格式化"></a>日志信息格式化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s-%(threadName)s-'</span>                    <span class="token string">'%(name)s-%(funcName)s-%(levelname)s-%(message)s'</span><span class="token punctuation">)</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">funlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'enter funlog'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'use funlog'</span><span class="token punctuation">)</span>funlog<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-03-21 20:14:51,110-MainThread-__main__-&lt;cell line: 8&gt;-INFO-this is info2023-03-21 20:14:51,120-MainThread-__main__-&lt;cell line: 9&gt;-WARNING-this is warning2023-03-21 20:14:51,122-MainThread-__main__-&lt;cell line: 10&gt;-ERROR-this is error2023-03-21 20:14:51,123-MainThread-__main__-&lt;cell line: 11&gt;-CRITICAL-this is critical2023-03-21 20:14:51,124-MainThread-__main__-&lt;cell line: 16&gt;-INFO-use funlog2023-03-21 20:14:51,124-MainThread-__main__-funlog-INFO-enter funlog</code></pre><h4 id="日志重定位"><a href="#日志重定位" class="headerlink" title="日志重定位"></a>日志重定位</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s-%(threadName)s-'</span>                    <span class="token string">'%(name)s-%(funcName)s-%(levelname)s-%(message)s'</span><span class="token punctuation">)</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">funlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'enter funlog'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'use funlog'</span><span class="token punctuation">)</span>funlog<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-03-21 20:17:26,157-MainThread-__main__-&lt;cell line: 8&gt;-INFO-this is info2023-03-21 20:17:26,165-MainThread-__main__-&lt;cell line: 9&gt;-WARNING-this is warning2023-03-21 20:17:26,166-MainThread-__main__-&lt;cell line: 10&gt;-ERROR-this is error2023-03-21 20:17:26,167-MainThread-__main__-&lt;cell line: 11&gt;-CRITICAL-this is critical2023-03-21 20:17:26,169-MainThread-__main__-&lt;cell line: 16&gt;-INFO-use funlog2023-03-21 20:17:26,171-MainThread-__main__-funlog-INFO-enter funlog</code></pre><h4 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> logging<span class="token punctuation">.</span>configlogging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>fileConfig<span class="token punctuation">(</span><span class="token string">"logger.conf"</span><span class="token punctuation">)</span>logger<span class="token operator">=</span>logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'loggerl'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is debug'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'this is warning'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'this is error'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'this is critical'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">funlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'enter funlog'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'use funlog'</span><span class="token punctuation">)</span>funlog<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>this is debugthis is infothis is warningthis is errorthis is criticaluse funlogenter funlog</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式字符串"><a href="#正则表达式字符串" class="headerlink" title="正则表达式字符串"></a>正则表达式字符串</h3><ul><li>普通字符</li><li>元字符</li></ul><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><h4 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h4><h4 id="开始与结束字符"><a href="#开始与结束字符" class="headerlink" title="开始与结束字符"></a>开始与结束字符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep1 <span class="token operator">=</span> <span class="token string">r'\w+@zhijieketang\.com'</span>p2 <span class="token operator">=</span> <span class="token string">r'^\w+@zhijieketang\.com$'</span>text <span class="token operator">=</span> <span class="token string">"Tony's email is tony_guan588@zhijieketang.com."</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p2<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>email <span class="token operator">=</span> <span class="token string">'tony_guan588@zhijieketang.com'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p2<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(16, 45), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;None&lt;re.Match object; span=(0, 29), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;</code></pre><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><h4 id="定义字符类"><a href="#定义字符类" class="headerlink" title="定义字符类"></a>定义字符类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'[Jj]ava'</span><span class="token comment">## p = r'Java|java|JAVA'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'I like Java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'I like JAVA and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'I like java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(7, 11), match=&#39;Java&#39;&gt;None&lt;re.Match object; span=(7, 11), match=&#39;java&#39;&gt;</code></pre><h4 id="字符类取反"><a href="#字符类取反" class="headerlink" title="字符类取反"></a>字符类取反</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'[^0123456789]'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'Python 3'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>None&lt;re.Match object; span=(0, 1), match=&#39;P&#39;&gt;</code></pre><h4 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rem <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'[A-Za-z0-9]'</span><span class="token punctuation">,</span> <span class="token string">'A10.3'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'[0-25-7]'</span><span class="token punctuation">,</span> <span class="token string">'A3489C'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 1), match=&#39;A&#39;&gt;None</code></pre><h4 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment">## p = r'[^0123456789]'</span>p <span class="token operator">=</span> <span class="token string">r'\D'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'Python 3'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>text <span class="token operator">=</span> <span class="token string">'你们好Hello'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\w'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>None&lt;re.Match object; span=(0, 1), match=&#39;P&#39;&gt;&lt;re.Match object; span=(0, 1), match=&#39;你&#39;&gt;</code></pre><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><h4 id="量词的使用"><a href="#量词的使用" class="headerlink" title="量词的使用"></a>量词的使用</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rem <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d?'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字一次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'8'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d?'</span><span class="token punctuation">,</span> <span class="token string">'ABC'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字零次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符''</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d*'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字多次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d*'</span><span class="token punctuation">,</span> <span class="token string">'ABC'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字零次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符''</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字多次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d+'</span><span class="token punctuation">,</span> <span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;8&#125;'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字8次</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'8765432'</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;8&#125;'</span><span class="token punctuation">,</span> <span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;7,8&#125;'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字8次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;9,&#125;'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 1), match=&#39;8&#39;&gt;&lt;re.Match object; span=(0, 0), match=&#39;&#39;&gt;&lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;&lt;re.Match object; span=(0, 0), match=&#39;&#39;&gt;&lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;None8765432 &lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;None&lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;None</code></pre><h4 id="贪婪量词和懒惰量词"><a href="#贪婪量词和懒惰量词" class="headerlink" title="贪婪量词和懒惰量词"></a>贪婪量词和懒惰量词</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment">## 使用贪婪量词</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;5,8&#125;'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字8次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654321'</span><span class="token comment">## 使用惰性量词</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'\d&#123;5,8&#125;?'</span><span class="token punctuation">,</span> <span class="token string">'87654321'</span><span class="token punctuation">)</span>  <span class="token comment">## 出现数字5次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配字符'87654'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 8), match=&#39;87654321&#39;&gt;&lt;re.Match object; span=(0, 5), match=&#39;87654&#39;&gt;</code></pre><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><h4 id="分组的使用"><a href="#分组的使用" class="headerlink" title="分组的使用"></a>分组的使用</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'(121)&#123;2&#125;'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'121121abcabc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 返回匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 获得第一组内容</span>p <span class="token operator">=</span> <span class="token string">r'(\d&#123;3,4&#125;)-(\d&#123;7,8&#125;)'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'010-87654321'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 返回匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 获得所有组内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 6), match=&#39;121121&#39;&gt;121121121&lt;re.Match object; span=(0, 12), match=&#39;010-87654321&#39;&gt;010-87654321(&#39;010&#39;, &#39;87654321&#39;)</code></pre><h4 id="分组命名"><a href="#分组命名" class="headerlink" title="分组命名"></a>分组命名</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'(?P&lt;area_code>\d&#123;3,4&#125;)-(?P&lt;phone_code>\d&#123;7,8&#125;)'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'010-87654321'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 返回匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 获得所有组内容</span><span class="token comment">## 通过组编号返回组内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## 通过组名返回组内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'area_code'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'phone_code'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 12), match=&#39;010-87654321&#39;&gt;010-87654321(&#39;010&#39;, &#39;87654321&#39;)0108765432101087654321</code></pre><h4 id="反向引用分组"><a href="#反向引用分组" class="headerlink" title="反向引用分组"></a>反向引用分组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment">## p = r'&lt;([\w]+)>.*&lt;/([\w]+)>'</span>p <span class="token operator">=</span> <span class="token string">r'&lt;([\w]+)>.*&lt;/\1>'</span>  <span class="token comment">## 使用反向引用</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'&lt;a>abc&lt;/a>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'&lt;a>abc&lt;/b>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 10), match=&#39;&lt;a&gt;abc&lt;/a&gt;&#39;&gt;None</code></pre><h4 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'img1.jpg,img2.jpg,img3.bmp'</span><span class="token comment">#捕获分组</span>p <span class="token operator">=</span> <span class="token string">r'\w+(\.jpg)'</span>mlist <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mlist<span class="token punctuation">)</span><span class="token comment">#非捕获分组</span>p <span class="token operator">=</span> <span class="token string">r'\w+(?:\.jpg)'</span>mlist <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;.jpg&#39;, &#39;.jpg&#39;][&#39;img1.jpg&#39;, &#39;img2.jpg&#39;]</code></pre><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><h4 id="search（）和match（）函数"><a href="#search（）和match（）函数" class="headerlink" title="search（）和match（）函数"></a>search（）和match（）函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'\w+@zhijieketang\.com'</span>text <span class="token operator">=</span> <span class="token string">"Tony's email is tony_guan588@zhijieketang.com."</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>email <span class="token operator">=</span> <span class="token string">'tony_guan588@zhijieketang.com'</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>p<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span class="token comment">## match对象几个方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'match对象几个方法:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(16, 45), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;None&lt;re.Match object; span=(0, 29), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;&lt;re.Match object; span=(0, 29), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;match对象几个方法:tony_guan588@zhijieketang.com029(0, 29)</code></pre><h4 id="findall-和finditer（）函数"><a href="#findall-和finditer（）函数" class="headerlink" title="findall()和finditer（）函数"></a>findall()和finditer（）函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'[Jj]ava'</span>text <span class="token operator">=</span> <span class="token string">'I like Java and java.'</span>match_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match_list<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>match_iter <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> match_iter<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Java&#39;, &#39;java&#39;]Javajava</code></pre><h4 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'\d+'</span>text <span class="token operator">=</span> <span class="token string">'AB12CD34EF'</span>clist <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span>clist <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">,</span> maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span>clist <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>p<span class="token punctuation">,</span> text<span class="token punctuation">,</span> maxsplit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;AB&#39;, &#39;CD&#39;, &#39;EF&#39;][&#39;AB&#39;, &#39;CD34EF&#39;][&#39;AB&#39;, &#39;CD&#39;, &#39;EF&#39;]</code></pre><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'\d+'</span>text <span class="token operator">=</span> <span class="token string">'AB12CD34EF'</span>repace_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repace_text<span class="token punctuation">)</span>repace_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repace_text<span class="token punctuation">)</span>repace_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repace_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>AB CD EFAB CD34EFAB CD EF</code></pre><h3 id="编译正则表达式"><a href="#编译正则表达式" class="headerlink" title="编译正则表达式"></a>编译正则表达式</h3><p>re.compile(pattern[,flags&#x3D;0])</p><h4 id="已编译正则表达式对象"><a href="#已编译正则表达式对象" class="headerlink" title="已编译正则表达式对象"></a>已编译正则表达式对象</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'\w+@zhijieketang\.com'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">"Tony's email is tony_guan588@zhijieketang.com."</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>p <span class="token operator">=</span> <span class="token string">r'[Jj]ava'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">'I like Java and java.'</span>match_list <span class="token operator">=</span> regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>match_list<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>match_iter <span class="token operator">=</span> regex<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> match_iter<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">r'\d+'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">'AB12CD34EF'</span>clist <span class="token operator">=</span> regex<span class="token punctuation">.</span>split<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>clist<span class="token punctuation">)</span>repace_text <span class="token operator">=</span> regex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>repace_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(16, 45), match=&#39;tony_guan588@zhijieketang.com&#39;&gt;None[&#39;Java&#39;, &#39;java&#39;]Javajava[&#39;AB&#39;, &#39;CD&#39;, &#39;EF&#39;]AB CD EF</code></pre><h4 id="编译标志"><a href="#编译标志" class="headerlink" title="编译标志"></a>编译标志</h4><h5 id="ASCII和Unicode"><a href="#ASCII和Unicode" class="headerlink" title="ASCII和Unicode"></a>ASCII和Unicode</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> retext <span class="token operator">=</span> <span class="token string">'你们好Hello'</span>p <span class="token operator">=</span> <span class="token string">r'\w+'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>U<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>A<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 8), match=&#39;你们好Hello&#39;&gt;&lt;re.Match object; span=(0, 8), match=&#39;你们好Hello&#39;&gt;&lt;re.Match object; span=(3, 8), match=&#39;Hello&#39;&gt;None</code></pre><h5 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'(java).*(python)'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like Java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like JAVA and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(7, 22), match=&#39;Java and Python&#39;&gt;&lt;re.Match object; span=(7, 22), match=&#39;JAVA and Python&#39;&gt;&lt;re.Match object; span=(7, 22), match=&#39;java and Python&#39;&gt;</code></pre><h5 id="点元字符匹配换行符"><a href="#点元字符匹配换行符" class="headerlink" title="点元字符匹配换行符"></a>点元字符匹配换行符</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'.+'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello\nWorld.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello\nWorld.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(0, 5), match=&#39;Hello&#39;&gt;&lt;re.Match object; span=(0, 12), match=&#39;Hello\nWorld.&#39;&gt;</code></pre><h5 id="多行模式"><a href="#多行模式" class="headerlink" title="多行模式"></a>多行模式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token string">r'^World'</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello\nWorld.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 不匹配</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'Hello\nWorld.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>None&lt;re.Match object; span=(6, 11), match=&#39;World&#39;&gt;</code></pre><h5 id="详细模式"><a href="#详细模式" class="headerlink" title="详细模式"></a>详细模式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rep <span class="token operator">=</span> <span class="token triple-quoted-string string">"""(java)     #匹配java字符串        .*        #匹配任意字符零或多个        (python)  #匹配python字符串    """</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I <span class="token operator">|</span> re<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like Java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like JAVA and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span>m <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'I like java and Python.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token comment">## 匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;re.Match object; span=(7, 22), match=&#39;Java and Python&#39;&gt;&lt;re.Match object; span=(7, 22), match=&#39;JAVA and Python&#39;&gt;&lt;re.Match object; span=(7, 22), match=&#39;java and Python&#39;&gt;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h2><h3 id="CSV数据交换格式"><a href="#CSV数据交换格式" class="headerlink" title="CSV数据交换格式"></a>CSV数据交换格式</h3><h4 id="reader（）函数"><a href="#reader（）函数" class="headerlink" title="reader（）函数"></a>reader（）函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/books.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span>  encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rf<span class="token punctuation">:</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>rf<span class="token punctuation">,</span> dialect<span class="token operator">=</span>csv<span class="token punctuation">.</span>excel<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1|软件工程|戴国强|机械工业出版社|19980528|22|汇编语言|李利光|北京大学出版社|19980318|23|计算机基础|王飞|经济科学出版社|19980218|14|FLASH精选|刘扬|中国纺织出版社|19990312|25|java基础|王一|电子工业出版社|19990528|36|世界杯|柳飞|世界出版社|19990412|27|JAVA程序设计|张余|人民邮电出版社|19990613|18|新概念3|余智|外语出版社|19990723|29|军事要闻|张强|解放军出版社|19990722|310|大众生活|许阳|电子出版社|19990819|311|南方旅游|王爱国|南方出版社|19990930|213|幽灵|钱力华|华光出版社|19991008|114|期货分析|孙宝|飞鸟出版社|19991122|315|人工智能|周未|机械工业出版社|19991223|316|数据库系统概念|吴红|机械工业出版社|20000328|317|计算机理论基础|戴家|机械工业出版社|20000218|418|编译原理|郑键|机械工业出版社|20000415|219|通讯与网络|欧阳杰|机械工业出版社|20000517|120|现代操作系统|王小国|机械工业出版社|20010128|121|网络基础|王大尉|北京大学出版社|20000617|122|万紫千红|丛丽|北京大学出版社|20000702|323|经济概论|思佳|北京大学出版社|20000819|324|经济与科学|毛波|经济科学出版社|20000923|225|计算机体系结构|方丹|机械工业出版社|20000328|426|软件工程|牛田|经济科学出版社|20000328|427|世界语言大观|候丙辉|经济科学出版社|20000814|228|高级语言程序设计|寇国华|清华大学出版社|20000117|329|操作系统概论|聂元名|清华大学出版社|20001028|130|数据库及应用|孙家萧|清华大学出版社|20000619|131|软件工程|戴志名|电子工业出版社|20000324|332|SOL使用手册|贺民|电子工业出版社|19990425|233|模拟电路|邓英才|电子工业出版社|20000527|234|集邮爱好者|李云|人民邮电出版社|20000630|136|高等数学|李放|人民邮电出版社|20000812|137|南方周末|邓光明|南方出版社|20000923|338|十大旅游胜地|潭晓明|南方出版社|20000403|239|黑幕|李仪|华光出版社|20000508|24</code></pre><h4 id="writer-函数"><a href="#writer-函数" class="headerlink" title="writer()函数"></a>writer()函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/books.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rf<span class="token punctuation">:</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>rf<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data/books2.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> wf<span class="token punctuation">:</span>        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>wf<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span>            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1|软件工程|戴国强|机械工业出版社|19980528|22|汇编语言|李利光|北京大学出版社|19980318|23|计算机基础|王飞|经济科学出版社|19980218|14|FLASH精选|刘扬|中国纺织出版社|19990312|25|java基础|王一|电子工业出版社|19990528|36|世界杯|柳飞|世界出版社|19990412|27|JAVA程序设计|张余|人民邮电出版社|19990613|18|新概念3|余智|外语出版社|19990723|29|军事要闻|张强|解放军出版社|19990722|310|大众生活|许阳|电子出版社|19990819|311|南方旅游|王爱国|南方出版社|19990930|213|幽灵|钱力华|华光出版社|19991008|114|期货分析|孙宝|飞鸟出版社|19991122|315|人工智能|周未|机械工业出版社|19991223|316|数据库系统概念|吴红|机械工业出版社|20000328|317|计算机理论基础|戴家|机械工业出版社|20000218|418|编译原理|郑键|机械工业出版社|20000415|219|通讯与网络|欧阳杰|机械工业出版社|20000517|120|现代操作系统|王小国|机械工业出版社|20010128|121|网络基础|王大尉|北京大学出版社|20000617|122|万紫千红|丛丽|北京大学出版社|20000702|323|经济概论|思佳|北京大学出版社|20000819|324|经济与科学|毛波|经济科学出版社|20000923|225|计算机体系结构|方丹|机械工业出版社|20000328|426|软件工程|牛田|经济科学出版社|20000328|427|世界语言大观|候丙辉|经济科学出版社|20000814|228|高级语言程序设计|寇国华|清华大学出版社|20000117|329|操作系统概论|聂元名|清华大学出版社|20001028|130|数据库及应用|孙家萧|清华大学出版社|20000619|131|软件工程|戴志名|电子工业出版社|20000324|332|SOL使用手册|贺民|电子工业出版社|19990425|233|模拟电路|邓英才|电子工业出版社|20000527|234|集邮爱好者|李云|人民邮电出版社|20000630|136|高等数学|李放|人民邮电出版社|20000812|137|南方周末|邓光明|南方出版社|20000923|338|十大旅游胜地|潭晓明|南方出版社|20000403|239|黑幕|李仪|华光出版社|20000508|24</code></pre><h3 id="XML数据交换格式"><a href="#XML数据交换格式" class="headerlink" title="XML数据交换格式"></a>XML数据交换格式</h3><h4 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h4><ol><li>声明</li><li>根元素</li><li>子元素</li><li>属性</li><li>命名空间</li><li>限定名</li></ol><h4 id="解析XML文档"><a href="#解析XML文档" class="headerlink" title="解析XML文档"></a>解析XML文档</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ETtree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'data1/Notes.xml'</span><span class="token punctuation">)</span>  <span class="token comment">## 创建XML文档树</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## xml.etree.ElementTree.ElementTree</span>root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## root是根元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## xml.etree.ElementTree.Element</span><span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>tag<span class="token punctuation">)</span>  <span class="token comment">## Notes</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> child <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第&#123;0&#125;个&#123;1&#125;元素，属性：&#123;2&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> child<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> child<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> child_child <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'    标签：&#123;0&#125;，内容：&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>child_child<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> child_child<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;xml.etree.ElementTree.ElementTree&#39;&gt;&lt;class &#39;xml.etree.ElementTree.Element&#39;&gt;Notes第0个Note元素，属性：&#123;&#39;id&#39;: &#39;1&#39;&#125;    标签：CDate，内容：2018-3-21    标签：Content，内容：发布Python0    标签：UserID，内容：tony第1个Note元素，属性：&#123;&#39;id&#39;: &#39;2&#39;&#125;    标签：CDate，内容：2018-3-22    标签：Content，内容：发布Python1    标签：UserID，内容：tony第2个Note元素，属性：&#123;&#39;id&#39;: &#39;3&#39;&#125;    标签：CDate，内容：2018-3-23    标签：Content，内容：发布Python2    标签：UserID，内容：tony第3个Note元素，属性：&#123;&#39;id&#39;: &#39;4&#39;&#125;    标签：CDate，内容：2018-3-24    标签：Content，内容：发布Python3    标签：UserID，内容：tony第4个Note元素，属性：&#123;&#39;id&#39;: &#39;5&#39;&#125;    标签：CDate，内容：2018-3-25    标签：Content，内容：发布Python4    标签：UserID，内容：tony</code></pre><h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4><ol><li>find(match,namespace&#x3D;None)</li><li>findall(match,namespace&#x3D;None)</li><li>findtext(match,default&#x3D;None,namespace&#x3D;None)</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ETtree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'data1/Notes.xml'</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note"</span><span class="token punctuation">)</span>  <span class="token comment">## 当前节点下的第一个Note子节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note/CDate"</span><span class="token punctuation">)</span>  <span class="token comment">## Note子节点下的第一个CDate节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>text<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note/CDate/.."</span><span class="token punctuation">)</span>  <span class="token comment">## Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">".//CDate"</span><span class="token punctuation">)</span>  <span class="token comment">## 当前节点查找所有后代节点中第一个CDate节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>text<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[@id]"</span><span class="token punctuation">)</span>  <span class="token comment">## 具有id属性Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[@id='2']"</span><span class="token punctuation">)</span>  <span class="token comment">## id属性等于'2'的Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[2]"</span><span class="token punctuation">)</span>  <span class="token comment">## 第二个Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[last()]"</span><span class="token punctuation">)</span>  <span class="token comment">## 最后一个Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span>node <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"./Note[last()-2]"</span><span class="token punctuation">)</span>  <span class="token comment">## 倒数第三个Note节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>attrib<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Note &#123;&#39;id&#39;: &#39;1&#39;&#125;2018-3-21Note &#123;&#39;id&#39;: &#39;1&#39;&#125;2018-3-21Note &#123;&#39;id&#39;: &#39;1&#39;&#125;Note &#123;&#39;id&#39;: &#39;2&#39;&#125;Note &#123;&#39;id&#39;: &#39;2&#39;&#125;Note &#123;&#39;id&#39;: &#39;5&#39;&#125;Note &#123;&#39;id&#39;: &#39;3&#39;&#125;</code></pre><h3 id="JSON数据交换格式"><a href="#JSON数据交换格式" class="headerlink" title="JSON数据交换格式"></a>JSON数据交换格式</h3><h4 id="JSON文档结构"><a href="#JSON文档结构" class="headerlink" title="JSON文档结构"></a>JSON文档结构</h4><h4 id="JSON数据编码"><a href="#JSON数据编码" class="headerlink" title="JSON数据编码"></a>JSON数据编码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment">## 准备数据</span>py_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'tony'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>  <span class="token comment">## 创建字典对象</span>py_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment">## 创建列表对象</span>py_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span>  <span class="token comment">## 创建元组对象</span>py_dict<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> py_list  <span class="token comment">## 添加列表到字典中</span>py_dict<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> py_tuple  <span class="token comment">## 添加元组到字典中</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'dict'></span><span class="token comment">## 编码过程</span>json_obj <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>py_dict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>json_obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>json_obj<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'str'></span><span class="token comment">## 编码过程</span>json_obj <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>py_dict<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">## 输出格式化后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>json_obj<span class="token punctuation">)</span><span class="token comment">## 写入JSON数据到data1.json文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data2/data1.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>py_dict<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment">## 写入JSON数据到data2.json文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data2/data2.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>py_dict<span class="token punctuation">,</span> f<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#123;&#39;name&#39;: &#39;tony&#39;, &#39;age&#39;: 30, &#39;sex&#39;: True, &#39;a&#39;: [1, 3], &#39;b&#39;: (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)&#125;&lt;class &#39;dict&#39;&gt;&#123;&quot;name&quot;: &quot;tony&quot;, &quot;age&quot;: 30, &quot;sex&quot;: true, &quot;a&quot;: [1, 3], &quot;b&quot;: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]&#125;&lt;class &#39;str&#39;&gt;&#123;    &quot;name&quot;: &quot;tony&quot;,    &quot;age&quot;: 30,    &quot;sex&quot;: true,    &quot;a&quot;: [        1,        3    ],    &quot;b&quot;: [        &quot;A&quot;,        &quot;B&quot;,        &quot;C&quot;    ]&#125;</code></pre><h4 id="JSON数据解码"><a href="#JSON数据解码" class="headerlink" title="JSON数据解码"></a>JSON数据解码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment">## 准备数据</span>json_obj <span class="token operator">=</span> <span class="token string">r'&#123;"name": "tony", "age": 30, "sex": true, "a": [1, 3], "b": ["A", "B", "C"]&#125;'</span><span class="token comment">#json_obj = "&#123;'name': 'tony', 'age': 30, 'sex': true, 'a': [1, 3], 'b': ['A', 'B', 'C']&#125;"</span>py_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'dict'></span><span class="token keyword">print</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_dict<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>py_lista <span class="token operator">=</span> py_dict<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>  <span class="token comment">## 取出列表对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_lista<span class="token punctuation">)</span>py_listb <span class="token operator">=</span> py_dict<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>  <span class="token comment">## 取出列表对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>py_listb<span class="token punctuation">)</span><span class="token comment">## 读取JSON数据到data2.json文件</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data2/data2.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'dict'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;dict&#39;&gt;tony30True[1, 3][&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]&#123;&#39;name&#39;: &#39;tony&#39;, &#39;age&#39;: 30, &#39;sex&#39;: True, &#39;a&#39;: [1, 3], &#39;b&#39;: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]&#125;&lt;class &#39;dict&#39;&gt;</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h4><h4 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> configparserconfig <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 创建配置解析器对象</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'data3/Setup.ini'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment">## 读取并解析配置文件</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>sections<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 返回所有的节</span>section1 <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'Startup'</span><span class="token punctuation">]</span>  <span class="token comment">## 返回Startup节</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">'Startup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>section1<span class="token punctuation">[</span><span class="token string">'RequireOS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>section1<span class="token punctuation">[</span><span class="token string">'RequireIE'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'Product'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'msi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'Windows 2000'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'MajorVersion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">## 返回MajorVersion数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'Windows 2000'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ServicePackMajor'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>value <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Windows 2000'</span><span class="token punctuation">,</span> <span class="token string">'MajorVersion'</span><span class="token punctuation">)</span>  <span class="token comment">## 返回MajorVersion数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'str'></span>value <span class="token operator">=</span> config<span class="token punctuation">.</span>getint<span class="token punctuation">(</span><span class="token string">'Windows 2000'</span><span class="token punctuation">,</span> <span class="token string">'MajorVersion'</span><span class="token punctuation">)</span>  <span class="token comment">## 返回MajorVersion数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'int'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;Startup&#39;, &#39;Product&#39;, &#39;Windows 2000&#39;][&#39;requireos&#39;, &#39;requiremsi&#39;, &#39;requireie&#39;]Windows 20006.0.2600.0AcroRead.msi54&lt;class &#39;str&#39;&gt;&lt;class &#39;int&#39;&gt;</code></pre><h4 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> configparserconfig <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 创建配置解析器对象</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'data3/Setup.ini'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment">## 读取并解析配置文件</span><span class="token comment">## 写入配置文件</span>config<span class="token punctuation">[</span><span class="token string">'Startup'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'RequireMSI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'8.0'</span>config<span class="token punctuation">[</span><span class="token string">'Product'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'RequireMSI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'4.0'</span>config<span class="token punctuation">.</span>add_section<span class="token punctuation">(</span><span class="token string">'Section2'</span><span class="token punctuation">)</span>   <span class="token comment">#添加节</span>config<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'Section2'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Mac'</span><span class="token punctuation">)</span>   <span class="token comment">#添加配置项</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data3/Setup.ini'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fw<span class="token punctuation">:</span>    config<span class="token punctuation">.</span>write<span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2><h3 id="数据持久化技术概述"><a href="#数据持久化技术概述" class="headerlink" title="数据持久化技术概述"></a>数据持久化技术概述</h3><ol><li>文本文件</li><li>数据库</li></ol><h3 id="MySQL数据库管理系统"><a href="#MySQL数据库管理系统" class="headerlink" title="MySQL数据库管理系统"></a>MySQL数据库管理系统</h3><h3 id="Python-DB-API"><a href="#Python-DB-API" class="headerlink" title="Python DB-API"></a>Python DB-API</h3><h4 id="建立数据连接"><a href="#建立数据连接" class="headerlink" title="建立数据连接"></a>建立数据连接</h4><h4 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h4><h3 id="案例：MySQL数据库CURD操作"><a href="#案例：MySQL数据库CURD操作" class="headerlink" title="案例：MySQL数据库CURD操作"></a>案例：MySQL数据库CURD操作</h3><h4 id="安装PyMySQL模块"><a href="#安装PyMySQL模块" class="headerlink" title="安装PyMySQL模块"></a>安装PyMySQL模块</h4><h4 id="数据查询操作"><a href="#数据查询操作" class="headerlink" title="数据查询操作"></a>数据查询操作</h4><h5 id="有条件查询实现代码"><a href="#有条件查询实现代码" class="headerlink" title="有条件查询实现代码"></a>有条件查询实现代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        <span class="token comment">## sql = 'select name, userid from user where userid >%s'</span>        <span class="token comment">## cursor.execute(sql, [0])</span>        sql <span class="token operator">=</span> <span class="token string">'select name, userid from user where userid >%(id)s'</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">## 4. 提取结果集</span>        result_set <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> result_set<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'id：&#123;0&#125; - name：&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>id：1 - name：Tomid：2 - name：Ben</code></pre><h5 id="无条件查询实现代码"><a href="#无条件查询实现代码" class="headerlink" title="无条件查询实现代码"></a>无条件查询实现代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        sql <span class="token operator">=</span> <span class="token string">'select max(userid) from user'</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token comment">## 4. 提取结果集</span>        row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> row <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最大用户Id ：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>最大用户Id ：2</code></pre><h4 id="数据修改操作"><a href="#数据修改操作" class="headerlink" title="数据修改操作"></a>数据修改操作</h4><ol><li>数据插入</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 查询最大用户Id</span><span class="token keyword">def</span> <span class="token function">read_max_userid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 1. 建立数据库连接</span>    connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                                 user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                                 password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                                 database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                                 charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment">## 2. 创建游标对象</span>        <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            <span class="token comment">## 3. 执行SQL操作</span>            sql <span class="token operator">=</span> <span class="token string">'select max(userid) from user'</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token comment">## 4. 提取结果集</span>            row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> row <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最大用户Id ：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment">## with代码块结束 5. 关闭游标</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token comment">## 6. 关闭数据连接</span>        connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment">## 查询最大值</span>maxid <span class="token operator">=</span> read_max_userid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        sql <span class="token operator">=</span> <span class="token string">'insert into user (userid, name) values (%s,%s)'</span>        nextid <span class="token operator">=</span> maxid <span class="token operator">+</span> <span class="token number">1</span>        name <span class="token operator">=</span> <span class="token string">'Tony'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>nextid<span class="token punctuation">)</span>        affectedcount <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>nextid<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'影响的数据行数：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>affectedcount<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## 4. 提交数据库事物</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>DatabaseError<span class="token punctuation">:</span>    <span class="token comment">## 4. 回滚数据库事物</span>    connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>最大用户Id ：2影响的数据行数：1</code></pre><ol start="2"><li>数据更新</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        sql <span class="token operator">=</span> <span class="token string">'update user set name = %s where userid > %s'</span>        affectedcount <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'影响的数据行数：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>affectedcount<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## 4. 提交数据库事物</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>DatabaseError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token comment">## 4. 回滚数据库事物</span>    connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>影响的数据行数：1</code></pre><ol start="3"><li>数据删除</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment">## 查询最大用户Id</span><span class="token keyword">def</span> <span class="token function">read_max_userid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 1. 建立数据库连接</span>    connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                                 user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                                 password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                                 database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                                 charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment">## 2. 创建游标对象</span>        <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            <span class="token comment">## 3. 执行SQL操作</span>            sql <span class="token operator">=</span> <span class="token string">'select max(userid) from user'</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token comment">## 4. 提取结果集</span>            row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> row <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最大用户Id ：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment">## with代码块结束 5. 关闭游标</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token comment">## 6. 关闭数据连接</span>        connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">## 1. 建立数据库连接</span>connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>                             user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                             password<span class="token operator">=</span><span class="token string">'986370165'</span><span class="token punctuation">,</span>                             database<span class="token operator">=</span><span class="token string">'MyDB'</span><span class="token punctuation">,</span>                             charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment">## 查询最大值</span>maxid <span class="token operator">=</span> read_max_userid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">## 2. 创建游标对象</span>    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>        <span class="token comment">## 3. 执行SQL操作</span>        sql <span class="token operator">=</span> <span class="token string">'delete from user where userid = %s'</span>        affectedcount <span class="token operator">=</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>maxid<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'影响的数据行数：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>affectedcount<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## 4. 提交数据库事物</span>        connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## with代码块结束 5. 关闭游标</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>DatabaseError<span class="token punctuation">:</span>    <span class="token comment">## 4. 回滚数据库事物</span>    connection<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment">## 6. 关闭数据连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>最大用户Id ：3影响的数据行数：1</code></pre><h3 id="NoSQL数据存储"><a href="#NoSQL数据存储" class="headerlink" title="NoSQL数据存储"></a>NoSQL数据存储</h3><h4 id="dbm数据库的打开和关闭"><a href="#dbm数据库的打开和关闭" class="headerlink" title="dbm数据库的打开和关闭"></a>dbm数据库的打开和关闭</h4><p>dbm.open(file,flag&#x3D;’r’)</p><p>‘r’,’w’,’c’,’n’</p><p>with dbm.open(file,’c’) as db:</p><pre><code>pass</code></pre><h4 id="dbm数据存储"><a href="#dbm数据存储" class="headerlink" title="dbm数据存储"></a>dbm数据存储</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> dbm<span class="token keyword">with</span> dbm<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'mydb'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span>    db<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'tony'</span>  <span class="token comment">## 更新数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 取出数据</span>    age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">b'18'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 取出数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'age'</span> <span class="token keyword">in</span> db<span class="token punctuation">:</span>  <span class="token comment">## 判断是否存在age数据</span>        db<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'20'</span>  <span class="token comment">## 或者 b'20'</span>    <span class="token keyword">del</span> db<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>  <span class="token comment">## 删除name数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>tony18</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="wxPython图形用户界面编程"><a href="#wxPython图形用户界面编程" class="headerlink" title="wxPython图形用户界面编程"></a>wxPython图形用户界面编程</h2><h3 id="Python图形用户界面开发工具包"><a href="#Python图形用户界面开发工具包" class="headerlink" title="Python图形用户界面开发工具包"></a>Python图形用户界面开发工具包</h3><ul><li>Tkinter</li><li>PyQt</li><li>wxPython</li></ul><h3 id="wxPython安装"><a href="#wxPython安装" class="headerlink" title="wxPython安装"></a>wxPython安装</h3><h3 id="wxPython基础"><a href="#wxPython基础" class="headerlink" title="wxPython基础"></a>wxPython基础</h3><ul><li>窗口</li><li>控件</li><li>事件处理</li><li>布局管理</li></ul><h4 id="wxPython类层次结构"><a href="#wxPython类层次结构" class="headerlink" title="wxPython类层次结构"></a>wxPython类层次结构</h4><h4 id="第一个wxPython程序"><a href="#第一个wxPython程序" class="headerlink" title="第一个wxPython程序"></a>第一个wxPython程序</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 创建应用程序对象</span>app <span class="token operator">=</span> wx<span class="token punctuation">.</span>App<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">## 创建窗口对象</span>frm <span class="token operator">=</span> wx<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第一个GUI程序!"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>frm<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 显示窗口</span>app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第一个GUI程序!"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## TODO</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">OnExit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'应用程序退出'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>应用程序退出</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"第一个GUI程序!"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Hello World!'</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="wxPython界面构建层次结构"><a href="#wxPython界面构建层次结构" class="headerlink" title="wxPython界面构建层次结构"></a>wxPython界面构建层次结构</h4><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="一对一事件处理"><a href="#一对一事件处理" class="headerlink" title="一对一事件处理"></a>一对一事件处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'一对一事件处理'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'OK'</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## &lt;class 'wx._core.CommandEvent'></span>        self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Hello, world.'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;wx._core.CommandEvent&#39;&gt;&lt;class &#39;wx._core.CommandEvent&#39;&gt;&lt;class &#39;wx._core.CommandEvent&#39;&gt;</code></pre><h4 id="一对多事件处理"><a href="#一对多事件处理" class="headerlink" title="一对多事件处理"></a>一对多事件处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'一对多事件处理'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1'</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button2'</span><span class="token punctuation">,</span> pos<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## self.Bind(wx.EVT_BUTTON, self.on_click, b1)</span>        <span class="token comment">## self.Bind(wx.EVT_BUTTON, self.on_click, id=11)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>event_id<span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button2单击'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1011101110111011</code></pre><h4 id="示例：鼠标事件处理"><a href="#示例：鼠标事件处理" class="headerlink" title="示例：鼠标事件处理"></a>示例：鼠标事件处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"鼠标事件处理"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LEFT_DOWN<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_left_down<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LEFT_UP<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_left_up<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_MOTION<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_mouse_move<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_left_down</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'鼠标按下'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_left_up</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'鼠标释放'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_mouse_move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>Dragging<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> event<span class="token punctuation">.</span>LeftIsDown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pos <span class="token operator">=</span> event<span class="token punctuation">.</span>GetPosition<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>鼠标按下鼠标释放鼠标按下鼠标释放鼠标按下鼠标释放鼠标按下(129, 99)鼠标释放鼠标按下鼠标释放鼠标按下鼠标释放鼠标按下(58, 114)(60, 115)(61, 116)(62, 117)(63, 117)(64, 117)(66, 118)(67, 119)(69, 119)(73, 119)(79, 119)鼠标释放鼠标按下鼠标释放鼠标按下(81, 169)(75, 170)(72, 170)(68, 171)(65, 171)(63, 171)(61, 171)(60, 171)鼠标释放鼠标按下鼠标释放鼠标按下鼠标释放鼠标按下(201, 55)(202, 55)(204, 57)(206, 59)(208, 61)(211, 63)(214, 65)(217, 68)(221, 71)(224, 74)(228, 77)(232, 80)(235, 83)(239, 85)(241, 87)(243, 88)(245, 89)(246, 91)(249, 92)(251, 92)(252, 93)(253, 93)(254, 93)(255, 93)(256, 93)(257, 94)(259, 94)(260, 94)(261, 94)(262, 94)(264, 94)(265, 94)(266, 94)(267, 94)(269, 94)(270, 94)(272, 94)(273, 94)(275, 94)(276, 94)(277, 94)(277, 93)(278, 92)(279, 91)(279, 90)(279, 89)(279, 88)(279, 87)(280, 86)(280, 85)(280, 84)(280, 83)(279, 83)(278, 84)(277, 85)(274, 87)(272, 88)(268, 91)(264, 94)(259, 97)(253, 102)(247, 107)(240, 111)(233, 116)(227, 120)(222, 123)(219, 125)(215, 128)(211, 131)(207, 133)(201, 135)(197, 137)(194, 138)(190, 139)(186, 140)(184, 141)(180, 141)(177, 141)(175, 141)(171, 141)(169, 141)(166, 140)(162, 139)(158, 137)(154, 135)(153, 133)(149, 131)(143, 127)(138, 123)(133, 120)(129, 116)(125, 113)(121, 108)(117, 104)(114, 100)(112, 97)(111, 94)(108, 88)(106, 84)(105, 80)(105, 77)(105, 73)(105, 70)(106, 67)(107, 63)(108, 61)(110, 58)(112, 55)(114, 53)(116, 51)(119, 48)(122, 46)(125, 44)(128, 43)(132, 41)(135, 40)(140, 39)(145, 38)(150, 38)(155, 37)(161, 37)(166, 37)(171, 37)(175, 37)(179, 37)(181, 37)(185, 38)(189, 40)(191, 41)(194, 43)(197, 45)(200, 47)(202, 48)(205, 50)(208, 52)(209, 55)(212, 57)(214, 59)(216, 62)(217, 65)(219, 67)(221, 70)(222, 73)(224, 75)(224, 78)(224, 79)(224, 81)(224, 83)(224, 86)(224, 88)(224, 90)(224, 92)(224, 94)(223, 96)(222, 99)(220, 100)(219, 102)(216, 104)(213, 107)(209, 109)(205, 111)(201, 113)(196, 114)(191, 115)(187, 115)(182, 116)(179, 116)(174, 116)(167, 116)(163, 116)(158, 116)(153, 116)(149, 116)(145, 115)(143, 114)(139, 113)(135, 111)(132, 110)(130, 108)(128, 107)(126, 106)(125, 105)(123, 103)(122, 102)(120, 100)(118, 96)(116, 92)(115, 87)(115, 83)(114, 79)(114, 76)(114, 72)(115, 68)(116, 65)(117, 63)(119, 59)(122, 55)(125, 52)(128, 48)(134, 45)(138, 42)(145, 39)(153, 37)(162, 34)(168, 34)(181, 34)(191, 34)(200, 34)(210, 35)(218, 37)(228, 41)(237, 45)(246, 50)(253, 54)(259, 59)(265, 64)(270, 69)(276, 74)(281, 80)(283, 84)(286, 91)(288, 96)(292, 103)(293, 107)(294, 112)(294, 116)(294, 121)(294, 124)(294, 127)(294, 129)(292, 132)(291, 135)(291, 137)(289, 139)(287, 142)(284, 144)(283, 145)(280, 147)(277, 149)(276, 150)(273, 151)(269, 153)(264, 153)(259, 154)(254, 154)(249, 154)(244, 154)(237, 152)(232, 151)(228, 150)(223, 147)(216, 145)(212, 142)(206, 138)(203, 135)(200, 133)(198, 130)(195, 127)(194, 123)(192, 122)(192, 118)(191, 116)(191, 112)(191, 109)(192, 106)(193, 104)(195, 101)(196, 100)(198, 98)(200, 96)(201, 95)(203, 95)(206, 94)(208, 93)(211, 93)(214, 93)(216, 93)(219, 94)(221, 94)(223, 96)(226, 99)(229, 102)(232, 107)(237, 113)(240, 119)(242, 126)(245, 131)(247, 136)(247, 140)(247, 145)(247, 150)(247, 153)(246, 157)(243, 161)(240, 165)(237, 168)(233, 171)(227, 175)(223, 177)(214, 180)(203, 182)(190, 182)(178, 182)(166, 182)(152, 181)(139, 180)(126, 177)(113, 175)(105, 171)(96, 167)(91, 165)(87, 163)(85, 163)(85, 162)(84, 161)(84, 160)(83, 158)鼠标释放</code></pre><h3 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h3><h4 id="Box布局器"><a href="#Box布局器" class="headerlink" title="Box布局器"></a>Box布局器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Box布局'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        <span class="token comment">## 创建垂直方向Box布局管理器对象</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token comment">## 添加静态文本到Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statictext<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>FIXED_MINSIZE <span class="token operator">|</span> wx<span class="token punctuation">.</span>TOP <span class="token operator">|</span> wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1'</span><span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button2'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token comment">## 创建水平方向的Box布局管理器对象</span>        hbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        <span class="token comment">## 添加b1到水平Box布局管理</span>        hbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">## 添加b2到水平Box布局管理</span>        hbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">## 将水平Box布局管理器到垂直Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>event_id<span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button2单击'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1011101110111011</code></pre><h4 id="StaticBox布局"><a href="#StaticBox布局" class="headerlink" title="StaticBox布局"></a>StaticBox布局</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'StaticBox布局'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        <span class="token comment">## 创建垂直方向的Box布局管理器对象</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token comment">## 添加静态文本到Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statictext<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>FIXED_MINSIZE <span class="token operator">|</span> wx<span class="token punctuation">.</span>TOP <span class="token operator">|</span> wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1'</span><span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button2'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token comment">## 创建静态框对象</span>        sb <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"按钮框"</span><span class="token punctuation">)</span>        <span class="token comment">## 创建水平方向的StaticBox布局管理器</span>        hsbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticBoxSizer<span class="token punctuation">(</span>sb<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        <span class="token comment">## 添加b1到水平StaticBox布局管理</span>        hsbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">## 添加b2到水平StaticBox布局管理</span>        hsbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">## 添加hbox到vbox</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hsbox<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>event_id<span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button1单击'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Button2单击'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>111011</code></pre><h4 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Grid布局'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        btn1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>        btn2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">)</span>        btn3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">)</span>        btn4 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'4'</span><span class="token punctuation">)</span>        btn5 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'5'</span><span class="token punctuation">)</span>        btn6 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'6'</span><span class="token punctuation">)</span>        btn7 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'7'</span><span class="token punctuation">)</span>        btn8 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'8'</span><span class="token punctuation">)</span>        btn9 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'9'</span><span class="token punctuation">)</span>        grid <span class="token operator">=</span> wx<span class="token punctuation">.</span>GridSizer<span class="token punctuation">(</span>cols<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> rows<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> vgap<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> hgap<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">## grid.AddMany([</span>        <span class="token comment">##     (btn1, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn2, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn3, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn4, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn5, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn6, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn7, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn8, 0, wx.EXPAND),</span>        <span class="token comment">##     (btn9, 0, wx.EXPAND)</span>        <span class="token comment">## ])</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn5<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn6<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn7<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>btn9<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FlexGrid布局"><a href="#FlexGrid布局" class="headerlink" title="FlexGrid布局"></a>FlexGrid布局</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'FlexGrid布局'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        fgs <span class="token operator">=</span> wx<span class="token punctuation">.</span>FlexGridSizer<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        title <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"标题："</span><span class="token punctuation">)</span>        author <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"作者名："</span><span class="token punctuation">)</span>        review <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"内容："</span><span class="token punctuation">)</span>        tc1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">)</span>        tc2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">)</span>        tc3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddMany<span class="token punctuation">(</span><span class="token punctuation">[</span>title<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">,</span>                     author<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">,</span>                     review<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableCol<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableCol<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        hbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        hbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>fgs<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>hbox<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wxPython控件"><a href="#wxPython控件" class="headerlink" title="wxPython控件"></a>wxPython控件</h3><h4 id="静态文本和按钮"><a href="#静态文本和按钮" class="headerlink" title="静态文本和按钮"></a>静态文本和按钮</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'静态文本和按钮'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        <span class="token comment">## 创建垂直方向的Box布局管理器</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'StaticText1'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALIGN_CENTRE_HORIZONTAL<span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'OK'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ToggleButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'ToggleButton'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> b2<span class="token punctuation">)</span>        bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">'icon/1.png'</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>BITMAP_TYPE_PNG<span class="token punctuation">)</span>        b3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BitmapButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> bmp<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> b3<span class="token punctuation">)</span>        <span class="token comment">## 添加静态文本和按钮到Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statictext<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b2<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b3<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>statictext<span class="token punctuation">.</span>SetLabelText<span class="token punctuation">(</span><span class="token string">'Hello, world.'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文本输入控件"><a href="#文本输入控件" class="headerlink" title="文本输入控件"></a>文本输入控件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'文本框'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        hbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        fgs <span class="token operator">=</span> wx<span class="token punctuation">.</span>FlexGridSizer<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        userid <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"用户ID："</span><span class="token punctuation">)</span>        pwd <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"密码："</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"多行文本："</span><span class="token punctuation">)</span>        tc1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">)</span>        tc2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>TE_PASSWORD<span class="token punctuation">)</span>        tc3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        <span class="token comment">## 设置tc1初始值</span>        tc1<span class="token punctuation">.</span>SetValue<span class="token punctuation">(</span><span class="token string">'tony'</span><span class="token punctuation">)</span>        <span class="token comment">## 获取tc1值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取用户ID：&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>tc1<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddMany<span class="token punctuation">(</span><span class="token punctuation">[</span>userid<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">,</span>                     pwd<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">,</span>                     content<span class="token punctuation">,</span> <span class="token punctuation">(</span>tc3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableRow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableCol<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        fgs<span class="token punctuation">.</span>AddGrowableCol<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        hbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>fgs<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>hbox<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>读取用户ID：tony</code></pre><h4 id="复选框和单选按钮"><a href="#复选框和单选按钮" class="headerlink" title="复选框和单选按钮"></a>复选框和单选按钮</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'复选框和单选按钮'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        hbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你喜欢的编程语言：'</span><span class="token punctuation">)</span>        cb1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>CheckBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>        cb2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>CheckBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Java'</span><span class="token punctuation">)</span>        cb2<span class="token punctuation">.</span>SetValue<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        cb3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>CheckBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'C++'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_CHECKBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_checkbox_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>cb1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>cb2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>cb3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择性别：'</span><span class="token punctuation">)</span>        radio1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>RB_GROUP<span class="token punctuation">)</span>        radio2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_RADIOBUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_radio1_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你最喜欢吃的水果：'</span><span class="token punctuation">)</span>        radio3 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>RB_GROUP<span class="token punctuation">)</span>        radio4 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'橘子'</span><span class="token punctuation">)</span>        radio5 <span class="token operator">=</span> wx<span class="token punctuation">.</span>RadioButton<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'香蕉'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_RADIOBUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_radio2_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>        hbox3<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox3<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox3<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio4<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox3<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>radio5<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_checkbox_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        cb <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;，状态&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span>GetLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>IsChecked<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_radio1_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        rb <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一组 &#123;0&#125; 被选中'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span>GetLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_radio2_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        rb <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第二组 &#123;0&#125; 被选中'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span>GetLabel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>第二组 橘子 被选中第二组 香蕉 被选中第一组 女 被选中选择 C++，状态True选择 Python，状态True</code></pre><h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'下拉列表'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        hbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你喜欢的编程语言：'</span><span class="token punctuation">)</span>        list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'C++'</span><span class="token punctuation">,</span> <span class="token string">'Java'</span><span class="token punctuation">]</span>        ch1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ComboBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">'C'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list1<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>CB_SORT<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_COMBOBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_combobox<span class="token punctuation">,</span> ch1<span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>ch1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择性别：'</span><span class="token punctuation">)</span>        list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">]</span>        ch2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Choice<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_CHOICE<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_choice<span class="token punctuation">,</span> ch2<span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>ch2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_combobox</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_choice</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>选择 Java</code></pre><h4 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'下拉列表'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        hbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你喜欢的编程语言：'</span><span class="token punctuation">)</span>        list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'C++'</span><span class="token punctuation">,</span> <span class="token string">'Java'</span><span class="token punctuation">]</span>        lb1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ListBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list1<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>LB_SINGLE<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LISTBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_listbox1<span class="token punctuation">,</span> lb1<span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>lb1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        hbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span>        statictext <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'选择你喜欢吃的水果：'</span><span class="token punctuation">)</span>        list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> <span class="token string">'香蕉'</span><span class="token punctuation">]</span>        lb2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ListBox<span class="token punctuation">(</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list2<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>LB_EXTENDED<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LISTBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_listbox2<span class="token punctuation">,</span> lb2<span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>statictext<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>LEFT <span class="token operator">|</span> wx<span class="token punctuation">.</span>RIGHT <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        hbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>lb2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>FIXED_MINSIZE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>hbox2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_listbox1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        listbox <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>listbox<span class="token punctuation">.</span>GetSelection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_listbox2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        listbox <span class="token operator">=</span> event<span class="token punctuation">.</span>GetEventObject<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>listbox<span class="token punctuation">.</span>GetSelections<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>选择 1选择 2</code></pre><h4 id="静态图片控件"><a href="#静态图片控件" class="headerlink" title="静态图片控件"></a>静态图片控件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'静态图片控件'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bmps <span class="token operator">=</span> <span class="token punctuation">[</span>wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">'images/bird5.gif'</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>BITMAP_TYPE_GIF<span class="token punctuation">)</span><span class="token punctuation">,</span>                     wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">'images/bird4.gif'</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>BITMAP_TYPE_GIF<span class="token punctuation">)</span><span class="token punctuation">,</span>                     wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">'images/bird3.gif'</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>BITMAP_TYPE_GIF<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>panel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">)</span>        <span class="token comment">## 创建垂直方向的Box布局管理器</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        b1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>parent<span class="token operator">=</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button1'</span><span class="token punctuation">)</span>        b2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Button2'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_BUTTON<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>image <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticBitmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>panel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>bmps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">## 添加标控件到Box布局管理器</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>b2<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>image<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>panel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>image<span class="token punctuation">.</span>SetBitmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bmps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>image<span class="token punctuation">.</span>SetBitmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bmps<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>panel<span class="token punctuation">.</span>Layout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高级窗口"><a href="#高级窗口" class="headerlink" title="高级窗口"></a>高级窗口</h3><h4 id="分隔窗口"><a href="#分隔窗口" class="headerlink" title="分隔窗口"></a>分隔窗口</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'分隔窗口'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        splitter <span class="token operator">=</span> wx<span class="token punctuation">.</span>SplitterWindow<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        leftpanel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>splitter<span class="token punctuation">)</span>        rightpanel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>splitter<span class="token punctuation">)</span>        splitter<span class="token punctuation">.</span>SplitVertically<span class="token punctuation">(</span>leftpanel<span class="token punctuation">,</span> rightpanel<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        splitter<span class="token punctuation">.</span>SetMinimumPaneSize<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>        list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> <span class="token string">'香蕉'</span><span class="token punctuation">]</span>        lb2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>ListBox<span class="token punctuation">(</span>leftpanel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>list2<span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>LB_SINGLE<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_LISTBOX<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_listbox<span class="token punctuation">,</span> lb2<span class="token punctuation">)</span>        vbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>lb2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        leftpanel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox1<span class="token punctuation">)</span>        vbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>rightpanel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'右侧面板'</span><span class="token punctuation">)</span>        vbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        rightpanel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox2<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_listbox</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token string">'选择 &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用树"><a href="#使用树" class="headerlink" title="使用树"></a>使用树</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'树控件'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        splitter <span class="token operator">=</span> wx<span class="token punctuation">.</span>SplitterWindow<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        leftpanel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>splitter<span class="token punctuation">)</span>        rightpanel <span class="token operator">=</span> wx<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>splitter<span class="token punctuation">)</span>        splitter<span class="token punctuation">.</span>SplitVertically<span class="token punctuation">(</span>leftpanel<span class="token punctuation">,</span> rightpanel<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        splitter<span class="token punctuation">.</span>SetMinimumPaneSize<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tree <span class="token operator">=</span> self<span class="token punctuation">.</span>CreateTreeCtrl<span class="token punctuation">(</span>leftpanel<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_TREE_SEL_CHANGING<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">)</span>        vbox1 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox1<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        leftpanel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox1<span class="token punctuation">)</span>        vbox2 <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content <span class="token operator">=</span> wx<span class="token punctuation">.</span>StaticText<span class="token punctuation">(</span>rightpanel<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'右侧面板'</span><span class="token punctuation">)</span>        vbox2<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>ALL <span class="token operator">|</span> wx<span class="token punctuation">.</span>EXPAND<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        rightpanel<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox2<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> event<span class="token punctuation">.</span>GetItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>GetItemText<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">CreateTreeCtrl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">:</span>        tree <span class="token operator">=</span> wx<span class="token punctuation">.</span>TreeCtrl<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        imglist <span class="token operator">=</span> wx<span class="token punctuation">.</span>ImageList<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        imglist<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_FOLDER<span class="token punctuation">,</span> size<span class="token operator">=</span>wx<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        imglist<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_NORMAL_FILE<span class="token punctuation">,</span> size<span class="token operator">=</span>wx<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        tree<span class="token punctuation">.</span>AssignImageList<span class="token punctuation">(</span>imglist<span class="token punctuation">)</span>        root <span class="token operator">=</span> tree<span class="token punctuation">.</span>AddRoot<span class="token punctuation">(</span><span class="token string">"TreeRoot"</span><span class="token punctuation">,</span> image<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 1"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 2"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 3"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 4"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"Item 5"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ii <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">id</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>ii<span class="token punctuation">]</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 2"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 3"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 4"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            tree<span class="token punctuation">.</span>AppendItem<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"Subitem 5"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        tree<span class="token punctuation">.</span>Expand<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">## 展开根下子节点</span>        tree<span class="token punctuation">.</span>Expand<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">## 展开Item 1下子节点</span>        tree<span class="token punctuation">.</span>Expand<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">## 展开Item 4下子节点</span>        tree<span class="token punctuation">.</span>SelectItem<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">## 选中根节点</span>        <span class="token keyword">return</span> tree<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用网络"><a href="#使用网络" class="headerlink" title="使用网络"></a>使用网络</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token keyword">import</span> wx<span class="token punctuation">.</span>griddata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'0036'</span><span class="token punctuation">,</span> <span class="token string">'高等数学'</span><span class="token punctuation">,</span> <span class="token string">'李放'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000812'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0004'</span><span class="token punctuation">,</span> <span class="token string">'FLASH精选'</span><span class="token punctuation">,</span> <span class="token string">'刘扬'</span><span class="token punctuation">,</span> <span class="token string">'中国纺织出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990312'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0026'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'牛田'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0015'</span><span class="token punctuation">,</span> <span class="token string">'人工智能'</span><span class="token punctuation">,</span> <span class="token string">'周未'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991223'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0037'</span><span class="token punctuation">,</span> <span class="token string">'南方周末'</span><span class="token punctuation">,</span> <span class="token string">'邓光明'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000923'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0008'</span><span class="token punctuation">,</span> <span class="token string">'新概念3'</span><span class="token punctuation">,</span> <span class="token string">'余智'</span><span class="token punctuation">,</span> <span class="token string">'外语出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990723'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0019'</span><span class="token punctuation">,</span> <span class="token string">'通讯与网络'</span><span class="token punctuation">,</span> <span class="token string">'欧阳杰'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000517'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0014'</span><span class="token punctuation">,</span> <span class="token string">'期货分析'</span><span class="token punctuation">,</span> <span class="token string">'孙宝'</span><span class="token punctuation">,</span> <span class="token string">'飞鸟出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991122'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0023'</span><span class="token punctuation">,</span> <span class="token string">'经济概论'</span><span class="token punctuation">,</span> <span class="token string">'思佳'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000819'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0017'</span><span class="token punctuation">,</span> <span class="token string">'计算机理论基础'</span><span class="token punctuation">,</span> <span class="token string">'戴家'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000218'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0002'</span><span class="token punctuation">,</span> <span class="token string">'汇编语言'</span><span class="token punctuation">,</span> <span class="token string">'李利光'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980318'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0033'</span><span class="token punctuation">,</span> <span class="token string">'模拟电路'</span><span class="token punctuation">,</span> <span class="token string">'邓英才'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000527'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0011'</span><span class="token punctuation">,</span> <span class="token string">'南方旅游'</span><span class="token punctuation">,</span> <span class="token string">'王爱国'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990930'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0039'</span><span class="token punctuation">,</span> <span class="token string">'黑幕'</span><span class="token punctuation">,</span> <span class="token string">'李仪'</span><span class="token punctuation">,</span> <span class="token string">'华光出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000508'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0001'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'戴国强'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980528'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0034'</span><span class="token punctuation">,</span> <span class="token string">'集邮爱好者'</span><span class="token punctuation">,</span> <span class="token string">'李云'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000630'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0031'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'戴志名'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000324'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0030'</span><span class="token punctuation">,</span> <span class="token string">'数据库及应用'</span><span class="token punctuation">,</span> <span class="token string">'孙家萧'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000619'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0024'</span><span class="token punctuation">,</span> <span class="token string">'经济与科学'</span><span class="token punctuation">,</span> <span class="token string">'毛波'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000923'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0009'</span><span class="token punctuation">,</span> <span class="token string">'军事要闻'</span><span class="token punctuation">,</span> <span class="token string">'张强'</span><span class="token punctuation">,</span> <span class="token string">'解放军出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990722'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0003'</span><span class="token punctuation">,</span> <span class="token string">'计算机基础'</span><span class="token punctuation">,</span> <span class="token string">'王飞'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980218'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0020'</span><span class="token punctuation">,</span> <span class="token string">'现代操作系统'</span><span class="token punctuation">,</span> <span class="token string">'王小国'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20010128'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0025'</span><span class="token punctuation">,</span> <span class="token string">'计算机体系结构'</span><span class="token punctuation">,</span> <span class="token string">'方丹'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0010'</span><span class="token punctuation">,</span> <span class="token string">'大众生活'</span><span class="token punctuation">,</span> <span class="token string">'许阳'</span><span class="token punctuation">,</span> <span class="token string">'电子出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990819'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0021'</span><span class="token punctuation">,</span> <span class="token string">'网络基础'</span><span class="token punctuation">,</span> <span class="token string">'王大尉'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000617'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0006'</span><span class="token punctuation">,</span> <span class="token string">'世界杯'</span><span class="token punctuation">,</span> <span class="token string">'柳飞'</span><span class="token punctuation">,</span> <span class="token string">'世界出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990412'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0028'</span><span class="token punctuation">,</span> <span class="token string">'高级语言程序设计'</span><span class="token punctuation">,</span> <span class="token string">'寇国华'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000117'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0038'</span><span class="token punctuation">,</span> <span class="token string">'十大旅游胜地'</span><span class="token punctuation">,</span> <span class="token string">'潭晓明'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000403'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0018'</span><span class="token punctuation">,</span> <span class="token string">'编译原理'</span><span class="token punctuation">,</span> <span class="token string">'郑键'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000415'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0007'</span><span class="token punctuation">,</span> <span class="token string">'JAVA程序设计'</span><span class="token punctuation">,</span> <span class="token string">'张余'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990613'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0013'</span><span class="token punctuation">,</span> <span class="token string">'幽灵'</span><span class="token punctuation">,</span> <span class="token string">'钱力华'</span><span class="token punctuation">,</span> <span class="token string">'华光出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991008'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0022'</span><span class="token punctuation">,</span> <span class="token string">'万紫千红'</span><span class="token punctuation">,</span> <span class="token string">'丛丽'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000702'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0027'</span><span class="token punctuation">,</span> <span class="token string">'世界语言大观'</span><span class="token punctuation">,</span> <span class="token string">'候丙辉'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000814'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0029'</span><span class="token punctuation">,</span> <span class="token string">'操作系统概论'</span><span class="token punctuation">,</span> <span class="token string">'聂元名'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20001028'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0016'</span><span class="token punctuation">,</span> <span class="token string">'数据库系统概念'</span><span class="token punctuation">,</span> <span class="token string">'吴红'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0005'</span><span class="token punctuation">,</span> <span class="token string">'java基础'</span><span class="token punctuation">,</span> <span class="token string">'王一'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990528'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0032'</span><span class="token punctuation">,</span> <span class="token string">'SQL使用手册'</span><span class="token punctuation">,</span> <span class="token string">'贺民'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990425'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'书籍编号'</span><span class="token punctuation">,</span> <span class="token string">'书籍名称'</span><span class="token punctuation">,</span> <span class="token string">'作者'</span><span class="token punctuation">,</span> <span class="token string">'出版社'</span><span class="token punctuation">,</span> <span class="token string">'出版日期'</span><span class="token punctuation">,</span> <span class="token string">'库存数量'</span><span class="token punctuation">]</span><span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'网格控件'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>grid <span class="token operator">=</span> self<span class="token punctuation">.</span>CreateGrid<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>EVT_GRID_LABEL_LEFT_CLICK<span class="token punctuation">,</span> self<span class="token punctuation">.</span>OnLabelLeftClick<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">OnLabelLeftClick</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RowIdx：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ColIdx：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetCol<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>event<span class="token punctuation">.</span>GetRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>Skip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">CreateGrid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">:</span>        grid <span class="token operator">=</span> wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>Grid<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>CreateGrid<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                grid<span class="token punctuation">.</span>SetColLabelValue<span class="token punctuation">(</span>col<span class="token punctuation">,</span> column_names<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>                grid<span class="token punctuation">.</span>SetCellValue<span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">## 设置行和列自定调整</span>        grid<span class="token punctuation">.</span>AutoSize<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> grid<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token keyword">import</span> wx<span class="token punctuation">.</span>griddata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'0036'</span><span class="token punctuation">,</span> <span class="token string">'高等数学'</span><span class="token punctuation">,</span> <span class="token string">'李放'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000812'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0004'</span><span class="token punctuation">,</span> <span class="token string">'FLASH精选'</span><span class="token punctuation">,</span> <span class="token string">'刘扬'</span><span class="token punctuation">,</span> <span class="token string">'中国纺织出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990312'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0026'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'牛田'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0015'</span><span class="token punctuation">,</span> <span class="token string">'人工智能'</span><span class="token punctuation">,</span> <span class="token string">'周未'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991223'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0037'</span><span class="token punctuation">,</span> <span class="token string">'南方周末'</span><span class="token punctuation">,</span> <span class="token string">'邓光明'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000923'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0008'</span><span class="token punctuation">,</span> <span class="token string">'新概念3'</span><span class="token punctuation">,</span> <span class="token string">'余智'</span><span class="token punctuation">,</span> <span class="token string">'外语出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990723'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0019'</span><span class="token punctuation">,</span> <span class="token string">'通讯与网络'</span><span class="token punctuation">,</span> <span class="token string">'欧阳杰'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000517'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0014'</span><span class="token punctuation">,</span> <span class="token string">'期货分析'</span><span class="token punctuation">,</span> <span class="token string">'孙宝'</span><span class="token punctuation">,</span> <span class="token string">'飞鸟出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991122'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0023'</span><span class="token punctuation">,</span> <span class="token string">'经济概论'</span><span class="token punctuation">,</span> <span class="token string">'思佳'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000819'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0017'</span><span class="token punctuation">,</span> <span class="token string">'计算机理论基础'</span><span class="token punctuation">,</span> <span class="token string">'戴家'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000218'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0002'</span><span class="token punctuation">,</span> <span class="token string">'汇编语言'</span><span class="token punctuation">,</span> <span class="token string">'李利光'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980318'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0033'</span><span class="token punctuation">,</span> <span class="token string">'模拟电路'</span><span class="token punctuation">,</span> <span class="token string">'邓英才'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000527'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0011'</span><span class="token punctuation">,</span> <span class="token string">'南方旅游'</span><span class="token punctuation">,</span> <span class="token string">'王爱国'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990930'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0039'</span><span class="token punctuation">,</span> <span class="token string">'黑幕'</span><span class="token punctuation">,</span> <span class="token string">'李仪'</span><span class="token punctuation">,</span> <span class="token string">'华光出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000508'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0001'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'戴国强'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980528'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0034'</span><span class="token punctuation">,</span> <span class="token string">'集邮爱好者'</span><span class="token punctuation">,</span> <span class="token string">'李云'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000630'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0031'</span><span class="token punctuation">,</span> <span class="token string">'软件工程'</span><span class="token punctuation">,</span> <span class="token string">'戴志名'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000324'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0030'</span><span class="token punctuation">,</span> <span class="token string">'数据库及应用'</span><span class="token punctuation">,</span> <span class="token string">'孙家萧'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000619'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0024'</span><span class="token punctuation">,</span> <span class="token string">'经济与科学'</span><span class="token punctuation">,</span> <span class="token string">'毛波'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000923'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0009'</span><span class="token punctuation">,</span> <span class="token string">'军事要闻'</span><span class="token punctuation">,</span> <span class="token string">'张强'</span><span class="token punctuation">,</span> <span class="token string">'解放军出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990722'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0003'</span><span class="token punctuation">,</span> <span class="token string">'计算机基础'</span><span class="token punctuation">,</span> <span class="token string">'王飞'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'19980218'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0020'</span><span class="token punctuation">,</span> <span class="token string">'现代操作系统'</span><span class="token punctuation">,</span> <span class="token string">'王小国'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20010128'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0025'</span><span class="token punctuation">,</span> <span class="token string">'计算机体系结构'</span><span class="token punctuation">,</span> <span class="token string">'方丹'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0010'</span><span class="token punctuation">,</span> <span class="token string">'大众生活'</span><span class="token punctuation">,</span> <span class="token string">'许阳'</span><span class="token punctuation">,</span> <span class="token string">'电子出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990819'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0021'</span><span class="token punctuation">,</span> <span class="token string">'网络基础'</span><span class="token punctuation">,</span> <span class="token string">'王大尉'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000617'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0006'</span><span class="token punctuation">,</span> <span class="token string">'世界杯'</span><span class="token punctuation">,</span> <span class="token string">'柳飞'</span><span class="token punctuation">,</span> <span class="token string">'世界出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990412'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0028'</span><span class="token punctuation">,</span> <span class="token string">'高级语言程序设计'</span><span class="token punctuation">,</span> <span class="token string">'寇国华'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000117'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0038'</span><span class="token punctuation">,</span> <span class="token string">'十大旅游胜地'</span><span class="token punctuation">,</span> <span class="token string">'潭晓明'</span><span class="token punctuation">,</span> <span class="token string">'南方出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000403'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0018'</span><span class="token punctuation">,</span> <span class="token string">'编译原理'</span><span class="token punctuation">,</span> <span class="token string">'郑键'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000415'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0007'</span><span class="token punctuation">,</span> <span class="token string">'JAVA程序设计'</span><span class="token punctuation">,</span> <span class="token string">'张余'</span><span class="token punctuation">,</span> <span class="token string">'人民邮电出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990613'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0013'</span><span class="token punctuation">,</span> <span class="token string">'幽灵'</span><span class="token punctuation">,</span> <span class="token string">'钱力华'</span><span class="token punctuation">,</span> <span class="token string">'华光出版社'</span><span class="token punctuation">,</span> <span class="token string">'19991008'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0022'</span><span class="token punctuation">,</span> <span class="token string">'万紫千红'</span><span class="token punctuation">,</span> <span class="token string">'丛丽'</span><span class="token punctuation">,</span> <span class="token string">'北京大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000702'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0027'</span><span class="token punctuation">,</span> <span class="token string">'世界语言大观'</span><span class="token punctuation">,</span> <span class="token string">'候丙辉'</span><span class="token punctuation">,</span> <span class="token string">'经济科学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000814'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0029'</span><span class="token punctuation">,</span> <span class="token string">'操作系统概论'</span><span class="token punctuation">,</span> <span class="token string">'聂元名'</span><span class="token punctuation">,</span> <span class="token string">'清华大学出版社'</span><span class="token punctuation">,</span> <span class="token string">'20001028'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0016'</span><span class="token punctuation">,</span> <span class="token string">'数据库系统概念'</span><span class="token punctuation">,</span> <span class="token string">'吴红'</span><span class="token punctuation">,</span> <span class="token string">'机械工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'20000328'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0005'</span><span class="token punctuation">,</span> <span class="token string">'java基础'</span><span class="token punctuation">,</span> <span class="token string">'王一'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990528'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'0032'</span><span class="token punctuation">,</span> <span class="token string">'SQL使用手册'</span><span class="token punctuation">,</span> <span class="token string">'贺民'</span><span class="token punctuation">,</span> <span class="token string">'电子工业出版社'</span><span class="token punctuation">,</span> <span class="token string">'19990425'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'书籍编号'</span><span class="token punctuation">,</span> <span class="token string">'书籍名称书籍名称'</span><span class="token punctuation">,</span> <span class="token string">'作者'</span><span class="token punctuation">,</span> <span class="token string">'出版社'</span><span class="token punctuation">,</span> <span class="token string">'出版日期'</span><span class="token punctuation">,</span> <span class="token string">'库存数量'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MyGridTable</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>GridTableBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>colLabels <span class="token operator">=</span> column_names    <span class="token keyword">def</span> <span class="token function">GetNumberRows</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GetNumberCols</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">GetColLabelValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>colLabels<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'网格控件'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>grid <span class="token operator">=</span> self<span class="token punctuation">.</span>CreateGrid<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>EVT_GRID_LABEL_LEFT_CLICK<span class="token punctuation">,</span> self<span class="token punctuation">.</span>OnLabelLeftClick<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">OnLabelLeftClick</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RowIdx：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ColIdx：&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>GetCol<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>event<span class="token punctuation">.</span>GetRow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        event<span class="token punctuation">.</span>Skip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">CreateGrid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">:</span>        grid <span class="token operator">=</span> wx<span class="token punctuation">.</span>grid<span class="token punctuation">.</span>Grid<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        tablebase <span class="token operator">=</span> MyGridTable<span class="token punctuation">(</span><span class="token punctuation">)</span>        grid<span class="token punctuation">.</span>SetTable<span class="token punctuation">(</span>tablebase<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment">## 设置行和列自定调整</span>        grid<span class="token punctuation">.</span>AutoSize<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> grid<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用菜单"><a href="#使用菜单" class="headerlink" title="使用菜单"></a>使用菜单</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token keyword">import</span> wx<span class="token punctuation">.</span>grid<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'使用菜单'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>                self<span class="token punctuation">.</span>text <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>        menubar <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuBar<span class="token punctuation">(</span><span class="token punctuation">)</span>        file_menu <span class="token operator">=</span> wx<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>file_menu<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ID_NEW<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"新建"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_MENU<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_newitem_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span>wx<span class="token punctuation">.</span>ID_NEW<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>new_item<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>AppendSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        edit_menu <span class="token operator">=</span> wx<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        copy_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"复制"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>copy_item<span class="token punctuation">)</span>        cut_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"剪切"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>cut_item<span class="token punctuation">)</span>        paste_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"粘贴"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>paste_item<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_MENU<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_editmenu_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ID_ANY<span class="token punctuation">,</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span> edit_menu<span class="token punctuation">)</span>        menubar<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>file_menu<span class="token punctuation">,</span> <span class="token string">'文件'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>SetMenuBar<span class="token punctuation">(</span>menubar<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_newitem_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【新建】菜单'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_editmenu_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【复制】菜单'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event_id <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【剪切】菜单'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【粘贴】菜单'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_21396\3458874188.py:36: DeprecationWarning: Menu.Append() is deprecated  file_menu.Append(wx.ID_ANY, &quot;编辑&quot;, edit_menu)</code></pre><h3 id="使用工具栏"><a href="#使用工具栏" class="headerlink" title="使用工具栏"></a>使用工具栏</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wx<span class="token keyword">import</span> wx<span class="token punctuation">.</span>grid<span class="token comment">## 自定义窗口类MyFrame</span><span class="token keyword">class</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'使用工具栏'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">550</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Centre<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 设置窗口居中</span>        self<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>text <span class="token operator">=</span> wx<span class="token punctuation">.</span>TextCtrl<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> style<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>TE_MULTILINE<span class="token punctuation">)</span>        vbox <span class="token operator">=</span> wx<span class="token punctuation">.</span>BoxSizer<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>        vbox<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">,</span> proportion<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token operator">=</span>wx<span class="token punctuation">.</span>EXPAND <span class="token operator">|</span> wx<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> border<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>SetSizer<span class="token punctuation">(</span>vbox<span class="token punctuation">)</span>        menubar <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuBar<span class="token punctuation">(</span><span class="token punctuation">)</span>        file_menu <span class="token operator">=</span> wx<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>file_menu<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ID_NEW<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"新建"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>new_item<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>AppendSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        edit_menu <span class="token operator">=</span> wx<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        copy_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"复制"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>copy_item<span class="token punctuation">)</span>        cut_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"剪切"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>cut_item<span class="token punctuation">)</span>        paste_item <span class="token operator">=</span> wx<span class="token punctuation">.</span>MenuItem<span class="token punctuation">(</span>edit_menu<span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"粘贴"</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">)</span>        edit_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>paste_item<span class="token punctuation">)</span>        file_menu<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ID_ANY<span class="token punctuation">,</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span> edit_menu<span class="token punctuation">)</span>        menubar<span class="token punctuation">.</span>Append<span class="token punctuation">(</span>file_menu<span class="token punctuation">,</span> <span class="token string">'文件'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>SetMenuBar<span class="token punctuation">(</span>menubar<span class="token punctuation">)</span>        tb <span class="token operator">=</span> wx<span class="token punctuation">.</span>ToolBar<span class="token punctuation">(</span>self<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ID_ANY<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ToolBar <span class="token operator">=</span> tb        tsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>        new_bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_NEW<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ART_TOOLBAR<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span>        open_bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_FILE_OPEN<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ART_TOOLBAR<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span>        copy_bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_COPY<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ART_TOOLBAR<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span>        paste_bmp <span class="token operator">=</span> wx<span class="token punctuation">.</span>ArtProvider<span class="token punctuation">.</span>GetBitmap<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>ART_PASTE<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ART_TOOLBAR<span class="token punctuation">,</span> tsize<span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"New"</span><span class="token punctuation">,</span> new_bmp<span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"New"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"Open"</span><span class="token punctuation">,</span> open_bmp<span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Open"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"Copy"</span><span class="token punctuation">,</span> copy_bmp<span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Copy"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"Paste"</span><span class="token punctuation">,</span> paste_bmp<span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Paste"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">"back"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">"menu_icon/back.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Back"</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddTool<span class="token punctuation">(</span><span class="token number">202</span><span class="token punctuation">,</span> <span class="token string">"forward"</span><span class="token punctuation">,</span> wx<span class="token punctuation">.</span>Bitmap<span class="token punctuation">(</span><span class="token string">"menu_icon/forward.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kind<span class="token operator">=</span>wx<span class="token punctuation">.</span>ITEM_NORMAL<span class="token punctuation">,</span> shortHelp<span class="token operator">=</span><span class="token string">"Forward"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Bind<span class="token punctuation">(</span>wx<span class="token punctuation">.</span>EVT_MENU<span class="token punctuation">,</span> self<span class="token punctuation">.</span>on_click<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">,</span> id2<span class="token operator">=</span><span class="token number">202</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>AddSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>        tb<span class="token punctuation">.</span>Realize<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        event_id <span class="token operator">=</span> event<span class="token punctuation">.</span>GetId<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> event_id <span class="token operator">==</span> <span class="token number">201</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【Back】按钮'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SetLabel<span class="token punctuation">(</span><span class="token string">'单击【Forward】按钮'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>App<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">OnInit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 创建窗口对象</span>        frame <span class="token operator">=</span> MyFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> App<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">## 进入主事件循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_24844\2637029235.py:34: DeprecationWarning: Menu.Append() is deprecated  file_menu.Append(wx.ID_ANY, &quot;编辑&quot;, edit_menu)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="项目实战1：网络爬虫余爬取股票数据"><a href="#项目实战1：网络爬虫余爬取股票数据" class="headerlink" title="项目实战1：网络爬虫余爬取股票数据"></a>项目实战1：网络爬虫余爬取股票数据</h2><h3 id="网络爬虫基数概述"><a href="#网络爬虫基数概述" class="headerlink" title="网络爬虫基数概述"></a>网络爬虫基数概述</h3><h4 id="网络通信技术"><a href="#网络通信技术" class="headerlink" title="网络通信技术"></a>网络通信技术</h4><h4 id="多线程技术"><a href="#多线程技术" class="headerlink" title="多线程技术"></a>多线程技术</h4><h4 id="数据交换技术"><a href="#数据交换技术" class="headerlink" title="数据交换技术"></a>数据交换技术</h4><h4 id="web前端技术"><a href="#web前端技术" class="headerlink" title="web前端技术"></a>web前端技术</h4><h4 id="数据存储技术"><a href="#数据存储技术" class="headerlink" title="数据存储技术"></a>数据存储技术</h4><h3 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h3><h4 id="网页中静态和动态数据"><a href="#网页中静态和动态数据" class="headerlink" title="网页中静态和动态数据"></a>网页中静态和动态数据</h4><h4 id="使用urllib爬取数据"><a href="#使用urllib爬取数据" class="headerlink" title="使用urllib爬取数据"></a>使用urllib爬取数据</h4><ol><li>获得静态数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">"file:///C:/Users/HP/nasdaq-Apple1.html"</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>!doctype html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Generator"</span> content<span class="token operator">=</span><span class="token string">"EditPlus®"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Author"</span> content<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Keywords"</span> content<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Description"</span> content<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"quotes_content_left_pnlAJAX"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>table <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>thead <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-headings"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row historical-data__row--headings"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Date<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Open<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>High<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Low<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Close<span class="token operator">/</span>Last<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>th <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-heading"</span> scope<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>Volume<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>        <span class="token operator">&lt;</span>tbody <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__table-body"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">10</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">225.64</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">227.49</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.89</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">227.01</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">755</span><span class="token punctuation">,</span><span class="token number">550</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">10</span><span class="token operator">/</span><span class="token number">03</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.43</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">215.132</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.82</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">352</span><span class="token punctuation">,</span><span class="token number">690</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">10</span><span class="token operator">/</span><span class="token number">02</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.06</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.58</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.93</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">767</span><span class="token punctuation">,</span><span class="token number">260</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">10</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">225.07</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">228.22</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">224.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">224.59</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">187</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">30</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.9</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">224.58</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.79</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.97</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">318</span><span class="token punctuation">,</span><span class="token number">580</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">27</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.54</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.2814</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.82</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">361</span><span class="token punctuation">,</span><span class="token number">290</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">26</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.94</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.83</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.89</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">088</span><span class="token punctuation">,</span><span class="token number">310</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">25</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.55</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.1402</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.03</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">481</span><span class="token punctuation">,</span><span class="token number">010</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">24</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.03</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.49</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.19</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.68</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">434</span><span class="token punctuation">,</span><span class="token number">370</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">23</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.95</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.84</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.65</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.72</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">419</span><span class="token punctuation">,</span><span class="token number">650</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.38</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.56</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.473</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.73</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">977</span><span class="token punctuation">,</span><span class="token number">090</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">19</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.01</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.76</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.37</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">187</span><span class="token punctuation">,</span><span class="token number">880</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">18</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">221.06</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.85</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.44</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.77</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">643</span><span class="token punctuation">,</span><span class="token number">090</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">17</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.96</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.82</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.7</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">386</span><span class="token punctuation">,</span><span class="token number">470</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">16</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.73</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.13</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.56</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">219.9</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">158</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">13</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">220.79</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.02</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.75</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">763</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">12</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">224.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">226.42</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">222.86</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.085</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">226</span><span class="token punctuation">,</span><span class="token number">670</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"historical-data__row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token number">09</span><span class="token operator">/</span><span class="token number">11</span><span class="token operator">/</span><span class="token number">2019</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">218.07</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.71</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">217.73</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">223.59</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">289</span><span class="token punctuation">,</span><span class="token number">650</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>获得动态数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">'http://q.stock.sohu.com/hisHq?code=cn_600519&amp;stat=1&amp;order=D&amp;period=d&amp;callback=historySearchHandler&amp;rt=jsonp&amp;0.8115656498417958'</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> htmlstr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'historySearchHandler('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> htmlstr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'替换后的：'</span><span class="token punctuation">,</span> htmlstr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">historySearchHandler<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"hq"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"2023-04-18"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"1758.00"</span><span class="token punctuation">,</span><span class="token string">"5.00"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">,</span><span class="token string">"1746.02"</span><span class="token punctuation">,</span><span class="token string">"1769.00"</span><span class="token punctuation">,</span><span class="token string">"18314"</span><span class="token punctuation">,</span><span class="token string">"322010.75"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-17"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"39.58"</span><span class="token punctuation">,</span><span class="token string">"2.31%"</span><span class="token punctuation">,</span><span class="token string">"1728.00"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"30467"</span><span class="token punctuation">,</span><span class="token string">"530340.12"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-14"</span><span class="token punctuation">,</span><span class="token string">"1726.00"</span><span class="token punctuation">,</span><span class="token string">"1713.42"</span><span class="token punctuation">,</span><span class="token string">"-9.58"</span><span class="token punctuation">,</span><span class="token string">"-0.56%"</span><span class="token punctuation">,</span><span class="token string">"1704.80"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"21232"</span><span class="token punctuation">,</span><span class="token string">"364652.69"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-13"</span><span class="token punctuation">,</span><span class="token string">"1690.00"</span><span class="token punctuation">,</span><span class="token string">"1723.00"</span><span class="token punctuation">,</span><span class="token string">"28.90"</span><span class="token punctuation">,</span><span class="token string">"1.71%"</span><span class="token punctuation">,</span><span class="token string">"1684.01"</span><span class="token punctuation">,</span><span class="token string">"1723.59"</span><span class="token punctuation">,</span><span class="token string">"29543"</span><span class="token punctuation">,</span><span class="token string">"504931.03"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-12"</span><span class="token punctuation">,</span><span class="token string">"1747.26"</span><span class="token punctuation">,</span><span class="token string">"1694.10"</span><span class="token punctuation">,</span><span class="token string">"-51.40"</span><span class="token punctuation">,</span><span class="token string">"-2.94%"</span><span class="token punctuation">,</span><span class="token string">"1692.82"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"51105"</span><span class="token punctuation">,</span><span class="token string">"873265.75"</span><span class="token punctuation">,</span><span class="token string">"0.41%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-11"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"1745.50"</span><span class="token punctuation">,</span><span class="token string">"-26.20"</span><span class="token punctuation">,</span><span class="token string">"-1.48%"</span><span class="token punctuation">,</span><span class="token string">"1744.00"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"29209"</span><span class="token punctuation">,</span><span class="token string">"513885.44"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-10"</span><span class="token punctuation">,</span><span class="token string">"1790.88"</span><span class="token punctuation">,</span><span class="token string">"1771.70"</span><span class="token punctuation">,</span><span class="token string">"-19.29"</span><span class="token punctuation">,</span><span class="token string">"-1.08%"</span><span class="token punctuation">,</span><span class="token string">"1744.00"</span><span class="token punctuation">,</span><span class="token string">"1790.88"</span><span class="token punctuation">,</span><span class="token string">"29418"</span><span class="token punctuation">,</span><span class="token string">"517115.03"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-07"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"1790.99"</span><span class="token punctuation">,</span><span class="token string">"-5.97"</span><span class="token punctuation">,</span><span class="token string">"-0.33%"</span><span class="token punctuation">,</span><span class="token string">"1788.34"</span><span class="token punctuation">,</span><span class="token string">"1806.01"</span><span class="token punctuation">,</span><span class="token string">"13525"</span><span class="token punctuation">,</span><span class="token string">"242816.05"</span><span class="token punctuation">,</span><span class="token string">"0.11%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-06"</span><span class="token punctuation">,</span><span class="token string">"1805.00"</span><span class="token punctuation">,</span><span class="token string">"1796.96"</span><span class="token punctuation">,</span><span class="token string">"-17.63"</span><span class="token punctuation">,</span><span class="token string">"-0.97%"</span><span class="token punctuation">,</span><span class="token string">"1788.22"</span><span class="token punctuation">,</span><span class="token string">"1815.90"</span><span class="token punctuation">,</span><span class="token string">"14874"</span><span class="token punctuation">,</span><span class="token string">"267625.19"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-04"</span><span class="token punctuation">,</span><span class="token string">"1812.00"</span><span class="token punctuation">,</span><span class="token string">"1814.59"</span><span class="token punctuation">,</span><span class="token string">"12.52"</span><span class="token punctuation">,</span><span class="token string">"0.69%"</span><span class="token punctuation">,</span><span class="token string">"1787.00"</span><span class="token punctuation">,</span><span class="token string">"1815.17"</span><span class="token punctuation">,</span><span class="token string">"20066"</span><span class="token punctuation">,</span><span class="token string">"361427.53"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-03"</span><span class="token punctuation">,</span><span class="token string">"1825.00"</span><span class="token punctuation">,</span><span class="token string">"1802.07"</span><span class="token punctuation">,</span><span class="token string">"-17.93"</span><span class="token punctuation">,</span><span class="token string">"-0.99%"</span><span class="token punctuation">,</span><span class="token string">"1800.08"</span><span class="token punctuation">,</span><span class="token string">"1827.77"</span><span class="token punctuation">,</span><span class="token string">"21417"</span><span class="token punctuation">,</span><span class="token string">"387581.16"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-31"</span><span class="token punctuation">,</span><span class="token string">"1825.00"</span><span class="token punctuation">,</span><span class="token string">"1820.00"</span><span class="token punctuation">,</span><span class="token string">"20.00"</span><span class="token punctuation">,</span><span class="token string">"1.11%"</span><span class="token punctuation">,</span><span class="token string">"1819.00"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"27446"</span><span class="token punctuation">,</span><span class="token string">"502479.06"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-30"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"1800.00"</span><span class="token punctuation">,</span><span class="token string">"10.00"</span><span class="token punctuation">,</span><span class="token string">"0.56%"</span><span class="token punctuation">,</span><span class="token string">"1779.00"</span><span class="token punctuation">,</span><span class="token string">"1805.00"</span><span class="token punctuation">,</span><span class="token string">"19257"</span><span class="token punctuation">,</span><span class="token string">"345357.31"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-29"</span><span class="token punctuation">,</span><span class="token string">"1799.00"</span><span class="token punctuation">,</span><span class="token string">"1790.00"</span><span class="token punctuation">,</span><span class="token string">"8.20"</span><span class="token punctuation">,</span><span class="token string">"0.46%"</span><span class="token punctuation">,</span><span class="token string">"1785.07"</span><span class="token punctuation">,</span><span class="token string">"1800.00"</span><span class="token punctuation">,</span><span class="token string">"15393"</span><span class="token punctuation">,</span><span class="token string">"276190.94"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-28"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"1781.80"</span><span class="token punctuation">,</span><span class="token string">"14.01"</span><span class="token punctuation">,</span><span class="token string">"0.79%"</span><span class="token punctuation">,</span><span class="token string">"1765.02"</span><span class="token punctuation">,</span><span class="token string">"1790.00"</span><span class="token punctuation">,</span><span class="token string">"17261"</span><span class="token punctuation">,</span><span class="token string">"307311.31"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-27"</span><span class="token punctuation">,</span><span class="token string">"1778.60"</span><span class="token punctuation">,</span><span class="token string">"1767.79"</span><span class="token punctuation">,</span><span class="token string">"-10.83"</span><span class="token punctuation">,</span><span class="token string">"-0.61%"</span><span class="token punctuation">,</span><span class="token string">"1756.00"</span><span class="token punctuation">,</span><span class="token string">"1778.60"</span><span class="token punctuation">,</span><span class="token string">"15296"</span><span class="token punctuation">,</span><span class="token string">"270075.59"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-24"</span><span class="token punctuation">,</span><span class="token string">"1769.08"</span><span class="token punctuation">,</span><span class="token string">"1778.62"</span><span class="token punctuation">,</span><span class="token string">"3.76"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"1783.60"</span><span class="token punctuation">,</span><span class="token string">"12770"</span><span class="token punctuation">,</span><span class="token string">"226964.92"</span><span class="token punctuation">,</span><span class="token string">"0.10%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-23"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"1774.86"</span><span class="token punctuation">,</span><span class="token string">"1.51"</span><span class="token punctuation">,</span><span class="token string">"0.09%"</span><span class="token punctuation">,</span><span class="token string">"1765.01"</span><span class="token punctuation">,</span><span class="token string">"1791.11"</span><span class="token punctuation">,</span><span class="token string">"17356"</span><span class="token punctuation">,</span><span class="token string">"308282.16"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-22"</span><span class="token punctuation">,</span><span class="token string">"1780.00"</span><span class="token punctuation">,</span><span class="token string">"1773.35"</span><span class="token punctuation">,</span><span class="token string">"-1.65"</span><span class="token punctuation">,</span><span class="token string">"-0.09%"</span><span class="token punctuation">,</span><span class="token string">"1765.55"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"15330"</span><span class="token punctuation">,</span><span class="token string">"272764.88"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-21"</span><span class="token punctuation">,</span><span class="token string">"1735.00"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"45.40"</span><span class="token punctuation">,</span><span class="token string">"2.62%"</span><span class="token punctuation">,</span><span class="token string">"1723.97"</span><span class="token punctuation">,</span><span class="token string">"1785.85"</span><span class="token punctuation">,</span><span class="token string">"31142"</span><span class="token punctuation">,</span><span class="token string">"549105.19"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-20"</span><span class="token punctuation">,</span><span class="token string">"1751.00"</span><span class="token punctuation">,</span><span class="token string">"1729.60"</span><span class="token punctuation">,</span><span class="token string">"-12.40"</span><span class="token punctuation">,</span><span class="token string">"-0.71%"</span><span class="token punctuation">,</span><span class="token string">"1728.00"</span><span class="token punctuation">,</span><span class="token string">"1755.00"</span><span class="token punctuation">,</span><span class="token string">"20491"</span><span class="token punctuation">,</span><span class="token string">"355787.22"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-17"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"1742.00"</span><span class="token punctuation">,</span><span class="token string">"-9.99"</span><span class="token punctuation">,</span><span class="token string">"-0.57%"</span><span class="token punctuation">,</span><span class="token string">"1736.00"</span><span class="token punctuation">,</span><span class="token string">"1775.89"</span><span class="token punctuation">,</span><span class="token string">"27023"</span><span class="token punctuation">,</span><span class="token string">"474424.94"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-16"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1751.99"</span><span class="token punctuation">,</span><span class="token string">"1.07"</span><span class="token punctuation">,</span><span class="token string">"0.06%"</span><span class="token punctuation">,</span><span class="token string">"1739.01"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"17646"</span><span class="token punctuation">,</span><span class="token string">"309679.09"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-15"</span><span class="token punctuation">,</span><span class="token string">"1778.37"</span><span class="token punctuation">,</span><span class="token string">"1750.92"</span><span class="token punctuation">,</span><span class="token string">"-15.08"</span><span class="token punctuation">,</span><span class="token string">"-0.85%"</span><span class="token punctuation">,</span><span class="token string">"1750.12"</span><span class="token punctuation">,</span><span class="token string">"1784.88"</span><span class="token punctuation">,</span><span class="token string">"19213"</span><span class="token punctuation">,</span><span class="token string">"339269.84"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-14"</span><span class="token punctuation">,</span><span class="token string">"1763.78"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"4.00"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">,</span><span class="token string">"1738.50"</span><span class="token punctuation">,</span><span class="token string">"1779.88"</span><span class="token punctuation">,</span><span class="token string">"23705"</span><span class="token punctuation">,</span><span class="token string">"417728.91"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-13"</span><span class="token punctuation">,</span><span class="token string">"1751.00"</span><span class="token punctuation">,</span><span class="token string">"1762.00"</span><span class="token punctuation">,</span><span class="token string">"12.00"</span><span class="token punctuation">,</span><span class="token string">"0.69%"</span><span class="token punctuation">,</span><span class="token string">"1749.00"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"20560"</span><span class="token punctuation">,</span><span class="token string">"362647.62"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-10"</span><span class="token punctuation">,</span><span class="token string">"1751.57"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"-20.02"</span><span class="token punctuation">,</span><span class="token string">"-1.13%"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"1781.00"</span><span class="token punctuation">,</span><span class="token string">"21161"</span><span class="token punctuation">,</span><span class="token string">"372513.91"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-09"</span><span class="token punctuation">,</span><span class="token string">"1768.00"</span><span class="token punctuation">,</span><span class="token string">"1770.02"</span><span class="token punctuation">,</span><span class="token string">"-0.40"</span><span class="token punctuation">,</span><span class="token string">"-0.02%"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1785.00"</span><span class="token punctuation">,</span><span class="token string">"27612"</span><span class="token punctuation">,</span><span class="token string">"488144.28"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-08"</span><span class="token punctuation">,</span><span class="token string">"1780.02"</span><span class="token punctuation">,</span><span class="token string">"1770.42"</span><span class="token punctuation">,</span><span class="token string">"-17.88"</span><span class="token punctuation">,</span><span class="token string">"-1.00%"</span><span class="token punctuation">,</span><span class="token string">"1761.12"</span><span class="token punctuation">,</span><span class="token string">"1785.94"</span><span class="token punctuation">,</span><span class="token string">"22764"</span><span class="token punctuation">,</span><span class="token string">"403578.72"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-07"</span><span class="token punctuation">,</span><span class="token string">"1805.98"</span><span class="token punctuation">,</span><span class="token string">"1788.30"</span><span class="token punctuation">,</span><span class="token string">"-18.84"</span><span class="token punctuation">,</span><span class="token string">"-1.04%"</span><span class="token punctuation">,</span><span class="token string">"1788.00"</span><span class="token punctuation">,</span><span class="token string">"1816.60"</span><span class="token punctuation">,</span><span class="token string">"22785"</span><span class="token punctuation">,</span><span class="token string">"410130.25"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-06"</span><span class="token punctuation">,</span><span class="token string">"1818.18"</span><span class="token punctuation">,</span><span class="token string">"1807.14"</span><span class="token punctuation">,</span><span class="token string">"-10.90"</span><span class="token punctuation">,</span><span class="token string">"-0.60%"</span><span class="token punctuation">,</span><span class="token string">"1796.77"</span><span class="token punctuation">,</span><span class="token string">"1818.50"</span><span class="token punctuation">,</span><span class="token string">"20646"</span><span class="token punctuation">,</span><span class="token string">"373007.94"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-03"</span><span class="token punctuation">,</span><span class="token string">"1839.77"</span><span class="token punctuation">,</span><span class="token string">"1818.04"</span><span class="token punctuation">,</span><span class="token string">"-9.96"</span><span class="token punctuation">,</span><span class="token string">"-0.54%"</span><span class="token punctuation">,</span><span class="token string">"1802.48"</span><span class="token punctuation">,</span><span class="token string">"1841.61"</span><span class="token punctuation">,</span><span class="token string">"16198"</span><span class="token punctuation">,</span><span class="token string">"294684.25"</span><span class="token punctuation">,</span><span class="token string">"0.13%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-02"</span><span class="token punctuation">,</span><span class="token string">"1829.00"</span><span class="token punctuation">,</span><span class="token string">"1828.00"</span><span class="token punctuation">,</span><span class="token string">"-10.53"</span><span class="token punctuation">,</span><span class="token string">"-0.57%"</span><span class="token punctuation">,</span><span class="token string">"1821.10"</span><span class="token punctuation">,</span><span class="token string">"1838.99"</span><span class="token punctuation">,</span><span class="token string">"13144"</span><span class="token punctuation">,</span><span class="token string">"240529.23"</span><span class="token punctuation">,</span><span class="token string">"0.10%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-01"</span><span class="token punctuation">,</span><span class="token string">"1813.00"</span><span class="token punctuation">,</span><span class="token string">"1838.53"</span><span class="token punctuation">,</span><span class="token string">"24.79"</span><span class="token punctuation">,</span><span class="token string">"1.37%"</span><span class="token punctuation">,</span><span class="token string">"1803.23"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"24458"</span><span class="token punctuation">,</span><span class="token string">"447559.22"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-28"</span><span class="token punctuation">,</span><span class="token string">"1819.00"</span><span class="token punctuation">,</span><span class="token string">"1813.74"</span><span class="token punctuation">,</span><span class="token string">"3.33"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">,</span><span class="token string">"1783.30"</span><span class="token punctuation">,</span><span class="token string">"1822.01"</span><span class="token punctuation">,</span><span class="token string">"23952"</span><span class="token punctuation">,</span><span class="token string">"431487.69"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-27"</span><span class="token punctuation">,</span><span class="token string">"1778.50"</span><span class="token punctuation">,</span><span class="token string">"1810.41"</span><span class="token punctuation">,</span><span class="token string">"22.41"</span><span class="token punctuation">,</span><span class="token string">"1.25%"</span><span class="token punctuation">,</span><span class="token string">"1775.02"</span><span class="token punctuation">,</span><span class="token string">"1815.00"</span><span class="token punctuation">,</span><span class="token string">"22065"</span><span class="token punctuation">,</span><span class="token string">"397812.88"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-24"</span><span class="token punctuation">,</span><span class="token string">"1810.11"</span><span class="token punctuation">,</span><span class="token string">"1788.00"</span><span class="token punctuation">,</span><span class="token string">"-30.00"</span><span class="token punctuation">,</span><span class="token string">"-1.65%"</span><span class="token punctuation">,</span><span class="token string">"1782.18"</span><span class="token punctuation">,</span><span class="token string">"1810.19"</span><span class="token punctuation">,</span><span class="token string">"24635"</span><span class="token punctuation">,</span><span class="token string">"441562.16"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-23"</span><span class="token punctuation">,</span><span class="token string">"1840.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"-18.00"</span><span class="token punctuation">,</span><span class="token string">"-0.98%"</span><span class="token punctuation">,</span><span class="token string">"1805.25"</span><span class="token punctuation">,</span><span class="token string">"1848.80"</span><span class="token punctuation">,</span><span class="token string">"21881"</span><span class="token punctuation">,</span><span class="token string">"398399.12"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-22"</span><span class="token punctuation">,</span><span class="token string">"1855.01"</span><span class="token punctuation">,</span><span class="token string">"1836.00"</span><span class="token punctuation">,</span><span class="token string">"-31.00"</span><span class="token punctuation">,</span><span class="token string">"-1.66%"</span><span class="token punctuation">,</span><span class="token string">"1831.80"</span><span class="token punctuation">,</span><span class="token string">"1863.90"</span><span class="token punctuation">,</span><span class="token string">"21869"</span><span class="token punctuation">,</span><span class="token string">"403101.59"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-21"</span><span class="token punctuation">,</span><span class="token string">"1874.00"</span><span class="token punctuation">,</span><span class="token string">"1867.00"</span><span class="token punctuation">,</span><span class="token string">"-8.00"</span><span class="token punctuation">,</span><span class="token string">"-0.43%"</span><span class="token punctuation">,</span><span class="token string">"1851.00"</span><span class="token punctuation">,</span><span class="token string">"1874.00"</span><span class="token punctuation">,</span><span class="token string">"18751"</span><span class="token punctuation">,</span><span class="token string">"349163.34"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-20"</span><span class="token punctuation">,</span><span class="token string">"1821.00"</span><span class="token punctuation">,</span><span class="token string">"1875.00"</span><span class="token punctuation">,</span><span class="token string">"54.22"</span><span class="token punctuation">,</span><span class="token string">"2.98%"</span><span class="token punctuation">,</span><span class="token string">"1817.20"</span><span class="token punctuation">,</span><span class="token string">"1878.80"</span><span class="token punctuation">,</span><span class="token string">"29669"</span><span class="token punctuation">,</span><span class="token string">"548880.00"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-17"</span><span class="token punctuation">,</span><span class="token string">"1850.16"</span><span class="token punctuation">,</span><span class="token string">"1820.78"</span><span class="token punctuation">,</span><span class="token string">"-41.04"</span><span class="token punctuation">,</span><span class="token string">"-2.20%"</span><span class="token punctuation">,</span><span class="token string">"1820.05"</span><span class="token punctuation">,</span><span class="token string">"1873.00"</span><span class="token punctuation">,</span><span class="token string">"26443"</span><span class="token punctuation">,</span><span class="token string">"488032.88"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-16"</span><span class="token punctuation">,</span><span class="token string">"1841.34"</span><span class="token punctuation">,</span><span class="token string">"1861.82"</span><span class="token punctuation">,</span><span class="token string">"20.82"</span><span class="token punctuation">,</span><span class="token string">"1.13%"</span><span class="token punctuation">,</span><span class="token string">"1828.00"</span><span class="token punctuation">,</span><span class="token string">"1887.00"</span><span class="token punctuation">,</span><span class="token string">"33246"</span><span class="token punctuation">,</span><span class="token string">"619691.50"</span><span class="token punctuation">,</span><span class="token string">"0.26%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-15"</span><span class="token punctuation">,</span><span class="token string">"1843.78"</span><span class="token punctuation">,</span><span class="token string">"1841.00"</span><span class="token punctuation">,</span><span class="token string">"-2.79"</span><span class="token punctuation">,</span><span class="token string">"-0.15%"</span><span class="token punctuation">,</span><span class="token string">"1835.81"</span><span class="token punctuation">,</span><span class="token string">"1855.30"</span><span class="token punctuation">,</span><span class="token string">"18177"</span><span class="token punctuation">,</span><span class="token string">"335142.22"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-14"</span><span class="token punctuation">,</span><span class="token string">"1856.46"</span><span class="token punctuation">,</span><span class="token string">"1843.79"</span><span class="token punctuation">,</span><span class="token string">"-12.56"</span><span class="token punctuation">,</span><span class="token string">"-0.68%"</span><span class="token punctuation">,</span><span class="token string">"1835.00"</span><span class="token punctuation">,</span><span class="token string">"1857.40"</span><span class="token punctuation">,</span><span class="token string">"19566"</span><span class="token punctuation">,</span><span class="token string">"360176.94"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-13"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"1856.35"</span><span class="token punctuation">,</span><span class="token string">"46.35"</span><span class="token punctuation">,</span><span class="token string">"2.56%"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"1874.50"</span><span class="token punctuation">,</span><span class="token string">"38147"</span><span class="token punctuation">,</span><span class="token string">"705838.25"</span><span class="token punctuation">,</span><span class="token string">"0.30%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-10"</span><span class="token punctuation">,</span><span class="token string">"1810.10"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"-8.00"</span><span class="token punctuation">,</span><span class="token string">"-0.44%"</span><span class="token punctuation">,</span><span class="token string">"1801.05"</span><span class="token punctuation">,</span><span class="token string">"1818.49"</span><span class="token punctuation">,</span><span class="token string">"17985"</span><span class="token punctuation">,</span><span class="token string">"325385.94"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-09"</span><span class="token punctuation">,</span><span class="token string">"1778.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"34.00"</span><span class="token punctuation">,</span><span class="token string">"1.91%"</span><span class="token punctuation">,</span><span class="token string">"1775.01"</span><span class="token punctuation">,</span><span class="token string">"1829.75"</span><span class="token punctuation">,</span><span class="token string">"29754"</span><span class="token punctuation">,</span><span class="token string">"540139.94"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-08"</span><span class="token punctuation">,</span><span class="token string">"1800.01"</span><span class="token punctuation">,</span><span class="token string">"1784.00"</span><span class="token punctuation">,</span><span class="token string">"-13.00"</span><span class="token punctuation">,</span><span class="token string">"-0.72%"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"1805.97"</span><span class="token punctuation">,</span><span class="token string">"16676"</span><span class="token punctuation">,</span><span class="token string">"298057.47"</span><span class="token punctuation">,</span><span class="token string">"0.13%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-07"</span><span class="token punctuation">,</span><span class="token string">"1808.08"</span><span class="token punctuation">,</span><span class="token string">"1797.00"</span><span class="token punctuation">,</span><span class="token string">"2.00"</span><span class="token punctuation">,</span><span class="token string">"0.11%"</span><span class="token punctuation">,</span><span class="token string">"1787.73"</span><span class="token punctuation">,</span><span class="token string">"1808.80"</span><span class="token punctuation">,</span><span class="token string">"24322"</span><span class="token punctuation">,</span><span class="token string">"437367.19"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-06"</span><span class="token punctuation">,</span><span class="token string">"1780.00"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"-23.00"</span><span class="token punctuation">,</span><span class="token string">"-1.27%"</span><span class="token punctuation">,</span><span class="token string">"1760.00"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"42661"</span><span class="token punctuation">,</span><span class="token string">"759573.94"</span><span class="token punctuation">,</span><span class="token string">"0.34%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-03"</span><span class="token punctuation">,</span><span class="token string">"1820.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"-18.11"</span><span class="token punctuation">,</span><span class="token string">"-0.99%"</span><span class="token punctuation">,</span><span class="token string">"1795.68"</span><span class="token punctuation">,</span><span class="token string">"1826.00"</span><span class="token punctuation">,</span><span class="token string">"34945"</span><span class="token punctuation">,</span><span class="token string">"632463.50"</span><span class="token punctuation">,</span><span class="token string">"0.28%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-02"</span><span class="token punctuation">,</span><span class="token string">"1848.38"</span><span class="token punctuation">,</span><span class="token string">"1836.11"</span><span class="token punctuation">,</span><span class="token string">"-8.86"</span><span class="token punctuation">,</span><span class="token string">"-0.48%"</span><span class="token punctuation">,</span><span class="token string">"1826.00"</span><span class="token punctuation">,</span><span class="token string">"1859.00"</span><span class="token punctuation">,</span><span class="token string">"29759"</span><span class="token punctuation">,</span><span class="token string">"546550.94"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-01"</span><span class="token punctuation">,</span><span class="token string">"1854.98"</span><span class="token punctuation">,</span><span class="token string">"1844.97"</span><span class="token punctuation">,</span><span class="token string">"-0.79"</span><span class="token punctuation">,</span><span class="token string">"-0.04%"</span><span class="token punctuation">,</span><span class="token string">"1811.40"</span><span class="token punctuation">,</span><span class="token string">"1859.00"</span><span class="token punctuation">,</span><span class="token string">"33974"</span><span class="token punctuation">,</span><span class="token string">"624467.94"</span><span class="token punctuation">,</span><span class="token string">"0.27%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-31"</span><span class="token punctuation">,</span><span class="token string">"1896.50"</span><span class="token punctuation">,</span><span class="token string">"1845.76"</span><span class="token punctuation">,</span><span class="token string">"-42.24"</span><span class="token punctuation">,</span><span class="token string">"-2.24%"</span><span class="token punctuation">,</span><span class="token string">"1833.07"</span><span class="token punctuation">,</span><span class="token string">"1899.95"</span><span class="token punctuation">,</span><span class="token string">"32991"</span><span class="token punctuation">,</span><span class="token string">"612831.12"</span><span class="token punctuation">,</span><span class="token string">"0.26%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-30"</span><span class="token punctuation">,</span><span class="token string">"1909.00"</span><span class="token punctuation">,</span><span class="token string">"1888.00"</span><span class="token punctuation">,</span><span class="token string">"27.99"</span><span class="token punctuation">,</span><span class="token string">"1.50%"</span><span class="token punctuation">,</span><span class="token string">"1880.00"</span><span class="token punctuation">,</span><span class="token string">"1909.00"</span><span class="token punctuation">,</span><span class="token string">"35923"</span><span class="token punctuation">,</span><span class="token string">"679975.69"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-20"</span><span class="token punctuation">,</span><span class="token string">"1889.19"</span><span class="token punctuation">,</span><span class="token string">"1860.01"</span><span class="token punctuation">,</span><span class="token string">"-20.20"</span><span class="token punctuation">,</span><span class="token string">"-1.07%"</span><span class="token punctuation">,</span><span class="token string">"1858.00"</span><span class="token punctuation">,</span><span class="token string">"1898.25"</span><span class="token punctuation">,</span><span class="token string">"25609"</span><span class="token punctuation">,</span><span class="token string">"480735.59"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-19"</span><span class="token punctuation">,</span><span class="token string">"1892.50"</span><span class="token punctuation">,</span><span class="token string">"1880.21"</span><span class="token punctuation">,</span><span class="token string">"-12.79"</span><span class="token punctuation">,</span><span class="token string">"-0.68%"</span><span class="token punctuation">,</span><span class="token string">"1866.00"</span><span class="token punctuation">,</span><span class="token string">"1892.52"</span><span class="token punctuation">,</span><span class="token string">"23439"</span><span class="token punctuation">,</span><span class="token string">"440199.44"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-18"</span><span class="token punctuation">,</span><span class="token string">"1914.00"</span><span class="token punctuation">,</span><span class="token string">"1893.00"</span><span class="token punctuation">,</span><span class="token string">"-15.00"</span><span class="token punctuation">,</span><span class="token string">"-0.79%"</span><span class="token punctuation">,</span><span class="token string">"1890.00"</span><span class="token punctuation">,</span><span class="token string">"1925.30"</span><span class="token punctuation">,</span><span class="token string">"21063"</span><span class="token punctuation">,</span><span class="token string">"400866.53"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-17"</span><span class="token punctuation">,</span><span class="token string">"1913.16"</span><span class="token punctuation">,</span><span class="token string">"1908.00"</span><span class="token punctuation">,</span><span class="token string">"-4.90"</span><span class="token punctuation">,</span><span class="token string">"-0.26%"</span><span class="token punctuation">,</span><span class="token string">"1895.00"</span><span class="token punctuation">,</span><span class="token string">"1923.00"</span><span class="token punctuation">,</span><span class="token string">"21299"</span><span class="token punctuation">,</span><span class="token string">"406832.16"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-16"</span><span class="token punctuation">,</span><span class="token string">"1886.00"</span><span class="token punctuation">,</span><span class="token string">"1912.90"</span><span class="token punctuation">,</span><span class="token string">"25.90"</span><span class="token punctuation">,</span><span class="token string">"1.37%"</span><span class="token punctuation">,</span><span class="token string">"1881.00"</span><span class="token punctuation">,</span><span class="token string">"1935.00"</span><span class="token punctuation">,</span><span class="token string">"36848"</span><span class="token punctuation">,</span><span class="token string">"705998.31"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-13"</span><span class="token punctuation">,</span><span class="token string">"1844.18"</span><span class="token punctuation">,</span><span class="token string">"1887.00"</span><span class="token punctuation">,</span><span class="token string">"53.00"</span><span class="token punctuation">,</span><span class="token string">"2.89%"</span><span class="token punctuation">,</span><span class="token string">"1840.00"</span><span class="token punctuation">,</span><span class="token string">"1888.00"</span><span class="token punctuation">,</span><span class="token string">"31940"</span><span class="token punctuation">,</span><span class="token string">"596987.62"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-12"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"1834.00"</span><span class="token punctuation">,</span><span class="token string">"-10.95"</span><span class="token punctuation">,</span><span class="token string">"-0.59%"</span><span class="token punctuation">,</span><span class="token string">"1833.00"</span><span class="token punctuation">,</span><span class="token string">"1856.00"</span><span class="token punctuation">,</span><span class="token string">"17193"</span><span class="token punctuation">,</span><span class="token string">"316263.72"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-11"</span><span class="token punctuation">,</span><span class="token string">"1856.00"</span><span class="token punctuation">,</span><span class="token string">"1844.95"</span><span class="token punctuation">,</span><span class="token string">"-9.50"</span><span class="token punctuation">,</span><span class="token string">"-0.51%"</span><span class="token punctuation">,</span><span class="token string">"1836.84"</span><span class="token punctuation">,</span><span class="token string">"1860.00"</span><span class="token punctuation">,</span><span class="token string">"22720"</span><span class="token punctuation">,</span><span class="token string">"420148.78"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-10"</span><span class="token punctuation">,</span><span class="token string">"1839.06"</span><span class="token punctuation">,</span><span class="token string">"1854.45"</span><span class="token punctuation">,</span><span class="token string">"13.25"</span><span class="token punctuation">,</span><span class="token string">"0.72%"</span><span class="token punctuation">,</span><span class="token string">"1830.50"</span><span class="token punctuation">,</span><span class="token string">"1864.50"</span><span class="token punctuation">,</span><span class="token string">"22732"</span><span class="token punctuation">,</span><span class="token string">"420478.38"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-09"</span><span class="token punctuation">,</span><span class="token string">"1835.00"</span><span class="token punctuation">,</span><span class="token string">"1841.20"</span><span class="token punctuation">,</span><span class="token string">"37.43"</span><span class="token punctuation">,</span><span class="token string">"2.08%"</span><span class="token punctuation">,</span><span class="token string">"1807.82"</span><span class="token punctuation">,</span><span class="token string">"1849.98"</span><span class="token punctuation">,</span><span class="token string">"30977"</span><span class="token punctuation">,</span><span class="token string">"568418.12"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-06"</span><span class="token punctuation">,</span><span class="token string">"1806.12"</span><span class="token punctuation">,</span><span class="token string">"1803.77"</span><span class="token punctuation">,</span><span class="token string">"2.77"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">,</span><span class="token string">"1787.00"</span><span class="token punctuation">,</span><span class="token string">"1811.90"</span><span class="token punctuation">,</span><span class="token string">"24904"</span><span class="token punctuation">,</span><span class="token string">"448083.88"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-05"</span><span class="token punctuation">,</span><span class="token string">"1737.00"</span><span class="token punctuation">,</span><span class="token string">"1801.00"</span><span class="token punctuation">,</span><span class="token string">"75.99"</span><span class="token punctuation">,</span><span class="token string">"4.41%"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"1801.00"</span><span class="token punctuation">,</span><span class="token string">"47943"</span><span class="token punctuation">,</span><span class="token string">"854158.69"</span><span class="token punctuation">,</span><span class="token string">"0.38%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-04"</span><span class="token punctuation">,</span><span class="token string">"1730.00"</span><span class="token punctuation">,</span><span class="token string">"1725.01"</span><span class="token punctuation">,</span><span class="token string">"-5.00"</span><span class="token punctuation">,</span><span class="token string">"-0.29%"</span><span class="token punctuation">,</span><span class="token string">"1716.00"</span><span class="token punctuation">,</span><span class="token string">"1738.70"</span><span class="token punctuation">,</span><span class="token string">"20416"</span><span class="token punctuation">,</span><span class="token string">"352358.22"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-03"</span><span class="token punctuation">,</span><span class="token string">"1731.20"</span><span class="token punctuation">,</span><span class="token string">"1730.01"</span><span class="token punctuation">,</span><span class="token string">"3.01"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">,</span><span class="token string">"1706.01"</span><span class="token punctuation">,</span><span class="token string">"1738.43"</span><span class="token punctuation">,</span><span class="token string">"26034"</span><span class="token punctuation">,</span><span class="token string">"448776.03"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-30"</span><span class="token punctuation">,</span><span class="token string">"1736.00"</span><span class="token punctuation">,</span><span class="token string">"1727.00"</span><span class="token punctuation">,</span><span class="token string">"8.00"</span><span class="token punctuation">,</span><span class="token string">"0.47%"</span><span class="token punctuation">,</span><span class="token string">"1727.00"</span><span class="token punctuation">,</span><span class="token string">"1752.99"</span><span class="token punctuation">,</span><span class="token string">"25333"</span><span class="token punctuation">,</span><span class="token string">"440954.41"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-29"</span><span class="token punctuation">,</span><span class="token string">"1717.00"</span><span class="token punctuation">,</span><span class="token string">"1719.00"</span><span class="token punctuation">,</span><span class="token string">"-14.00"</span><span class="token punctuation">,</span><span class="token string">"-0.81%"</span><span class="token punctuation">,</span><span class="token string">"1701.05"</span><span class="token punctuation">,</span><span class="token string">"1726.99"</span><span class="token punctuation">,</span><span class="token string">"22418"</span><span class="token punctuation">,</span><span class="token string">"384449.97"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-28"</span><span class="token punctuation">,</span><span class="token string">"1745.88"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"0.00"</span><span class="token punctuation">,</span><span class="token string">"0.00%"</span><span class="token punctuation">,</span><span class="token string">"1708.01"</span><span class="token punctuation">,</span><span class="token string">"1747.00"</span><span class="token punctuation">,</span><span class="token string">"21438"</span><span class="token punctuation">,</span><span class="token string">"369994.91"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-27"</span><span class="token punctuation">,</span><span class="token string">"1738.00"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"12.85"</span><span class="token punctuation">,</span><span class="token string">"0.75%"</span><span class="token punctuation">,</span><span class="token string">"1725.50"</span><span class="token punctuation">,</span><span class="token string">"1747.15"</span><span class="token punctuation">,</span><span class="token string">"17905"</span><span class="token punctuation">,</span><span class="token string">"310927.03"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-26"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"1742.06"</span><span class="token punctuation">,</span><span class="token string">"-28.94"</span><span class="token punctuation">,</span><span class="token string">"-1.63%"</span><span class="token punctuation">,</span><span class="token string">"1735.02"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"21384"</span><span class="token punctuation">,</span><span class="token string">"374912.09"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-23"</span><span class="token punctuation">,</span><span class="token string">"1752.40"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"3.00"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">,</span><span class="token string">"1745.00"</span><span class="token punctuation">,</span><span class="token string">"1782.00"</span><span class="token punctuation">,</span><span class="token string">"17319"</span><span class="token punctuation">,</span><span class="token string">"306360.84"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-22"</span><span class="token punctuation">,</span><span class="token string">"1756.70"</span><span class="token punctuation">,</span><span class="token string">"1768.00"</span><span class="token punctuation">,</span><span class="token string">"29.00"</span><span class="token punctuation">,</span><span class="token string">"1.67%"</span><span class="token punctuation">,</span><span class="token string">"1745.00"</span><span class="token punctuation">,</span><span class="token string">"1783.00"</span><span class="token punctuation">,</span><span class="token string">"23175"</span><span class="token punctuation">,</span><span class="token string">"409386.16"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-21"</span><span class="token punctuation">,</span><span class="token string">"1724.00"</span><span class="token punctuation">,</span><span class="token string">"1739.00"</span><span class="token punctuation">,</span><span class="token string">"24.00"</span><span class="token punctuation">,</span><span class="token string">"1.40%"</span><span class="token punctuation">,</span><span class="token string">"1717.65"</span><span class="token punctuation">,</span><span class="token string">"1739.00"</span><span class="token punctuation">,</span><span class="token string">"22816"</span><span class="token punctuation">,</span><span class="token string">"394892.62"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-20"</span><span class="token punctuation">,</span><span class="token string">"1765.33"</span><span class="token punctuation">,</span><span class="token string">"1715.00"</span><span class="token punctuation">,</span><span class="token string">"-58.00"</span><span class="token punctuation">,</span><span class="token string">"-3.27%"</span><span class="token punctuation">,</span><span class="token string">"1682.45"</span><span class="token punctuation">,</span><span class="token string">"1765.33"</span><span class="token punctuation">,</span><span class="token string">"46198"</span><span class="token punctuation">,</span><span class="token string">"794412.06"</span><span class="token punctuation">,</span><span class="token string">"0.37%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-19"</span><span class="token punctuation">,</span><span class="token string">"1798.80"</span><span class="token punctuation">,</span><span class="token string">"1773.00"</span><span class="token punctuation">,</span><span class="token string">"-13.87"</span><span class="token punctuation">,</span><span class="token string">"-0.78%"</span><span class="token punctuation">,</span><span class="token string">"1760.17"</span><span class="token punctuation">,</span><span class="token string">"1798.80"</span><span class="token punctuation">,</span><span class="token string">"24987"</span><span class="token punctuation">,</span><span class="token string">"444723.66"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token string">"cn_600519"</span><span class="token punctuation">,</span><span class="token string">"stat"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"累计:"</span><span class="token punctuation">,</span><span class="token string">"2022-12-19至2023-04-18"</span><span class="token punctuation">,</span><span class="token string">"-28.87"</span><span class="token punctuation">,</span><span class="token string">"-1.62%"</span><span class="token punctuation">,</span><span class="token number">1682.45</span><span class="token punctuation">,</span><span class="token number">1935</span><span class="token punctuation">,</span><span class="token number">1961308</span><span class="token punctuation">,</span><span class="token number">35261288.98</span><span class="token punctuation">,</span><span class="token string">"15.59%"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>替换后的： <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"status"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"hq"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"2023-04-18"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"1758.00"</span><span class="token punctuation">,</span><span class="token string">"5.00"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">,</span><span class="token string">"1746.02"</span><span class="token punctuation">,</span><span class="token string">"1769.00"</span><span class="token punctuation">,</span><span class="token string">"18314"</span><span class="token punctuation">,</span><span class="token string">"322010.75"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-17"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"39.58"</span><span class="token punctuation">,</span><span class="token string">"2.31%"</span><span class="token punctuation">,</span><span class="token string">"1728.00"</span><span class="token punctuation">,</span><span class="token string">"1753.00"</span><span class="token punctuation">,</span><span class="token string">"30467"</span><span class="token punctuation">,</span><span class="token string">"530340.12"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-14"</span><span class="token punctuation">,</span><span class="token string">"1726.00"</span><span class="token punctuation">,</span><span class="token string">"1713.42"</span><span class="token punctuation">,</span><span class="token string">"-9.58"</span><span class="token punctuation">,</span><span class="token string">"-0.56%"</span><span class="token punctuation">,</span><span class="token string">"1704.80"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"21232"</span><span class="token punctuation">,</span><span class="token string">"364652.69"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-13"</span><span class="token punctuation">,</span><span class="token string">"1690.00"</span><span class="token punctuation">,</span><span class="token string">"1723.00"</span><span class="token punctuation">,</span><span class="token string">"28.90"</span><span class="token punctuation">,</span><span class="token string">"1.71%"</span><span class="token punctuation">,</span><span class="token string">"1684.01"</span><span class="token punctuation">,</span><span class="token string">"1723.59"</span><span class="token punctuation">,</span><span class="token string">"29543"</span><span class="token punctuation">,</span><span class="token string">"504931.03"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-12"</span><span class="token punctuation">,</span><span class="token string">"1747.26"</span><span class="token punctuation">,</span><span class="token string">"1694.10"</span><span class="token punctuation">,</span><span class="token string">"-51.40"</span><span class="token punctuation">,</span><span class="token string">"-2.94%"</span><span class="token punctuation">,</span><span class="token string">"1692.82"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"51105"</span><span class="token punctuation">,</span><span class="token string">"873265.75"</span><span class="token punctuation">,</span><span class="token string">"0.41%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-11"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"1745.50"</span><span class="token punctuation">,</span><span class="token string">"-26.20"</span><span class="token punctuation">,</span><span class="token string">"-1.48%"</span><span class="token punctuation">,</span><span class="token string">"1744.00"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"29209"</span><span class="token punctuation">,</span><span class="token string">"513885.44"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-10"</span><span class="token punctuation">,</span><span class="token string">"1790.88"</span><span class="token punctuation">,</span><span class="token string">"1771.70"</span><span class="token punctuation">,</span><span class="token string">"-19.29"</span><span class="token punctuation">,</span><span class="token string">"-1.08%"</span><span class="token punctuation">,</span><span class="token string">"1744.00"</span><span class="token punctuation">,</span><span class="token string">"1790.88"</span><span class="token punctuation">,</span><span class="token string">"29418"</span><span class="token punctuation">,</span><span class="token string">"517115.03"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-07"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"1790.99"</span><span class="token punctuation">,</span><span class="token string">"-5.97"</span><span class="token punctuation">,</span><span class="token string">"-0.33%"</span><span class="token punctuation">,</span><span class="token string">"1788.34"</span><span class="token punctuation">,</span><span class="token string">"1806.01"</span><span class="token punctuation">,</span><span class="token string">"13525"</span><span class="token punctuation">,</span><span class="token string">"242816.05"</span><span class="token punctuation">,</span><span class="token string">"0.11%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-06"</span><span class="token punctuation">,</span><span class="token string">"1805.00"</span><span class="token punctuation">,</span><span class="token string">"1796.96"</span><span class="token punctuation">,</span><span class="token string">"-17.63"</span><span class="token punctuation">,</span><span class="token string">"-0.97%"</span><span class="token punctuation">,</span><span class="token string">"1788.22"</span><span class="token punctuation">,</span><span class="token string">"1815.90"</span><span class="token punctuation">,</span><span class="token string">"14874"</span><span class="token punctuation">,</span><span class="token string">"267625.19"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-04"</span><span class="token punctuation">,</span><span class="token string">"1812.00"</span><span class="token punctuation">,</span><span class="token string">"1814.59"</span><span class="token punctuation">,</span><span class="token string">"12.52"</span><span class="token punctuation">,</span><span class="token string">"0.69%"</span><span class="token punctuation">,</span><span class="token string">"1787.00"</span><span class="token punctuation">,</span><span class="token string">"1815.17"</span><span class="token punctuation">,</span><span class="token string">"20066"</span><span class="token punctuation">,</span><span class="token string">"361427.53"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-04-03"</span><span class="token punctuation">,</span><span class="token string">"1825.00"</span><span class="token punctuation">,</span><span class="token string">"1802.07"</span><span class="token punctuation">,</span><span class="token string">"-17.93"</span><span class="token punctuation">,</span><span class="token string">"-0.99%"</span><span class="token punctuation">,</span><span class="token string">"1800.08"</span><span class="token punctuation">,</span><span class="token string">"1827.77"</span><span class="token punctuation">,</span><span class="token string">"21417"</span><span class="token punctuation">,</span><span class="token string">"387581.16"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-31"</span><span class="token punctuation">,</span><span class="token string">"1825.00"</span><span class="token punctuation">,</span><span class="token string">"1820.00"</span><span class="token punctuation">,</span><span class="token string">"20.00"</span><span class="token punctuation">,</span><span class="token string">"1.11%"</span><span class="token punctuation">,</span><span class="token string">"1819.00"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"27446"</span><span class="token punctuation">,</span><span class="token string">"502479.06"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-30"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"1800.00"</span><span class="token punctuation">,</span><span class="token string">"10.00"</span><span class="token punctuation">,</span><span class="token string">"0.56%"</span><span class="token punctuation">,</span><span class="token string">"1779.00"</span><span class="token punctuation">,</span><span class="token string">"1805.00"</span><span class="token punctuation">,</span><span class="token string">"19257"</span><span class="token punctuation">,</span><span class="token string">"345357.31"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-29"</span><span class="token punctuation">,</span><span class="token string">"1799.00"</span><span class="token punctuation">,</span><span class="token string">"1790.00"</span><span class="token punctuation">,</span><span class="token string">"8.20"</span><span class="token punctuation">,</span><span class="token string">"0.46%"</span><span class="token punctuation">,</span><span class="token string">"1785.07"</span><span class="token punctuation">,</span><span class="token string">"1800.00"</span><span class="token punctuation">,</span><span class="token string">"15393"</span><span class="token punctuation">,</span><span class="token string">"276190.94"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-28"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"1781.80"</span><span class="token punctuation">,</span><span class="token string">"14.01"</span><span class="token punctuation">,</span><span class="token string">"0.79%"</span><span class="token punctuation">,</span><span class="token string">"1765.02"</span><span class="token punctuation">,</span><span class="token string">"1790.00"</span><span class="token punctuation">,</span><span class="token string">"17261"</span><span class="token punctuation">,</span><span class="token string">"307311.31"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-27"</span><span class="token punctuation">,</span><span class="token string">"1778.60"</span><span class="token punctuation">,</span><span class="token string">"1767.79"</span><span class="token punctuation">,</span><span class="token string">"-10.83"</span><span class="token punctuation">,</span><span class="token string">"-0.61%"</span><span class="token punctuation">,</span><span class="token string">"1756.00"</span><span class="token punctuation">,</span><span class="token string">"1778.60"</span><span class="token punctuation">,</span><span class="token string">"15296"</span><span class="token punctuation">,</span><span class="token string">"270075.59"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-24"</span><span class="token punctuation">,</span><span class="token string">"1769.08"</span><span class="token punctuation">,</span><span class="token string">"1778.62"</span><span class="token punctuation">,</span><span class="token string">"3.76"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"1783.60"</span><span class="token punctuation">,</span><span class="token string">"12770"</span><span class="token punctuation">,</span><span class="token string">"226964.92"</span><span class="token punctuation">,</span><span class="token string">"0.10%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-23"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"1774.86"</span><span class="token punctuation">,</span><span class="token string">"1.51"</span><span class="token punctuation">,</span><span class="token string">"0.09%"</span><span class="token punctuation">,</span><span class="token string">"1765.01"</span><span class="token punctuation">,</span><span class="token string">"1791.11"</span><span class="token punctuation">,</span><span class="token string">"17356"</span><span class="token punctuation">,</span><span class="token string">"308282.16"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-22"</span><span class="token punctuation">,</span><span class="token string">"1780.00"</span><span class="token punctuation">,</span><span class="token string">"1773.35"</span><span class="token punctuation">,</span><span class="token string">"-1.65"</span><span class="token punctuation">,</span><span class="token string">"-0.09%"</span><span class="token punctuation">,</span><span class="token string">"1765.55"</span><span class="token punctuation">,</span><span class="token string">"1793.00"</span><span class="token punctuation">,</span><span class="token string">"15330"</span><span class="token punctuation">,</span><span class="token string">"272764.88"</span><span class="token punctuation">,</span><span class="token string">"0.12%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-21"</span><span class="token punctuation">,</span><span class="token string">"1735.00"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"45.40"</span><span class="token punctuation">,</span><span class="token string">"2.62%"</span><span class="token punctuation">,</span><span class="token string">"1723.97"</span><span class="token punctuation">,</span><span class="token string">"1785.85"</span><span class="token punctuation">,</span><span class="token string">"31142"</span><span class="token punctuation">,</span><span class="token string">"549105.19"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-20"</span><span class="token punctuation">,</span><span class="token string">"1751.00"</span><span class="token punctuation">,</span><span class="token string">"1729.60"</span><span class="token punctuation">,</span><span class="token string">"-12.40"</span><span class="token punctuation">,</span><span class="token string">"-0.71%"</span><span class="token punctuation">,</span><span class="token string">"1728.00"</span><span class="token punctuation">,</span><span class="token string">"1755.00"</span><span class="token punctuation">,</span><span class="token string">"20491"</span><span class="token punctuation">,</span><span class="token string">"355787.22"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-17"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"1742.00"</span><span class="token punctuation">,</span><span class="token string">"-9.99"</span><span class="token punctuation">,</span><span class="token string">"-0.57%"</span><span class="token punctuation">,</span><span class="token string">"1736.00"</span><span class="token punctuation">,</span><span class="token string">"1775.89"</span><span class="token punctuation">,</span><span class="token string">"27023"</span><span class="token punctuation">,</span><span class="token string">"474424.94"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-16"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1751.99"</span><span class="token punctuation">,</span><span class="token string">"1.07"</span><span class="token punctuation">,</span><span class="token string">"0.06%"</span><span class="token punctuation">,</span><span class="token string">"1739.01"</span><span class="token punctuation">,</span><span class="token string">"1770.00"</span><span class="token punctuation">,</span><span class="token string">"17646"</span><span class="token punctuation">,</span><span class="token string">"309679.09"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-15"</span><span class="token punctuation">,</span><span class="token string">"1778.37"</span><span class="token punctuation">,</span><span class="token string">"1750.92"</span><span class="token punctuation">,</span><span class="token string">"-15.08"</span><span class="token punctuation">,</span><span class="token string">"-0.85%"</span><span class="token punctuation">,</span><span class="token string">"1750.12"</span><span class="token punctuation">,</span><span class="token string">"1784.88"</span><span class="token punctuation">,</span><span class="token string">"19213"</span><span class="token punctuation">,</span><span class="token string">"339269.84"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-14"</span><span class="token punctuation">,</span><span class="token string">"1763.78"</span><span class="token punctuation">,</span><span class="token string">"1766.00"</span><span class="token punctuation">,</span><span class="token string">"4.00"</span><span class="token punctuation">,</span><span class="token string">"0.23%"</span><span class="token punctuation">,</span><span class="token string">"1738.50"</span><span class="token punctuation">,</span><span class="token string">"1779.88"</span><span class="token punctuation">,</span><span class="token string">"23705"</span><span class="token punctuation">,</span><span class="token string">"417728.91"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-13"</span><span class="token punctuation">,</span><span class="token string">"1751.00"</span><span class="token punctuation">,</span><span class="token string">"1762.00"</span><span class="token punctuation">,</span><span class="token string">"12.00"</span><span class="token punctuation">,</span><span class="token string">"0.69%"</span><span class="token punctuation">,</span><span class="token string">"1749.00"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"20560"</span><span class="token punctuation">,</span><span class="token string">"362647.62"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-10"</span><span class="token punctuation">,</span><span class="token string">"1751.57"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"-20.02"</span><span class="token punctuation">,</span><span class="token string">"-1.13%"</span><span class="token punctuation">,</span><span class="token string">"1750.00"</span><span class="token punctuation">,</span><span class="token string">"1781.00"</span><span class="token punctuation">,</span><span class="token string">"21161"</span><span class="token punctuation">,</span><span class="token string">"372513.91"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-09"</span><span class="token punctuation">,</span><span class="token string">"1768.00"</span><span class="token punctuation">,</span><span class="token string">"1770.02"</span><span class="token punctuation">,</span><span class="token string">"-0.40"</span><span class="token punctuation">,</span><span class="token string">"-0.02%"</span><span class="token punctuation">,</span><span class="token string">"1740.00"</span><span class="token punctuation">,</span><span class="token string">"1785.00"</span><span class="token punctuation">,</span><span class="token string">"27612"</span><span class="token punctuation">,</span><span class="token string">"488144.28"</span><span class="token punctuation">,</span><span class="token string">"0.22%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-08"</span><span class="token punctuation">,</span><span class="token string">"1780.02"</span><span class="token punctuation">,</span><span class="token string">"1770.42"</span><span class="token punctuation">,</span><span class="token string">"-17.88"</span><span class="token punctuation">,</span><span class="token string">"-1.00%"</span><span class="token punctuation">,</span><span class="token string">"1761.12"</span><span class="token punctuation">,</span><span class="token string">"1785.94"</span><span class="token punctuation">,</span><span class="token string">"22764"</span><span class="token punctuation">,</span><span class="token string">"403578.72"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-07"</span><span class="token punctuation">,</span><span class="token string">"1805.98"</span><span class="token punctuation">,</span><span class="token string">"1788.30"</span><span class="token punctuation">,</span><span class="token string">"-18.84"</span><span class="token punctuation">,</span><span class="token string">"-1.04%"</span><span class="token punctuation">,</span><span class="token string">"1788.00"</span><span class="token punctuation">,</span><span class="token string">"1816.60"</span><span class="token punctuation">,</span><span class="token string">"22785"</span><span class="token punctuation">,</span><span class="token string">"410130.25"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-06"</span><span class="token punctuation">,</span><span class="token string">"1818.18"</span><span class="token punctuation">,</span><span class="token string">"1807.14"</span><span class="token punctuation">,</span><span class="token string">"-10.90"</span><span class="token punctuation">,</span><span class="token string">"-0.60%"</span><span class="token punctuation">,</span><span class="token string">"1796.77"</span><span class="token punctuation">,</span><span class="token string">"1818.50"</span><span class="token punctuation">,</span><span class="token string">"20646"</span><span class="token punctuation">,</span><span class="token string">"373007.94"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-03"</span><span class="token punctuation">,</span><span class="token string">"1839.77"</span><span class="token punctuation">,</span><span class="token string">"1818.04"</span><span class="token punctuation">,</span><span class="token string">"-9.96"</span><span class="token punctuation">,</span><span class="token string">"-0.54%"</span><span class="token punctuation">,</span><span class="token string">"1802.48"</span><span class="token punctuation">,</span><span class="token string">"1841.61"</span><span class="token punctuation">,</span><span class="token string">"16198"</span><span class="token punctuation">,</span><span class="token string">"294684.25"</span><span class="token punctuation">,</span><span class="token string">"0.13%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-02"</span><span class="token punctuation">,</span><span class="token string">"1829.00"</span><span class="token punctuation">,</span><span class="token string">"1828.00"</span><span class="token punctuation">,</span><span class="token string">"-10.53"</span><span class="token punctuation">,</span><span class="token string">"-0.57%"</span><span class="token punctuation">,</span><span class="token string">"1821.10"</span><span class="token punctuation">,</span><span class="token string">"1838.99"</span><span class="token punctuation">,</span><span class="token string">"13144"</span><span class="token punctuation">,</span><span class="token string">"240529.23"</span><span class="token punctuation">,</span><span class="token string">"0.10%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-03-01"</span><span class="token punctuation">,</span><span class="token string">"1813.00"</span><span class="token punctuation">,</span><span class="token string">"1838.53"</span><span class="token punctuation">,</span><span class="token string">"24.79"</span><span class="token punctuation">,</span><span class="token string">"1.37%"</span><span class="token punctuation">,</span><span class="token string">"1803.23"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"24458"</span><span class="token punctuation">,</span><span class="token string">"447559.22"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-28"</span><span class="token punctuation">,</span><span class="token string">"1819.00"</span><span class="token punctuation">,</span><span class="token string">"1813.74"</span><span class="token punctuation">,</span><span class="token string">"3.33"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">,</span><span class="token string">"1783.30"</span><span class="token punctuation">,</span><span class="token string">"1822.01"</span><span class="token punctuation">,</span><span class="token string">"23952"</span><span class="token punctuation">,</span><span class="token string">"431487.69"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-27"</span><span class="token punctuation">,</span><span class="token string">"1778.50"</span><span class="token punctuation">,</span><span class="token string">"1810.41"</span><span class="token punctuation">,</span><span class="token string">"22.41"</span><span class="token punctuation">,</span><span class="token string">"1.25%"</span><span class="token punctuation">,</span><span class="token string">"1775.02"</span><span class="token punctuation">,</span><span class="token string">"1815.00"</span><span class="token punctuation">,</span><span class="token string">"22065"</span><span class="token punctuation">,</span><span class="token string">"397812.88"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-24"</span><span class="token punctuation">,</span><span class="token string">"1810.11"</span><span class="token punctuation">,</span><span class="token string">"1788.00"</span><span class="token punctuation">,</span><span class="token string">"-30.00"</span><span class="token punctuation">,</span><span class="token string">"-1.65%"</span><span class="token punctuation">,</span><span class="token string">"1782.18"</span><span class="token punctuation">,</span><span class="token string">"1810.19"</span><span class="token punctuation">,</span><span class="token string">"24635"</span><span class="token punctuation">,</span><span class="token string">"441562.16"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-23"</span><span class="token punctuation">,</span><span class="token string">"1840.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"-18.00"</span><span class="token punctuation">,</span><span class="token string">"-0.98%"</span><span class="token punctuation">,</span><span class="token string">"1805.25"</span><span class="token punctuation">,</span><span class="token string">"1848.80"</span><span class="token punctuation">,</span><span class="token string">"21881"</span><span class="token punctuation">,</span><span class="token string">"398399.12"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-22"</span><span class="token punctuation">,</span><span class="token string">"1855.01"</span><span class="token punctuation">,</span><span class="token string">"1836.00"</span><span class="token punctuation">,</span><span class="token string">"-31.00"</span><span class="token punctuation">,</span><span class="token string">"-1.66%"</span><span class="token punctuation">,</span><span class="token string">"1831.80"</span><span class="token punctuation">,</span><span class="token string">"1863.90"</span><span class="token punctuation">,</span><span class="token string">"21869"</span><span class="token punctuation">,</span><span class="token string">"403101.59"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-21"</span><span class="token punctuation">,</span><span class="token string">"1874.00"</span><span class="token punctuation">,</span><span class="token string">"1867.00"</span><span class="token punctuation">,</span><span class="token string">"-8.00"</span><span class="token punctuation">,</span><span class="token string">"-0.43%"</span><span class="token punctuation">,</span><span class="token string">"1851.00"</span><span class="token punctuation">,</span><span class="token string">"1874.00"</span><span class="token punctuation">,</span><span class="token string">"18751"</span><span class="token punctuation">,</span><span class="token string">"349163.34"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-20"</span><span class="token punctuation">,</span><span class="token string">"1821.00"</span><span class="token punctuation">,</span><span class="token string">"1875.00"</span><span class="token punctuation">,</span><span class="token string">"54.22"</span><span class="token punctuation">,</span><span class="token string">"2.98%"</span><span class="token punctuation">,</span><span class="token string">"1817.20"</span><span class="token punctuation">,</span><span class="token string">"1878.80"</span><span class="token punctuation">,</span><span class="token string">"29669"</span><span class="token punctuation">,</span><span class="token string">"548880.00"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-17"</span><span class="token punctuation">,</span><span class="token string">"1850.16"</span><span class="token punctuation">,</span><span class="token string">"1820.78"</span><span class="token punctuation">,</span><span class="token string">"-41.04"</span><span class="token punctuation">,</span><span class="token string">"-2.20%"</span><span class="token punctuation">,</span><span class="token string">"1820.05"</span><span class="token punctuation">,</span><span class="token string">"1873.00"</span><span class="token punctuation">,</span><span class="token string">"26443"</span><span class="token punctuation">,</span><span class="token string">"488032.88"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-16"</span><span class="token punctuation">,</span><span class="token string">"1841.34"</span><span class="token punctuation">,</span><span class="token string">"1861.82"</span><span class="token punctuation">,</span><span class="token string">"20.82"</span><span class="token punctuation">,</span><span class="token string">"1.13%"</span><span class="token punctuation">,</span><span class="token string">"1828.00"</span><span class="token punctuation">,</span><span class="token string">"1887.00"</span><span class="token punctuation">,</span><span class="token string">"33246"</span><span class="token punctuation">,</span><span class="token string">"619691.50"</span><span class="token punctuation">,</span><span class="token string">"0.26%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-15"</span><span class="token punctuation">,</span><span class="token string">"1843.78"</span><span class="token punctuation">,</span><span class="token string">"1841.00"</span><span class="token punctuation">,</span><span class="token string">"-2.79"</span><span class="token punctuation">,</span><span class="token string">"-0.15%"</span><span class="token punctuation">,</span><span class="token string">"1835.81"</span><span class="token punctuation">,</span><span class="token string">"1855.30"</span><span class="token punctuation">,</span><span class="token string">"18177"</span><span class="token punctuation">,</span><span class="token string">"335142.22"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-14"</span><span class="token punctuation">,</span><span class="token string">"1856.46"</span><span class="token punctuation">,</span><span class="token string">"1843.79"</span><span class="token punctuation">,</span><span class="token string">"-12.56"</span><span class="token punctuation">,</span><span class="token string">"-0.68%"</span><span class="token punctuation">,</span><span class="token string">"1835.00"</span><span class="token punctuation">,</span><span class="token string">"1857.40"</span><span class="token punctuation">,</span><span class="token string">"19566"</span><span class="token punctuation">,</span><span class="token string">"360176.94"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-13"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"1856.35"</span><span class="token punctuation">,</span><span class="token string">"46.35"</span><span class="token punctuation">,</span><span class="token string">"2.56%"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"1874.50"</span><span class="token punctuation">,</span><span class="token string">"38147"</span><span class="token punctuation">,</span><span class="token string">"705838.25"</span><span class="token punctuation">,</span><span class="token string">"0.30%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-10"</span><span class="token punctuation">,</span><span class="token string">"1810.10"</span><span class="token punctuation">,</span><span class="token string">"1810.00"</span><span class="token punctuation">,</span><span class="token string">"-8.00"</span><span class="token punctuation">,</span><span class="token string">"-0.44%"</span><span class="token punctuation">,</span><span class="token string">"1801.05"</span><span class="token punctuation">,</span><span class="token string">"1818.49"</span><span class="token punctuation">,</span><span class="token string">"17985"</span><span class="token punctuation">,</span><span class="token string">"325385.94"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-09"</span><span class="token punctuation">,</span><span class="token string">"1778.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"34.00"</span><span class="token punctuation">,</span><span class="token string">"1.91%"</span><span class="token punctuation">,</span><span class="token string">"1775.01"</span><span class="token punctuation">,</span><span class="token string">"1829.75"</span><span class="token punctuation">,</span><span class="token string">"29754"</span><span class="token punctuation">,</span><span class="token string">"540139.94"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-08"</span><span class="token punctuation">,</span><span class="token string">"1800.01"</span><span class="token punctuation">,</span><span class="token string">"1784.00"</span><span class="token punctuation">,</span><span class="token string">"-13.00"</span><span class="token punctuation">,</span><span class="token string">"-0.72%"</span><span class="token punctuation">,</span><span class="token string">"1775.00"</span><span class="token punctuation">,</span><span class="token string">"1805.97"</span><span class="token punctuation">,</span><span class="token string">"16676"</span><span class="token punctuation">,</span><span class="token string">"298057.47"</span><span class="token punctuation">,</span><span class="token string">"0.13%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-07"</span><span class="token punctuation">,</span><span class="token string">"1808.08"</span><span class="token punctuation">,</span><span class="token string">"1797.00"</span><span class="token punctuation">,</span><span class="token string">"2.00"</span><span class="token punctuation">,</span><span class="token string">"0.11%"</span><span class="token punctuation">,</span><span class="token string">"1787.73"</span><span class="token punctuation">,</span><span class="token string">"1808.80"</span><span class="token punctuation">,</span><span class="token string">"24322"</span><span class="token punctuation">,</span><span class="token string">"437367.19"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-06"</span><span class="token punctuation">,</span><span class="token string">"1780.00"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"-23.00"</span><span class="token punctuation">,</span><span class="token string">"-1.27%"</span><span class="token punctuation">,</span><span class="token string">"1760.00"</span><span class="token punctuation">,</span><span class="token string">"1795.00"</span><span class="token punctuation">,</span><span class="token string">"42661"</span><span class="token punctuation">,</span><span class="token string">"759573.94"</span><span class="token punctuation">,</span><span class="token string">"0.34%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-03"</span><span class="token punctuation">,</span><span class="token string">"1820.00"</span><span class="token punctuation">,</span><span class="token string">"1818.00"</span><span class="token punctuation">,</span><span class="token string">"-18.11"</span><span class="token punctuation">,</span><span class="token string">"-0.99%"</span><span class="token punctuation">,</span><span class="token string">"1795.68"</span><span class="token punctuation">,</span><span class="token string">"1826.00"</span><span class="token punctuation">,</span><span class="token string">"34945"</span><span class="token punctuation">,</span><span class="token string">"632463.50"</span><span class="token punctuation">,</span><span class="token string">"0.28%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-02"</span><span class="token punctuation">,</span><span class="token string">"1848.38"</span><span class="token punctuation">,</span><span class="token string">"1836.11"</span><span class="token punctuation">,</span><span class="token string">"-8.86"</span><span class="token punctuation">,</span><span class="token string">"-0.48%"</span><span class="token punctuation">,</span><span class="token string">"1826.00"</span><span class="token punctuation">,</span><span class="token string">"1859.00"</span><span class="token punctuation">,</span><span class="token string">"29759"</span><span class="token punctuation">,</span><span class="token string">"546550.94"</span><span class="token punctuation">,</span><span class="token string">"0.24%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-02-01"</span><span class="token punctuation">,</span><span class="token string">"1854.98"</span><span class="token punctuation">,</span><span class="token string">"1844.97"</span><span class="token punctuation">,</span><span class="token string">"-0.79"</span><span class="token punctuation">,</span><span class="token string">"-0.04%"</span><span class="token punctuation">,</span><span class="token string">"1811.40"</span><span class="token punctuation">,</span><span class="token string">"1859.00"</span><span class="token punctuation">,</span><span class="token string">"33974"</span><span class="token punctuation">,</span><span class="token string">"624467.94"</span><span class="token punctuation">,</span><span class="token string">"0.27%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-31"</span><span class="token punctuation">,</span><span class="token string">"1896.50"</span><span class="token punctuation">,</span><span class="token string">"1845.76"</span><span class="token punctuation">,</span><span class="token string">"-42.24"</span><span class="token punctuation">,</span><span class="token string">"-2.24%"</span><span class="token punctuation">,</span><span class="token string">"1833.07"</span><span class="token punctuation">,</span><span class="token string">"1899.95"</span><span class="token punctuation">,</span><span class="token string">"32991"</span><span class="token punctuation">,</span><span class="token string">"612831.12"</span><span class="token punctuation">,</span><span class="token string">"0.26%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-30"</span><span class="token punctuation">,</span><span class="token string">"1909.00"</span><span class="token punctuation">,</span><span class="token string">"1888.00"</span><span class="token punctuation">,</span><span class="token string">"27.99"</span><span class="token punctuation">,</span><span class="token string">"1.50%"</span><span class="token punctuation">,</span><span class="token string">"1880.00"</span><span class="token punctuation">,</span><span class="token string">"1909.00"</span><span class="token punctuation">,</span><span class="token string">"35923"</span><span class="token punctuation">,</span><span class="token string">"679975.69"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-20"</span><span class="token punctuation">,</span><span class="token string">"1889.19"</span><span class="token punctuation">,</span><span class="token string">"1860.01"</span><span class="token punctuation">,</span><span class="token string">"-20.20"</span><span class="token punctuation">,</span><span class="token string">"-1.07%"</span><span class="token punctuation">,</span><span class="token string">"1858.00"</span><span class="token punctuation">,</span><span class="token string">"1898.25"</span><span class="token punctuation">,</span><span class="token string">"25609"</span><span class="token punctuation">,</span><span class="token string">"480735.59"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-19"</span><span class="token punctuation">,</span><span class="token string">"1892.50"</span><span class="token punctuation">,</span><span class="token string">"1880.21"</span><span class="token punctuation">,</span><span class="token string">"-12.79"</span><span class="token punctuation">,</span><span class="token string">"-0.68%"</span><span class="token punctuation">,</span><span class="token string">"1866.00"</span><span class="token punctuation">,</span><span class="token string">"1892.52"</span><span class="token punctuation">,</span><span class="token string">"23439"</span><span class="token punctuation">,</span><span class="token string">"440199.44"</span><span class="token punctuation">,</span><span class="token string">"0.19%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-18"</span><span class="token punctuation">,</span><span class="token string">"1914.00"</span><span class="token punctuation">,</span><span class="token string">"1893.00"</span><span class="token punctuation">,</span><span class="token string">"-15.00"</span><span class="token punctuation">,</span><span class="token string">"-0.79%"</span><span class="token punctuation">,</span><span class="token string">"1890.00"</span><span class="token punctuation">,</span><span class="token string">"1925.30"</span><span class="token punctuation">,</span><span class="token string">"21063"</span><span class="token punctuation">,</span><span class="token string">"400866.53"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-17"</span><span class="token punctuation">,</span><span class="token string">"1913.16"</span><span class="token punctuation">,</span><span class="token string">"1908.00"</span><span class="token punctuation">,</span><span class="token string">"-4.90"</span><span class="token punctuation">,</span><span class="token string">"-0.26%"</span><span class="token punctuation">,</span><span class="token string">"1895.00"</span><span class="token punctuation">,</span><span class="token string">"1923.00"</span><span class="token punctuation">,</span><span class="token string">"21299"</span><span class="token punctuation">,</span><span class="token string">"406832.16"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-16"</span><span class="token punctuation">,</span><span class="token string">"1886.00"</span><span class="token punctuation">,</span><span class="token string">"1912.90"</span><span class="token punctuation">,</span><span class="token string">"25.90"</span><span class="token punctuation">,</span><span class="token string">"1.37%"</span><span class="token punctuation">,</span><span class="token string">"1881.00"</span><span class="token punctuation">,</span><span class="token string">"1935.00"</span><span class="token punctuation">,</span><span class="token string">"36848"</span><span class="token punctuation">,</span><span class="token string">"705998.31"</span><span class="token punctuation">,</span><span class="token string">"0.29%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-13"</span><span class="token punctuation">,</span><span class="token string">"1844.18"</span><span class="token punctuation">,</span><span class="token string">"1887.00"</span><span class="token punctuation">,</span><span class="token string">"53.00"</span><span class="token punctuation">,</span><span class="token string">"2.89%"</span><span class="token punctuation">,</span><span class="token string">"1840.00"</span><span class="token punctuation">,</span><span class="token string">"1888.00"</span><span class="token punctuation">,</span><span class="token string">"31940"</span><span class="token punctuation">,</span><span class="token string">"596987.62"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-12"</span><span class="token punctuation">,</span><span class="token string">"1848.00"</span><span class="token punctuation">,</span><span class="token string">"1834.00"</span><span class="token punctuation">,</span><span class="token string">"-10.95"</span><span class="token punctuation">,</span><span class="token string">"-0.59%"</span><span class="token punctuation">,</span><span class="token string">"1833.00"</span><span class="token punctuation">,</span><span class="token string">"1856.00"</span><span class="token punctuation">,</span><span class="token string">"17193"</span><span class="token punctuation">,</span><span class="token string">"316263.72"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-11"</span><span class="token punctuation">,</span><span class="token string">"1856.00"</span><span class="token punctuation">,</span><span class="token string">"1844.95"</span><span class="token punctuation">,</span><span class="token string">"-9.50"</span><span class="token punctuation">,</span><span class="token string">"-0.51%"</span><span class="token punctuation">,</span><span class="token string">"1836.84"</span><span class="token punctuation">,</span><span class="token string">"1860.00"</span><span class="token punctuation">,</span><span class="token string">"22720"</span><span class="token punctuation">,</span><span class="token string">"420148.78"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-10"</span><span class="token punctuation">,</span><span class="token string">"1839.06"</span><span class="token punctuation">,</span><span class="token string">"1854.45"</span><span class="token punctuation">,</span><span class="token string">"13.25"</span><span class="token punctuation">,</span><span class="token string">"0.72%"</span><span class="token punctuation">,</span><span class="token string">"1830.50"</span><span class="token punctuation">,</span><span class="token string">"1864.50"</span><span class="token punctuation">,</span><span class="token string">"22732"</span><span class="token punctuation">,</span><span class="token string">"420478.38"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-09"</span><span class="token punctuation">,</span><span class="token string">"1835.00"</span><span class="token punctuation">,</span><span class="token string">"1841.20"</span><span class="token punctuation">,</span><span class="token string">"37.43"</span><span class="token punctuation">,</span><span class="token string">"2.08%"</span><span class="token punctuation">,</span><span class="token string">"1807.82"</span><span class="token punctuation">,</span><span class="token string">"1849.98"</span><span class="token punctuation">,</span><span class="token string">"30977"</span><span class="token punctuation">,</span><span class="token string">"568418.12"</span><span class="token punctuation">,</span><span class="token string">"0.25%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-06"</span><span class="token punctuation">,</span><span class="token string">"1806.12"</span><span class="token punctuation">,</span><span class="token string">"1803.77"</span><span class="token punctuation">,</span><span class="token string">"2.77"</span><span class="token punctuation">,</span><span class="token string">"0.15%"</span><span class="token punctuation">,</span><span class="token string">"1787.00"</span><span class="token punctuation">,</span><span class="token string">"1811.90"</span><span class="token punctuation">,</span><span class="token string">"24904"</span><span class="token punctuation">,</span><span class="token string">"448083.88"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-05"</span><span class="token punctuation">,</span><span class="token string">"1737.00"</span><span class="token punctuation">,</span><span class="token string">"1801.00"</span><span class="token punctuation">,</span><span class="token string">"75.99"</span><span class="token punctuation">,</span><span class="token string">"4.41%"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"1801.00"</span><span class="token punctuation">,</span><span class="token string">"47943"</span><span class="token punctuation">,</span><span class="token string">"854158.69"</span><span class="token punctuation">,</span><span class="token string">"0.38%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-04"</span><span class="token punctuation">,</span><span class="token string">"1730.00"</span><span class="token punctuation">,</span><span class="token string">"1725.01"</span><span class="token punctuation">,</span><span class="token string">"-5.00"</span><span class="token punctuation">,</span><span class="token string">"-0.29%"</span><span class="token punctuation">,</span><span class="token string">"1716.00"</span><span class="token punctuation">,</span><span class="token string">"1738.70"</span><span class="token punctuation">,</span><span class="token string">"20416"</span><span class="token punctuation">,</span><span class="token string">"352358.22"</span><span class="token punctuation">,</span><span class="token string">"0.16%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2023-01-03"</span><span class="token punctuation">,</span><span class="token string">"1731.20"</span><span class="token punctuation">,</span><span class="token string">"1730.01"</span><span class="token punctuation">,</span><span class="token string">"3.01"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">,</span><span class="token string">"1706.01"</span><span class="token punctuation">,</span><span class="token string">"1738.43"</span><span class="token punctuation">,</span><span class="token string">"26034"</span><span class="token punctuation">,</span><span class="token string">"448776.03"</span><span class="token punctuation">,</span><span class="token string">"0.21%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-30"</span><span class="token punctuation">,</span><span class="token string">"1736.00"</span><span class="token punctuation">,</span><span class="token string">"1727.00"</span><span class="token punctuation">,</span><span class="token string">"8.00"</span><span class="token punctuation">,</span><span class="token string">"0.47%"</span><span class="token punctuation">,</span><span class="token string">"1727.00"</span><span class="token punctuation">,</span><span class="token string">"1752.99"</span><span class="token punctuation">,</span><span class="token string">"25333"</span><span class="token punctuation">,</span><span class="token string">"440954.41"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-29"</span><span class="token punctuation">,</span><span class="token string">"1717.00"</span><span class="token punctuation">,</span><span class="token string">"1719.00"</span><span class="token punctuation">,</span><span class="token string">"-14.00"</span><span class="token punctuation">,</span><span class="token string">"-0.81%"</span><span class="token punctuation">,</span><span class="token string">"1701.05"</span><span class="token punctuation">,</span><span class="token string">"1726.99"</span><span class="token punctuation">,</span><span class="token string">"22418"</span><span class="token punctuation">,</span><span class="token string">"384449.97"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-28"</span><span class="token punctuation">,</span><span class="token string">"1745.88"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"0.00"</span><span class="token punctuation">,</span><span class="token string">"0.00%"</span><span class="token punctuation">,</span><span class="token string">"1708.01"</span><span class="token punctuation">,</span><span class="token string">"1747.00"</span><span class="token punctuation">,</span><span class="token string">"21438"</span><span class="token punctuation">,</span><span class="token string">"369994.91"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-27"</span><span class="token punctuation">,</span><span class="token string">"1738.00"</span><span class="token punctuation">,</span><span class="token string">"1733.00"</span><span class="token punctuation">,</span><span class="token string">"12.85"</span><span class="token punctuation">,</span><span class="token string">"0.75%"</span><span class="token punctuation">,</span><span class="token string">"1725.50"</span><span class="token punctuation">,</span><span class="token string">"1747.15"</span><span class="token punctuation">,</span><span class="token string">"17905"</span><span class="token punctuation">,</span><span class="token string">"310927.03"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-26"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"1742.06"</span><span class="token punctuation">,</span><span class="token string">"-28.94"</span><span class="token punctuation">,</span><span class="token string">"-1.63%"</span><span class="token punctuation">,</span><span class="token string">"1735.02"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"21384"</span><span class="token punctuation">,</span><span class="token string">"374912.09"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-23"</span><span class="token punctuation">,</span><span class="token string">"1752.40"</span><span class="token punctuation">,</span><span class="token string">"1771.00"</span><span class="token punctuation">,</span><span class="token string">"3.00"</span><span class="token punctuation">,</span><span class="token string">"0.17%"</span><span class="token punctuation">,</span><span class="token string">"1745.00"</span><span class="token punctuation">,</span><span class="token string">"1782.00"</span><span class="token punctuation">,</span><span class="token string">"17319"</span><span class="token punctuation">,</span><span class="token string">"306360.84"</span><span class="token punctuation">,</span><span class="token string">"0.14%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-22"</span><span class="token punctuation">,</span><span class="token string">"1756.70"</span><span class="token punctuation">,</span><span class="token string">"1768.00"</span><span class="token punctuation">,</span><span class="token string">"29.00"</span><span class="token punctuation">,</span><span class="token string">"1.67%"</span><span class="token punctuation">,</span><span class="token string">"1745.00"</span><span class="token punctuation">,</span><span class="token string">"1783.00"</span><span class="token punctuation">,</span><span class="token string">"23175"</span><span class="token punctuation">,</span><span class="token string">"409386.16"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-21"</span><span class="token punctuation">,</span><span class="token string">"1724.00"</span><span class="token punctuation">,</span><span class="token string">"1739.00"</span><span class="token punctuation">,</span><span class="token string">"24.00"</span><span class="token punctuation">,</span><span class="token string">"1.40%"</span><span class="token punctuation">,</span><span class="token string">"1717.65"</span><span class="token punctuation">,</span><span class="token string">"1739.00"</span><span class="token punctuation">,</span><span class="token string">"22816"</span><span class="token punctuation">,</span><span class="token string">"394892.62"</span><span class="token punctuation">,</span><span class="token string">"0.18%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-20"</span><span class="token punctuation">,</span><span class="token string">"1765.33"</span><span class="token punctuation">,</span><span class="token string">"1715.00"</span><span class="token punctuation">,</span><span class="token string">"-58.00"</span><span class="token punctuation">,</span><span class="token string">"-3.27%"</span><span class="token punctuation">,</span><span class="token string">"1682.45"</span><span class="token punctuation">,</span><span class="token string">"1765.33"</span><span class="token punctuation">,</span><span class="token string">"46198"</span><span class="token punctuation">,</span><span class="token string">"794412.06"</span><span class="token punctuation">,</span><span class="token string">"0.37%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"2022-12-19"</span><span class="token punctuation">,</span><span class="token string">"1798.80"</span><span class="token punctuation">,</span><span class="token string">"1773.00"</span><span class="token punctuation">,</span><span class="token string">"-13.87"</span><span class="token punctuation">,</span><span class="token string">"-0.78%"</span><span class="token punctuation">,</span><span class="token string">"1760.17"</span><span class="token punctuation">,</span><span class="token string">"1798.80"</span><span class="token punctuation">,</span><span class="token string">"24987"</span><span class="token punctuation">,</span><span class="token string">"444723.66"</span><span class="token punctuation">,</span><span class="token string">"0.20%"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token string">"cn_600519"</span><span class="token punctuation">,</span><span class="token string">"stat"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"累计:"</span><span class="token punctuation">,</span><span class="token string">"2022-12-19至2023-04-18"</span><span class="token punctuation">,</span><span class="token string">"-28.87"</span><span class="token punctuation">,</span><span class="token string">"-1.62%"</span><span class="token punctuation">,</span><span class="token number">1682.45</span><span class="token punctuation">,</span><span class="token number">1935</span><span class="token punctuation">,</span><span class="token number">1961308</span><span class="token punctuation">,</span><span class="token number">35261288.98</span><span class="token punctuation">,</span><span class="token string">"15.59%"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>伪装成浏览器</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">'http://www.ctrip.com/'</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'User-Agent'</span><span class="token punctuation">,</span>               <span class="token string">'Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X) AppleWebKit/602.4.6 (KHTML, like Gecko) Version/10.0 Mobile/14D27 Safari/602.1'</span><span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> htmlstr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'mobile'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'移动版'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">移动版<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用Selenium爬取数据"><a href="#使用Selenium爬取数据" class="headerlink" title="使用Selenium爬取数据"></a>使用Selenium爬取数据</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://q.stock.sohu.com/cn/600519/lshq.shtml'</span><span class="token punctuation">)</span>em <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token string">'BIZ_hq_historySearch'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>em<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">## driver.close()</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)Input In [2], in &lt;cell line: 6&gt;()      3 driver = webdriver.Chrome()      5 driver.get(&#39;http://q.stock.sohu.com/cn/600519/lshq.shtml&#39;)----&gt; 6 em = driver.find_element_by_id(&#39;BIZ_hq_historySearch&#39;)      7 print(em.text)      8 ## driver.close()AttributeError: &#39;WebDriver&#39; object has no attribute &#39;find_element_by_id&#39;</code></pre><h3 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h3><h4 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> os<span class="token keyword">import</span> reurl <span class="token operator">=</span> <span class="token string">'http://p.weather.com.cn/'</span><span class="token keyword">def</span> <span class="token function">findallimageurl</span><span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""从HTML代码中查找匹配的字符串"""</span>    <span class="token comment">## 定义正则表达式</span>    pattern <span class="token operator">=</span> <span class="token string">r'http://\S+(?:\.png|\.jpg)'</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> htmlstr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getfilename</span><span class="token punctuation">(</span>urlstr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""根据图片连接地址截取图片名"""</span>    pos <span class="token operator">=</span> urlstr<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> urlstr<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">## 分析获得的url列表</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    url_list <span class="token operator">=</span> findallimageurl<span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span class="token keyword">for</span> imagesrc <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>    <span class="token comment">## 根据图片地址下载</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>imagesrc<span class="token punctuation">)</span>    <span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>        data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">## 过滤掉用小于100kb字节的图片</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment">## 创建download文件夹</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">)</span>        <span class="token comment">## 获得图片文件名</span>        filename <span class="token operator">=</span> getfilename<span class="token punctuation">(</span>imagesrc<span class="token punctuation">)</span>        filename <span class="token operator">=</span> <span class="token string">'download/'</span> <span class="token operator">+</span> filename        <span class="token comment">## 保存图片到本地</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载图片'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>下载图片 download/20230412105733E6869CA2C51FC9659543B01BCAD594C0.jpg下载图片 download/2023041210583373DC4BF4E9ABC5CC8C084D45FB133E3A.jpg下载图片 download/20230412105932202830A62B6E006C698504271BA9D52C.jpg下载图片 download/20230406160425985ECFF0D26CB2A423DAECD29141F4EE.jpg下载图片 download/20220401091431D32C5DA957F3441693885B05E271420C.jpg下载图片 download/2023041812043228512B6723F81BA42BC286530A7AD859.jpg下载图片 download/20230416152716215BBBA7CCF443222A245DA84B742444.jpg下载图片 download/202304160947448C2B8A7CF30225471547902BD50AB088.jpg下载图片 download/20230316141537671B47C5E4F520E11EE0E489187E624F.png</code></pre><h4 id="使用BeautifulSoup库"><a href="#使用BeautifulSoup库" class="headerlink" title="使用BeautifulSoup库"></a>使用BeautifulSoup库</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupurl <span class="token operator">=</span> <span class="token string">'http://p.weather.com.cn/'</span><span class="token keyword">def</span> <span class="token function">findallimageurl</span><span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""从HTML代码中查找匹配的字符串"""</span>    sp <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>htmlstr<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span> <span class="token comment">#html.parser html.parser</span>    <span class="token comment">## 返回所有的img标签对象</span>    imgtaglist <span class="token operator">=</span> sp<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>    <span class="token comment">## 从img标签对象列表中返回对应的src列表</span>    srclist <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span> u<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> imgtaglist<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## 过滤掉非.png和.jpg结尾文件src字符串</span>    filtered_srclist <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span> u<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.png'</span><span class="token punctuation">)</span>                                        <span class="token keyword">or</span> u<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> srclist<span class="token punctuation">)</span>    <span class="token keyword">return</span> filtered_srclist<span class="token keyword">def</span> <span class="token function">getfilename</span><span class="token punctuation">(</span>urlstr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""根据图片连接地址截取图片名"""</span>    pos <span class="token operator">=</span> urlstr<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> urlstr<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">## 分析获得的url列表</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    htmlstr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    url_list <span class="token operator">=</span> findallimageurl<span class="token punctuation">(</span>htmlstr<span class="token punctuation">)</span><span class="token keyword">for</span> imagesrc <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>    <span class="token comment">## 根据图片地址下载</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>imagesrc<span class="token punctuation">)</span>    <span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>        data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">## 过滤掉用小于100kb字节的图片</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment">## 创建download文件夹</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'download1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'download1'</span><span class="token punctuation">)</span>        <span class="token comment">## 获得图片文件名</span>        filename <span class="token operator">=</span> getfilename<span class="token punctuation">(</span>imagesrc<span class="token punctuation">)</span>        filename <span class="token operator">=</span> <span class="token string">'download1/'</span> <span class="token operator">+</span> filename        <span class="token comment">## 保存图片到本地</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载图片'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>下载图片 download1/20230412105733E6869CA2C51FC9659543B01BCAD594C0.jpg下载图片 download1/2023041210583373DC4BF4E9ABC5CC8C084D45FB133E3A.jpg下载图片 download1/20230412105932202830A62B6E006C698504271BA9D52C.jpg下载图片 download1/20230406160425985ECFF0D26CB2A423DAECD29141F4EE.jpg下载图片 download1/20220401091431D32C5DA957F3441693885B05E271420C.jpg下载图片 download1/2023041812043228512B6723F81BA42BC286530A7AD859.jpg下载图片 download1/20230416152716215BBBA7CCF443222A245DA84B742444.jpg下载图片 download1/202304160947448C2B8A7CF30225471547902BD50AB088.jpg下载图片 download1/20230316141537671B47C5E4F520E11EE0E489187E624F.png</code></pre><h3 id="爬取Nasdaq股票数据"><a href="#爬取Nasdaq股票数据" class="headerlink" title="爬取Nasdaq股票数据"></a>爬取Nasdaq股票数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> logging<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> db<span class="token punctuation">.</span>db_access <span class="token keyword">import</span> insert_hisq_datalogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span>                    <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s - %(threadName)s - '</span>                           <span class="token string">'%(name)s - %(funcName)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment">## url = 'https://www.nasdaq.com/symbol/aapl/historical#.UWdnJBDMhHk'</span><span class="token comment">## 换成自己到路径</span>url <span class="token operator">=</span> <span class="token string">'file:///C:/Users/HP/nasdaq-Apple1.html'</span><span class="token keyword">def</span> <span class="token function">validateUpdate</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""验证数据是否更新，更新返回True，未更新返回False"""</span>    <span class="token comment">## 创建md5对象</span>    md5obj <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    md5obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>html<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    md5code <span class="token operator">=</span> md5obj<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    old_md5code <span class="token operator">=</span> <span class="token string">''</span>    f_name <span class="token operator">=</span> <span class="token string">'md5.txt'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>f_name<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 如果文件存在读取文件内容</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>f_name<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            old_md5code <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> md5code <span class="token operator">==</span> old_md5code<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'数据没有更新'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment">## 把新的md5码写入到文件中</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>f_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>md5code<span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'数据更新'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment">## 线程运行标志</span>isrunning <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment">## 爬虫工作间隔</span>interval <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">controlthread_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""控制线程体函数"""</span>    <span class="token keyword">global</span> interval<span class="token punctuation">,</span> isrunning    <span class="token keyword">while</span> isrunning<span class="token punctuation">:</span>        <span class="token comment">## 控制爬虫工作计划</span>        i <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入Bye终止爬虫，输入数字改变爬虫工作间隔，单位秒：'</span><span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'控制输入&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            interval <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'bye'</span><span class="token punctuation">:</span>                isrunning <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">istradtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断交易时间"""</span>    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> <span class="token string">'%H%M%S'</span>    strnow <span class="token operator">=</span> now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    starttime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    endtime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">if</span> now<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span> \            <span class="token keyword">or</span> now<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span> \            <span class="token keyword">or</span> <span class="token punctuation">(</span>endtime <span class="token operator">&lt;</span> strnow <span class="token operator">&lt;</span> starttime<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">## 非工作时间</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment">## 工作时间</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">workthread_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""工作线程体函数"""</span>    <span class="token keyword">global</span> interval<span class="token punctuation">,</span> isrunning    <span class="token keyword">while</span> isrunning<span class="token punctuation">:</span>        <span class="token keyword">if</span> istradtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">## 交易时间内不工作</span>            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'交易时间，爬虫休眠1小时...'</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'爬虫开始工作...'</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            data <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            html <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            sp <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>            <span class="token comment">## 返回指定CSS选择器的div标签列表</span>            div <span class="token operator">=</span> sp<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div#quotes_content_left_pnlAJAX'</span><span class="token punctuation">)</span>            <span class="token comment">## 从列表中返回第一个元素</span>            divstring <span class="token operator">=</span> div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> validateUpdate<span class="token punctuation">(</span>divstring<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 数据更新</span>                <span class="token comment">## 分析数据</span>                trlist <span class="token operator">=</span> sp<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div#quotes_content_left_pnlAJAX table tbody tr'</span><span class="token punctuation">)</span>                data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> tr <span class="token keyword">in</span> trlist<span class="token punctuation">:</span>                    trtext <span class="token operator">=</span> tr<span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n\r '</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> trtext <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    rows <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r'\s+'</span><span class="token punctuation">,</span> trtext<span class="token punctuation">)</span>                    fields <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        df <span class="token operator">=</span> <span class="token string">'%m/%d/%Y'</span>                        fields<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">)</span>                    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                        <span class="token comment">## 实时数据不分析（只有时间，如10:12）</span>                        <span class="token keyword">continue</span>                    fields<span class="token punctuation">[</span><span class="token string">'Open'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    fields<span class="token punctuation">[</span><span class="token string">'High'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    fields<span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    fields<span class="token punctuation">[</span><span class="token string">'Close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    fields<span class="token punctuation">[</span><span class="token string">'Volume'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fields<span class="token punctuation">)</span>                <span class="token comment">## 保存数据到数据库</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">:</span>                    row<span class="token punctuation">[</span><span class="token string">'Symbol'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'AAPL'</span>                    insert_hisq_data<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token comment">## 爬虫休眠</span>            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'爬虫休眠&#123;0&#125;秒...'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""主函数"""</span>    <span class="token keyword">global</span> interval<span class="token punctuation">,</span> isrunning    <span class="token comment">## 创建工作线程对象workthread</span>    workthread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>workthread_body<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'WorkThread'</span><span class="token punctuation">)</span>    <span class="token comment">## 启动线程workthread</span>    workthread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## 创建控制线程对象controlthread</span>    controlthread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>controlthread_body<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'ControlThread'</span><span class="token punctuation">)</span>    <span class="token comment">## 启动线程controlthread</span>    controlthread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2023-04-19 15:46:27,709 - WorkThread - __main__ - workthread_body - INFO - 爬虫开始工作...2023-04-19 15:46:28,157 - WorkThread - __main__ - validateUpdate - INFO - 数据更新2023-04-19 15:46:28,236 - WorkThread - __main__ - workthread_body - INFO - 爬虫休眠5秒...2023-04-19 15:46:33,247 - WorkThread - __main__ - workthread_body - INFO - 爬虫开始工作...2023-04-19 15:46:33,255 - WorkThread - __main__ - validateUpdate - INFO - 数据没有更新2023-04-19 15:46:33,256 - WorkThread - __main__ - workthread_body - INFO - 爬虫休眠5秒...输入Bye终止爬虫，输入数字改变爬虫工作间隔，单位秒：36002023-04-19 15:46:36,048 - ControlThread - __main__ - controlthread_body - INFO - 控制输入3600输入Bye终止爬虫，输入数字改变爬虫工作间隔，单位秒：Exception in thread ControlThread:Traceback (most recent call last):  File &quot;E:\anaconda\lib\threading.py&quot;, line 973, in _bootstrap_inner    self.run()  File &quot;E:\anaconda\lib\threading.py&quot;, line 910, in run    self._target(*self._args, **self._kwargs)  File &quot;C:\Users\HP\AppData\Local\Temp\ipykernel_22288\985097547.py&quot;, line 66, in controlthread_bodyEOFError: EOF when reading a line2023-04-19 15:46:38,259 - WorkThread - __main__ - workthread_body - INFO - 爬虫开始工作...2023-04-19 15:46:38,267 - WorkThread - __main__ - validateUpdate - INFO - 数据没有更新2023-04-19 15:46:38,267 - WorkThread - __main__ - workthread_body - INFO - 爬虫休眠3600秒...</code></pre><h2 id="Pandas进阶"><a href="#Pandas进阶" class="headerlink" title="Pandas进阶"></a>Pandas进阶</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>a  1   -0.018841   2    0.291057   3   -0.869647b  1    0.500437   3   -1.678710c  1   -1.957127   2   -0.563527d  2    0.454833   3   -0.343765dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>MultiIndex([(&#39;a&#39;, 1),            (&#39;a&#39;, 2),            (&#39;a&#39;, 3),            (&#39;b&#39;, 1),            (&#39;b&#39;, 3),            (&#39;c&#39;, 1),            (&#39;c&#39;, 2),            (&#39;d&#39;, 2),            (&#39;d&#39;, 3)],           )</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>1    0.5004373   -1.678710dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>b  1    0.500437   3   -1.678710c  1   -1.957127   2   -0.563527dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>b  1    0.500437   3   -1.678710d  2    0.454833   3   -0.343765dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>a    0.291057c   -0.563527d    0.454833dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Green'</span><span class="token punctuation">,</span> <span class="token string">'Red'</span><span class="token punctuation">,</span> <span class="token string">'Green'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th></th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th></th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th>2</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>index<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span>frame<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">]</span>frame<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th>2</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>9</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> <span class="token operator">*</span>MultiIndex<span class="token punctuation">.</span>from_arrays<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Green'</span><span class="token punctuation">,</span> <span class="token string">'Red'</span><span class="token punctuation">,</span> <span class="token string">'Green'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>MultiIndex([(    &#39;Ohio&#39;, &#39;Green&#39;),            (    &#39;Ohio&#39;,   &#39;Red&#39;),            (&#39;Colorado&#39;, &#39;Green&#39;)],           names=[&#39;state&#39;, &#39;color&#39;])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>swaplevel<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key2</th>      <th>key1</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <th>a</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <th>a</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>1</th>      <th>b</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th>2</th>      <th>b</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <th>1</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>b</th>      <th>1</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th>a</th>      <th>2</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>b</th>      <th>2</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>swaplevel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key2</th>      <th>key1</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">1</th>      <th>a</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>b</th>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>    <tr>      <th rowspan="2" valign="top">2</th>      <th>a</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>b</th>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'key2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_21392\2004046222.py:1: FutureWarning: Using the level keyword in DataFrame and Series aggregations is deprecated and will be removed in a future version. Use groupby instead. df.sum(level=1) should use df.groupby(level=1).sum().  frame.sum(level=&#39;key2&#39;)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>    <tr>      <th>key2</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>6</td>      <td>8</td>      <td>10</td>    </tr>    <tr>      <th>2</th>      <td>12</td>      <td>14</td>      <td>16</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'color'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_21392\4133796543.py:1: FutureWarning: Using the level keyword in DataFrame and Series aggregations is deprecated and will be removed in a future version. Use groupby instead. df.sum(level=1) should use df.groupby(level=1).sum().  frame.sum(level=&#39;color&#39;, axis=1)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>color</th>      <th>Green</th>      <th>Red</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>1</th>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>8</td>      <td>4</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>1</th>      <td>14</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>20</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>state</th>      <th colspan="2" halign="left">Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>color</th>      <th>Green</th>      <th>Red</th>      <th>Green</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>4.000000</td>      <td>4.000000</td>      <td>4.000000</td>    </tr>    <tr>      <th>mean</th>      <td>4.500000</td>      <td>5.500000</td>      <td>6.500000</td>    </tr>    <tr>      <th>std</th>      <td>3.872983</td>      <td>3.872983</td>      <td>3.872983</td>    </tr>    <tr>      <th>min</th>      <td>0.000000</td>      <td>1.000000</td>      <td>2.000000</td>    </tr>    <tr>      <th>25%</th>      <td>2.250000</td>      <td>3.250000</td>      <td>4.250000</td>    </tr>    <tr>      <th>50%</th>      <td>4.500000</td>      <td>5.500000</td>      <td>6.500000</td>    </tr>    <tr>      <th>75%</th>      <td>6.750000</td>      <td>7.750000</td>      <td>8.750000</td>    </tr>    <tr>      <th>max</th>      <td>9.000000</td>      <td>10.000000</td>      <td>11.000000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>7</td>      <td>one</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>6</td>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>5</td>      <td>one</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>4</td>      <td>two</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>3</td>      <td>two</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>2</td>      <td>two</td>      <td>2</td>    </tr>    <tr>      <th>6</th>      <td>6</td>      <td>1</td>      <td>two</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>a</th>      <th>b</th>    </tr>    <tr>      <th>c</th>      <th>d</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">one</th>      <th>0</th>      <td>0</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>5</td>    </tr>    <tr>      <th rowspan="4" valign="top">two</th>      <th>0</th>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>6</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>    <tr>      <th>c</th>      <th>d</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">one</th>      <th>0</th>      <td>0</td>      <td>7</td>      <td>one</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>6</td>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>5</td>      <td>one</td>      <td>2</td>    </tr>    <tr>      <th rowspan="4" valign="top">two</th>      <th>0</th>      <td>3</td>      <td>4</td>      <td>two</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>3</td>      <td>two</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>5</td>      <td>2</td>      <td>two</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>6</td>      <td>1</td>      <td>two</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame2<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>c</th>      <th>d</th>      <th>a</th>      <th>b</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>0</td>      <td>0</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td>one</td>      <td>1</td>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>one</td>      <td>2</td>      <td>2</td>      <td>5</td>    </tr>    <tr>      <th>3</th>      <td>two</td>      <td>0</td>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>two</td>      <td>1</td>      <td>4</td>      <td>3</td>    </tr>    <tr>      <th>5</th>      <td>two</td>      <td>2</td>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>6</th>      <td>two</td>      <td>3</td>      <td>6</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdf1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>    </tr>    <tr>      <th>6</th>      <td>b</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>d</td>      <td>2</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>6</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'lkey'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'rkey'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df3<span class="token punctuation">,</span> df4<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'lkey'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'rkey'</span><span class="token punctuation">)</span>  <span class="token comment">#分别指定列名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>lkey</th>      <th>data1</th>      <th>rkey</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>6</td>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>2</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>      <td>a</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>lkey</th>      <th>data1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>    </tr>    <tr>      <th>6</th>      <td>b</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>rkey</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>d</td>      <td>2</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1.0</td>      <td>1.0</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>6.0</td>      <td>1.0</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>2.0</td>      <td>0.0</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4.0</td>      <td>0.0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5.0</td>      <td>0.0</td>    </tr>    <tr>      <th>6</th>      <td>c</td>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>7</th>      <td>d</td>      <td>NaN</td>      <td>2.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>      <td>1.0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>1.0</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>      <td>0.0</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>      <td>0.0</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>      <td>0.0</td>    </tr>    <tr>      <th>6</th>      <td>b</td>      <td>6</td>      <td>1.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>2.0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>a</td>      <td>4.0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>5.0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>b</td>      <td>0.0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>b</td>      <td>1.0</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>b</td>      <td>6.0</td>      <td>1</td>    </tr>    <tr>      <th>6</th>      <td>d</td>      <td>NaN</td>      <td>2</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>a</td>      <td>5</td>    </tr>    <tr>      <th>6</th>      <td>b</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>d</td>      <td>2</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'lval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'rval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>lval</th>      <th>rval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>1.0</td>      <td>4.0</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>one</td>      <td>1.0</td>      <td>5.0</td>    </tr>    <tr>      <th>2</th>      <td>foo</td>      <td>two</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>bar</td>      <td>one</td>      <td>3.0</td>      <td>6.0</td>    </tr>    <tr>      <th>4</th>      <td>bar</td>      <td>two</td>      <td>NaN</td>      <td>7.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2_x</th>      <th>lval</th>      <th>key2_y</th>      <th>rval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>1</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>one</td>      <td>1</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>foo</td>      <td>two</td>      <td>2</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>foo</td>      <td>two</td>      <td>2</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>4</th>      <td>bar</td>      <td>one</td>      <td>3</td>      <td>one</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>bar</td>      <td>one</td>      <td>3</td>      <td>two</td>      <td>7</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>lval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>two</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>bar</td>      <td>one</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">right<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>rval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>bar</td>      <td>one</td>      <td>6</td>    </tr>    <tr>      <th>3</th>      <td>bar</td>      <td>two</td>      <td>7</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key1'</span><span class="token punctuation">,</span> suffixes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'_left'</span><span class="token punctuation">,</span> <span class="token string">'_right'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2_left</th>      <th>lval</th>      <th>key2_right</th>      <th>rval</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>foo</td>      <td>one</td>      <td>1</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>1</th>      <td>foo</td>      <td>one</td>      <td>1</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td>foo</td>      <td>two</td>      <td>2</td>      <td>one</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>foo</td>      <td>two</td>      <td>2</td>      <td>one</td>      <td>5</td>    </tr>    <tr>      <th>4</th>      <td>bar</td>      <td>one</td>      <td>3</td>      <td>one</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>bar</td>      <td>one</td>      <td>3</td>      <td>two</td>      <td>7</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdleft1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>right1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'group_val'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>left1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>value</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>b</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>c</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">right1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>group_val</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>3.5</td>    </tr>    <tr>      <th>b</th>      <td>7.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left1<span class="token punctuation">,</span> right1<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>value</th>      <th>group_val</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>0</td>      <td>3.5</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>      <td>3.5</td>    </tr>    <tr>      <th>3</th>      <td>a</td>      <td>3</td>      <td>3.5</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>      <td>7.0</td>    </tr>    <tr>      <th>4</th>      <td>b</td>      <td>4</td>      <td>7.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nplefth <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5.</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>righth <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'event1'</span><span class="token punctuation">,</span> <span class="token string">'event2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lefth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>    </tr>    <tr>      <th>1</th>      <td>Ohio</td>      <td>2001</td>      <td>1.0</td>    </tr>    <tr>      <th>2</th>      <td>Ohio</td>      <td>2002</td>      <td>2.0</td>    </tr>    <tr>      <th>3</th>      <td>Nevada</td>      <td>2001</td>      <td>3.0</td>    </tr>    <tr>      <th>4</th>      <td>Nevada</td>      <td>2002</td>      <td>4.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">righth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>event1</th>      <th>event2</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">Nevada</th>      <th>2001</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>2000</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th rowspan="4" valign="top">Ohio</th>      <th>2000</th>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>2000</th>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2001</th>      <td>8</td>      <td>9</td>    </tr>    <tr>      <th>2002</th>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>lefth<span class="token punctuation">,</span> righth<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data</th>      <th>event1</th>      <th>event2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td>Ohio</td>      <td>2001</td>      <td>1.0</td>      <td>8</td>      <td>9</td>    </tr>    <tr>      <th>2</th>      <td>Ohio</td>      <td>2002</td>      <td>2.0</td>      <td>10</td>      <td>11</td>    </tr>    <tr>      <th>3</th>      <td>Nevada</td>      <td>2001</td>      <td>3.0</td>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>lefth<span class="token punctuation">,</span> righth<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data</th>      <th>event1</th>      <th>event2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>      <td>4.0</td>      <td>5.0</td>    </tr>    <tr>      <th>0</th>      <td>Ohio</td>      <td>2000</td>      <td>0.0</td>      <td>6.0</td>      <td>7.0</td>    </tr>    <tr>      <th>1</th>      <td>Ohio</td>      <td>2001</td>      <td>1.0</td>      <td>8.0</td>      <td>9.0</td>    </tr>    <tr>      <th>2</th>      <td>Ohio</td>      <td>2002</td>      <td>2.0</td>      <td>10.0</td>      <td>11.0</td>    </tr>    <tr>      <th>3</th>      <td>Nevada</td>      <td>2001</td>      <td>3.0</td>      <td>0.0</td>      <td>1.0</td>    </tr>    <tr>      <th>4</th>      <td>Nevada</td>      <td>2002</td>      <td>4.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>4</th>      <td>Nevada</td>      <td>2000</td>      <td>NaN</td>      <td>2.0</td>      <td>3.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>right2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7.</span><span class="token punctuation">,</span> <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9.</span><span class="token punctuation">,</span> <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11.</span><span class="token punctuation">,</span> <span class="token number">12.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Missouri'</span><span class="token punctuation">,</span> <span class="token string">'Alabama'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>left2         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">right2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Missouri</th>      <th>Alabama</th>    </tr>  </thead>  <tbody>    <tr>      <th>b</th>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>d</th>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>e</th>      <td>13.0</td>      <td>14.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left2<span class="token punctuation">,</span> right2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">,</span> left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>b</th>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>NaN</td>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>b</th>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>NaN</td>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">another <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7.</span><span class="token punctuation">,</span> <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9.</span><span class="token punctuation">,</span> <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11.</span><span class="token punctuation">,</span> <span class="token number">12.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">16.</span><span class="token punctuation">,</span> <span class="token number">17.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>another<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>New York</th>      <th>Oregon</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>e</th>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>f</th>      <td>16.0</td>      <td>17.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>right2<span class="token punctuation">,</span> another<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>      <th>New York</th>      <th>Oregon</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>      <td>11.0</td>      <td>12.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>right2<span class="token punctuation">,</span> another<span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Ohio</th>      <th>Nevada</th>      <th>Missouri</th>      <th>Alabama</th>      <th>New York</th>      <th>Oregon</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.0</td>      <td>2.0</td>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>    </tr>    <tr>      <th>c</th>      <td>3.0</td>      <td>4.0</td>      <td>9.0</td>      <td>10.0</td>      <td>9.0</td>      <td>10.0</td>    </tr>    <tr>      <th>e</th>      <td>5.0</td>      <td>6.0</td>      <td>13.0</td>      <td>14.0</td>      <td>11.0</td>      <td>12.0</td>    </tr>    <tr>      <th>b</th>      <td>NaN</td>      <td>NaN</td>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>NaN</td>      <td>11.0</td>      <td>12.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>f</th>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>16.0</td>      <td>17.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a    0b    1c    2d    3e    4f    5g    6dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#变为DataFrame</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>b</th>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>e</th>      <td>NaN</td>      <td>4.0</td>      <td>NaN</td>    </tr>    <tr>      <th>f</th>      <td>NaN</td>      <td>NaN</td>      <td>5.0</td>    </tr>    <tr>      <th>g</th>      <td>NaN</td>      <td>NaN</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">s4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">)</span>s4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>a    0b    1f    5g    6dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.0</td>      <td>0</td>    </tr>    <tr>      <th>b</th>      <td>1.0</td>      <td>1</td>    </tr>    <tr>      <th>f</th>      <td>NaN</td>      <td>5</td>    </tr>    <tr>      <th>g</th>      <td>NaN</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> join<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>b</th>      <td>1</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> join_axes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Input In [20], in &lt;cell line: 1&gt;()----&gt; 1 pd.concat([s1, s4], axis=1, join_axes=[[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;e&#39;]])File E:\anaconda\lib\site-packages\pandas\util\_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs)    305 if len(args) &gt; num_allow_args:    306     warnings.warn(    307         msg.format(arguments=arguments),    308         FutureWarning,    309         stacklevel=stacklevel,    310     )--&gt; 311 return func(*args, **kwargs)TypeError: concat() got an unexpected keyword argument &#39;join_axes&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>one    a    0       b    1two    a    0       b    1three  f    5       g    6dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>f</th>      <th>g</th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0.0</td>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>two</th>      <td>0.0</td>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>three</th>      <td>NaN</td>      <td>NaN</td>      <td>5.0</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>b</th>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>d</th>      <td>NaN</td>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>e</th>      <td>NaN</td>      <td>4.0</td>      <td>NaN</td>    </tr>    <tr>      <th>f</th>      <td>NaN</td>      <td>NaN</td>      <td>5.0</td>    </tr>    <tr>      <th>g</th>      <td>NaN</td>      <td>NaN</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>b</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>5</td>      <td>6</td>    </tr>    <tr>      <th>c</th>      <td>7</td>      <td>8</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'level1'</span><span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="2" halign="left">level1</th>      <th colspan="2" halign="left">level2</th>    </tr>    <tr>      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>1</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>b</th>      <td>2</td>      <td>3</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>5</td>      <td>7.0</td>      <td>8.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'level1'</span><span class="token punctuation">:</span> df1<span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">:</span> df2<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="2" halign="left">level1</th>      <th colspan="2" halign="left">level2</th>    </tr>    <tr>      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>1</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>b</th>      <td>2</td>      <td>3</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>5</td>      <td>7.0</td>      <td>8.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'level1'</span><span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token string">'lower'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>upper</th>      <th colspan="2" halign="left">level1</th>      <th colspan="2" halign="left">level2</th>    </tr>    <tr>      <th>lower</th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0</td>      <td>1</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>b</th>      <td>2</td>      <td>3</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>5</td>      <td>7.0</td>      <td>8.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.527674</td>      <td>2.145525</td>      <td>1.979097</td>      <td>1.702063</td>    </tr>    <tr>      <th>1</th>      <td>-0.350557</td>      <td>-0.511584</td>      <td>-1.061349</td>      <td>-0.702928</td>    </tr>    <tr>      <th>2</th>      <td>-1.239068</td>      <td>-1.240555</td>      <td>-0.295705</td>      <td>0.209181</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>b</th>      <th>d</th>      <th>a</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.718647</td>      <td>-2.931403</td>      <td>0.129779</td>    </tr>    <tr>      <th>1</th>      <td>1.482412</td>      <td>-1.022705</td>      <td>-1.186445</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.527674</td>      <td>2.145525</td>      <td>1.979097</td>      <td>1.702063</td>    </tr>    <tr>      <th>1</th>      <td>-0.350557</td>      <td>-0.511584</td>      <td>-1.061349</td>      <td>-0.702928</td>    </tr>    <tr>      <th>2</th>      <td>-1.239068</td>      <td>-1.240555</td>      <td>-0.295705</td>      <td>0.209181</td>    </tr>    <tr>      <th>3</th>      <td>0.129779</td>      <td>1.718647</td>      <td>NaN</td>      <td>-2.931403</td>    </tr>    <tr>      <th>4</th>      <td>-1.186445</td>      <td>1.482412</td>      <td>NaN</td>      <td>-1.022705</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>f    NaNe    2.5d    NaNc    3.5b    4.5a    NaNdtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>f    0.0e    1.0d    2.0c    3.0b    4.0a    NaNdtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0. , 2.5, 2. , 3.5, 4.5, nan])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>combine_first<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>a    NaNb    4.5c    3.0d    2.0e    1.0f    0.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">7.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">,</span> <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>2.0</td>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>5.0</td>      <td>NaN</td>      <td>10</td>    </tr>    <tr>      <th>3</th>      <td>NaN</td>      <td>6.0</td>      <td>14</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>4.0</td>      <td>3.0</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>4.0</td>    </tr>    <tr>      <th>3</th>      <td>3.0</td>      <td>6.0</td>    </tr>    <tr>      <th>4</th>      <td>7.0</td>      <td>8.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span class="token punctuation">.</span>combine_first<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>    </tr>    <tr>      <th>1</th>      <td>4.0</td>      <td>2.0</td>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>5.0</td>      <td>4.0</td>      <td>10.0</td>    </tr>    <tr>      <th>3</th>      <td>3.0</td>      <td>6.0</td>      <td>14.0</td>    </tr>    <tr>      <th>4</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dataresult <span class="token operator">=</span> data<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span>resultresult<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#默认操作最内层</span>result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">#指定分层编号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>state</th>      <th>Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>number</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>two</th>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>three</th>      <td>2</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>number</th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>    <tr>      <th>state</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Colorado</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> data<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>state     numberOhio      one       0          two       1          three     2Colorado  one       3          two       4          three     5dtype: int32</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#默认操作最内层</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>number</th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>    <tr>      <th>state</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Colorado</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">#指定操作最内层</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>state</th>      <th>Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>number</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>two</th>      <td>1</td>      <td>4</td>    </tr>    <tr>      <th>three</th>      <td>2</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认引入缺失数据</span>data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span>data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span>dropna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>one  a    0.0     b    1.0     c    2.0     d    3.0     e    NaNtwo  a    NaN     b    NaN     c    4.0     d    5.0     e    6.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>one  a    0     b    1     c    2     d    3two  c    4     d    5     e    6dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认引入缺失数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0.0</td>      <td>1.0</td>      <td>2.0</td>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>two</th>      <td>NaN</td>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>one  a    0.0     b    1.0     c    2.0     d    3.0two  c    4.0     d    5.0     e    6.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span>dropna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>one  a    0.0     b    1.0     c    2.0     d    3.0     e    NaNtwo  a    NaN     b    NaN     c    4.0     d    5.0     e    6.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">:</span> result <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'side'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>side</th>      <th>left</th>      <th>right</th>    </tr>    <tr>      <th>state</th>      <th>number</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="3" valign="top">Ohio</th>      <th>one</th>      <td>0</td>      <td>5</td>    </tr>    <tr>      <th>two</th>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>three</th>      <td>2</td>      <td>7</td>    </tr>    <tr>      <th rowspan="3" valign="top">Colorado</th>      <th>one</th>      <td>3</td>      <td>8</td>    </tr>    <tr>      <th>two</th>      <td>4</td>      <td>9</td>    </tr>    <tr>      <th>three</th>      <td>5</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>side</th>      <th colspan="2" halign="left">left</th>      <th colspan="2" halign="left">right</th>    </tr>    <tr>      <th>state</th>      <th>Ohio</th>      <th>Colorado</th>      <th>Ohio</th>      <th>Colorado</th>    </tr>    <tr>      <th>number</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>one</th>      <td>0</td>      <td>3</td>      <td>5</td>      <td>8</td>    </tr>    <tr>      <th>two</th>      <td>1</td>      <td>4</td>      <td>6</td>      <td>9</td>    </tr>    <tr>      <th>three</th>      <td>2</td>      <td>5</td>      <td>7</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token string">'side'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>state</th>      <th>Colorado</th>      <th>Ohio</th>    </tr>    <tr>      <th>number</th>      <th>side</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">one</th>      <th>left</th>      <td>3</td>      <td>0</td>    </tr>    <tr>      <th>right</th>      <td>8</td>      <td>5</td>    </tr>    <tr>      <th rowspan="2" valign="top">two</th>      <th>left</th>      <td>4</td>      <td>1</td>    </tr>    <tr>      <th>right</th>      <td>9</td>      <td>6</td>    </tr>    <tr>      <th rowspan="2" valign="top">three</th>      <th>left</th>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>right</th>      <td>10</td>      <td>7</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>number</th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>    <tr>      <th>state</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Colorado</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>number</th>      <th>one</th>      <th>two</th>      <th>three</th>    </tr>    <tr>      <th>state</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Colorado</th>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'k1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'k2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>k1</th>      <th>k2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>two</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>one</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>two</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>one</td>      <td>3</td>    </tr>    <tr>      <th>5</th>      <td>two</td>      <td>4</td>    </tr>    <tr>      <th>6</th>      <td>two</td>      <td>4</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认判断全部列</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0    False1    False2    False3    False4    False5    False6     Truedtype: bool</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认保留第一次出现的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>k1</th>      <th>k2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>two</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>one</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>two</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>one</td>      <td>3</td>    </tr>    <tr>      <th>5</th>      <td>two</td>      <td>4</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'k1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>k1</th>      <th>k2</th>      <th>v1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>two</td>      <td>1</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'k1'</span><span class="token punctuation">,</span> <span class="token string">'k2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">'last'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>k1</th>      <th>k2</th>      <th>v1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>one</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>two</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>one</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>two</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>one</td>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>6</th>      <td>two</td>      <td>4</td>      <td>6</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'food'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'bacon'</span><span class="token punctuation">,</span> <span class="token string">'pulled pork'</span><span class="token punctuation">,</span> <span class="token string">'bacon'</span><span class="token punctuation">,</span> <span class="token string">'Pastrami'</span><span class="token punctuation">,</span> <span class="token string">'corned beef'</span><span class="token punctuation">,</span> <span class="token string">'Bacon'</span><span class="token punctuation">,</span>                <span class="token string">'pastrami'</span><span class="token punctuation">,</span> <span class="token string">'honey ham'</span><span class="token punctuation">,</span> <span class="token string">'nova lox'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ounces'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>food</th>      <th>ounces</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>bacon</td>      <td>4.0</td>    </tr>    <tr>      <th>1</th>      <td>pulled pork</td>      <td>3.0</td>    </tr>    <tr>      <th>2</th>      <td>bacon</td>      <td>12.0</td>    </tr>    <tr>      <th>3</th>      <td>Pastrami</td>      <td>6.0</td>    </tr>    <tr>      <th>4</th>      <td>corned beef</td>      <td>7.5</td>    </tr>    <tr>      <th>5</th>      <td>Bacon</td>      <td>8.0</td>    </tr>    <tr>      <th>6</th>      <td>pastrami</td>      <td>3.0</td>    </tr>    <tr>      <th>7</th>      <td>honey ham</td>      <td>5.0</td>    </tr>    <tr>      <th>8</th>      <td>nova lox</td>      <td>6.0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">meat_to_animal <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'bacon'</span><span class="token punctuation">:</span> <span class="token string">'pig'</span><span class="token punctuation">,</span>  <span class="token string">'pulled pork'</span><span class="token punctuation">:</span> <span class="token string">'pig'</span><span class="token punctuation">,</span>  <span class="token string">'pastrami'</span><span class="token punctuation">:</span> <span class="token string">'cow'</span><span class="token punctuation">,</span>  <span class="token string">'corned beef'</span><span class="token punctuation">:</span> <span class="token string">'cow'</span><span class="token punctuation">,</span>  <span class="token string">'honey ham'</span><span class="token punctuation">:</span> <span class="token string">'pig'</span><span class="token punctuation">,</span>  <span class="token string">'nova lox'</span><span class="token punctuation">:</span> <span class="token string">'salmon'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">lowercased <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>lowercased<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0          bacon1    pulled pork2          bacon3       pastrami4    corned beef5          bacon6       pastrami7      honey ham8       nova loxName: food, dtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'animal'</span><span class="token punctuation">]</span> <span class="token operator">=</span> lowercased<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>meat_to_animal<span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>food</th>      <th>ounces</th>      <th>animal</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>bacon</td>      <td>4.0</td>      <td>pig</td>    </tr>    <tr>      <th>1</th>      <td>pulled pork</td>      <td>3.0</td>      <td>pig</td>    </tr>    <tr>      <th>2</th>      <td>bacon</td>      <td>12.0</td>      <td>pig</td>    </tr>    <tr>      <th>3</th>      <td>Pastrami</td>      <td>6.0</td>      <td>cow</td>    </tr>    <tr>      <th>4</th>      <td>corned beef</td>      <td>7.5</td>      <td>cow</td>    </tr>    <tr>      <th>5</th>      <td>Bacon</td>      <td>8.0</td>      <td>pig</td>    </tr>    <tr>      <th>6</th>      <td>pastrami</td>      <td>3.0</td>      <td>cow</td>    </tr>    <tr>      <th>7</th>      <td>honey ham</td>      <td>5.0</td>      <td>pig</td>    </tr>    <tr>      <th>8</th>      <td>nova lox</td>      <td>6.0</td>      <td>salmon</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> meat_to_animal<span class="token punctuation">[</span>x<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0       pig1       pig2       pig3       cow4       cow5       pig6       cow7       pig8    salmonName: food, dtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">999.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">999.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1000.</span><span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0       1.01    -999.02       2.03    -999.04   -1000.05       3.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0       1.01       NaN2       2.03       NaN4   -1000.05       3.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0    1.01    NaN2    2.03    NaN4    0.05    3.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>0    1.01    NaN2    2.03    NaN4    0.05    3.0dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>ONE</th>      <th>TWO</th>      <th>THREE</th>      <th>FOUR</th>    </tr>  </thead>  <tbody>    <tr>      <th>Ohio</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>Colorado</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>New York</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">transform <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Index([&#39;OHIO&#39;, &#39;COLO&#39;, &#39;NEW &#39;], dtype=&#39;object&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>index<span class="token operator">=</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>OHIO</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>COLO</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>NEW</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'OHIO'</span><span class="token punctuation">:</span> <span class="token string">'INDIANA'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token string">'peekaboo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>      <th>peekaboo</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>INDIANA</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>COLO</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>NEW</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'OHIO'</span><span class="token punctuation">:</span> <span class="token string">'INDIANA'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>one</th>      <th>two</th>      <th>three</th>      <th>four</th>    </tr>  </thead>  <tbody>    <tr>      <th>INDIANA</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>COLO</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>NEW</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span>bins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>cats <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> bins<span class="token punctuation">)</span>cats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]]Length: 12Categories (4, interval[int64, right]): [(18, 25] &lt; (25, 35] &lt; (35, 60] &lt; (60, 100]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">cats<span class="token punctuation">.</span>codes       <span class="token comment">#分组的编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0, 0, 0, 1, 0, 0, 2, 1, 3, 2, 2, 1], dtype=int8)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">cats<span class="token punctuation">.</span>categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>IntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], dtype=&#39;interval[int64, right]&#39;)</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(18, 25]     5(25, 35]     3(35, 60]     3(60, 100]    1dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)]Length: 12Categories (4, interval[int64, left]): [[18, 26) &lt; [26, 36) &lt; [36, 61) &lt; [61, 100)]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">group_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Youth'</span><span class="token punctuation">,</span> <span class="token string">'YoungAdult'</span><span class="token punctuation">,</span> <span class="token string">'MiddleAged'</span><span class="token punctuation">,</span> <span class="token string">'Senior'</span><span class="token punctuation">]</span>pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> labels<span class="token operator">=</span>group_names<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[&#39;Youth&#39;, &#39;Youth&#39;, &#39;Youth&#39;, &#39;YoungAdult&#39;, &#39;Youth&#39;, ..., &#39;YoungAdult&#39;, &#39;Senior&#39;, &#39;MiddleAged&#39;, &#39;MiddleAged&#39;, &#39;YoungAdult&#39;]Length: 12Categories (4, object): [&#39;Youth&#39; &lt; &#39;YoungAdult&#39; &lt; &#39;MiddleAged&#39; &lt; &#39;Senior&#39;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>array([0.12967787, 0.87168374, 0.24167497, 0.56688941, 0.22964312,       0.30205167, 0.88297675, 0.22349301, 0.18292263, 0.81072534,       0.25054152, 0.99378214, 0.78439125, 0.3970331 , 0.89049743,       0.51677834, 0.76808437, 0.54701119, 0.79386529, 0.25451132])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">temp<span class="token operator">=</span>pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> precision<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#划分的分组数而不是边界，边界按最大最小平均分</span>temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>[(0.13, 0.35], (0.78, 0.99], (0.13, 0.35], (0.56, 0.78], (0.13, 0.35], ..., (0.35, 0.56], (0.56, 0.78], (0.35, 0.56], (0.78, 0.99], (0.13, 0.35]]Length: 20Categories (4, interval[float64, right]): [(0.13, 0.35] &lt; (0.35, 0.56] &lt; (0.56, 0.78] &lt; (0.78, 0.99]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(0.13, 0.35]    8(0.78, 0.99]    7(0.35, 0.56]    3(0.56, 0.78]    2dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment">## Normally distributed</span>cats <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">#将所有数据平均分为4部分</span>cats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[(-0.726, -0.00747], (-0.00747, 0.636], (-3.057, -0.726], (-3.057, -0.726], (-0.00747, 0.636], ..., (-0.726, -0.00747], (-0.726, -0.00747], (-0.726, -0.00747], (0.636, 2.834], (-3.057, -0.726]]Length: 1000Categories (4, interval[float64, right]): [(-3.057, -0.726] &lt; (-0.726, -0.00747] &lt; (-0.00747, 0.636] &lt; (0.636, 2.834]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>cats<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>(-3.057, -0.726]      250(-0.726, -0.00747]    250(-0.00747, 0.636]     250(0.636, 2.834]        250dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[(-1.239, -0.00747], (-0.00747, 1.338], (-3.057, -1.239], (-3.057, -1.239], (-0.00747, 1.338], ..., (-1.239, -0.00747], (-1.239, -0.00747], (-1.239, -0.00747], (1.338, 2.834], (-3.057, -1.239]]Length: 1000Categories (4, interval[float64, right]): [(-3.057, -1.239] &lt; (-1.239, -0.00747] &lt; (-0.00747, 1.338] &lt; (1.338, 2.834]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1000.000000</td>      <td>1000.000000</td>      <td>1000.000000</td>      <td>1000.000000</td>    </tr>    <tr>      <th>mean</th>      <td>-0.068024</td>      <td>0.015781</td>      <td>0.048655</td>      <td>-0.019467</td>    </tr>    <tr>      <th>std</th>      <td>1.050557</td>      <td>0.963683</td>      <td>0.972374</td>      <td>1.031390</td>    </tr>    <tr>      <th>min</th>      <td>-3.617567</td>      <td>-2.550853</td>      <td>-3.372664</td>      <td>-3.196753</td>    </tr>    <tr>      <th>25%</th>      <td>-0.718715</td>      <td>-0.591289</td>      <td>-0.606569</td>      <td>-0.712316</td>    </tr>    <tr>      <th>50%</th>      <td>-0.066156</td>      <td>0.004574</td>      <td>0.068207</td>      <td>0.000122</td>    </tr>    <tr>      <th>75%</th>      <td>0.627520</td>      <td>0.662984</td>      <td>0.747493</td>      <td>0.673216</td>    </tr>    <tr>      <th>max</th>      <td>2.940831</td>      <td>2.865724</td>      <td>3.369795</td>      <td>3.364796</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">col<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>col<span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>340    3.196054445   -3.159953533   -3.156547628    3.369795698   -3.372664Name: 2, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">#选出超过3的行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>55</th>      <td>-3.157032</td>      <td>-0.841691</td>      <td>1.018759</td>      <td>-0.018302</td>    </tr>    <tr>      <th>340</th>      <td>0.456149</td>      <td>0.854559</td>      <td>3.196054</td>      <td>0.353166</td>    </tr>    <tr>      <th>343</th>      <td>-3.283047</td>      <td>-0.316560</td>      <td>-0.121576</td>      <td>0.584322</td>    </tr>    <tr>      <th>407</th>      <td>-0.089158</td>      <td>-0.604724</td>      <td>1.028259</td>      <td>3.364796</td>    </tr>    <tr>      <th>445</th>      <td>0.300672</td>      <td>-0.848071</td>      <td>-3.159953</td>      <td>0.870023</td>    </tr>    <tr>      <th>533</th>      <td>-0.048864</td>      <td>0.152498</td>      <td>-3.156547</td>      <td>-0.968370</td>    </tr>    <tr>      <th>628</th>      <td>1.119083</td>      <td>0.171787</td>      <td>3.369795</td>      <td>-0.550373</td>    </tr>    <tr>      <th>698</th>      <td>-0.517293</td>      <td>-1.208259</td>      <td>-3.372664</td>      <td>-0.418606</td>    </tr>    <tr>      <th>824</th>      <td>-3.459360</td>      <td>-0.702142</td>      <td>0.325501</td>      <td>0.653165</td>    </tr>    <tr>      <th>873</th>      <td>-3.617567</td>      <td>-1.302917</td>      <td>-0.577524</td>      <td>0.859530</td>    </tr>    <tr>      <th>923</th>      <td>-0.920904</td>      <td>-0.103102</td>      <td>-0.581829</td>      <td>-3.196753</td>    </tr>    <tr>      <th>981</th>      <td>0.672200</td>      <td>-0.274157</td>      <td>-0.883970</td>      <td>-3.038320</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1000.000000</td>      <td>1000.000000</td>      <td>1000.000000</td>      <td>1000.000000</td>    </tr>    <tr>      <th>mean</th>      <td>-0.066507</td>      <td>0.015781</td>      <td>0.048779</td>      <td>-0.019597</td>    </tr>    <tr>      <th>std</th>      <td>1.045975</td>      <td>0.963683</td>      <td>0.968296</td>      <td>1.029555</td>    </tr>    <tr>      <th>min</th>      <td>-3.000000</td>      <td>-2.550853</td>      <td>-3.000000</td>      <td>-3.000000</td>    </tr>    <tr>      <th>25%</th>      <td>-0.718715</td>      <td>-0.591289</td>      <td>-0.606569</td>      <td>-0.712316</td>    </tr>    <tr>      <th>50%</th>      <td>-0.066156</td>      <td>0.004574</td>      <td>0.068207</td>      <td>0.000122</td>    </tr>    <tr>      <th>75%</th>      <td>0.627520</td>      <td>0.662984</td>      <td>0.747493</td>      <td>0.673216</td>    </tr>    <tr>      <th>max</th>      <td>2.940831</td>      <td>2.865724</td>      <td>3.000000</td>      <td>3.000000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sampler <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">#表示新顺序的数组</span>sampler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>array([1, 2, 0, 4, 3])</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>    <tr>      <th>3</th>      <td>12</td>      <td>13</td>      <td>14</td>      <td>15</td>    </tr>    <tr>      <th>4</th>      <td>16</td>      <td>17</td>      <td>18</td>      <td>19</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>take<span class="token punctuation">(</span>sampler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>    <tr>      <th>0</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>16</td>      <td>17</td>      <td>18</td>      <td>19</td>    </tr>    <tr>      <th>3</th>      <td>12</td>      <td>13</td>      <td>14</td>      <td>15</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>4</th>      <td>16</td>      <td>17</td>      <td>18</td>      <td>19</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>    <tr>      <th>2</th>      <td>8</td>      <td>9</td>      <td>10</td>      <td>11</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">choices <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>draws <span class="token operator">=</span> choices<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> replace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>draws<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>1    70    54    40    53    63    61    74    41    71    7dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'data1'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>b</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>b</td>      <td>1</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>c</td>      <td>3</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>4</td>    </tr>    <tr>      <th>5</th>      <td>b</td>      <td>5</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">dummies <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">)</span>df_with_dummy <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dummies<span class="token punctuation">)</span>df_with_dummy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>key_a</th>      <th>key_b</th>      <th>key_c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>0</td>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>0</td>      <td>1</td>      <td>0</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Dave'</span><span class="token punctuation">:</span> <span class="token string">'dave@google.com'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">:</span> <span class="token string">'steve@gmail.com'</span><span class="token punctuation">,</span> <span class="token string">'Rob'</span><span class="token punctuation">:</span> <span class="token string">'rob@gmail.com'</span><span class="token punctuation">,</span> <span class="token string">'Wes'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">&#125;</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Dave     dave@google.comSteve    steve@gmail.comRob        rob@gmail.comWes                  NaNdtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Dave     FalseSteve    FalseRob      FalseWes       Truedtype: bool</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'gmail'</span><span class="token punctuation">)</span> <span class="token comment">#data.map可以将字符串函数作用于各个值，但是遇见NaN会报错，str不会</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Dave     FalseSteve     TrueRob       TrueWes        NaNdtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> repattern<span class="token operator">=</span><span class="token string">'([A-Z0-9._%+-]+)@([A-Z0-9._-]+)\\.([A-Z]&#123;2,4&#125;)'</span>data<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Dave     [(dave, google, com)]Steve    [(steve, gmail, com)]Rob        [(rob, gmail, com)]Wes                        NaNdtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token string">'data1'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'data2'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>one</td>      <td>-0.083293</td>      <td>0.456279</td>    </tr>    <tr>      <th>1</th>      <td>a</td>      <td>two</td>      <td>-0.442362</td>      <td>-0.337304</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>one</td>      <td>0.244770</td>      <td>0.943875</td>    </tr>    <tr>      <th>3</th>      <td>b</td>      <td>two</td>      <td>0.862879</td>      <td>0.444040</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>one</td>      <td>0.858584</td>      <td>0.527193</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>grouped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>&lt;pandas.core.groupby.generic.SeriesGroupBy object at 0x0000024CEBF7B880&gt;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>key1a    0.110977b    0.553824Name: data1, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">means <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>means<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>key1  key2a     one     0.387646      two    -0.442362b     one     0.244770      two     0.862879Name: data1, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">means<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>key2</th>      <th>one</th>      <th>two</th>    </tr>    <tr>      <th>key1</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.387646</td>      <td>-0.442362</td>    </tr>    <tr>      <th>b</th>      <td>0.244770</td>      <td>0.862879</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">states <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>years <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2006</span><span class="token punctuation">,</span> <span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2006</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>states<span class="token punctuation">,</span> years<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>California  2005   -0.442362            2006    0.244770Ohio        2005    0.389793            2006    0.858584Name: data1, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key1</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.110977</td>      <td>0.215390</td>    </tr>    <tr>      <th>b</th>      <td>0.553824</td>      <td>0.693958</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key1</th>      <th>key2</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">a</th>      <th>one</th>      <td>0.387646</td>      <td>0.491736</td>    </tr>    <tr>      <th>two</th>      <td>-0.442362</td>      <td>-0.337304</td>    </tr>    <tr>      <th rowspan="2" valign="top">b</th>      <th>one</th>      <td>0.244770</td>      <td>0.943875</td>    </tr>    <tr>      <th>two</th>      <td>0.862879</td>      <td>0.444040</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#忽略缺失值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>key1  key2a     one     2      two     1b     one     1      two     1dtype: int64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span> group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>a  key1 key2     data1     data20    a  one -0.083293  0.4562791    a  two -0.442362 -0.3373044    a  one  0.858584  0.527193b  key1 key2     data1     data22    b  one  0.244770  0.9438753    b  two  0.862879  0.444040</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">,</span> group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>(&#39;a&#39;, &#39;one&#39;)  key1 key2     data1     data20    a  one -0.083293  0.4562794    a  one  0.858584  0.527193(&#39;a&#39;, &#39;two&#39;)  key1 key2     data1     data21    a  two -0.442362 -0.337304(&#39;b&#39;, &#39;one&#39;)  key1 key2    data1     data22    b  one  0.24477  0.943875(&#39;b&#39;, &#39;two&#39;)  key1 key2     data1    data23    b  two  0.862879  0.44404</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pieces <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pieces<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>b</td>      <td>one</td>      <td>0.244770</td>      <td>0.943875</td>    </tr>    <tr>      <th>3</th>      <td>b</td>      <td>two</td>      <td>0.862879</td>      <td>0.444040</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>dtypes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>key1      objectkey2      objectdata1    float64data2    float64dtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>df<span class="token punctuation">.</span>dtypes<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> dtype<span class="token punctuation">,</span> group <span class="token keyword">in</span> grouped<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dtype<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>float64      data1     data20 -0.083293  0.4562791 -0.442362 -0.3373042  0.244770  0.9438753  0.862879  0.4440404  0.858584  0.527193object  key1 key20    a  one1    a  two2    b  one3    b  two4    a  one</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">people <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token string">'Wes'</span><span class="token punctuation">,</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span> <span class="token string">'Travis'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>people<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan <span class="token comment">## Add a few NA values</span>people<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <th>Joe</th>      <td>0.231080</td>      <td>-0.440371</td>      <td>0.409642</td>      <td>-0.114867</td>      <td>0.328406</td>    </tr>    <tr>      <th>Steve</th>      <td>-0.775944</td>      <td>-1.258328</td>      <td>-2.723042</td>      <td>0.615950</td>      <td>-1.263696</td>    </tr>    <tr>      <th>Wes</th>      <td>1.965413</td>      <td>NaN</td>      <td>NaN</td>      <td>-1.284734</td>      <td>0.204553</td>    </tr>    <tr>      <th>Jim</th>      <td>-0.097869</td>      <td>0.182042</td>      <td>0.061867</td>      <td>-0.648661</td>      <td>-0.217448</td>    </tr>    <tr>      <th>Travis</th>      <td>-0.006042</td>      <td>-0.612533</td>      <td>0.537186</td>      <td>0.646037</td>      <td>1.339316</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">mapping <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'f'</span> <span class="token punctuation">:</span> <span class="token string">'orange'</span><span class="token punctuation">&#125;</span>by_column <span class="token operator">=</span> people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>by_column<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>blue</th>      <th>red</th>    </tr>  </thead>  <tbody>    <tr>      <th>Joe</th>      <td>0.294776</td>      <td>0.119115</td>    </tr>    <tr>      <th>Steve</th>      <td>-2.107092</td>      <td>-3.297967</td>    </tr>    <tr>      <th>Wes</th>      <td>-1.284734</td>      <td>2.169965</td>    </tr>    <tr>      <th>Jim</th>      <td>-0.586794</td>      <td>-0.133276</td>    </tr>    <tr>      <th>Travis</th>      <td>1.183222</td>      <td>0.720741</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">map_series <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>mapping<span class="token punctuation">)</span>map_series<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>a       redb       redc      blued      bluee       redf    orangedtype: object</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>map_series<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>blue</th>      <th>red</th>    </tr>  </thead>  <tbody>    <tr>      <th>Joe</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>Steve</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>Wes</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>Jim</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>Travis</th>      <td>2</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>2.098624</td>      <td>-0.258329</td>      <td>0.471509</td>      <td>-2.048262</td>      <td>0.315510</td>    </tr>    <tr>      <th>5</th>      <td>-0.775944</td>      <td>-1.258328</td>      <td>-2.723042</td>      <td>0.615950</td>      <td>-1.263696</td>    </tr>    <tr>      <th>6</th>      <td>-0.006042</td>      <td>-0.612533</td>      <td>0.537186</td>      <td>0.646037</td>      <td>1.339316</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">key_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span>people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">,</span> key_list<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>      <th>e</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">3</th>      <th>one</th>      <td>0.231080</td>      <td>-0.440371</td>      <td>0.409642</td>      <td>-1.284734</td>      <td>0.204553</td>    </tr>    <tr>      <th>two</th>      <td>-0.097869</td>      <td>0.182042</td>      <td>0.061867</td>      <td>-0.648661</td>      <td>-0.217448</td>    </tr>    <tr>      <th>5</th>      <th>one</th>      <td>-0.775944</td>      <td>-1.258328</td>      <td>-2.723042</td>      <td>0.615950</td>      <td>-1.263696</td>    </tr>    <tr>      <th>6</th>      <th>two</th>      <td>-0.006042</td>      <td>-0.612533</td>      <td>0.537186</td>      <td>0.646037</td>      <td>1.339316</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">columns <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_arrays<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'JP'</span><span class="token punctuation">,</span> <span class="token string">'JP'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cty'</span><span class="token punctuation">,</span> <span class="token string">'tenor'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hier_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">)</span>hier_df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th>cty</th>      <th colspan="3" halign="left">US</th>      <th colspan="2" halign="left">JP</th>    </tr>    <tr>      <th>tenor</th>      <th>1</th>      <th>3</th>      <th>5</th>      <th>1</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.860698</td>      <td>-0.379994</td>      <td>0.644758</td>      <td>-0.231480</td>      <td>0.346634</td>    </tr>    <tr>      <th>1</th>      <td>1.237142</td>      <td>0.038387</td>      <td>0.600247</td>      <td>0.431467</td>      <td>0.137392</td>    </tr>    <tr>      <th>2</th>      <td>-2.211133</td>      <td>1.528952</td>      <td>0.056726</td>      <td>-0.629724</td>      <td>-0.125510</td>    </tr>    <tr>      <th>3</th>      <td>-1.272170</td>      <td>-1.088555</td>      <td>-1.950819</td>      <td>-0.253229</td>      <td>0.910727</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">hier_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'cty'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>cty</th>      <th>JP</th>      <th>US</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>2</td>      <td>3</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key1</th>      <th>key2</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>one</td>      <td>-0.083293</td>      <td>0.456279</td>    </tr>    <tr>      <th>1</th>      <td>a</td>      <td>two</td>      <td>-0.442362</td>      <td>-0.337304</td>    </tr>    <tr>      <th>2</th>      <td>b</td>      <td>one</td>      <td>0.244770</td>      <td>0.943875</td>    </tr>    <tr>      <th>3</th>      <td>b</td>      <td>two</td>      <td>0.862879</td>      <td>0.444040</td>    </tr>    <tr>      <th>4</th>      <td>a</td>      <td>one</td>      <td>0.858584</td>      <td>0.527193</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>grouped<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">)</span>  <span class="token comment">#计算该百分位的值，如果没有则插值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>key1a    0.670209b    0.801068Name: data1, dtype: float64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">peak_to_peak</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> arr<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>agg<span class="token punctuation">(</span>peak_to_peak<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>C:\Users\HP\AppData\Local\Temp\ipykernel_20412\238647417.py:2: FutureWarning: [&#39;key2&#39;] did not aggregate successfully. If any error is raised this will raise in a future version of pandas. Drop these columns/ops to avoid this warning.  grouped.agg(peak_to_peak)</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key1</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>1.300946</td>      <td>0.864497</td>    </tr>    <tr>      <th>b</th>      <td>0.618109</td>      <td>0.499836</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead tr th &#123;    text-align: left;&#125;.dataframe thead tr:last-of-type th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="8" halign="left">data1</th>      <th colspan="8" halign="left">data2</th>    </tr>    <tr>      <th></th>      <th>count</th>      <th>mean</th>      <th>std</th>      <th>min</th>      <th>25%</th>      <th>50%</th>      <th>75%</th>      <th>max</th>      <th>count</th>      <th>mean</th>      <th>std</th>      <th>min</th>      <th>25%</th>      <th>50%</th>      <th>75%</th>      <th>max</th>    </tr>    <tr>      <th>key1</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>3.0</td>      <td>0.110977</td>      <td>0.671878</td>      <td>-0.442362</td>      <td>-0.262827</td>      <td>-0.083293</td>      <td>0.387646</td>      <td>0.858584</td>      <td>3.0</td>      <td>0.215390</td>      <td>0.479958</td>      <td>-0.337304</td>      <td>0.059488</td>      <td>0.456279</td>      <td>0.491736</td>      <td>0.527193</td>    </tr>    <tr>      <th>b</th>      <td>2.0</td>      <td>0.553824</td>      <td>0.437069</td>      <td>0.244770</td>      <td>0.399297</td>      <td>0.553824</td>      <td>0.708352</td>      <td>0.862879</td>      <td>2.0</td>      <td>0.693958</td>      <td>0.353437</td>      <td>0.444040</td>      <td>0.568999</td>      <td>0.693958</td>      <td>0.818916</td>      <td>0.943875</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">tips <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/tips.csv'</span><span class="token punctuation">)</span>tips<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tips<span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span> <span class="token operator">/</span> tips<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span>tips<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------FileNotFoundError                         Traceback (most recent call last)Input In [135], in &lt;cell line: 1&gt;()----&gt; 1 tips = pd.read_csv(&#39;examples/tips.csv&#39;)      2 tips[&#39;tip_pct&#39;] = tips[&#39;tip&#39;] / tips[&#39;total_bill&#39;]      3 tips[:4]File E:\anaconda\lib\site-packages\pandas\util\_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs)    305 if len(args) &gt; num_allow_args:    306     warnings.warn(    307         msg.format(arguments=arguments),    308         FutureWarning,    309         stacklevel=stacklevel,    310     )--&gt; 311 return func(*args, **kwargs)File E:\anaconda\lib\site-packages\pandas\io\parsers\readers.py:680, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)    665 kwds_defaults = _refine_defaults_read(    666     dialect,    667     delimiter,   (...)    676     defaults=&#123;&quot;delimiter&quot;: &quot;,&quot;&#125;,    677 )    678 kwds.update(kwds_defaults)--&gt; 680 return _read(filepath_or_buffer, kwds)File E:\anaconda\lib\site-packages\pandas\io\parsers\readers.py:575, in _read(filepath_or_buffer, kwds)    572 _validate_names(kwds.get(&quot;names&quot;, None))    574 ## Create the parser.--&gt; 575 parser = TextFileReader(filepath_or_buffer, **kwds)    577 if chunksize or iterator:    578     return parserFile E:\anaconda\lib\site-packages\pandas\io\parsers\readers.py:933, in TextFileReader.__init__(self, f, engine, **kwds)    930     self.options[&quot;has_index_names&quot;] = kwds[&quot;has_index_names&quot;]    932 self.handles: IOHandles | None = None--&gt; 933 self._engine = self._make_engine(f, self.engine)File E:\anaconda\lib\site-packages\pandas\io\parsers\readers.py:1217, in TextFileReader._make_engine(self, f, engine)   1213     mode = &quot;rb&quot;   1214 ## error: No overload variant of &quot;get_handle&quot; matches argument types   1215 ## &quot;Union[str, PathLike[str], ReadCsvBuffer[bytes], ReadCsvBuffer[str]]&quot;   1216 ## , &quot;str&quot;, &quot;bool&quot;, &quot;Any&quot;, &quot;Any&quot;, &quot;Any&quot;, &quot;Any&quot;, &quot;Any&quot;-&gt; 1217 self.handles = get_handle(  ## type: ignore[call-overload]   1218     f,   1219     mode,   1220     encoding=self.options.get(&quot;encoding&quot;, None),   1221     compression=self.options.get(&quot;compression&quot;, None),   1222     memory_map=self.options.get(&quot;memory_map&quot;, False),   1223     is_text=is_text,   1224     errors=self.options.get(&quot;encoding_errors&quot;, &quot;strict&quot;),   1225     storage_options=self.options.get(&quot;storage_options&quot;, None),   1226 )   1227 assert self.handles is not None   1228 f = self.handles.handleFile E:\anaconda\lib\site-packages\pandas\io\common.py:789, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)    784 elif isinstance(handle, str):    785     ## Check whether the filename is to be opened in binary mode.    786     ## Binary mode does not support &#39;encoding&#39; and &#39;newline&#39;.    787     if ioargs.encoding and &quot;b&quot; not in ioargs.mode:    788         ## Encoding--&gt; 789         handle = open(    790             handle,    791             ioargs.mode,    792             encoding=ioargs.encoding,    793             errors=errors,    794             newline=&quot;&quot;,    795         )    796     else:    797         ## Binary mode    798         handle = open(handle, ioargs.mode)FileNotFoundError: [Errno 2] No such file or directory: &#39;examples/tips.csv&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data1'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>quartiles <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>frame<span class="token punctuation">.</span>data1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>quartiles<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>0     (-0.436, 1.211]1     (-0.436, 1.211]2      (1.211, 2.858]3     (-0.436, 1.211]4      (1.211, 2.858]5    (-2.083, -0.436]6    (-2.083, -0.436]7      (1.211, 2.858]8     (-0.436, 1.211]9    (-2.083, -0.436]Name: data1, dtype: categoryCategories (4, interval[float64, right]): [(-3.737, -2.083] &lt; (-2.083, -0.436] &lt; (-0.436, 1.211] &lt; (1.211, 2.858]]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_stats</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'min'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>grouped <span class="token operator">=</span> frame<span class="token punctuation">.</span>data2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>quartiles<span class="token punctuation">)</span>grouped<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>get_stats<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>min</th>      <th>max</th>      <th>count</th>      <th>mean</th>    </tr>    <tr>      <th>data1</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>(-3.737, -2.083]</th>      <td>-1.417666</td>      <td>1.053207</td>      <td>15.0</td>      <td>-0.021193</td>    </tr>    <tr>      <th>(-2.083, -0.436]</th>      <td>-2.815877</td>      <td>2.712397</td>      <td>296.0</td>      <td>-0.097675</td>    </tr>    <tr>      <th>(-0.436, 1.211]</th>      <td>-2.950480</td>      <td>3.093977</td>      <td>568.0</td>      <td>0.006707</td>    </tr>    <tr>      <th>(1.211, 2.858]</th>      <td>-2.621023</td>      <td>2.433423</td>      <td>121.0</td>      <td>-0.102975</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouping <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>frame<span class="token punctuation">.</span>data1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment">#平均分</span>grouped <span class="token operator">=</span> frame<span class="token punctuation">.</span>data2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>grouping<span class="token punctuation">)</span>grouped<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>get_stats<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>min</th>      <th>max</th>      <th>count</th>      <th>mean</th>    </tr>    <tr>      <th>data1</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-1.979885</td>      <td>2.546603</td>      <td>100.0</td>      <td>0.015369</td>    </tr>    <tr>      <th>1</th>      <td>-2.815877</td>      <td>2.560098</td>      <td>100.0</td>      <td>-0.189069</td>    </tr>    <tr>      <th>2</th>      <td>-2.367227</td>      <td>2.290479</td>      <td>100.0</td>      <td>-0.097540</td>    </tr>    <tr>      <th>3</th>      <td>-2.057884</td>      <td>3.093977</td>      <td>100.0</td>      <td>0.000976</td>    </tr>    <tr>      <th>4</th>      <td>-2.314728</td>      <td>2.157829</td>      <td>100.0</td>      <td>0.125600</td>    </tr>    <tr>      <th>5</th>      <td>-2.944465</td>      <td>1.991280</td>      <td>100.0</td>      <td>-0.092507</td>    </tr>    <tr>      <th>6</th>      <td>-2.503720</td>      <td>2.415097</td>      <td>100.0</td>      <td>-0.045530</td>    </tr>    <tr>      <th>7</th>      <td>-2.950480</td>      <td>2.553021</td>      <td>100.0</td>      <td>0.057286</td>    </tr>    <tr>      <th>8</th>      <td>-2.688502</td>      <td>2.356049</td>      <td>100.0</td>      <td>-0.059030</td>    </tr>    <tr>      <th>9</th>      <td>-2.339079</td>      <td>2.433423</td>      <td>100.0</td>      <td>-0.094356</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">tips<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'smoker'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#默认计算分组平均数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [139], in &lt;cell line: 1&gt;()----&gt; 1 tips.pivot_table(index=[&#39;day&#39;, &#39;smoker&#39;])NameError: name &#39;tips&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIOdata <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\Sample  Nationality  Handedness1   USA  Right-handed2   Japan    Left-handed3   USA  Right-handed4   Japan    Right-handed5   Japan    Left-handed6   Japan    Right-handed7   USA  Right-handed8   USA  Left-handed9   Japan    Right-handed10  USA  Right-handed"""</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span>StringIO<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\s+'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span>data<span class="token punctuation">.</span>Nationality<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Handedness<span class="token punctuation">,</span> margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Handedness</th>      <th>Left-handed</th>      <th>Right-handed</th>      <th>All</th>    </tr>    <tr>      <th>Nationality</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Japan</th>      <td>2</td>      <td>3</td>      <td>5</td>    </tr>    <tr>      <th>USA</th>      <td>1</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>All</th>      <td>3</td>      <td>7</td>      <td>10</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span><span class="token punctuation">[</span>tips<span class="token punctuation">.</span>time<span class="token punctuation">,</span> tips<span class="token punctuation">.</span>day<span class="token punctuation">]</span><span class="token punctuation">,</span> tips<span class="token punctuation">.</span>smoker<span class="token punctuation">,</span> margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)Input In [142], in &lt;cell line: 1&gt;()----&gt; 1 pd.crosstab([tips.time, tips.day], tips.smoker, margins=True)NameError: name &#39;tips&#39; is not defined</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题四</title>
      <link href="/2023/07/06/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%9B%9B/"/>
      <url>/2023/07/06/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>对于一个序列可以采用二分查找或顺序查找，请结合实施查找的次数，确定在什么情况下使用二分查找效率更高？</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>顺序查找是按照序列原有顺序对数组进行遍历比较查询的基本查找算法，时间复杂度是$O(n)$，在最坏的情况下，查询值在数组末尾或没有该查询值，需要遍历完整个数组；</p><p>二分查找是在顺序存储结构、元素有序排列中，从表中间开始查找，若不相等，则将表分成前后两个字表，根据中间元素的查询结果在对应表中进行第二次查找，时间复杂度是$O(log_2n)$，在最坏的情况下，没有该查询值，则至少需要查询$\lfloor log_2n \rfloor$次；查询成功时，最多查询$\lceil log_2n \rceil$次。</p><p>本题通过记录查找次数来进行比较</p><h3 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;&#x2F;&#x2F;顺序查找int SequentialSearch(vector&lt;int&gt;&amp; arr, int target) &#123;int n &#x3D; arr.size();int num &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;num++;if (arr[i] &#x3D;&#x3D; target) &#123;cout &lt;&lt; &quot;Search for &quot; &lt;&lt; num &lt;&lt; &quot; times&quot; &lt;&lt; endl;return i;&#125;&#125;cout &lt;&lt; &quot;Search for &quot; &lt;&lt; num &lt;&lt; &quot; times&quot; &lt;&lt; endl;return -1;&#125;&#x2F;&#x2F;二分查找int BinarySearch(vector&lt;int&gt;&amp; arr, int target) &#123;int n &#x3D; arr.size();int left &#x3D; 0, right &#x3D; n - 1, middle;int num &#x3D; 0;while (left &lt;&#x3D; right) &#123;num++;middle &#x3D; left + ((right - left) &gt;&gt; 2);if (arr[middle] &#x3D;&#x3D; target) &#123;cout &lt;&lt; &quot;Search for &quot; &lt;&lt; num &lt;&lt; &quot; times&quot; &lt;&lt; endl;return middle;&#125;else if (arr[middle] &lt; target) &#123;left &#x3D; middle + 1;&#125;else &#123;right &#x3D; middle - 1;&#125;&#125;cout &lt;&lt; &quot;Search for &quot; &lt;&lt; num &lt;&lt; &quot; times&quot; &lt;&lt; endl;return -1;&#125;int main() &#123;vector&lt;int&gt; arr &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;int target &#x3D; 7;int a &#x3D; SequentialSearch(arr, target);cout &lt;&lt; a &lt;&lt; endl;int b &#x3D; BinarySearch(arr, target);cout &lt;&lt; b &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验结果：</p><p><img src="/imgs/sikao4/1.png" alt="image-20230316143509778"></p><p>从上述实验中，查询元素7的值，顺序查找的次数为7次，而二分查找的次数为4次，最终查询结果都正确，但是在本序列中，元素数量并不是很多，因此查询次数在数量级上并没有显著差距。</p><p>下面对两查找效率进行比较：</p><ol><li>以升序序列为例，在最小值片进行查询的时候，顺序查找的次数会小于二分查找，因此使用顺序查找查询较小的值即查询值下标$&lt; \lfloor log_2n \rfloor$时，效率更高、次数更小；</li><li>对于升序序列，在查询相对较大的值的时候，二分查找的次数就会小于顺序查找，因此使用二分查找查询较大的值即查询值下标$&gt; \lfloor log_2n \rfloor$，效率更高、次数更少；</li><li>对于查询值个数不止一个的操作来说，使用二分查找的效率比顺序查找要高得多，二分查找只需要在初始状态进行一次排序，之后的每次查找都可以利用有序性，而顺序查找则需要每次查询都进行一次数组遍历。</li></ol><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>现有一个序列，它是由一个有序系列绕着某个元素旋转得到的。请给出一个在此序列实施查找的有效算法，并对你的算法进行分析</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>有序序列绕着某个元素旋转得到旋转数组可以使用改进后的二分查找进行查询，在循环中进行有序性判断</p><p>如果左端元素小于中间元素，则左半部分为有序数组，如果目标值在左半部分，则继续在左半部分进行查找，否则在右半部分查找；若左端元素大于中间元素，那么右半部分为有序数组，若目标值在右半部分，则继续在右半部分进行查找，否则在左半部分进行查找。</p><p>另一种办法就是将旋转序列恢复后在进行二分查找，但是恢复旋转序列存在很多问题，一是<strong>旋转序列恢复的时间复杂度是$O(n)$，恢复后排序增加操作时间</strong>；二是<strong>查找得到的值并不是旋转序列的下标</strong>，在实际应用中不会使用。</p><p>使用顺序查找的办法，时间复杂度是$O(n)$，简单易懂，但是需要遍历整个序列，大规模数据呈现劣势</p><h3 id="算法实现与分析-1"><a href="#算法实现与分析-1" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int BinarySearch(vector&lt;int&gt;&amp; arr, int target) &#123;int left &#x3D; 0, right &#x3D; arr.size() - 1;while (left &lt;&#x3D; right) &#123;int middle &#x3D; left + ((right - left) &gt;&gt; 1);if (arr[middle] &#x3D;&#x3D; target) &#123;return middle;&#125;if (arr[left] &lt;&#x3D; arr[middle]) &#123;if (target &gt;&#x3D; arr[left] &amp;&amp; target &lt; arr[middle]) &#123;right &#x3D; middle - 1;&#125;else &#123;left &#x3D; middle + 1;&#125;&#125;else &#123;if (target &gt; arr[middle] &amp;&amp; target &lt;&#x3D; arr[right]) &#123;left &#x3D; middle + 1;&#125;else &#123;right &#x3D; middle - 1;&#125;&#125;&#125;return -1;&#125;int main() &#123;vector&lt;int&gt; arr &#x3D; &#123; 4,5,6,7,1,2,3 &#125;;int target &#x3D; 1;cout &lt;&lt; BinarySearch(arr, target) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实验结果：</p><p><img src="/imgs/sikao4/2.png" alt="image-20230316144631569"></p><p>改进二分法的时间复杂度是$O(log_2n)$，是一种高效的查找方法，在大规模数据下呈现优势</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 查找效率 </tag>
            
            <tag> 旋转数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题三</title>
      <link href="/2023/07/06/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%89/"/>
      <url>/2023/07/06/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出策略列举出包含n元素的集合的所有子集，并进行分析</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>通过数学知识，得到子集的个数是$2^n$，而$n$位的二进制码正好可以表示$2^n$个整数，因此可以对每一子集进行二进制编码（其中，第$i$位编码为1则有该元素，为0则没有），使用二进制数所表示的整数来代表每一个子集。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>使用一字符数组存储包含n个元素的集合$0,1,\cdots,2^n-1$逐一遍历</p><p>对数$i$移位操作按位与判断是否存在某一元素</p><p>打印输出每一个子集</p><h3 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;void PrintSet(int array[],int n) &#123;int m &#x3D; 1 &lt;&lt; n;for (int i &#x3D; 0; i &lt; m; i++) &#123;cout &lt;&lt; &quot;&#123; &quot;;for (int j &#x3D; 0; j &lt; n; j++) &#123;if ((i &gt;&gt; j) &amp; 1) &#123;cout &lt;&lt; array[j] &lt;&lt; &quot; &quot;;&#125;&#125;cout &lt;&lt; &quot;&#125;&quot; &lt;&lt; endl;&#125;&#125;int main() &#123;int array1[] &#x3D; &#123; 1,2,3,4 &#125;;int n1 &#x3D; sizeof(array1) &#x2F; sizeof(array1[0]);PrintSet(array1,n1);cout &lt;&lt; endl;int array2[] &#x3D; &#123; 1,2,3 &#125;;int n2 &#x3D; sizeof(array2) &#x2F; sizeof(array2[0]);PrintSet(array2, n2);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><p><img src="/imgs/sikao3/1.png" alt="image-20230308232014309"></p><p>本算法的时间复杂度是$\Omicron(n*2^n)$，对于元素个数大的集合来说，耗费时间相当大</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>在机器学习、文本处理、推荐系统等应用领域，经常使用相似度指标，调研学习当前业界经常使用的相似度指标</p><h3 id="问题关键字"><a href="#问题关键字" class="headerlink" title="问题关键字"></a>问题关键字</h3><p>相似度指标</p><h3 id="调研学习报告"><a href="#调研学习报告" class="headerlink" title="调研学习报告"></a>调研学习报告</h3><p>相似度指标的定义是衡量对象之间的相似程度的数值，相似度指标可以氛围两大类：基于距离和基于角度。</p><h4 id="基于距离的相似度指标："><a href="#基于距离的相似度指标：" class="headerlink" title="基于距离的相似度指标："></a>基于距离的相似度指标：</h4><p>根据两个对象之间的距离来计算相似度，<strong>距离越近，相似度越高</strong></p><p>常见的指标有欧氏距离、曼哈顿距离、闵可夫斯基距离等</p><h4 id="基于角度的相似度指标："><a href="#基于角度的相似度指标：" class="headerlink" title="基于角度的相似度指标："></a>基于角度的相似度指标：</h4><p>根据两个对象之间的夹角来计算相似度，<strong>夹角越小，相似度越高</strong></p><p>常见的指标有余弦相似度、皮尔逊相关系数等</p><h4 id="常见的相似度指标："><a href="#常见的相似度指标：" class="headerlink" title="常见的相似度指标："></a>常见的相似度指标：</h4><h5 id="欧几里得距离"><a href="#欧几里得距离" class="headerlink" title="欧几里得距离"></a>欧几里得距离</h5><p>根据勾股定理计算两个点之间的直线距离</p><p>欧氏距离越小，表示两个对象越相似</p><h6 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h6><p>$$<br>\sqrt{\sum_{i&#x3D;1}^n\left(x_i-y_i\right)^2}<br>$$</p><h6 id="标准化公式"><a href="#标准化公式" class="headerlink" title="标准化公式"></a>标准化公式</h6><p>$$<br>\sqrt{\sum_{k&#x3D;1}^n\left(\frac{x_{1 k}-x_{2 k}}{s_k}\right)^2}<br>$$</p><h6 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h6><p>欧氏距离适用于<strong>连续变量</strong>，比如坐标、长度、速度等</p><h5 id="余弦相似度"><a href="#余弦相似度" class="headerlink" title="余弦相似度"></a>余弦相似度</h5><p>余弦相似度通过计算两个向量之间的夹角余弦值来衡量它们的方向是否一致</p><p>余弦相似度越大，两个对象越相似；值为负，两向量负相关</p><h6 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h6><p>$$<br>\cos (\theta)&#x3D;\frac{\sum_{k&#x3D;1}^n x_{1 k} x_{2 k}}{\sqrt{\sum_{k&#x3D;1}^n x_{1 k}^2} \sqrt{\sum_{k&#x3D;1}^n x_{2 k}^2}}<br>$$</p><p>余弦相似度无法衡量每个维数值的差异，因此引入<strong>调整余弦相似度</strong>（虽然没有看懂）：</p><h6 id="调整余弦相似度公式"><a href="#调整余弦相似度公式" class="headerlink" title="调整余弦相似度公式"></a>调整余弦相似度公式</h6><p>$$<br>\operatorname{sim}(i, j)&#x3D;\frac{\sum_{u \in U}\left(R_{u, i}-\bar{R}<em>u\right)\left(R</em>{u, j}-\bar{R_u}\right)}{\sqrt{\sum_{u \in U}\left(R_{u, i}-\bar{R}<em>u\right)^2} \sqrt{\sum</em>{u \in U}\left(R_{u,j}-\bar{R}_u\right)^2}}<br>$$</p><h6 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h6><p>余弦相似度适用于<strong>稀疏向量</strong>，比如文本、图像、音频等</p><h5 id="皮尔逊相关系数"><a href="#皮尔逊相关系数" class="headerlink" title="皮尔逊相关系数"></a>皮尔逊相关系数</h5><p>在概率论与数理统计中学习到的衡量两变量之间线性相关程度的统计指标</p><p>皮尔逊相关系数越接近1或者-1，表示两者越相关</p><h6 id="公式-2"><a href="#公式-2" class="headerlink" title="公式"></a>公式</h6><p>$$<br>\rho_{X, Y}&#x3D;\frac{\operatorname{cov}(X, Y)}{\sigma_X \sigma_Y}&#x3D;\frac{E\left(\left(X-\mu_X\right)\left(Y-\mu_Y\right)\right)}{\sigma_X \sigma_Y}&#x3D;\frac{E(X Y)-E(X) E(Y)}{\sqrt{E\left(X^2\right)-E^2(X)} \sqrt{E\left(Y^2\right)-E^2(Y)}}<br>$$</p><h6 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h6><p>皮尔逊相关系数适用于<strong>评分数据</strong>，比如用户对商品、电影的评分</p><h5 id="杰卡德相似系数"><a href="#杰卡德相似系数" class="headerlink" title="杰卡德相似系数"></a>杰卡德相似系数</h5><p>一种衡量集合之间重合程度的指标，通过两个集合交集和并集的比值得到</p><p>杰卡德相似系数越接近1，表示两个对象越相似</p><h6 id="公式-3"><a href="#公式-3" class="headerlink" title="公式"></a>公式</h6><p>$$<br>\operatorname{Jaccard}(X, Y)&#x3D;\frac{X \cap Y}{X \cup Y}<br>$$</p><h6 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h6><p>杰卡德相似系数适用于二元变量或者名义变量，比如词汇、元素、特征</p><h4 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h4><ul><li>在文本处理中，比较两文本之间的语义相似性，可以使用深度学习模型来学习文本向量，适用余弦相似度或其他自定义损失函数来计算文本间的语义匹配程度</li><li>在推荐系统中，比较用户或者物品之间的偏好或者兴趣，可以使用用户-物品偏好矩阵作为输入数据，并使用欧氏距离或者皮尔逊相关系数等方法来计算用户或者物品之间的协同过滤得分。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 集合 </tag>
            
            <tag> 相似度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题二</title>
      <link href="/2023/07/05/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%BA%8C/"/>
      <url>/2023/07/05/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出不同策略求两个整数的最大公约数GCD(m,n)；并进行分析</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>本问题求两数的最大公约数，第一个想法是<strong>暴力枚举法</strong>；</p><p>在数学上，能够证明：$m、n\neq0,GCD(m,n)&#x3D;GCD(n,m<del>mod</del>n)$，递归出最大公约数，也就是<strong>欧几里得算法</strong>，上述等式是欧几里得算法的数学基础；</p><p>对于两数的最大公约数$GCD(m,n)$，有：</p><p>$m&lt;n,GCD(m,n)&#x3D;GCD(n,m)$</p><p>$ m<del>is ~even、n</del>is~even,GCD(m,n)&#x3D;2*GCD(m&#x2F;2,n&#x2F;2)$</p><p>$ m<del>is ~even、n</del>is~odd,GCD(m,n)&#x3D;GCD(m&#x2F;2,n)$</p><p>$ m<del>is ~odd、n</del>is~even,GCD(m,n)&#x3D;GCD(m,n&#x2F;2)$</p><p>$ m<del>is ~odd、n</del>is~odd,GCD(m,n)&#x3D;GCD(n,m-n)$</p><p>基于上述理论进行递归，也就是<strong>二进制算法</strong>。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>对于<strong>暴力枚举法</strong>，确定两数中最小值，从1~最小值进行循环，使用一个变量更新能被共同整除的数，循环结束时，返回变量的最新值；</p><p>对于<strong>欧几里得算法</strong>，编写GCD函数，两数都不为零时，按照规则递归调用GCD函数；</p><p>对于<strong>二进制算法</strong>，编写GCD函数，对m、n进行上述规则判断，然后进行递归调用GCD函数。</p><h3 id="算法代码与分析"><a href="#算法代码与分析" class="headerlink" title="算法代码与分析"></a>算法代码与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;暴力枚举法int Min(int m, int n);int GCD1(int m, int n) &#123;int num &#x3D; 0;for (int i &#x3D; 1; i &lt;&#x3D; Min(m, n); i++) &#123;if (m % i &#x3D;&#x3D; 0 &amp;&amp; n % i &#x3D;&#x3D; 0) &#123;num &#x3D; i;&#125;&#125;return num;&#125;int Min(int m, int n) &#123;return m &gt; n ? n : m;&#125;&#x2F;&#x2F;欧几里得算法int GCD2(int m, int n) &#123;if (n &#x3D;&#x3D; 0) &#123;return m;&#125;return GCD2(n, m % n);&#125;&#x2F;&#x2F;二进制算法int GCD3(int m, int n) &#123;if (m &#x3D;&#x3D; 0) &#123;return n;&#125;if (n &#x3D;&#x3D; 0) &#123;return m;&#125;if (m % 2 &#x3D;&#x3D; 0 &amp;&amp; n % 2 &#x3D;&#x3D; 0) &#123;return 2 * GCD3(m &#x2F; 2, n &#x2F; 2);&#125;else if (m % 2 &#x3D;&#x3D; 0 &amp;&amp; n % 2 &#x3D;&#x3D; 1) &#123;return GCD3(m &#x2F; 2, n);&#125;else if (m % 2 &#x3D;&#x3D; 1 &amp;&amp; n % 2 &#x3D;&#x3D; 0) &#123;return GCD3(m, n &#x2F; 2);&#125;else &#123;return GCD3(Min(m, n), abs(m - n));&#125;&#125;int main() &#123;int m &#x3D; 197456;int n &#x3D; 400000;cout &lt;&lt; GCD1(m, n) &lt;&lt; endl;cout &lt;&lt; GCD2(m, n) &lt;&lt; endl;cout &lt;&lt; GCD3(m, n) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/sikao2/1.png" alt="image-20230305174550409"></p><p>后续查资料得知，GCD3函数并没有体现真正的二进制算法，没有避免大量取模运算，改进如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int GCD3(int m,int n)&#123;    if(m&#x3D;&#x3D;0)&#123;        return n;    &#125;    if(n&#x3D;&#x3D;0)&#123;        return m;    &#125;        if((m&amp;1)&#x3D;&#x3D;0&amp;&amp;(n&amp;1)&#x3D;&#x3D;0)&#123;        return GCD3(m&gt;&gt;1,n&gt;&gt;1)&lt;&lt;1;    &#125;    else if((m&amp;1)&#x3D;&#x3D;0&amp;&amp;(n&amp;1)!&#x3D;0)&#123;        return GCD3(m&gt;&gt;1,n);    &#125;    else if((m&amp;1)!&#x3D;0&amp;&amp;(n&amp;1)&#x3D;&#x3D;0)&#123;        return GCD3(m,n&gt;&gt;1);    &#125;    else&#123;        return GCD3(Min(m,n),abs(m-n));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于数值较小的两数来说，三种方法的速度相差不大，默认$m&gt;n$</p><p>则对于枚举法，其时间复杂度是$O(n)$；</p><p>对于欧几里得算法，其时间复杂度是$O(log_2n)$；</p><p>对于二进制算法，其时间复杂度是$O(log_2(m+n))$；</p><p>所以，对于大数来说，后两种算法的处理速度更快；针对后两种算法，改进的二进制算法避免了大量的取余运算。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出方案返回一可以动态变化的序列（可增可减）中的最大值，并对你的方案进行分析</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>本序列是动态变化的，可以采用顺序栈的数据结构，对于求取序列最大值，采用辅助栈的方式处理；</p><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>建立两个栈，一个栈存取元素，另一个栈存最大元素；</p><h3 id="算法代码与分析-1"><a href="#算法代码与分析-1" class="headerlink" title="算法代码与分析"></a>算法代码与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#define STACK_INIT_SIZE 100#define LIST_SIZE 100using namespace std;typedef int SElemType;&#x2F;&#x2F;栈结构typedef struct &#123;SElemType* base;SElemType* top;int stacksize;&#125;SqStack;typedef struct &#123;SqStack Data;SqStack MaxData;&#125;Maxstack;void InitStack(SqStack* s) &#123;s-&gt;base &#x3D; (SElemType*)malloc(STACK_INIT_SIZE * sizeof(SElemType));s-&gt;top &#x3D; s-&gt;base;s-&gt;stacksize &#x3D; STACK_INIT_SIZE;&#125;void Push(SqStack* s, SElemType e) &#123;if (s-&gt;top - s-&gt;base &gt;&#x3D; s-&gt;stacksize) &#123;s-&gt;base &#x3D; (SElemType*)realloc(s-&gt;base, (s-&gt;stacksize + 10) * sizeof(SElemType));s-&gt;top &#x3D; s-&gt;base + s-&gt;stacksize;s-&gt;stacksize +&#x3D; 10;&#125;*s-&gt;top++ &#x3D; e;&#125;void Pop(SqStack* s, SElemType* e) &#123;*e &#x3D; *--s-&gt;top;&#125;SElemType GetTop(SqStack s) &#123;return *(--s.top);&#125;void DestroyStack(SqStack* s) &#123;free(s-&gt;base);s-&gt;base &#x3D; NULL;s-&gt;top &#x3D; NULL;s-&gt;stacksize &#x3D; 0;&#125;void MaxInit(Maxstack* maxstack) &#123;InitStack(&amp;(maxstack-&gt;Data));InitStack(&amp;(maxstack-&gt;MaxData));&#125;void MaxDestroy(Maxstack* maxstack) &#123;DestroyStack(&amp;maxstack-&gt;Data);DestroyStack(&amp;maxstack-&gt;MaxData);&#125;void MaxPush(Maxstack* maxstack, SElemType e) &#123;Push(&amp;maxstack-&gt;Data, e);if (maxstack-&gt;MaxData.base &#x3D;&#x3D; maxstack-&gt;MaxData.top) &#123;Push(&amp;maxstack-&gt;MaxData, e);&#125;else &#123;if (e &gt;&#x3D; GetTop(maxstack-&gt;MaxData)) &#123;Push(&amp;maxstack-&gt;MaxData, e);&#125;&#125;&#125;void MaxPop(Maxstack* maxstack, SElemType* e) &#123;if (GetTop(maxstack-&gt;Data) &#x3D;&#x3D; GetTop(maxstack-&gt;MaxData)) &#123;Pop(&amp;maxstack-&gt;Data, e);Pop(&amp;maxstack-&gt;MaxData, e);return;&#125;Pop(&amp;maxstack-&gt;Data, e);&#125;SElemType GetMax(Maxstack* maxstack) &#123;return GetTop(maxstack-&gt;MaxData);&#125;int main() &#123;Maxstack maxstack;SElemType e;MaxInit(&amp;maxstack);MaxPush(&amp;maxstack, 1);MaxPush(&amp;maxstack, 2);MaxPush(&amp;maxstack, 3);MaxPush(&amp;maxstack, 1);cout &lt;&lt; GetMax(&amp;maxstack) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/imgs/sikao2/2.png" alt="image-20230305233550207"></p><p>对于栈方式存储动态序列以及求取最大值比较容易实现，对于最大值引入最大栈用空间换时间，时间复杂度达到$O(1)$，但是不够对于序列的操作不够灵活，只能在栈顶进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库笔记</title>
      <link href="/2023/07/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h2><h3 id="数据库三大部分"><a href="#数据库三大部分" class="headerlink" title="数据库三大部分"></a>数据库三大部分</h3><ul><li><strong>数据库</strong></li><li><strong>数据库管理系统</strong><ul><li>描述数据库</li><li>管理数据库</li><li>维护数据库</li><li>数据通信</li></ul></li><li><strong>数据库应用程序</strong></li></ul><h3 id="数据库系统的三级结构、两级独立性"><a href="#数据库系统的三级结构、两级独立性" class="headerlink" title="数据库系统的三级结构、两级独立性"></a>数据库系统的三级结构、两级独立性</h3><ul><li>三级结构<ul><li>用户级-对应外模式<ul><li><strong>最接近于用户的一级数据库，是用户看到和使用的数据库，又称用户视图</strong></li><li><strong>不同用户视图可以互相重叠，用户的所有操作都是针对用户视图进行</strong></li></ul></li><li>概念级-对应概念模式<ul><li><strong>介于用户级和物理级之间，是所有用户视图的最小并集</strong></li><li><strong>是数据库管理员看到和使用的数据库，又称DBA视图</strong></li></ul></li><li>物理级-对应内模式<ul><li><strong>数据库的低层表示，它描述数据的实际存贮组织</strong></li><li><strong>是最接近于物理存贮的级，又称内部视图。</strong></li><li><strong>构成：内部记录组成，物理级数据库并不是真正的物理存贮，而是是最接近于物理存贮的级</strong></li></ul></li></ul></li><li>外模式-概念模式映射、概念模式-内模式映射</li><li><strong>三个抽象级间通过两级映射（根据一定的对应规则）进行相互转换，使得数据库的三级形成一个统一整体</strong></li><li><strong>映射隔离了各层之间的相互影响，实现数据独立性</strong></li><li><strong>各层间的映射能力决定数据独立性程度</strong></li><li>两级独立性<ul><li>物理独立性<ul><li><strong>存在于概念模式和内模式之间的映射转换实现物理独立性</strong></li></ul></li><li>逻辑独立性<ul><li><strong>存在于外模式和概念模式之间的映射转换实现逻辑独立性</strong></li></ul></li></ul></li></ul><h3 id="数据库应用程序的体系结构类型"><a href="#数据库应用程序的体系结构类型" class="headerlink" title="数据库应用程序的体系结构类型"></a>数据库应用程序的体系结构类型</h3><ul><li>单层<ul><li><strong>早期DBMS和数据库应用程序结合在同一个程序中.应用程序直接操作数据库文件</strong></li></ul></li><li>两层<ul><li><strong>将DBMS和数据库应用程序分开，在客户端上运行服务，如访问规则、业务规则、合法性校验等。每个客户端与数据库服务器建立独立连接</strong></li></ul></li><li>三层（多层）<ul><li><strong>把客户机和数据库服务分开，利用中间层的应用服务器来处理服务</strong></li></ul></li></ul><h2 id="关系理论1"><a href="#关系理论1" class="headerlink" title="关系理论1"></a>关系理论1</h2><h3 id="数据三种描述形式"><a href="#数据三种描述形式" class="headerlink" title="数据三种描述形式"></a>数据三种描述形式</h3><ul><li>现实世界</li><li>信息世界-ER表示</li><li>机器世界-DBMS支持的数据模型</li></ul><h3 id="数据描述术语"><a href="#数据描述术语" class="headerlink" title="数据描述术语"></a>数据描述术语</h3><ul><li>信息世界<ul><li>实体</li><li>实体集</li><li>属性</li><li>实体键</li></ul></li><li>机器世界<ul><li>记录</li><li>文件</li><li>字段</li><li>记录键</li></ul></li></ul><p>上下相应位置一一对应</p><h3 id="实体-联系模型"><a href="#实体-联系模型" class="headerlink" title="实体-联系模型"></a>实体-联系模型</h3><p>E-R模型表示信息世界</p><p><img src="/imgs/databasenote/1.png" alt="image-20230628105006536"></p><p><strong>E-R图中带下划线的属性为实体键或实体键的一部分。 组合属性用一个树型表示。多值属性用虚线椭圆表示或标出</strong></p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据模型&#x3D;数据组织方法+数据操作集合+数据完整性集合</p><h4 id="数据组织方法"><a href="#数据组织方法" class="headerlink" title="数据组织方法"></a>数据组织方法</h4><p><img src="/imgs/databasenote/2.png" alt="image-20230628111040653"></p><p><img src="/imgs/databasenote/3.png" alt="image-20230628111109838"></p><ul><li><p>层次模型</p><p><strong>层次型数据库模型采用树状结构，依据数据的不同类型，将数据分门别类，存储在不同的层次之下</strong></p></li><li><p>网状模型</p><p><strong>网状数据库模型将每个记录当成一个节点，节点和节点之间可以建立关联，形成一个复杂的网状结构</strong></p></li><li><p>关系模型</p><p><strong>二维矩阵来存储数据，行和列形成一个关联的数据表</strong></p><p>记录和记录之间通过属性之间的关系来进行连接并形成数据集之间的关系</p></li></ul><p>DBMS：</p><blockquote><p>层次数据库系统</p><p>网状数据库系统</p><p>关系数据库系统</p></blockquote><ul><li>关系数据库的原理：关系模型和关系代数</li></ul><h3 id="关系数据模型"><a href="#关系数据模型" class="headerlink" title="关系数据模型"></a>关系数据模型</h3><h4 id="理论基础及数据结构"><a href="#理论基础及数据结构" class="headerlink" title="理论基础及数据结构"></a>理论基础及数据结构</h4><ul><li>理论基础：关系理论（关系代数）</li><li>数据结构：二维表</li></ul><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><strong>实体和联系均用二维表来表示的数据模型称之为关系数据模型。</strong></p><h4 id="概念术语"><a href="#概念术语" class="headerlink" title="概念术语"></a>概念术语</h4><p><img src="/imgs/databasenote/4.png" alt="image-20230628112933184"></p><ul><li><p>关系模式</p><p><strong>二维表的表头那一行称为关系模式，又称表的框架或记录类型</strong></p><p><strong>关系数据模型是若干关系模式的集合</strong></p></li><li><p>关系</p><p><strong>对应于关系模式的一个具体的表称为关系，又称表（Table）</strong></p></li><li><p>元组</p><p><strong>关系中的每一行称为关系的一个元组，又称行（Row）或记录</strong></p></li><li><p>属性</p><p><strong>关系中的每一列称为关系的一个属性，又称列（Column）</strong></p></li><li><p>变域</p><p><strong>关系中的每一属性所对应的取值范围叫属性的变域，简称域</strong></p><p><strong>域是值的集合，关系中所有属性的实际值均来自它所对应的域</strong></p></li><li><p>关键字</p><p><strong>如果关系模式中的某个或某几个属性组成的属性{Ai1,Ai2,…Ain}(n&gt;&#x3D;1)能唯一地标识对应于该关系模式的关系中的任何一个元组，我们就称这样的属性组为该关系模式及其对应关系的关键字(Key)</strong></p></li><li><p>候选关键字</p><p><strong>如果在一个关系中，存在多个属性或属性组合都能用来唯一表示该关系的元组，这些属性或属性 组合都称为该关系的候选关键字或候选码</strong></p></li><li><p>主关键字</p><p><strong>若干个侯选关键字中指定作为关键字的属性或属性组合</strong></p></li><li><p>外部关键字</p><p><strong>当关系中的某个属性或属性组合随不是该关系的关键字或只是关键字的一部分,但却是另一个关系的关键字时,称该属性或属性组合为这个关系的外部关键字或外键</strong></p><p><strong>主表与从表：主表和从表是指以外键相关连的两个表,以外键作为主键的表称为主表;外键所在的表称为从表</strong></p></li></ul><h4 id="关系数据模型完整性约束"><a href="#关系数据模型完整性约束" class="headerlink" title="关系数据模型完整性约束"></a>关系数据模型完整性约束</h4><ul><li>域完整性</li><li>实体完整性</li><li>引用&#x2F;参考完整性</li><li>用户自定义完整性</li></ul><h4 id="关系数据模型的数据操作"><a href="#关系数据模型的数据操作" class="headerlink" title="关系数据模型的数据操作"></a>关系数据模型的数据操作</h4><p>增删查改</p><h4 id="E-R模型转化成关系数据模型"><a href="#E-R模型转化成关系数据模型" class="headerlink" title="E-R模型转化成关系数据模型"></a>E-R模型转化成关系数据模型</h4><ul><li><p><strong>每个实体类型转化为一个关系模式实体类型中实体的属性转化为该关系模式的属性；实体标识符（实体键）转化为该关系模式的关键字；每一个实体转化为该关系模式对应关系的一个元组</strong></p></li><li><p><strong>实体类型间的每一个自身有属性的联系转化为一个关系模式。该联系的属性直接转化为该关系模式的属性，与该联系所关联的所有实体类型的实体键都转化为该关系模式的属性，共同组成该关系模式的主关键字</strong></p></li><li><p><strong>若联系自身无属性</strong></p><p><strong>对1:N型联系，则1侧实体类型的实体键转化为属性加入到N侧实体类型</strong></p><p><strong>对M:N型联系，则两侧实体类型的实体键都转化为属性，互相加入到对侧实体类型所转化后的关系模式中，和该关系模式的原主关键字一起，共同构成该关系模式新的主关键字；<em>或者建立一个新关系模式,关键字是关系的双方的主键共同组成</em></strong></p><p><strong>对1:1型联系，则按1:N型联系或M:N型联系处理</strong></p></li></ul><h2 id="关系理论2"><a href="#关系理论2" class="headerlink" title="关系理论2"></a>关系理论2</h2><p>规范化、函数依赖与范式</p><p>好的关系模式：</p><ol><li>尽可能少的数据冗余</li><li>没有插入异常</li><li>没有删除异常</li><li>没有更新异常</li></ol><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>设R(U)是属性集U上的关系模式，X与Y是U的子集，若对于R(U)的任意一个当前值r，如果对r中的任意两个元组t和s，都有t[X]≡s[X]，就必须有t[Y] ≡s[Y](即若它们在X上的属性值相等，则在Y上的属性值也一定相等），则称“X”函数决定Y或“Y”函数依赖于X，记作X→Y，并称X为决定因素</p><ol><li>若$X \to Y$则称X为决定因素</li><li>若$X \to Y，Y \to X$，则记作$X&lt;-&gt;Y$</li><li>若Y不函数依赖于X</li></ol><h4 id="分类和键"><a href="#分类和键" class="headerlink" title="分类和键"></a>分类和键</h4><ul><li><p>平凡函数依赖、非平凡函数依赖</p><p><strong>设X,Y均为某关系上的属性集，且X→Y，则Y函数依赖于X，X函数决定Y</strong></p><p><strong>若Y包含于X，则称X→Y为：平凡函数依赖</strong></p><p><strong>若Y不包含于X，则称X→Y为：非平凡函数依赖</strong></p></li><li><p>完全函数依赖</p><p><strong>在R（U）中，如果X→Y，并且对于X的任何一个真子集X’，其X’→ Y都不成立，则称Y对X完全函数依赖</strong></p></li><li><p>部分函数依赖</p><p><strong>在R（U）中，如果X→Y，X’→Y，则称Y对X部分函数依赖</strong></p></li><li><p>传递函数依赖</p><p><strong>设有关系模式R(U)，X，Y，Z∈U，如果X→Y，Y→Z，且Y不∈X，Y不函数决定X，则有X→Z，称Z传递函数依赖于X</strong></p></li></ul><p><strong>键</strong></p><p>设K为R（U）中的属性或属性组合，若U函数依赖于K，则K为R的候选键（Candidate Key）。若候选键多于一个，则选定其中的一个为主键（Primary Key），也称为键（Key）；当只有一个候选键时这个候选键即是主键</p><ul><li><p>包含在任何一个候选键中的属性，叫主属性（Prime Attribute）。</p></li><li><p>不包含在任何主键中的属性称为非主属性（Nonprime Attribute），或非键属性（Non-key Attribute）。</p></li></ul><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>关系模式R的每一个属性都是不可分解的，则称R为第一范式的模式，记为R∈1FN模式</p><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>如果R∈1NF，且每一个<strong>非主属性</strong>完全函数依赖于主键则R∈2NF</p><ul><li>从1NF关系中<strong>消除非主属性对关系键的部分函数依赖</strong>，则可得到2NF关系</li><li>如果<strong>R的关系键为单属性，或R的全体属性均为主属性，则R∈2NF</strong></li></ul><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>如果R∈2NF，且每一个非主属性不传递函数依赖于主键，则R∈3NF</p><h4 id="BC范式"><a href="#BC范式" class="headerlink" title="BC范式"></a>BC范式</h4><p>R是一个关系模式，F是其函数依赖集合，当且仅当F中每个函数依赖的决定因素必定包含R的某个候选关键字，则R∈BCNF</p><h4 id="范式转化"><a href="#范式转化" class="headerlink" title="范式转化"></a>范式转化</h4><blockquote><p>1NF（存在非主属性对主键的部分函数依赖）</p><p>I</p><p>I消除非主属性对主键的部分函数依赖</p><p>I</p><p>v</p><p>2NF（存在非主属性对主键的传递函数依赖）</p><p>I</p><p>I消除非主属性对主键的传递函数依赖</p><p>I</p><p>v</p><p>3NF</p><p>I</p><p>I消除主属性对主键的部分函数依赖和传递函数依赖</p><p>I</p><p>v</p><p>BCNF</p></blockquote><h4 id="判断范式类型"><a href="#判断范式类型" class="headerlink" title="判断范式类型"></a>判断范式类型</h4><ul><li><p>第一范式：存在部分函数依赖</p></li><li><p>第二范式：</p><ol><li>主键是单属性</li><li>不存在部分函数依赖</li><li>存在传递依赖</li></ol></li><li><p>第三范式：</p><p>不是第一范式、第二范式</p></li></ul><h4 id="判断候选码"><a href="#判断候选码" class="headerlink" title="判断候选码"></a>判断候选码</h4><ul><li>如果有属性不在函数依赖集中出现，那么它必须包含在候选码中</li><li>如果有属性只在函数依赖集的右边出现，那么它必须不在候选码中</li><li>如果有属性只在函数依赖集的左边出现，则该属性一定包含在候选码中</li><li>如果有属性或属性组能唯一标识元组，则它就是候选码；（也就是说，<strong>通过函数依赖推导出，某属性或属性组，能决定所有属性</strong>）（也就是说，<strong>通过函数依赖推导出，某属性或属性组的闭包中有所有属性</strong>）</li></ul><h4 id="2NF分解"><a href="#2NF分解" class="headerlink" title="2NF分解"></a>2NF分解</h4><p><img src="/imgs/databasenote/5.png" alt="image-20230628151227821"></p><h4 id="3NF分解"><a href="#3NF分解" class="headerlink" title="3NF分解"></a>3NF分解</h4><p><img src="/imgs/databasenote/6.png" alt="image-20230628151853779"></p><p>（2）中改成3NF</p><h4 id="求最小函数依赖集合"><a href="#求最小函数依赖集合" class="headerlink" title="求最小函数依赖集合"></a>求最小函数依赖集合</h4><p><img src="/imgs/databasenote/7.png" alt="image-20230628153356995"></p><p><img src="/imgs/databasenote/8.png" alt="image-20230628153428834"></p><p><img src="/imgs/databasenote/9.png" alt="image-20230628153454936"></p><p><a href="https://blog.csdn.net/mgsky1/article/details/89061365">关系数据库理论之最小函数依赖集</a></p><h2 id="使用SQL-server管理数据库"><a href="#使用SQL-server管理数据库" class="headerlink" title="使用SQL server管理数据库"></a>使用SQL server管理数据库</h2><h3 id="数据库存储结构"><a href="#数据库存储结构" class="headerlink" title="数据库存储结构"></a>数据库存储结构</h3><h4 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h4><p><strong>一个数据库创建在物理介质（如硬盘）的一个或多个文件上，这些文件包括数据库中的对象和数据，或者事务日志的信息</strong></p><ul><li>存储数据的文件叫数据文件</li><li>存储日志的文件叫日志文件</li></ul><p><strong>数据和日志信息不存储在同一个文件中；不同数据库的数据也不存储在同一个文件中</strong></p><p><strong>数据库文件满时，它们可以自动增长</strong></p><p>SQL server中三种类型数据库文件</p><ul><li>主数据库文件（.mdf）<strong>不仅包含数据库用户收集的信息，还包含了数据库中所有其他文件的有关信息</strong></li><li>辅数据库文件（.ndf）</li><li>日志文件（.ldf）</li></ul><h4 id="数据库文件组"><a href="#数据库文件组" class="headerlink" title="数据库文件组"></a>数据库文件组</h4><p><strong>文件组就是文件的集合，把一些分别放在多个磁盘中的文件组合在一起，方便管理和数据分配，可以提高数据库性能</strong></p><p>三种类型的文件组</p><ul><li>主文件组</li><li>用户定义型文件组</li><li>缺省的文件组</li></ul><p>建立文件组的规则</p><ul><li><strong>数据库文件不能与一个以上的文件组关联</strong></li><li><strong>文件和文件组也不能由多个数据库使用</strong></li><li><strong>日志文件不能加到文件组里。日志数据与数据库数据的管理方式不同</strong></li><li><strong>只有文件组中任何一个文件都没有空间了，文件组的文件才会自动增长</strong></li></ul><h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><p><strong>SQL Server中的所有信息都存储在页面（page）上，页面是数据库中使用的最小数据单元</strong></p><p>每一个页面存储8KB（8192字节）的信息，所有的页面都包括一个132字节的页面头，这样就留下了8060 字节存储数据</p><p>页面类型：</p><ul><li>分配页面</li><li>数据和日志页面</li><li>索引页面</li><li>分发页面</li><li>文本&#x2F;图像页面</li></ul><h4 id="盘区"><a href="#盘区" class="headerlink" title="盘区"></a>盘区</h4><p><strong>盘区是表和索引等数据库对象分配空间的单位</strong></p><p>一个盘区（extent）是由8个连续的页面（8×8KB &#x3D; 64KB）组成的数据结构</p><p>当创建一个数据库对象（如一个表）时， SQL Server会自动地以盘区为单位给它分配空间</p><h4 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h4><p><strong>当一个事务开始后，在任何实际数据修改前，都会在事务日志中写入一行，表明事务开始。任何改动都会被记入事务日志</strong></p><p><img src="/imgs/databasenote/10.png" alt="image-20230628161258336"></p><h3 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h3><p><strong>SQL Server安装4个系统数据库。它们分别是master数据库、model数据库、tempdb数据库和msdb数据库</strong></p><h4 id="master数据库"><a href="#master数据库" class="headerlink" title="master数据库"></a>master数据库</h4><p>控制SQL Server的所有方面。这个数据库中包括所有的配置信息、用户登录信息、当前正在服务器中运行的过程的信息</p><p><strong>SQL Server运行时所做的第一件事就是寻找master数据库并打开它</strong></p><h4 id="model数据库"><a href="#model数据库" class="headerlink" title="model数据库"></a>model数据库</h4><p>model数据库是建立所有用户数据库时的模板。当你建立一个新数据库时， SQL Server会把model数据库中的<strong>所有对象建立一份拷贝并移到新数据库</strong>中</p><p><strong>对model所作的每一个动作都在新数据库中产生影响</strong></p><h4 id="tempdb数据库"><a href="#tempdb数据库" class="headerlink" title="tempdb数据库"></a>tempdb数据库</h4><p>tempdb数据库是一个非常特殊的数据库，供所有来访问你的SQL Server的用户使用。这个库用来<strong>保存所有的临时表、存储过程和其他SQL Server建立的临时用的东西</strong></p><p>每次SQL Server重新启动，它都会清空tempdb数据库并重建。永远不要在tempdb数据库建立需要永久保存的表</p><h4 id="msdb数据库"><a href="#msdb数据库" class="headerlink" title="msdb数据库"></a>msdb数据库</h4><p>msdb数据库是SQL Server中的一个特例。如果你查看这个数据库的实际定义，会发现它其实是一个用户数据库。不同之处是SQL Server拿这个数据库来做什么。</p><p>所有的任务调度、报警、操作员都存储在msdb数据库中。</p><p>该库的另一个功能是用来存储所有备份历史。</p><p>SQL Server Agent将会使用这个库</p><h3 id="用户数据库"><a href="#用户数据库" class="headerlink" title="用户数据库"></a>用户数据库</h3><p><strong>自己建立的新数据库都是用户数据库</strong></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><h3 id="数据库的空间需求"><a href="#数据库的空间需求" class="headerlink" title="数据库的空间需求"></a>数据库的空间需求</h3><h3 id="压缩数据库"><a href="#压缩数据库" class="headerlink" title="压缩数据库"></a>压缩数据库</h3><h2 id="使用SQL-server管理表"><a href="#使用SQL-server管理表" class="headerlink" title="使用SQL server管理表"></a>使用SQL server管理表</h2><h3 id="表的定义"><a href="#表的定义" class="headerlink" title="表的定义"></a>表的定义</h3><p><strong>表是一种二维数据对象，是列的相似数据的集合。表由行和列组成，用于存储关系数据库中的数据，是数据库中的主要对象</strong></p><p><strong>表中的行又叫记录，代表单个实体的有关数据的集合</strong></p><p><strong>表中的每行可以分成许多列。列代表记录中的一个信息片段</strong></p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符的命名规则：</p><p>标识符的长度必须少于等于128字符。</p><p>标识符的第一个字符必须是字母(A<del>Z、a</del>z)、_ (下划线)、@或#</p><p>当一个对象以@符号开头，意味着它是一个局部变量。</p><p>以#符号开头的对象表示它是一个局部临时表或是存储过程。</p><p>以# #开头的对象是全局临时对象</p><p>SQL Server有许多以@@开头的函数。不要用@@作为任何对象名的开头</p><p>虽然中文或其他国家语言的字符也可以作为标示符，但是不推荐这么用</p><p>跟在首字符后面的字符可以是字母(A<del>Z、a</del>z以及其他语言的任何字母符号)、_ (下划线)、@或#，数字( 0~9以及其他语言的任何其他数字符号)、$ (美元符)、# 。</p><p>SQL Server保留字(诸如命令字)不允许用。</p><p>空格或其他特殊字符不能在标识符中使用。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><h3 id="主键和UNIQUE约束"><a href="#主键和UNIQUE约束" class="headerlink" title="主键和UNIQUE约束"></a>主键和UNIQUE约束</h3><p><strong>强制唯一性时应用UNIQUE约束而不是主键</strong></p><h3 id="递增值"><a href="#递增值" class="headerlink" title="递增值"></a>递增值</h3><p>标识列，<strong>可以通过向列定义添加Identity属性来将某一列指定为递增值的列</strong></p><p><strong>一个表中只能有一个标识列，标识列可以作主键，标识列不能自己修改，标识列是非空的。可以看做一个特殊的递增的每行都不同的默认值</strong></p><h3 id="创建表、修改表、删除表"><a href="#创建表、修改表、删除表" class="headerlink" title="创建表、修改表、删除表"></a>创建表、修改表、删除表</h3><h3 id="CHECK约束、规则"><a href="#CHECK约束、规则" class="headerlink" title="CHECK约束、规则"></a>CHECK约束、规则</h3><p><strong>语法：名字＋逻辑表达式＋列名</strong></p><p><strong>一个列只能应用一个规则，但是却可以应用多个</strong> <strong>CHECK</strong> <strong>约束</strong></p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键 (FK) 是用于建立和加强两个表数据之间的链接的一列或多列。通过将表中主键值和Unique约束的一列或多列添加到另一个表中，可创建两个表之间的链接。这个列就成为第二个表的外键</p><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><ul><li><p>域完整性</p><p>默认值、空值、CHECK约束、规则</p></li><li><p>实体完整性</p><p>主键，UNIQUE键</p></li><li><p>参考完整性</p><p>外键</p></li><li><p>用户定义完整性</p><p>触发器、存储过程</p></li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><strong>SQL的组成</strong></p><ul><li><p>DDL</p><p>Create（Alter、Drop）数据库、表、视图、规则、存储过程、触发器等</p></li><li><p>DML</p><p>Insert，Delete，Update，Select 数据库中的信息</p></li><li><p>DCL</p><p>对各种数据库对象设置权限</p></li><li><p>ALE</p></li></ul><h2 id="SQL-SELECT"><a href="#SQL-SELECT" class="headerlink" title="SQL-SELECT"></a>SQL-SELECT</h2><h3 id="SELECT-and-FROM-and-INTO"><a href="#SELECT-and-FROM-and-INTO" class="headerlink" title="SELECT and FROM and INTO"></a>SELECT and FROM and INTO</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">SELECT</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span>注意要用哪个数据库，要在界面上选中，这样才方便查询库中表<span class="token comment">----------------1.SELECT and FROM 子句------------------</span><span class="token keyword">SELECT</span> 子句，用来控制列，说明那些列在查询结果里面<span class="token keyword">FROM</span>   子句，用来控制表，说明在哪个<span class="token operator">/</span>哪些表里面查询<span class="token comment">--*代表所有列</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>     <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> publishers<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titleauthor<span class="token comment">--控制显示的列</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> au_lname<span class="token punctuation">,</span> au_fname<span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> title<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> titles<span class="token comment">--列的别名</span><span class="token keyword">SELECT</span> title <span class="token keyword">as</span> <span class="token string">'title-1'</span><span class="token punctuation">,</span> title <span class="token keyword">as</span> <span class="token string">'title-2'</span><span class="token punctuation">,</span> price<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title <span class="token keyword">as</span> <span class="token string">'书名1'</span><span class="token punctuation">,</span> title <span class="token keyword">as</span> <span class="token string">'书名2'</span><span class="token punctuation">,</span> price <span class="token keyword">as</span> <span class="token string">'单价'</span><span class="token keyword">FROM</span> titles<span class="token comment">--常数列</span><span class="token keyword">SELECT</span> <span class="token string">'我'</span> <span class="token keyword">as</span> <span class="token string">'常数列'</span><span class="token keyword">SELECT</span> <span class="token string">'我'</span> <span class="token keyword">as</span> <span class="token string">'常数列'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> <span class="token string">'单价是：'</span><span class="token punctuation">,</span> price<span class="token keyword">FROM</span> titles<span class="token comment">--运算列</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token keyword">as</span> <span class="token string">'单价九折'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token keyword">as</span> <span class="token string">'原价'</span><span class="token punctuation">,</span> price <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token keyword">as</span> <span class="token string">'九折价'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token keyword">as</span> <span class="token string">'原价'</span><span class="token punctuation">,</span> <span class="token string">'九折'</span> <span class="token keyword">as</span> <span class="token string">'折扣力度'</span><span class="token punctuation">,</span> price <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token keyword">as</span> <span class="token string">'折后价'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token operator">*</span> ytd_sales <span class="token keyword">as</span> <span class="token string">'总销售额'</span><span class="token keyword">FROM</span> titles<span class="token comment">--列的拼接</span><span class="token keyword">SELECT</span> au_lname<span class="token punctuation">,</span> au_fname<span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> au_lname <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> au_fname <span class="token keyword">as</span> <span class="token string">'作者姓名'</span><span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> au_lname <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> au_fname <span class="token operator">+</span> <span class="token string">' 住在: '</span> <span class="token operator">+</span> city <span class="token keyword">as</span> <span class="token string">'一句话'</span><span class="token keyword">FROM</span> authors<span class="token comment">--重要语法：DISTINCT</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span> <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">type</span> <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> pub_id<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> pub_id<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token keyword">FROM</span> titles<span class="token comment">--重要语法：TOP n</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span> price<span class="token keyword">FROM</span> titles<span class="token comment">-------------------------2. INTO 子句---------------</span><span class="token keyword">INTO</span> 子句，把一个查询结果，直接创建一个新表，存起来<span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span> price<span class="token keyword">INTO</span> titles3rows<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles3rows<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">SELECT</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token comment">----------------3.WHERE 子句------------------</span><span class="token keyword">WHERE</span> 子句用来控制行，做条件判断，符合条件的就显示出来<span class="token number">1.</span> <span class="token operator">=</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1389</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1111</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">=</span> <span class="token number">19.99</span><span class="token number">2.</span><span class="token operator">&lt;></span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">&lt;></span> <span class="token number">19.99</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">&lt;></span> <span class="token string">'business'</span><span class="token number">3.</span> <span class="token operator">></span> <span class="token operator">&lt;</span>  <span class="token operator">>=</span>  <span class="token operator">&lt;=</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">19</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">></span> <span class="token string">'zusiness'</span><span class="token number">4.</span> <span class="token operator">and</span> <span class="token operator">or</span> <span class="token operator">not</span> 与或非<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token operator">not</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">and</span> price <span class="token operator">></span> <span class="token number">9</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span> <span class="token operator">and</span> price <span class="token operator">></span> <span class="token number">19</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span> <span class="token operator">and</span> price <span class="token operator">></span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span><span class="token punctuation">)</span> <span class="token operator">and</span> price <span class="token operator">></span> <span class="token number">19</span><span class="token number">5.</span> <span class="token operator">between</span> <span class="token operator">and</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">between</span> <span class="token number">10</span> <span class="token operator">and</span> <span class="token number">19</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">>=</span> <span class="token number">9</span> <span class="token operator">and</span> price <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token number">6.</span> <span class="token operator">is</span> <span class="token boolean">null</span>  <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token number">7.</span>多值条件 <span class="token operator">in</span>  <span class="token operator">not</span> <span class="token operator">in</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'business'</span><span class="token punctuation">,</span> <span class="token string">'mod_cook'</span><span class="token punctuation">,</span> <span class="token string">'popular_comp'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span> <span class="token operator">or</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'popular_comp'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'business'</span><span class="token punctuation">,</span> <span class="token string">'mod_cook'</span><span class="token punctuation">,</span> <span class="token string">'popular_comp'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">9.9</span><span class="token punctuation">,</span> <span class="token number">19.99</span><span class="token punctuation">,</span> <span class="token number">29.99</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2.99</span><span class="token punctuation">)</span><span class="token number">8.</span>模糊查询<span class="token number">8.1</span> <span class="token operator">like</span> <span class="token string">'%xxxxxxx%'</span>   其中<span class="token operator">%</span>叫做通配符，而且是无关长度的通配<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%comp%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'comp%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%Y'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token number">8.2</span>  _  单字符统配<span class="token keyword">SELECT</span> au_lname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> phone <span class="token operator">like</span> <span class="token string">'_15%2'</span><span class="token keyword">SELECT</span> au_fname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_fname <span class="token operator">like</span> <span class="token string">'_her__'</span><span class="token number">8.3</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 区间单字符统配<span class="token keyword">SELECT</span> au_fname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_fname <span class="token operator">like</span> <span class="token string">'[a-c]heryl'</span><span class="token keyword">SELECT</span> au_fname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_fname <span class="token operator">like</span> <span class="token string">'[a-s]heryl'</span><span class="token keyword">SELECT</span> au_fname<span class="token punctuation">,</span> phone<span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_fname <span class="token operator">like</span> <span class="token string">'[^a-c]heryl'</span><span class="token comment">------------------练习--------------</span>查询产品类别CategoryID是<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>的所有产品用多种方法来实现：<span class="token operator">OR</span>，<span class="token operator">BETWEEN</span>，<span class="token operator">IN</span>，<span class="token operator">&lt;></span><span class="token keyword">USE</span> Northwind<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> CategoryID <span class="token operator">between</span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">4</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> CategoryID <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>查询产品类别是<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span>，并且供应商SupplierID不是<span class="token number">11</span>的所有产品<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> CategoryID <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">and</span> SupplierID <span class="token operator">&lt;></span> <span class="token number">11</span>查产品名ProduceName中以“C”或“D”或“E”开头的所有产品也可以用多种方法实现，练习使用<span class="token operator">LIKE</span>的模糊匹配<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> ProductName <span class="token operator">like</span> <span class="token string">'[c-e]%'</span>查询库存UnitsInStock<span class="token operator">&lt;</span>订货量UnitsOnOrder的产品，并且在第一列添加常数“需要进货”<span class="token keyword">SELECT</span> <span class="token string">'需要进货'</span> <span class="token keyword">as</span> <span class="token string">'提醒'</span><span class="token punctuation">,</span> productname<span class="token punctuation">,</span> unitsinstock<span class="token punctuation">,</span> unitsonorder<span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> unitsinstock <span class="token operator">&lt;</span> unitsonorder在上面的基础上，计算出每个产品进货的预算总额利用表达式，计算出订货和库存的差距，并利用产品单价UnitPrice得出预算。需要添加一个新的计算结果的列，叫做“进货预算”<span class="token keyword">SELECT</span> <span class="token string">'需要进货'</span> <span class="token keyword">as</span> <span class="token string">'提醒'</span><span class="token punctuation">,</span> productname<span class="token punctuation">,</span>        unitsinstock<span class="token punctuation">,</span> unitsonorder<span class="token punctuation">,</span> UnitPrice<span class="token punctuation">,</span>   <span class="token punctuation">(</span>unitsonorder <span class="token operator">-</span> unitsinstock<span class="token punctuation">)</span><span class="token operator">*</span>unitprice <span class="token keyword">as</span> <span class="token string">'进货预算'</span><span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> unitsinstock <span class="token operator">&lt;</span> unitsonorder练习查找雇员表中<span class="token number">60</span>年代出生在UK的员工日期列用法例子: Birthday <span class="token operator">></span> ‘<span class="token number">2000</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>’<span class="token keyword">SELECT</span> lastname<span class="token punctuation">,</span> firstname<span class="token punctuation">,</span> BirthDate<span class="token punctuation">,</span> Country<span class="token keyword">FROM</span> Employees<span class="token keyword">WHERE</span> birthdate <span class="token operator">between</span> <span class="token string">'1960-1-1'</span> <span class="token operator">and</span> <span class="token string">'1969-12-31'</span>       <span class="token operator">and</span> Country <span class="token operator">=</span> <span class="token string">'UK'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">SELECT</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token comment">----------------聚合函数------------------</span>MAX 最大值MIN 最小值AVG 平均值SUM 求和值COUNT 计数<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">100</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token comment">----------------GROUP BY 子句------------------</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 子句，进行分组聚合<span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'popular_comp'</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'mod_cook'</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token comment">--消息 8120，级别 16，状态 1，第 1 行</span>选择列表中的列 <span class="token string">'titles.type'</span> 无效，因为该列没有包含在聚合函数或 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 子句中。！！！！！<span class="token keyword">group</span> <span class="token keyword">by</span>出现的情况下，<span class="token keyword">select</span>里面的列，要不就是出现在<span class="token keyword">group</span> <span class="token keyword">by</span>中，要不就必须在聚合函数中<span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> pub_id<span class="token keyword">SELECT</span> pub_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> pub_id<span class="token comment">-------Group by 的多列，嵌套使用</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> pub_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token punctuation">,</span> pub_id<span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> pub_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">20</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token punctuation">,</span> pub_id<span class="token comment">------------------------HAVING 子句----------------</span><span class="token keyword">HAVING</span> 子句，负责对聚合函数的结果进行条件判断，符合条件的显示<span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token comment">--消息 147，级别 15，状态 1，第 3 行</span>聚合不应出现在 <span class="token keyword">WHERE</span> 子句中，除非该聚合位于 <span class="token keyword">HAVING</span> 子句或选择列表所包含的子查询中，并且要对其进行聚合的列是外部引用。<span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span> <span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span> <span class="token operator">and</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1389</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token comment">-----------------------------------ORDER BY-------------------------------</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 子句，根据某列的值，对查询结果进行排序<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span>   默认升序<span class="token keyword">ASC</span>关键词可以不写<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">DESC</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> pub_id<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price<span class="token punctuation">,</span> ytd_sales <span class="token keyword">DESC</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1389</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price<span class="token punctuation">,</span> ytd_sales <span class="token keyword">DESC</span><span class="token keyword">SELECT</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'avg'</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token number">1389</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">type</span><span class="token keyword">HAVING</span> <span class="token function">sum</span><span class="token punctuation">(</span>ytd_sales<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token comment">---------------</span>显示单价最高的<span class="token number">10</span>个商品需要先按降序排列，然后取<span class="token keyword">TOP</span> <span class="token number">10</span>计算所有商品的总单价统计类型为<span class="token number">1</span>的商品的个数，和总库存在作聚合函数的时候要选择<span class="token number">2</span>个聚合函数，而且要添加<span class="token keyword">WHERE</span>条件<span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">10</span> productname<span class="token punctuation">,</span> CategoryID<span class="token punctuation">,</span>  unitprice<span class="token keyword">FROM</span> products<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> unitprice <span class="token keyword">DESC</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>unitprice<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">SELECT</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>unitsinstock<span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> Categoryid <span class="token operator">=</span> <span class="token number">1</span>统计当前有多少个供应商给我们供货要求只显示出供应商的SupplierID就可以了<span class="token number">2</span>方法，<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>，<span class="token keyword">DISTINCT</span>统计每个供应商ID提供的商品个数按供应商ID分组，并添加聚合函数按商品个数的升序排列刚才的结果添加对聚合函数的结果的排序只显示提供商品个数<span class="token operator">></span><span class="token number">3</span>的供应商使用<span class="token keyword">Having</span>子句<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> SupplierID<span class="token keyword">FROM</span> products<span class="token keyword">SELECT</span>  SupplierID<span class="token keyword">FROM</span> products<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> SupplierID<span class="token keyword">SELECT</span>  SupplierID<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> products<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> SupplierID<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><pre class="line-numbers language-cql" data-language="cql"><code class="language-cql">---------------------------多表查询--------------------------------方法一：用where中&#x3D;来连接两个表--------------SELECT * FROM titlesSELECT * FROM publishers查询这个出版社 New Moon Books 出版的所有书SELECT * FROM publishersWHERE pub_name &#x3D; &#39;New Moon Books&#39;SELECT * FROM titlesWHERE pub_id &#x3D; 0736SELECT *FROM titles, publishersORDER BY title_id返回了144行 &#x3D; 18*8titles表里面的pub_id是外键，他来自publishers表里面的主键pub_idSELECT title_id, title, price, titles.pub_id, publishers.pub_id, pub_nameFROM titles, publishersORDER BY title_idSELECT title_id, title, price, titles.pub_id, publishers.pub_id, pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_idORDER BY title_idSELECT title, price, pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_idORDER BY priceSELECT title, price, pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_id       and pub_name &#x3D;&#39;New Moon Books&#39;ORDER BY priceSELECT * FROM Employee （job——id）SELECT * FROM jobs （job_desc）显示每个雇员的名字和职位描述SELECT e.lname, j.job_descFROM employee as e, jobs as jWHERE e.job_id &#x3D; j.job_idSELECT * FROM titlesSELECT * FROM authorsSELECT * FROM titleauthorSELECT title, au_fname, au_lname, au_ordFROM titleauthor as ta, titles as t, authors as aWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_idORDER BY title, au_ordSELECT title, au_fname, au_lname, au_ordFROM titleauthor as ta, titles as t, authors as aWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_id and a.state &#x3D; &#39;CA&#39;ORDER BY title, au_ord思考：再加一列，出版社的名字，咋办？SELECT title, au_fname, au_lname, au_ord, pub_nameFROM titleauthor as ta, titles as t, authors as a, publishers as pWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_id and p.pub_id &#x3D; t.pub_idORDER BY title, au_ord思考: 查询，作者，和，出版社，都在同一个省的，书SELECT title, au_fname, au_lname, au_ord, pub_nameFROM titleauthor as ta, titles as t, authors as a, publishers as pWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_id and p.pub_id &#x3D; t.pub_id      and p.state &#x3D; a.stateORDER BY title, au_ord----------方法二：用where中的子查询--------------我们要查找出版过商业书籍的，出版社编号和名字SELECT DISTINCT publishers.pub_id, publishers.pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_id     and titles.type &#x3D; &#39;business&#39;SELECT publishers.pub_id, publishers.pub_nameFROM titles, publishersWHERE titles.pub_id &#x3D; publishers.pub_id     and titles.type &#x3D; &#39;business&#39;SELECT publishers.pub_id, publishers.pub_nameFROM publishersWHERE publishers.pub_id in(   SELECT pub_id FROM titles   WHERE type &#x3D; &#39;business&#39;)SELECT publishers.pub_id, publishers.pub_nameFROM publishersWHERE publishers.pub_id in (1389,0736)地点是加州CA的出版社，出版的书，的名字和价格SELECT title, priceFROM titles WHERE pub_id in (    SELECT pub_id FROM publishersWHERE state &#x3D; &#39;CA&#39;)有两个及以上作者的，书的，名字，单价，出版社名字SELECT t.title, t.price, p.pub_nameFROM titles as t, publishers as pWHERE t.pub_id &#x3D; p.pub_id       and title_id in   (SELECT title_idFROM titleauthorGROUP BY title_idHAVING count(*) &gt;&#x3D; 2      )SELECT DISTINCT title_id FROM titleauthorWHERE au_ord &gt;&#x3D; 2SELECT title_idFROM titleauthorGROUP BY title_idHAVING count(*) &gt;&#x3D; 2找出在1996-7-1到1996-7-10期间有过销售记录的美国员工的名字SELECT lastname, firstname FROM EmployeesWHERE country &#x3D; &#39;USA&#39;      and EmployeeID in (SELECT employeeID FROM ordersWHERE orderdate between &#39;1996-7-1&#39; and &#39;1996-7-10&#39;)SELECT DISTINCT lastname, firstname FROM Employees as e, orders as oWHERE e.EmployeeID &#x3D; o.employeeID and e.country &#x3D; &#39;USA&#39; and      o.orderdate between &#39;1996-7-1&#39; and &#39;1996-7-10&#39;----------方法三：联接查询--------------SELECT * FROM titles  -18行SELECT * FROM publishers -8行SELECT * FROM titles, publishers  order by title_id    -144&#x3D;18*8交叉联接SELECT * FROM titles, publishers SELECT * FROM titles cross join publishers 内联接SELECT * FROM titles as t, publishers as pWHERE t.pub_id  &#x3D; p.pub_idSELECT * FROM titles as t inner join publishers as pon (t.pub_id &#x3D; p.pub_id)SELECT t.title, a.au_fname, a.au_fnameFROM titleauthor as ta, titles as t, authors as aWHERE ta.au_id &#x3D; a.au_id and ta.title_id &#x3D; t.title_idSELECT t.title, a.au_fname, a.au_fnameFROM titleauthor as ta inner join titles as t      on (ta.title_id &#x3D; t.title_id)     inner join authors as a on (ta.au_id &#x3D; a.au_id)外联接SELECT * FROM stores -6个书店SELECT * FROM discounts  -3种折扣，其中1种有1个商店在执行显示打折的书店和折扣信息SELECT * FROM stores inner join discounts       on (stores.stor_id &#x3D; discounts.stor_id)左向外联接显示所有书店的编号和名字，如果商店有折扣在执行，则显示折扣类型SELECT stores.stor_id, stores.stor_name, discounts.discounttypeFROM stores left outer join discounts      on (stores.stor_id &#x3D; discounts.stor_id)右向外联接显示所有折扣类型，如果有书店在执行某个折扣类型，则显示书店名字SELECT stores.stor_id, stores.stor_name, discounts.discounttypeFROM stores right outer join discounts      on (stores.stor_id &#x3D; discounts.stor_id)全向外联接折扣类型和书店信息都要出来，如果某个书店正在执行某个折扣类型，则融合显示SELECT stores.stor_id, stores.stor_name, discounts.discounttypeFROM stores full outer join discounts      on (stores.stor_id &#x3D; discounts.stor_id)内联接检索与某个出版商居住在相同州和城市的作者：SELECT * FROM publishersSELECT * FROM authorsSELECT a.au_fname, a.au_lname, p.pub_nameFROM authors as a inner join publishers as pon (a.city &#x3D; p.city and a.state &#x3D; p.state)与某个出版商居住在相同州和城市的作者，若要在结果中包括所有的作者，而不管出版商是否住在同一个城市，左向外联接SELECT a.au_fname, a.au_lname, p.pub_nameFROM authors as a left outer join publishers as pon (a.city &#x3D; p.city and a.state &#x3D; p.state)若要在结果中包括所有作者和出版商，而不管城市中是否有出版商或者出版商是否住在同一个城市，请使用完整外部联接SELECT a.au_fname, a.au_lname, p.pub_nameFROM authors as a full outer join publishers as pon (a.city &#x3D; p.city and a.state &#x3D; p.state)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL-DML"><a href="#SQL-DML" class="headerlink" title="SQL-DML"></a>SQL-DML</h2><ul><li>增：INSERT</li><li>删：DELETE</li><li>改：UPDATE</li></ul><p>上述都是选择了某个表进行操作，实质上是对表中数据进行操作，如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">update</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">set</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-------------------------删除数据 DELETE--------------------</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">INTO</span> mytitle<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytitle5<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">INTO</span> mytitle5<span class="token keyword">FROM</span> titles<span class="token keyword">DELETE</span> mytitle<span class="token keyword">DELETE</span> mytitle3<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span><span class="token keyword">DELETE</span> mytitle3<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">10</span><span class="token keyword">DELETE</span> mytitle3<span class="token keyword">WHERE</span> price <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> mytitle4<span class="token keyword">WHERE</span> price <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> mytitle4<span class="token punctuation">)</span><span class="token keyword">DELETE</span> mytitle4<span class="token keyword">WHERE</span> price <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> mytitle4<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> publishersNew Moon Books<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytitle4 <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p<span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytitle4 <span class="token keyword">WHERE</span> pub_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> pub_id <span class="token keyword">FROM</span> publishers         <span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token punctuation">)</span><span class="token keyword">DELETE</span> mytitle4<span class="token keyword">FROM</span> mytitle4 <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p<span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token keyword">DELETE</span> mytitle4 <span class="token keyword">WHERE</span> pub_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> pub_id <span class="token keyword">FROM</span> publishers         <span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token punctuation">)</span><span class="token keyword">DELETE</span> titles消息 <span class="token number">547</span>，级别 <span class="token number">16</span>，状态 <span class="token number">0</span>，第 <span class="token number">1</span> 行<span class="token keyword">DELETE</span> 语句与 REFERENCE 约束<span class="token string">"FK__titleauth__title__1ED998B2"</span>冲突。该冲突发生于数据库<span class="token string">"pubs"</span>，表<span class="token string">"dbo.titleauthor"</span><span class="token punctuation">,</span> <span class="token keyword">column</span> <span class="token string">'title_id'</span>。语句已终止。<span class="token keyword">DELETE</span> titleauthor<span class="token keyword">DELETE</span> titles消息 <span class="token number">547</span>，级别 <span class="token number">16</span>，状态 <span class="token number">0</span>，第 <span class="token number">1</span> 行<span class="token keyword">DELETE</span> 语句与 REFERENCE 约束<span class="token string">"FK__sales__title_id__24927208"</span>冲突。该冲突发生于数据库<span class="token string">"pubs"</span>，表<span class="token string">"dbo.sales"</span><span class="token punctuation">,</span> <span class="token keyword">column</span> <span class="token string">'title_id'</span>。语句已终止。<span class="token keyword">DELETE</span> sales<span class="token keyword">DELETE</span> titles消息 <span class="token number">547</span>，级别 <span class="token number">16</span>，状态 <span class="token number">0</span>，第 <span class="token number">1</span> 行<span class="token keyword">DELETE</span> 语句与 REFERENCE 约束<span class="token string">"FK__roysched__title___267ABA7A"</span>冲突。该冲突发生于数据库<span class="token string">"pubs"</span>，表<span class="token string">"dbo.roysched"</span><span class="token punctuation">,</span> <span class="token keyword">column</span> <span class="token string">'title_id'</span>。语句已终止。<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> title_id <span class="token keyword">FROM</span> roysched<span class="token punctuation">)</span><span class="token keyword">DELETE</span> titles<span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token string">'PC9999'</span><span class="token comment">--------------------------------INSERT 新增数据------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> old<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10000'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'13810008888'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> old<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10001'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'13770008888'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> old<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10002'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'13313003338'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10003'</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'13111003331'</span><span class="token punctuation">)</span><span class="token comment">-----</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10003'</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'13111003331'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10004'</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'13111003331'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10005'</span><span class="token punctuation">,</span> <span class="token string">'钱七'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10005'</span><span class="token punctuation">,</span> <span class="token string">'钱七'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10006'</span><span class="token punctuation">,</span> <span class="token string">'八'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10006'</span><span class="token punctuation">,</span> <span class="token string">'八'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10007'</span><span class="token punctuation">,</span> <span class="token string">'九'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token comment">------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> old<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  <span class="token keyword">LEFT</span><span class="token punctuation">(</span>au_id<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         au_lname <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> au_fname<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span>phone<span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token comment">--------------------------UPDATE 更新数据-----------------</span><span class="token keyword">UPDATE</span> student<span class="token keyword">SET</span> gender <span class="token operator">=</span> <span class="token string">'女'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token keyword">UPDATE</span> student<span class="token keyword">SET</span> gender <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">,</span> old <span class="token operator">=</span> old <span class="token operator">+</span> <span class="token number">10</span><span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> old <span class="token operator">=</span> <span class="token number">33</span><span class="token keyword">WHERE</span> sname <span class="token operator">=</span> <span class="token string">'李四'</span>销量排名前十的书，全部涨价<span class="token number">50</span><span class="token operator">%</span><span class="token keyword">UPDATE</span> titles<span class="token keyword">SET</span> price <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token number">1.5</span><span class="token keyword">WHERE</span> title_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">10</span> title_id <span class="token keyword">FROM</span> titles<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ytd_sales <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> publishers <span class="token keyword">as</span> p <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">as</span> t<span class="token keyword">on</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> t<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> pub_id <span class="token operator">in</span> <span class="token punctuation">(</span>  <span class="token keyword">SELECT</span> pub_id <span class="token keyword">FROM</span> publishers  <span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token punctuation">)</span><span class="token keyword">UPDATE</span> titles<span class="token keyword">SET</span> price <span class="token operator">=</span> price <span class="token operator">*</span> <span class="token number">0.8</span><span class="token keyword">FROM</span> publishers <span class="token keyword">as</span> p <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">as</span> t<span class="token keyword">on</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> t<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token keyword">UPDATE</span> titles<span class="token keyword">SET</span> price <span class="token operator">=</span> price <span class="token operator">+</span> <span class="token number">10</span><span class="token keyword">WHERE</span> pub_id <span class="token operator">in</span> <span class="token punctuation">(</span>  <span class="token keyword">SELECT</span> pub_id <span class="token keyword">FROM</span> publishers  <span class="token keyword">WHERE</span> pub_name <span class="token operator">=</span> <span class="token string">'New Moon Books'</span><span class="token punctuation">)</span><span class="token keyword">UPDATE</span> titles<span class="token keyword">SET</span> title_id <span class="token operator">=</span> <span class="token string">'BU2080'</span><span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token string">'BU2075'</span><span class="token keyword">UPDATE</span> publishers<span class="token keyword">SET</span> pub_id <span class="token operator">=</span> <span class="token string">'9998'</span><span class="token keyword">WHERE</span> pub_id <span class="token operator">=</span> <span class="token string">'9999'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL-DDL"><a href="#SQL-DDL" class="headerlink" title="SQL-DDL"></a>SQL-DDL</h2><p>DDL<strong>负责各类数据库对象的创建、修改、删除</strong></p><p>如<strong>数据库、表、视图、索引、存储过程、规则</strong>等</p><ul><li>创建：CREATE</li><li>修改：ALTER</li><li>删除：DROP</li></ul><h2 id="VIEW"><a href="#VIEW" class="headerlink" title="VIEW"></a>VIEW</h2><p>一个VIEW相当于一张虚拟表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">场景：<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales <span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> publishers<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> price <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">and</span> ytd_sales <span class="token operator">></span> <span class="token number">1000</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span> <span class="token operator">and</span> price <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token comment">--------------------------视图------------------------</span><span class="token number">1.</span> 用户眼中的数据（数据库、数据表），是用户视角下的数据组织形式   它和实际<span class="token keyword">SQL</span> SERVER里面的表的组织方式（ER图）不一样   这是数据库的三级结构（用户级、外模式、逻辑独立性）决定的<span class="token number">2.</span> 程序员会把用户常用的一些视角，事先把<span class="token keyword">select</span> <span class="token keyword">sql</span>语句写好，存起来。   注意，存的不是数据，存的是视角（<span class="token keyword">sql</span>语句），这样方便程序员以后在这个视角下继续加条件。综合<span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token comment">---》新概念，视图，VIEW</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> v_buybook<span class="token keyword">AS</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price<span class="token punctuation">,</span> ytd_sales<span class="token punctuation">,</span> pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v_buybook<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v_buybook<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> View_1<span class="token keyword">SELECT</span>  dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>price<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>ytd_sales<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span>      dbo<span class="token punctuation">.</span>publishers <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>titles <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>pub_id<span class="token keyword">WHERE</span>   <span class="token punctuation">(</span>dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title <span class="token operator">LIKE</span> <span class="token string">'%computer%'</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span class="token keyword">SELECT</span>  <span class="token keyword">TOP</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">PERCENT</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>price<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>ytd_sales<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_name<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>au_lname<span class="token punctuation">,</span>                    dbo<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>au_fname<span class="token keyword">FROM</span>      dbo<span class="token punctuation">.</span>publishers <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>titles <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>pub_id <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>titleauthor <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>titleauthor<span class="token punctuation">.</span>title_id <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>authors <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titleauthor<span class="token punctuation">.</span>au_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>au_id<span class="token keyword">WHERE</span>   <span class="token punctuation">(</span>dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title <span class="token operator">LIKE</span> <span class="token string">'%computer%'</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>采用B树结构</p><p>簇索引和非簇索引</p><h3 id="簇索引"><a href="#簇索引" class="headerlink" title="簇索引"></a>簇索引</h3><p><strong>在叶节点中存储了表的实际行数据，所以一旦到达叶节点，数据就立刻可以使用</strong></p><p>主键是聚簇索引的良好候选者</p><p>缺省设置创建的索引是非聚簇索引</p><h3 id="非簇索引"><a href="#非簇索引" class="headerlink" title="非簇索引"></a>非簇索引</h3><p><strong>非簇索引的结构类似于簇索引，但是表的数据不存储在索引的叶节点上，表的数据也不按照索引列排序</strong></p><h3 id="索引的唯一性"><a href="#索引的唯一性" class="headerlink" title="索引的唯一性"></a>索引的唯一性</h3><p><strong>非唯一性索引效率不如唯一性效率高</strong></p><ul><li><p>唯一索引</p><p><strong>必须在数据库表中具有唯一值特性的列上创建</strong></p><p><strong>唯一索引在各索引键中仅包含一行数据表中的数据</strong></p><p><strong>在创建主键约束和唯一约束时自动创建</strong></p></li><li><p>非唯一索引</p><p><strong>在叶节点中可以包含重复值，如果它们符合SELECT语句中指定的标准，那么所有重复值都可以被检索</strong></p></li></ul><h3 id="有效使用索引"><a href="#有效使用索引" class="headerlink" title="有效使用索引"></a>有效使用索引</h3><p><strong>在对索引列进行查询时，不在查询where子句中显式地加入NOT词，否则无法使用索引</strong></p><h3 id="维护索引"><a href="#维护索引" class="headerlink" title="维护索引"></a>维护索引</h3><blockquote><blockquote><p>查看索引状态</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DBCC</span> SHOWCONTIG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>重建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">drop</span> existing<span class="token keyword">DBCC</span> DBREINDEX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>整理索引碎片</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DBCC</span> INDEXDEFRAG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>索引统计信息</p><blockquote><p>查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DBCC</span> SHOW_STATISTICS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></blockquote></blockquote><h3 id="索引优缺点"><a href="#索引优缺点" class="headerlink" title="索引优缺点"></a>索引优缺点</h3><h4 id="索引优点"><a href="#索引优点" class="headerlink" title="索引优点"></a>索引优点</h4><ul><li>加速数据检索</li><li>加速连接、order by和Group by</li><li>查询优化器</li><li>强制实施行的唯一性</li></ul><h4 id="索引缺点"><a href="#索引缺点" class="headerlink" title="索引缺点"></a>索引缺点</h4><ul><li>基于代价</li><li>索引创建花费时间、空间</li><li>减慢了数据修改速度</li></ul><h3 id="适合使用索引的情况"><a href="#适合使用索引的情况" class="headerlink" title="适合使用索引的情况"></a>适合使用索引的情况</h3><ul><li>主键适合簇索引</li><li>连接中频繁使用的列</li><li>列常需要排序、分组</li><li>查询访问较少的数据</li></ul><h3 id="不适合使用"><a href="#不适合使用" class="headerlink" title="不适合使用"></a>不适合使用</h3><ul><li>不常在查询中引用的列</li><li>值少的列</li><li>小表</li><li>经常增删查改的表</li><li>null</li></ul><h2 id="SQL-syntax"><a href="#SQL-syntax" class="headerlink" title="SQL-syntax"></a>SQL-syntax</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> CEILING<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> FLOOR<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> SIN<span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>UPPER<span class="token punctuation">(</span>au_lname<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>UPPER<span class="token punctuation">(</span>au_fname<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> authors<span class="token keyword">SELECT</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> DATEADD<span class="token punctuation">(</span>dd<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> DATEDIFF<span class="token punctuation">(</span>dd<span class="token punctuation">,</span> <span class="token string">'2023-5-11'</span><span class="token punctuation">,</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> cast<span class="token punctuation">(</span>ytd_sales <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'15%'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> ytd_sales <span class="token operator">like</span> <span class="token string">'15%'</span><span class="token keyword">SELECT</span> title <span class="token operator">+</span> <span class="token string">' 这本书的销量是： '</span> <span class="token operator">+</span> ytd_sales<span class="token keyword">FROM</span> titles<span class="token keyword">SELECT</span> title <span class="token operator">+</span> <span class="token string">' 这本书的销量是： '</span> <span class="token operator">+</span> cast<span class="token punctuation">(</span>ytd_sales <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> titles<span class="token keyword">DECLARE</span>    <span class="token variable">@myfirstvar</span> <span class="token keyword">int</span><span class="token keyword">SET</span>   <span class="token variable">@myfirstvar</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token variable">@myfirstvar</span><span class="token keyword">DECLARE</span>    <span class="token variable">@mysecondvar</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token variable">@mythird</span> <span class="token keyword">int</span><span class="token keyword">SET</span> <span class="token variable">@mysecondvar</span> <span class="token operator">=</span> <span class="token string">'computer'</span><span class="token keyword">SET</span> <span class="token variable">@mythird</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> titles<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@mysecondvar</span> <span class="token operator">+</span> <span class="token string">'%'</span>      <span class="token operator">and</span> price <span class="token operator">&lt;</span> <span class="token variable">@mythird</span><span class="token keyword">DECLARE</span>  <span class="token variable">@mycontrol</span> <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token variable">@myinputprice</span> <span class="token keyword">int</span><span class="token keyword">SET</span> <span class="token variable">@myinputprice</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token keyword">SET</span> <span class="token variable">@mycontrol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> titles <span class="token keyword">WHERE</span> price <span class="token operator">&lt;</span> <span class="token variable">@myinputprice</span><span class="token punctuation">)</span><span class="token keyword">IF</span> <span class="token variable">@mycontrol</span> <span class="token operator">></span> <span class="token number">0</span><span class="token keyword">BEGIN</span>  <span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> titles   <span class="token keyword">WHERE</span> price <span class="token operator">&lt;</span> <span class="token variable">@myinputprice</span><span class="token keyword">END</span><span class="token keyword">ELSE</span><span class="token keyword">BEGIN</span>  <span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> titles  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ytd_sales <span class="token keyword">DESC</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL-cursor"><a href="#SQL-cursor" class="headerlink" title="SQL-cursor"></a>SQL-cursor</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*-----------------------------------------------------游标---关系数据库中的操作会对整个行集产生影响。由 SELECT 语句返回的行集包括所有满足该语句 WHERE 子句中条件的行。由语句所返回的这一完整的行集被称为结果集。应用程序，特别是交互式联机应用程序，并不总能将整个结果集作为一个单元来有效地处理。这些应用程序需要一种机制以便每次处理一行或一部分行。游标就是提供这种机制的结果集扩展。 -------------------------------------------------------*/</span><span class="token comment">---------------------------------------------------------------------------------</span><span class="token comment">--游标基本语法</span><span class="token comment">---------------------------------------------------------------------------------</span><span class="token keyword">DECLARE</span> Employee_Cursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span><span class="token keyword">SELECT</span> LastName<span class="token punctuation">,</span> FirstName <span class="token keyword">FROM</span> Northwind<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>Employees<span class="token keyword">OPEN</span> Employee_Cursor<span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> Employee_Cursor<span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">BEGIN</span>   <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> Employee_Cursor<span class="token keyword">END</span><span class="token keyword">CLOSE</span> Employee_Cursor<span class="token keyword">DEALLOCATE</span> Employee_Cursor<span class="token comment">---------------------------------------------------------------------------------</span><span class="token comment">--游标读取行的值 </span><span class="token comment">---------------------------------------------------------------------------------</span><span class="token comment">-- Declare the variables to store the values returned by FETCH.</span><span class="token keyword">DECLARE</span> <span class="token variable">@au_lname</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">@au_fname</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">DECLARE</span> authors_cursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span><span class="token keyword">SELECT</span> au_lname<span class="token punctuation">,</span> au_fname <span class="token keyword">FROM</span> authors<span class="token keyword">WHERE</span> au_lname <span class="token operator">LIKE</span> <span class="token string">'B%'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> au_lname<span class="token punctuation">,</span> au_fname<span class="token keyword">OPEN</span> authors_cursor<span class="token comment">-- Perform the first fetch and store the values in variables.</span><span class="token comment">-- Note: The variables are in the same order as the columns</span><span class="token comment">-- in the SELECT statement. </span><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> authors_cursor<span class="token keyword">INTO</span> <span class="token variable">@au_lname</span><span class="token punctuation">,</span> <span class="token variable">@au_fname</span><span class="token comment">-- Check @@FETCH_STATUS to see if there are any more rows to fetch.</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">BEGIN</span>   <span class="token comment">-- Concatenate and display the current values in the variables.</span>   <span class="token keyword">PRINT</span> <span class="token string">'Author: '</span> <span class="token operator">+</span> <span class="token variable">@au_fname</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  <span class="token variable">@au_lname</span>   <span class="token comment">-- This is executed as long as the previous fetch succeeds.</span>   <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> authors_cursor   <span class="token keyword">INTO</span> <span class="token variable">@au_lname</span><span class="token punctuation">,</span> <span class="token variable">@au_fname</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> authors_cursor<span class="token keyword">DEALLOCATE</span> authors_cursorGO<span class="token comment">/*-----------------------------------------------------------------------------------查询所有商业书籍在1993年的销售量 输出2列  书名和1993年销售量商业书                                                                  1993年销售量    ------------------------------------------------------------------       ----------- Cooking with Computers: Surreptitious Balance Sheets                             25Straight Talk About Computers                                                    15The Busy Executive's Database Guide                                              15You Can Combat Computer Stress!                                                  35---------------------------------------------------------------------------------*/</span><span class="token keyword">DECLARE</span>    authorcursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span>  <span class="token comment">--在所有商业书的查询结果上建立游标</span><span class="token keyword">SELECT</span> title_id<span class="token punctuation">,</span>title <span class="token keyword">FROM</span> titles <span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> title<span class="token keyword">OPEN</span> authorcursor<span class="token comment">--打开游标</span><span class="token keyword">DECLARE</span>    <span class="token variable">@Mytitle_id</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--声明一些变量存储临时结果</span>   <span class="token variable">@Mytitle</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@SumQty</span> <span class="token keyword">int</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token comment">#Tempcursor (--创建临时表存储临时结果</span><span class="token punctuation">[</span>title<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">varchar</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>        <span class="token punctuation">[</span>sumqty<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">PRIMARY</span><span class="token punctuation">]</span><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> authorcursor <span class="token comment">--启动游标读第一条纪录，把纪录的值放入变量</span>      <span class="token keyword">INTO</span> <span class="token variable">@Mytitle_id</span><span class="token punctuation">,</span><span class="token variable">@mytitle</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">--循环读取纪录</span><span class="token keyword">BEGIN</span>          <span class="token comment">--对每次读取的书的编号，到另外的表中求汇总值</span>  <span class="token keyword">SET</span> <span class="token variable">@SumQty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token variable">@MyTitle_id</span> <span class="token operator">AND</span> ord_date <span class="token operator">between</span> <span class="token string">'1991-1-1'</span> <span class="token operator">AND</span> <span class="token string">'1999-12-31'</span><span class="token punctuation">)</span> <span class="token comment">--把每次算出的一个书的结果插入临时表</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#tempcursor VAlues(@Mytitle,@SumQty)       --再向下读取另外一本书</span>  <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> authorcursor <span class="token keyword">INTO</span> <span class="token variable">@Mytitle_id</span><span class="token punctuation">,</span><span class="token variable">@mytitle</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> authorcursor<span class="token comment">--关闭游标</span><span class="token keyword">DEALLOCATE</span> authorcursor<span class="token comment">--释放游标</span><span class="token comment">--把最后所有中间算出的每本书的结果从临时表中读取出来，返回结果</span><span class="token keyword">Select</span> title <span class="token keyword">as</span> <span class="token string">'商业书'</span><span class="token punctuation">,</span> sumqty <span class="token keyword">as</span> <span class="token string">'1993年销售量'</span> <span class="token keyword">from</span> <span class="token comment">#tempCursor</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token comment">#tempcursor--删除临时表</span>GO<span class="token comment">/*-----------------------------------------------------------------------------------查询所有在美国的客户的最近一次销售纪录的总额和日期 northwind数据库   美国顾客编号 最近一次购物时间                                               总金额                   ------ ------------------------------------------------------ --------------------- GREAL  1998-04-30 00:00:00.000                                510.0000HUNGC  1997-09-08 00:00:00.000                                1701.0000LAZYK  1997-05-22 00:00:00.000                                210.0000LETSS  1998-02-12 00:00:00.000                                1450.6000LONEP  1998-04-13 00:00:00.000                                1575.0000OLDWO  1998-04-20 00:00:00.000                                554.4000RATTC  1998-05-06 00:00:00.000                                1374.6000SAVEA  1998-05-01 00:00:00.000                                4722.3000SPLIR  1998-03-25 00:00:00.000                                439.0000THEBI  1998-04-01 00:00:00.000                                69.6000THECR  1998-04-06 00:00:00.000                                326.0000TRAIH  1998-01-08 00:00:00.000                                237.9000WHITC  1998-05-01 00:00:00.000                                928.7500----------------------------------------------------------------------------- */</span><span class="token keyword">Declare</span>   <span class="token variable">@LastOrderDate</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>   <span class="token variable">@LastOrderID</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@LastOrderMoney</span> money<span class="token punctuation">,</span>   <span class="token variable">@TempCustomerID</span> <span class="token keyword">nchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token comment">#Tempcursor (--创建临时表存储临时结果</span><span class="token punctuation">[</span>CustomerID<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">nchar</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>        <span class="token punctuation">[</span>OrderDate<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">datetime</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>SumMoney<span class="token punctuation">]</span> <span class="token punctuation">[</span>money<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">PRIMARY</span><span class="token punctuation">]</span><span class="token keyword">DECLARE</span> Employee_Cursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span><span class="token keyword">SELECT</span> CustomerID <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> Country <span class="token operator">=</span> <span class="token string">'USA'</span><span class="token keyword">OPEN</span> Employee_Cursor<span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> Employee_Cursor      <span class="token keyword">INTO</span> <span class="token variable">@TempCustomerID</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">BEGIN</span>   <span class="token keyword">SET</span> <span class="token variable">@LastOrderdate</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>OrderDate<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> CustomerID <span class="token operator">=</span> <span class="token variable">@TempCustomerID</span><span class="token punctuation">)</span>    <span class="token keyword">SET</span> <span class="token variable">@LastOrderID</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> OrderID <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> OrderDate <span class="token operator">=</span> <span class="token variable">@LastOrderDate</span> <span class="token operator">AND</span>   CustomerID <span class="token operator">=</span> <span class="token variable">@TempCustomerID</span><span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@LastOrderMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>UnitPrice<span class="token operator">*</span>Quantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span><span class="token keyword">Order</span> Details<span class="token punctuation">]</span> <span class="token keyword">WHERE</span> OrderID <span class="token operator">=</span> <span class="token variable">@LastOrderID</span><span class="token punctuation">)</span>   <span class="token keyword">Insert</span> <span class="token keyword">INTO</span> <span class="token comment">#TempCursor  </span>   <span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token variable">@TempCustomerID</span><span class="token punctuation">,</span><span class="token variable">@LastOrderDate</span><span class="token punctuation">,</span><span class="token variable">@LastOrderMoney</span><span class="token punctuation">)</span>      <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> Employee_Cursor <span class="token keyword">INTO</span> <span class="token variable">@TempCustomerID</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> Employee_Cursor<span class="token keyword">DEALLOCATE</span> Employee_Cursor<span class="token keyword">SELECT</span> CustomerID <span class="token keyword">as</span> <span class="token string">'美国顾客编号'</span><span class="token punctuation">,</span> OrderDate <span class="token keyword">as</span> <span class="token string">'最近一次购物时间'</span><span class="token punctuation">,</span>SumMoney <span class="token keyword">as</span> <span class="token string">'总金额'</span> <span class="token keyword">FROM</span> <span class="token comment">#TempCursor</span> <span class="token keyword">Drop</span> <span class="token keyword">table</span> <span class="token comment">#Tempcursor</span><span class="token comment">/*-----------思考题-northwind数据库---------------------------------国家名称                 该国最受欢迎产品奖                                                                        -------------------- -------------------------------------------------------------------------------- Argentina            Queso CabralesAustria              Guaraná FantásticaBelgium              Raclette CourdavaultBrazil               Camembert PierrotCanada               Camembert PierrotDenmark              Original Frankfurter grüne So?eFinland              FlotemysostFrance               Tarte au sucreGermany              Camembert PierrotIreland              Thüringer RostbratwurstItaly                Mozzarella di GiovanniMexico               Queso CabralesNorway               Guaraná FantásticaPoland               Rh?nbr?u Klosterbier 并列第一Poland               Gorgonzola Telino    并列第一Portugal             Gnocchi di nonna AliceSpain                Alice MuttonSweden               Zaanse koekenSwitzerland          GudbrandsdalsostUK                   Gorgonzola TelinoUSA                  Gnocchi di nonna AliceVenezuela            Outback Lager在顾客表中统计每个国家的顾客最喜欢哪个产品----------------------------------------------------------------*/</span><span class="token keyword">Create</span> <span class="token keyword">procedure</span> p_LovestOfContry<span class="token keyword">as</span><span class="token keyword">DECLARE</span>    mycursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span>  <span class="token comment">--建立对顾客表上国家的分组的查询的游标</span>   <span class="token keyword">SELECT</span> Country <span class="token keyword">FROM</span> Customers    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Country<span class="token keyword">OPEN</span> mycursor<span class="token comment">--打开游标</span><span class="token keyword">DECLARE</span>    <span class="token variable">@CountryIN</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--声明一些变量存储临时结果</span>   <span class="token variable">@ProductIDIN</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@ProductNameIN</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token variable">@MaxNumIN</span> <span class="token keyword">int</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token comment">#Tempcursor (--创建临时表存储临时结果</span><span class="token punctuation">[</span>CountryName<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">varchar</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>        <span class="token punctuation">[</span>ProductName<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">varchar</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">PRIMARY</span><span class="token punctuation">]</span><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> mycursor <span class="token keyword">INTO</span> <span class="token variable">@CountryIN</span>  <span class="token comment">--启动游标读第一条纪录，把纪录的值放入变量</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">--循环读取纪录</span><span class="token keyword">BEGIN</span>            <span class="token keyword">SELECT</span> ProductID<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span> <span class="token keyword">as</span> SumQuantity   <span class="token comment">--统计某个国家的客户的所有定单中按产品编号分组统计总销售量</span>  <span class="token keyword">INTO</span> <span class="token comment">#mytemp   --把统计结果送入另一个临时表#mytemp，便以后继续操作</span>  <span class="token keyword">FROM</span> <span class="token punctuation">[</span><span class="token keyword">Order</span> Details<span class="token punctuation">]</span>   <span class="token keyword">WHERE</span> OrderID <span class="token operator">IN</span>  <span class="token punctuation">(</span>      <span class="token keyword">SELECT</span> OrderID   <span class="token comment">--统计出某个国家的客户的所有定单编号</span>      <span class="token keyword">FROM</span> Orders <span class="token keyword">Join</span> Customers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>CustomerID <span class="token operator">=</span> Customers<span class="token punctuation">.</span>CustomerID      <span class="token keyword">WHERE</span> Country <span class="token operator">=</span> <span class="token variable">@CountryIN</span>   <span class="token punctuation">)</span>  <span class="token keyword">Group</span> <span class="token keyword">by</span> ProductID  <span class="token keyword">ORDER</span> <span class="token keyword">by</span> <span class="token function">Sum</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@MaxNumIn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>SumQuantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token comment">#mytemp)--从临时表#mytemp中获得某个国家客户中最大销量的产品的销量数目</span>  <span class="token comment">--下面需要分情况讨论</span>  <span class="token comment">--如果对应于这个最大值的@MaxNumIn只有一个产品编号，那么就找出这个产品id的名称，并且插入临时表#tempcursor一行统计结果  </span>  <span class="token keyword">IF</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> ProductID <span class="token keyword">FROM</span> <span class="token comment">#mytemp WHERE SumQuantity = @MaxNumIn) = 1</span>  <span class="token keyword">BEGIN</span>    <span class="token keyword">SET</span> <span class="token variable">@ProductIDIN</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">Top</span> <span class="token number">1</span> ProductID <span class="token keyword">FROM</span> <span class="token comment">#mytemp WHERE SumQuantity = @MaxNumIn)</span>    <span class="token keyword">SET</span> <span class="token variable">@ProductNameIN</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductName <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> ProductID <span class="token operator">=</span> <span class="token variable">@ProductIDIN</span><span class="token punctuation">)</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#tempcursor VAlues(@CountryIN,@ProductNameIN)  </span>  <span class="token keyword">END</span>   <span class="token comment">--如果对应于这个最大值的@MaxNumIn有多个产品编号，那么就是销量最大的产品出现了并列第一</span>  <span class="token comment">--那么在这多个并列第一的产品集合中，再建立另外游标，来逐个读取并列第一的产品名称，并且插入临时表#tempcursor </span>  <span class="token keyword">IF</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> ProductID <span class="token keyword">FROM</span> <span class="token comment">#mytemp WHERE SumQuantity = @MaxNumIn) > 1</span>  <span class="token keyword">BEGIN</span>     <span class="token keyword">DECLARE</span> innercursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> ProductID <span class="token keyword">FROM</span> <span class="token comment">#mytemp WHERE SumQuantity = @MaxNumIn </span>     <span class="token keyword">OPEN</span> innercursor     <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> innercursor <span class="token keyword">INTO</span> <span class="token variable">@ProductIDIN</span>     <span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">BEGIN</span>        <span class="token keyword">SET</span> <span class="token variable">@ProductNameIN</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ProductName <span class="token keyword">FROM</span> Products <span class="token keyword">WHERE</span> ProductID <span class="token operator">=</span> <span class="token variable">@ProductIDIN</span><span class="token punctuation">)</span>        <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#tempcursor VAlues(@CountryIN,@ProductNameIN + ' 并列第一')  </span>        <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> innercursor <span class="token keyword">INTO</span> <span class="token variable">@ProductIDIN</span>    <span class="token keyword">END</span>    <span class="token keyword">CLOSE</span> innercursor    <span class="token keyword">DEALLOCATE</span> innercursor  <span class="token keyword">END</span>       <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token comment">#mytemp--删除这个mytemp临时表</span>       <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> mycursor <span class="token keyword">INTO</span> <span class="token variable">@CountryIN</span><span class="token comment">--进入下一个循环</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> mycursor        <span class="token comment">--关闭游标</span><span class="token keyword">DEALLOCATE</span> mycursor<span class="token comment">--释放游标</span><span class="token keyword">SELECT</span> CountryName <span class="token keyword">as</span> <span class="token string">'国家名称'</span><span class="token punctuation">,</span> ProductName <span class="token keyword">as</span> <span class="token string">'该国最受欢迎产品奖'</span> <span class="token keyword">from</span> <span class="token comment">#tempCursor</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token comment">#tempcursor--删除结果集合的临时表</span><span class="token comment">--运行实例</span><span class="token keyword">EXEC</span> p_LovestOfContry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Stored-Procedures"><a href="#Stored-Procedures" class="headerlink" title="Stored Procedures"></a>Stored Procedures</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---------------------------存储过程------------------------</span><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span> t<span class="token punctuation">.</span>price<span class="token punctuation">,</span> p<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> vtttt<span class="token keyword">AS</span><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span> t<span class="token punctuation">.</span>price<span class="token punctuation">,</span> p<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> vtttt<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%computer%'</span><span class="token keyword">DECLARE</span>   <span class="token variable">@myinputtitlename</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">SET</span> <span class="token variable">@myinputtitlename</span> <span class="token operator">=</span> <span class="token string">'computer'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> vtttt<span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@myinputtitlename</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> p_first   <span class="token variable">@myinputtitlename</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span> t<span class="token punctuation">.</span>price<span class="token punctuation">,</span> p<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span> titles <span class="token keyword">as</span> t <span class="token keyword">inner</span> <span class="token keyword">join</span> publishers <span class="token keyword">as</span> p <span class="token keyword">on</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> p<span class="token punctuation">.</span>pub_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> title <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@myinputtitlename</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_first <span class="token string">'t'</span><span class="token comment">--输入一个作者名字，得到这个作者的写的书，单价，出版社</span><span class="token keyword">ALTER</span> <span class="token keyword">PROCEDURE</span> p_second   <span class="token variable">@myinputauthorname</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span>  dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>price<span class="token punctuation">,</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_name<span class="token keyword">FROM</span>      dbo<span class="token punctuation">.</span>titleauthor <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>titles <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titleauthor<span class="token punctuation">.</span>title_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>title_id <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>publishers <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titles<span class="token punctuation">.</span>pub_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>publishers<span class="token punctuation">.</span>pub_id <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>                   dbo<span class="token punctuation">.</span>authors <span class="token keyword">ON</span> dbo<span class="token punctuation">.</span>titleauthor<span class="token punctuation">.</span>au_id <span class="token operator">=</span> dbo<span class="token punctuation">.</span>authors<span class="token punctuation">.</span>au_id<span class="token keyword">WHERE</span> authors<span class="token punctuation">.</span>au_fname <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@myinputauthorname</span> <span class="token operator">+</span> <span class="token string">'%'</span>       <span class="token operator">or</span> authors<span class="token punctuation">.</span>au_fname <span class="token operator">like</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token variable">@myinputauthorname</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_second <span class="token string">'Sher'</span>多个参数输出参数（返回值）流程控制变量定义输入一个开始时间，一个结束时间返回这个阶段的书的销售记录<span class="token punctuation">,</span>包括；书名字，日期，卖出去数量<span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token string">'1994-9-1'</span> <span class="token operator">and</span> <span class="token string">'1994-10-1'</span><span class="token operator">-</span><span class="token number">2</span>个变量<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> p_third   <span class="token variable">@inputbegin</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>   <span class="token variable">@inputend</span> <span class="token keyword">datetime</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_third <span class="token string">'1994-9-1'</span><span class="token punctuation">,</span> <span class="token string">'1994-10-1'</span><span class="token operator">-</span>默认值<span class="token keyword">Alter</span> <span class="token keyword">PROCEDURE</span> p_third   <span class="token variable">@inputbegin</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-9-1'</span><span class="token punctuation">,</span>   <span class="token variable">@inputend</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-10-1'</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_third <span class="token string">'1994-9-14'</span><span class="token punctuation">,</span> <span class="token string">'1994-11-1'</span><span class="token operator">-</span>流程控制，变量控制  如果没有，就返回最近<span class="token number">3</span>条<span class="token keyword">Alter</span> <span class="token keyword">PROCEDURE</span> p_third   <span class="token variable">@inputbegin</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-9-1'</span><span class="token punctuation">,</span>   <span class="token variable">@inputend</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-10-1'</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span>   <span class="token keyword">DECLARE</span> <span class="token variable">@mycontrol</span> <span class="token keyword">int</span>  <span class="token keyword">SET</span> <span class="token variable">@mycontrol</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token punctuation">)</span>  <span class="token keyword">IF</span> <span class="token variable">@mycontrol</span> <span class="token operator">></span> <span class="token number">0</span>  <span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span>  <span class="token keyword">END</span>   <span class="token keyword">ELSE</span>  <span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ord_date <span class="token keyword">DESC</span>  <span class="token keyword">END</span><span class="token keyword">END</span><span class="token keyword">EXEC</span> p_third <span class="token string">'1994-10-14'</span><span class="token punctuation">,</span> <span class="token string">'1994-11-1'</span><span class="token comment">--上面查询继续，增加内容：请同时返回本次查询的结果的记录条数+总销售本书</span><span class="token keyword">Alter</span> <span class="token keyword">PROCEDURE</span> p_third   <span class="token variable">@inputbegin</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-9-1'</span><span class="token punctuation">,</span>   <span class="token variable">@inputend</span> <span class="token keyword">datetime</span> <span class="token operator">=</span> <span class="token string">'1994-10-1'</span><span class="token punctuation">,</span>   <span class="token variable">@outputcount</span> <span class="token keyword">int</span> OUTPUT<span class="token punctuation">,</span>   <span class="token variable">@outputsum</span>   <span class="token keyword">int</span> OUTPUT<span class="token keyword">AS</span><span class="token keyword">BEGIN</span>   <span class="token keyword">DECLARE</span> <span class="token variable">@mycontrol</span> <span class="token keyword">int</span>  <span class="token keyword">SET</span> <span class="token variable">@mycontrol</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@outputcount</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@outputsum</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">sum</span><span class="token punctuation">(</span>qty<span class="token punctuation">)</span> <span class="token keyword">FROM</span> sales <span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span><span class="token punctuation">)</span>  <span class="token keyword">IF</span> <span class="token variable">@mycontrol</span> <span class="token operator">></span> <span class="token number">0</span>  <span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">WHERE</span> ord_date <span class="token operator">between</span> <span class="token variable">@inputbegin</span> <span class="token operator">and</span> <span class="token variable">@inputend</span>  <span class="token keyword">END</span>   <span class="token keyword">ELSE</span>  <span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">3</span> title<span class="token punctuation">,</span>ord_date<span class="token punctuation">,</span>qty <span class="token keyword">FROM</span> Sales <span class="token keyword">inner</span> <span class="token keyword">join</span> titles <span class="token keyword">on</span> <span class="token punctuation">(</span>sales<span class="token punctuation">.</span>title_id <span class="token operator">=</span> titles<span class="token punctuation">.</span>title_id<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ord_date <span class="token keyword">DESC</span><span class="token keyword">SET</span> <span class="token variable">@outputcount</span> <span class="token operator">=</span>  <span class="token number">3</span>    <span class="token keyword">SET</span> <span class="token variable">@outputsum</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token keyword">END</span><span class="token keyword">END</span><span class="token comment">---</span><span class="token keyword">DECLARE</span>  <span class="token variable">@getoutputcount</span> <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token variable">@getoutputsum</span> <span class="token keyword">int</span><span class="token keyword">EXEC</span> p_third <span class="token string">'1994-9-20'</span><span class="token punctuation">,</span> <span class="token string">'1994-10-1'</span><span class="token punctuation">,</span> <span class="token variable">@getoutputcount</span> OUTPUT<span class="token punctuation">,</span> <span class="token variable">@getoutputsum</span> OUTPUT<span class="token keyword">SELECT</span> <span class="token variable">@getoutputcount</span><span class="token punctuation">,</span> <span class="token variable">@getoutputsum</span><span class="token operator">-</span>输入作者姓名，返回这个作者写的书的书名字，出版社，单价，销量同时要能知道，这个作者写了几本书，总销量是多少如果没有找到作者，返回销量最高的<span class="token number">3</span>本书<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Triggers"><a href="#Triggers" class="headerlink" title="Triggers"></a>Triggers</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---------------------------------------------------------------------------</span><span class="token comment">--触发器的基本语法</span><span class="token comment">---------------------------------------------------------------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> <span class="token operator">&lt;</span>trigger_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> trig_test<span class="token operator">></span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>table_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> pubs<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sales<span class="token operator">></span><span class="token keyword">FOR</span> <span class="token keyword">DELETE</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span> <span class="token keyword">AS</span> <span class="token keyword">BEGIN</span><span class="token keyword">RAISERROR</span> <span class="token punctuation">(</span><span class="token number">50009</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">END</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--简单的删除触发器</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--建立一个简单的和其他表没有任何关系的表，避免删除时和其他表的联系</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">INTO</span> AAA<span class="token keyword">FROM</span> Title<span class="token keyword">create</span> <span class="token keyword">trigger</span> t_DelAAADoSomething<span class="token keyword">ON</span> AAA<span class="token keyword">FOR</span> <span class="token keyword">Delete</span><span class="token keyword">AS</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Just Now You Del a Recorder of AAA table'</span><span class="token punctuation">)</span><span class="token comment">--运行删除语句就会激发上面这个触发器(输出一次print，影响1行)</span><span class="token keyword">delete</span> aaa<span class="token keyword">where</span> title_id <span class="token operator">=</span> <span class="token string">'bu1032'</span><span class="token comment">--运行删除语句就会激发上面这个触发器(输出一次print，影响17行)</span><span class="token keyword">delete</span> aaa<span class="token comment">--还原aaa表数据 </span><span class="token keyword">insert</span> <span class="token keyword">into</span> aaa<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> titles<span class="token keyword">create</span> <span class="token keyword">trigger</span> t_DelAAADoSomethingAndDoAgain<span class="token keyword">ON</span> aaa<span class="token keyword">FOR</span> <span class="token keyword">Delete</span><span class="token keyword">AS</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Just now you run del and run  t_DelaaaDoSomethingAndDoAgain'</span><span class="token punctuation">)</span><span class="token comment">--运行删除语句就会激发上面这二个触发器</span><span class="token keyword">delete</span> aaa<span class="token keyword">where</span> title_id <span class="token operator">=</span> <span class="token string">'bu1032'</span><span class="token comment">/*Just Now You Del a Recorder of AAA tableJust now you run del and run  t_DelaaaDoSomethingAndDoAgain（所影响的行数为 1 行）*/</span><span class="token keyword">delete</span> aaa<span class="token comment">/*Just Now You Del a Recorder of AAA tableJust now you run del and run  t_DelaaaDoSomethingAndDoAgain（所影响的行数为 17 行）*/</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--简单的更新和插入触发器</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> t_UpdateAAADosomthing<span class="token keyword">ON</span> aaa<span class="token keyword">FOR</span> <span class="token keyword">Update</span><span class="token punctuation">,</span><span class="token keyword">Insert</span><span class="token keyword">AS</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Just now you Update or insert aaa table'</span><span class="token punctuation">)</span><span class="token comment">--还原aaa表数据 </span><span class="token keyword">insert</span> <span class="token keyword">into</span> aaa<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> titles<span class="token comment">--执行一行更新语句</span><span class="token keyword">update</span> aaa<span class="token keyword">set</span> price <span class="token operator">=</span> price <span class="token operator">+</span> <span class="token number">0.1</span><span class="token comment">/*Just now you Update or insert aaa table（所影响的行数为 18 行）*/</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--从临时删除表中读取刚才删除的纪录信息 SELECT title FROM deleted</span><span class="token comment">--每当对某个表执行delete时都会生成和某个表结构一样的一个临时表deleted</span><span class="token comment">--每当对某个表执行update，insert时都会生成和某个表结构一样的一个临时表inserted</span><span class="token comment">--可以利用这二个临时表来活动最近一次delete，insert，update的数据</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> t_DelAAADoDetail<span class="token keyword">ON</span> AAA<span class="token keyword">FOR</span> <span class="token keyword">Delete</span><span class="token keyword">AS</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Just Now You Del a Recorder of AAA table'</span><span class="token punctuation">)</span><span class="token keyword">Declare</span>   <span class="token variable">@title</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token keyword">SET</span> <span class="token variable">@title</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> title <span class="token keyword">FROM</span> deleted<span class="token punctuation">)</span><span class="token keyword">PRINT</span> <span class="token string">'" '</span> <span class="token operator">+</span> <span class="token variable">@title</span> <span class="token operator">+</span> <span class="token string">' " : is your just del book name '</span><span class="token comment">--删除一行纪录</span><span class="token keyword">delete</span> aaa<span class="token keyword">where</span> title_id <span class="token operator">=</span> <span class="token string">'PC1035'</span> <span class="token comment">/*Just Now You Del a Recorder of AAA tableJust now you run del and run  t_DelaaaDoSomethingAndDoAgainJust Now You Del a Recorder of AAA table（所影响的行数为 1 行）" But Is It User Friendly? " : is your just del book name */</span><span class="token comment">--删除多行纪录，有问题，游标</span><span class="token keyword">delete</span> aaa<span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'business'</span> <span class="token comment">/*Just Now You Del a Recorder of AAA tableJust now you run del and run  t_DelaaaDoSomethingAndDoAgainJust Now You Del a Recorder of AAA table服务器: 消息 512，级别 16，状态 1，过程 t_DelAAADoDetail，行 10子查询返回的值多于一个。当子查询跟随在 =、!=、&lt;、&lt;=、>、>= 之后，或子查询用作表达式时，这种情况是不允许的。语句已终止。*/</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--每次添加一本书的销售纪录就要修改这本书的总销量</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">trigger</span> t_AddSalesANDAddYtd_Sales<span class="token keyword">ON</span> Sales<span class="token keyword">FOR</span> <span class="token keyword">Insert</span><span class="token keyword">AS</span> <span class="token keyword">declare</span>   <span class="token variable">@NewYtdSales</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@NewSalesTitleID</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@NewYtdSales</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> qty <span class="token keyword">FROM</span> Inserted<span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@NewSalesTitleID</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> title_id <span class="token keyword">From</span> INSERTED<span class="token punctuation">)</span>   <span class="token keyword">UPDATE</span> Titles   <span class="token keyword">SET</span> Ytd_Sales <span class="token operator">=</span> Ytd_Sales <span class="token operator">+</span> <span class="token variable">@NewYtdSales</span>   <span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token variable">@NewSalesTitleID</span><span class="token keyword">INSERT</span> sales<span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token number">6380</span><span class="token punctuation">,</span><span class="token number">23456</span><span class="token punctuation">,</span><span class="token string">'1999-1-1'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'Net 60'</span><span class="token punctuation">,</span><span class="token string">'BU1032'</span><span class="token punctuation">)</span><span class="token comment">/*----------------------------------------------------------------------------察看触发器的方法：触发器总是和表相关联的在企业管理器中选中一个表，从右键菜单的所有任务中选择“管理触发器”--通过修改表的性质 允许和禁止触发器--------------------------------------------------------------------------*/</span><span class="token keyword">use</span> pubs<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee      <span class="token keyword">DISABLE</span> <span class="token keyword">Trigger</span> employee_insupd<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee      <span class="token keyword">ENABLE</span> <span class="token keyword">Trigger</span> employee_insupd<span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--练习</span><span class="token comment">--每次添加一本书的销售纪录就要给写书的作者1元钱的版权费</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">CREATE</span> <span class="token keyword">trigger</span> t_AddSalesANDAddRoyaltyper<span class="token keyword">ON</span> Sales<span class="token keyword">FOR</span> <span class="token keyword">Insert</span><span class="token keyword">AS</span> <span class="token keyword">declare</span>   <span class="token variable">@NewYtdSales</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@NewSalesTitleID</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@NewYtdSales</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> qty <span class="token keyword">FROM</span> Inserted<span class="token punctuation">)</span>   <span class="token keyword">SET</span> <span class="token variable">@NewSalesTitleID</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> title_id <span class="token keyword">From</span> INSERTED<span class="token punctuation">)</span>   <span class="token keyword">UPDATE</span> TitleAuthor   <span class="token keyword">SET</span> royaltyper <span class="token operator">=</span> royaltyper <span class="token operator">+</span> <span class="token variable">@NewYtdSales</span>   <span class="token keyword">WHERE</span> title_id <span class="token operator">=</span> <span class="token variable">@NewSalesTitleID</span><span class="token keyword">INSERT</span> sales<span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token number">6380</span><span class="token punctuation">,</span><span class="token number">2349</span><span class="token punctuation">,</span><span class="token string">'1999-1-1'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'Net 60'</span><span class="token punctuation">,</span><span class="token string">'TC7777'</span><span class="token punctuation">)</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token comment">--附加练习（SQL Server的pubs数据库自带例子）（带逻辑、带错误检验、带事务控制）</span><span class="token comment">--添加一个雇员的时候使用触发器控制用户录入的雇员的job_lvl必须在max_lvl与min_lvl中间</span><span class="token comment">--------------------------------------------------------------------------</span><span class="token keyword">drop</span> <span class="token keyword">trigger</span> employee_insupd<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> employee_insupd<span class="token keyword">ON</span> employee<span class="token keyword">FOR</span> <span class="token keyword">insert</span><span class="token keyword">AS</span><span class="token comment">--声明变量.</span>  <span class="token keyword">declare</span><span class="token variable">@min_lvl</span> <span class="token keyword">tinyint</span><span class="token punctuation">,</span>   <span class="token variable">@max_lvl</span> <span class="token keyword">tinyint</span><span class="token punctuation">,</span>   <span class="token variable">@emp_lvl</span> <span class="token keyword">tinyint</span><span class="token punctuation">,</span>   <span class="token variable">@job_id</span> <span class="token keyword">smallint</span>  <span class="token comment">--为变量赋值，就是刚才获取insert的这个雇员，用户输入的信息</span><span class="token keyword">select</span> <span class="token variable">@min_lvl</span> <span class="token operator">=</span> min_lvl<span class="token punctuation">,</span>   <span class="token variable">@max_lvl</span> <span class="token operator">=</span> max_lvl<span class="token punctuation">,</span>    <span class="token variable">@emp_lvl</span> <span class="token operator">=</span> i<span class="token punctuation">.</span>job_lvl<span class="token punctuation">,</span>    <span class="token variable">@job_id</span> <span class="token operator">=</span> i<span class="token punctuation">.</span>job_id<span class="token keyword">from</span> employee e<span class="token punctuation">,</span> jobs j<span class="token punctuation">,</span> inserted i<span class="token keyword">where</span> e<span class="token punctuation">.</span>emp_id <span class="token operator">=</span> i<span class="token punctuation">.</span>emp_id <span class="token operator">AND</span> i<span class="token punctuation">.</span>job_id <span class="token operator">=</span> j<span class="token punctuation">.</span>job_id<span class="token comment">--使用Raiserror，发出错误信息，放弃本次添加，就是回滚事物，本次添加无效</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token punctuation">(</span><span class="token variable">@emp_lvl</span> <span class="token operator">BETWEEN</span> <span class="token variable">@min_lvl</span> <span class="token operator">AND</span> <span class="token variable">@max_lvl</span><span class="token punctuation">)</span><span class="token keyword">begin</span>   <span class="token keyword">raiserror</span> <span class="token punctuation">(</span><span class="token string">'The level for job_id:%d should be between %d and %d.'</span><span class="token punctuation">,</span>      <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">@job_id</span><span class="token punctuation">,</span> <span class="token variable">@min_lvl</span><span class="token punctuation">,</span> <span class="token variable">@max_lvl</span><span class="token punctuation">)</span>   <span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span><span class="token keyword">end</span><span class="token comment">--不发出错误信息，直接把用户错误的输入纠正为最大值或最小值</span><span class="token keyword">CREATE</span> <span class="token keyword">trigger</span> t_AddSalesCheckJob_lvl<span class="token keyword">ON</span> employee<span class="token keyword">FOR</span> <span class="token keyword">Insert</span><span class="token keyword">AS</span><span class="token keyword">declare</span>   <span class="token variable">@job_id</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@job_lvl</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@emp_id</span> empid<span class="token punctuation">,</span>   <span class="token variable">@min_lvl</span> <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token variable">@max_lvl</span> <span class="token keyword">int</span>    <span class="token keyword">SET</span> <span class="token variable">@job_id</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> job_id <span class="token keyword">FROM</span> INSERTED<span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@job_lvl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> job_lvl <span class="token keyword">FROM</span> INSERTED<span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@emp_id</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> emp_id <span class="token keyword">FROM</span> INSERTED<span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@Min_lvl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> min_lvl <span class="token keyword">FROM</span> jobs <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token variable">@job_id</span><span class="token punctuation">)</span>  <span class="token keyword">SET</span> <span class="token variable">@Max_lvl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> max_lvl <span class="token keyword">FROM</span> jobs <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token variable">@job_id</span><span class="token punctuation">)</span>  <span class="token keyword">If</span> <span class="token variable">@job_lvl</span> <span class="token operator">&lt;</span><span class="token variable">@Min_lvl</span>  <span class="token keyword">BEGIN</span>    <span class="token keyword">UPDATE</span> employee     <span class="token keyword">SET</span> job_lvl <span class="token operator">=</span> <span class="token variable">@Min_lvl</span>    <span class="token keyword">WHERE</span> emp_id <span class="token operator">=</span> <span class="token variable">@emp_id</span>   <span class="token keyword">END</span>  <span class="token keyword">If</span> <span class="token variable">@job_lvl</span> <span class="token operator">></span><span class="token variable">@Max_lvl</span>  <span class="token keyword">BEGIN</span>    <span class="token keyword">UPDATE</span> employee     <span class="token keyword">SET</span> job_lvl <span class="token operator">=</span> <span class="token variable">@Man_lvl</span>    <span class="token keyword">WHERE</span> emp_id <span class="token operator">=</span> <span class="token variable">@emp_id</span>   <span class="token keyword">END</span><span class="token keyword">INSERT</span> employee<span class="token keyword">Values</span><span class="token punctuation">(</span><span class="token string">'PPP42628F'</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'0877'</span><span class="token punctuation">,</span><span class="token string">'1992-1-1'</span><span class="token punctuation">)</span><span class="token comment">-- =============================================</span><span class="token comment">-- 使用存在检测功能</span><span class="token comment">-- =============================================</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name    <span class="token keyword">FROM</span>   sysobjects    <span class="token keyword">WHERE</span>  name <span class="token operator">=</span> <span class="token string">'aaabbb'</span>   <span class="token operator">AND</span>   <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'P'</span><span class="token punctuation">)</span>    <span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>aaabbb<span class="token punctuation">]</span>GO<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name    <span class="token keyword">FROM</span>   sysobjects    <span class="token keyword">WHERE</span>  name <span class="token operator">=</span> N<span class="token string">'&lt;trigger_name, sysname, trig_test>'</span>    <span class="token operator">AND</span>   <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'TR'</span><span class="token punctuation">)</span>    <span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> <span class="token operator">&lt;</span>trigger_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> trig_test<span class="token operator">></span>GO<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name    <span class="token keyword">FROM</span>   sysobjects    <span class="token keyword">WHERE</span>  name <span class="token operator">=</span> N<span class="token string">'&lt;procedure_name, sysname, proc_test>'</span>    <span class="token operator">AND</span>   <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'P'</span><span class="token punctuation">)</span>    <span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token operator">&lt;</span>procedure_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> proc_test<span class="token operator">></span>GO<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> name   <span class="token keyword">FROM</span>  sysobjects   <span class="token keyword">WHERE</span>  name <span class="token operator">=</span> N<span class="token string">'&lt;table_name, sysname, test_table>'</span>   <span class="token operator">AND</span>  <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'U'</span><span class="token punctuation">)</span>    <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>table_name<span class="token punctuation">,</span> sysname<span class="token punctuation">,</span> test_table<span class="token operator">></span>GO<span class="token keyword">USE</span> pubs<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sysobjects       <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'au_info2'</span> <span class="token operator">AND</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'P'</span><span class="token punctuation">)</span>   <span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> au_info2GO<span class="token keyword">USE</span> pubs<span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sysobjects      <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'reminder'</span> <span class="token operator">AND</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'TR'</span><span class="token punctuation">)</span>   <span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> reminderGO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><h3 id="关系代数运算符"><a href="#关系代数运算符" class="headerlink" title="关系代数运算符"></a>关系代数运算符</h3><h4 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h4><p>并、差、交、广义笛卡尔积</p><h4 id="专门的关系运算符"><a href="#专门的关系运算符" class="headerlink" title="专门的关系运算符"></a>专门的关系运算符</h4><p>选择、投影、连接、除</p><h4 id="算术比较符"><a href="#算术比较符" class="headerlink" title="算术比较符"></a>算术比较符</h4><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h3 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h3><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>类似于SELECT*-WHERE</p><p>$\sigma_F(R),其中F是选择运算符，是一个逻辑表达式$</p><p>如：$\sigma_{Sdept&#x3D;’IS’}(Student)$</p><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>类似于SELECT…FROM</p><p>$\Pi_A(R),其中A是R中的属性列$</p><p>投影之后取消了原关系中的某些列，还取消某些元组（去重）</p><p>如：$\Pi_{Sname,Sdept}(Student)$</p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>$R \infty_{A \theta B} S$</p><p>其中A和B分别为R和S上度数相等且可比的属性组，θ为比较运算符 。连接运算从R和S的广义笛卡尔积R×S中选取R关系在A属性组上的值与S关系在B属性组上值满足比较关系的元组</p><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>$R \infty_{A &#x3D; B} S$</p><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><p>$R \infty S$</p><p>是一种特殊的等值连接，要求两个关系中进行比较的分量必须是相同的属性组，在结果中把重复的属性列去掉</p><h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>给定关系R(X,Y) 和S(Y,Z)，其中X,Y,Z为属性组。R中的Y与S中的Y可以有不同的属性名，但必须出自相同的域集。R与S的除运算得到一个新的关系P(X)，P是R中满足下列条件的元组在X属性列上的投影：元组在X上分量值x的象集Yx包含S在Y上投影的集合。</p><h2 id="数据库可靠性"><a href="#数据库可靠性" class="headerlink" title="数据库可靠性"></a>数据库可靠性</h2><h3 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h3><ul><li><p>完整数据库备份</p></li><li><p>差异备份</p><p>备份自上一次完整数据库备份后修改过的数据库页</p></li><li><p>事务日志备份</p><p>备份事务日志</p></li><li><p>文件或文件组备份</p></li></ul><p>还原数据库的一般顺序为：</p><p><strong>1、还原最新的数据库备份。</strong></p><p><strong>2、还原最后一次的差异数据库备份。</strong></p><p><strong>3、还原最后一次差异数据库备份后创建的所有事务日志备份。</strong></p><h3 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h3><p>事务ACID特性：</p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持续性</li></ul><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><p>基于锁的事务并发控制</p><p>并发操作带来的数据不一致性：</p><ul><li><p>丢失修改</p><p>两事务都修改了数据</p></li><li><p>不可重复读</p><p>一事务的写撤销造成另一事务的读前后不一样</p></li><li><p>读脏数据</p><p>一事务的写撤销造成两事务的读数据不一致</p></li></ul><p>锁特点：多粒度</p><p>锁定：行锁定、列锁定、表锁定、数据库锁定</p><ul><li><strong>细粒度的锁定（比如只锁定一行）可以增加系统的并发度，但对多行的锁定却增加了开销</strong></li><li><strong>粗粒度的锁定（比如锁定整个表）降低了总开销，但也大大降低了系统的并发度</strong></li></ul><h2 id="数据库的安全性"><a href="#数据库的安全性" class="headerlink" title="数据库的安全性"></a>数据库的安全性</h2><h3 id="数据库安全性控制的常用方法"><a href="#数据库安全性控制的常用方法" class="headerlink" title="数据库安全性控制的常用方法"></a>数据库安全性控制的常用方法</h3><ul><li>用户标识和鉴定</li><li>存取控制、审计、视图</li><li>操作系统安全保护</li><li>密码存储</li></ul><h2 id="数据库的完整性"><a href="#数据库的完整性" class="headerlink" title="数据库的完整性"></a>数据库的完整性</h2><p><img src="/imgs/databasenote/11.png" alt="image-20230628201142892"></p><table><thead><tr><th><strong>粒   度</strong>    <strong>状态</strong></th><th><strong>列   级</strong></th><th><strong>元 组 级</strong></th><th><strong>关 系 级</strong></th></tr></thead><tbody><tr><td><strong>静 态</strong></td><td><strong>列定义</strong>  <strong>·****类型</strong>  <strong>·****格式</strong>  <strong>·****值域</strong>      <strong>·****空值</strong></td><td><strong>元组值应满足的条件</strong></td><td><strong>实体完整性约束</strong>    <strong>参照完整性约束</strong>    <strong>函数依赖约束</strong>     <strong>统计约束</strong></td></tr><tr><td><strong>动 态</strong></td><td><strong>改变列定义或列值</strong></td><td><strong>元组新旧值之间应满足的约束条件</strong></td><td><strong>关系新旧状态间应满足的约束条件</strong></td></tr></tbody></table><ul><li>域完整性</li><li>实体完整性</li><li>参考完整性</li><li>用户定义完整性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课外思考题一</title>
      <link href="/2023/07/05/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%80/"/>
      <url>/2023/07/05/%E7%AE%97%E6%B3%95%E8%AF%BE%E5%A4%96%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>设计一栈结构，使得出栈、入栈以及求栈的最小值均能在$O (1)$时间内完成</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p><strong>针对出入栈</strong>，由数据结构的顺序栈知识可以得知，出入栈的时间复杂度都是$O (1)$，因此对于出入栈只需要普通栈就可以实现问题要求；</p><p><strong>针对求栈的最小值</strong>，使用遍历法求栈最小值的时间复杂度为$O (n)$，因此需要设计一种特殊栈，通过记录栈中的最小值，在求栈的最小值时只需要将最小值输出即可，其时间复杂度为$O (1)$。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>先构建顺序栈的数据结构</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;&#x2F;&#x2F;顺序栈    SElemType* base;    SElemtyoe* top;    int stacksize;&#125;SqStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后构建一个特殊的辅助栈，包括存储所有数据的原栈和存储最小值序列的新栈</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;&#x2F;&#x2F;记录最小值的辅助栈    SqStack Data;    Sqstack MinData;&#125;MinStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>入栈操作</p><p>对于第一个元素，一定会进入两个栈；</p><p>对于后面的每一元素一定会进入Data栈，如果该元素&lt;&#x3D;Mindata栈的栈顶元素，则该元素进入Mindata栈，否则不进入</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void MinPush(Minstack* minstack, SElemType e) &#123;Push(&amp;minstack-&gt;Data, e);if (minstack-&gt;MinData.base&#x3D;&#x3D;minstack-&gt;MinData.top) &#123;Push(&amp;minstack-&gt;MinData, e);&#125;else &#123;if (e &lt;&#x3D; GetTop(minstack-&gt;MinData)) &#123;Push(&amp;minstack-&gt;MinData, e);&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>出栈操作</p><p>对于某一元素的出栈，Data栈一定会执行出栈操作，如果Data栈的栈顶元素和MinData栈的栈顶元素相同，则MinData栈也执行出栈操作</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void MinPop(Minstack* minstack, SElemType* e) &#123;if (GetTop(minstack-&gt;Data) &#x3D;&#x3D; GetTop(minstack-&gt;MinData)) &#123;Pop(&amp;minstack-&gt;Data, e);Pop(&amp;minstack-&gt;MinData, e);return;&#125;Pop(&amp;minstack-&gt;Data, e);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>求栈最小值</p><p>最小值已经存储在MinData栈中，因此只需要获取MinData栈的栈顶元素就可以得到栈的最小值</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SElemType GetMin(Minstack* minstack) &#123;return GetTop(minstack-&gt;MinData);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="算法代码与分析"><a href="#算法代码与分析" class="headerlink" title="算法代码与分析"></a>算法代码与分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#define STACK_INIT_SIZE 100using namespace std;typedef int SElemType;typedef struct &#123;SElemType* base;SElemType* top;int stacksize;&#125;SqStack;typedef struct &#123;SqStack Data;SqStack MinData;&#125;Minstack;void InitStack(SqStack* s) &#123;s-&gt;base &#x3D; (SElemType*)malloc(STACK_INIT_SIZE * sizeof(SElemType));s-&gt;top &#x3D; s-&gt;base;s-&gt;stacksize &#x3D; STACK_INIT_SIZE;&#125;void Push(SqStack* s, SElemType e) &#123;if (s-&gt;top - s-&gt;base &gt;&#x3D; s-&gt;stacksize) &#123;s-&gt;base &#x3D; (SElemType*)realloc(s-&gt;base, (s-&gt;stacksize + 10) * sizeof(SElemType));s-&gt;top &#x3D; s-&gt;base + s-&gt;stacksize;s-&gt;stacksize +&#x3D; 10;&#125;*s-&gt;top++ &#x3D; e;&#125;void Pop(SqStack* s, SElemType* e) &#123;*e &#x3D; *--s-&gt;top;&#125;SElemType GetTop(SqStack s) &#123;return *(--s.top);&#125;void DestroyStack(SqStack* s) &#123;free(s-&gt;base);s-&gt;base &#x3D; NULL;s-&gt;top &#x3D; NULL;s-&gt;stacksize &#x3D; 0;&#125;void MinInit(Minstack* minstack) &#123;InitStack(&amp;(minstack-&gt;Data));InitStack(&amp;(minstack-&gt;MinData));&#125;void MinDestroy(Minstack* minstack) &#123;DestroyStack(&amp;minstack-&gt;Data);DestroyStack(&amp;minstack-&gt;MinData);&#125;void MinPush(Minstack* minstack, SElemType e) &#123;Push(&amp;minstack-&gt;Data, e);if (minstack-&gt;MinData.base&#x3D;&#x3D;minstack-&gt;MinData.top) &#123;Push(&amp;minstack-&gt;MinData, e);&#125;else &#123;if (e &lt;&#x3D; GetTop(minstack-&gt;MinData)) &#123;Push(&amp;minstack-&gt;MinData, e);&#125;&#125;&#125;void MinPop(Minstack* minstack, SElemType* e) &#123;if (GetTop(minstack-&gt;Data) &#x3D;&#x3D; GetTop(minstack-&gt;MinData)) &#123;Pop(&amp;minstack-&gt;Data, e);Pop(&amp;minstack-&gt;MinData, e);return;&#125;Pop(&amp;minstack-&gt;Data, e);&#125;SElemType GetMin(Minstack* minstack) &#123;return GetTop(minstack-&gt;MinData);&#125;int main() &#123;Minstack minstack;SElemType e;MinInit(&amp;minstack);MinPush(&amp;minstack, 1);MinPush(&amp;minstack, 2);MinPush(&amp;minstack, 3);MinPush(&amp;minstack, 1);MinPop(&amp;minstack, &amp;e);cout &lt;&lt; GetMin(&amp;minstack) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实验结果</strong>：</p><p><img src="/imgs/sikao1/1.png" alt="image-20230302194755588"></p><p><strong>分析</strong>：</p><p>本算法能够实现出入栈、求栈最小值时间复杂度$O (1)$，但是在数据类型的定义上，关于栈和特殊栈存在重复，经查阅资料，可以采用结构体继承解决。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>改进冒泡排序使得在最好情况下可以在线性时间内完成</p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p>对于普通的冒泡排序算法，在最坏的情况下其时间复杂度为$O (n^2)$。第一趟排序进行了$(n-1)$次比较，第i趟排序进行了$(n-i)$次比较；但是对于$(n-1)$趟排序，如果序列在某一次排序时恰好有序，则在该次之后的每一次排序都是无用的，为了优化冒泡排序，只需要在该次以后终止冒泡排序。</p><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>设置一个标志变量确定某一序列中的数据是否发生了交换，如果某一次冒泡过程中发现没有交换操作时，则说明序列已经排好序了，终止冒泡排序。</p><h3 id="算法代码及分析"><a href="#算法代码及分析" class="headerlink" title="算法代码及分析"></a>算法代码及分析</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;void BubbleSort(int array[], int n,int* num) &#123;for (int i &#x3D; 0; i &lt; n - 1; i++) &#123;bool flag &#x3D; true;for (int j &#x3D; 0; j &lt; n - i - 1; j++) &#123;if (array[j] &gt; array[j + 1]) &#123;int temp &#x3D; array[j];array[j] &#x3D; array[j + 1];array[j + 1] &#x3D; temp;flag &#x3D; false;&#125;&#125;if (flag) &#123;break;&#125;(*num)++;&#125;&#125;int main() &#123;int num &#x3D; 0;int array[] &#x3D; &#123; 5,4,3,6,7,8 &#125;;int n1 &#x3D; sizeof(array) &#x2F; sizeof(int);cout &lt;&lt; &quot;排序前：&quot;;for (int i &#x3D; 0; i &lt; n1; i++) &#123;cout &lt;&lt; array[i] &lt;&lt; &quot;,&quot;;&#125;cout &lt;&lt; endl;BubbleSort(array, n1, &amp;num);cout &lt;&lt; &quot;排序后：&quot;;for (int i &#x3D; 0; i &lt; n1; i++) &#123;cout &lt;&lt; array[i] &lt;&lt; &quot;,&quot;;&#125;cout &lt;&lt; endl;int array1[] &#x3D; &#123; 1,2,3,4,5,6 &#125;;int n2 &#x3D; sizeof(array1) &#x2F; sizeof(int);cout &lt;&lt; &quot;排序前：&quot;;for (int i &#x3D; 0; i &lt; n2; i++) &#123;cout &lt;&lt; array1[i] &lt;&lt; &quot;,&quot;;&#125;cout &lt;&lt; endl;cout &lt;&lt; num &lt;&lt; endl;num &#x3D; 0;BubbleSort(array1, n2, &amp;num);cout &lt;&lt; &quot;排序后：&quot;;for (int i &#x3D; 0; i &lt; n2; i++) &#123;cout &lt;&lt; array1[i] &lt;&lt; &quot;,&quot;;&#125;cout &lt;&lt; endl;cout &lt;&lt; num &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实验结果</strong>：</p><p><img src="/imgs/sikao1/2.png" alt="image-20230302210218006"></p><p><strong>分析</strong>：</p><p>通过实验分析，在数据极端良好的情况下，能够实现时间复杂度为$O (1)$；在数据较为不良的情况下，仍能减少数据排序次数，使其在线性时间内完成。</p>]]></content>
      
      
      <categories>
          
          <category> 思考题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 冒泡 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
